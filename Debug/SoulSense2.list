
SoulSense2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000941c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080095f4  080095f4  000195f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009644  08009644  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08009644  08009644  00019644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800964c  0800964c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800964c  0800964c  0001964c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009650  08009650  00019650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08009654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  2000005c  080096b0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  080096b0  00020710  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023afd  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004387  00000000  00000000  00043bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab0  00000000  00000000  00047f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014b3  00000000  00000000  00049a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c00e  00000000  00000000  0004aebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022186  00000000  00000000  00076ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011bcdc  00000000  00000000  0009904f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007474  00000000  00000000  001b4d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001bc1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080095dc 	.word	0x080095dc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	080095dc 	.word	0x080095dc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <imu_init>:

/* Private variables ---------------------------------------------------------*/


// Initializing the IMU
void imu_init(I2C_HandleTypeDef* i2c,IMU* imu) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af02      	add	r7, sp, #8
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
//	memset(imu->payload , 0 , SIZE_OF_IMU_DATA);
    // Ensure that the BNO pointer is allocated (if using dynamic memory)
    imu->bno = (bno055_t*) malloc(sizeof(bno055_t));
 800051e:	20ac      	movs	r0, #172	; 0xac
 8000520:	f008 ff56 	bl	80093d0 <malloc>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	601a      	str	r2, [r3, #0]

    if (imu->bno == NULL) {
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d01f      	beq.n	8000574 <imu_init+0x60>
        // Handle memory allocation error
        return;
    }

    imu->bno->i2c = i2c;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	601a      	str	r2, [r3, #0]
    imu->bno->addr = BNO_ADDR_ALT;
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2228      	movs	r2, #40	; 0x28
 8000542:	719a      	strb	r2, [r3, #6]
    imu->bno->mode = BNO_MODE_IMU;
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2208      	movs	r2, #8
 800054a:	711a      	strb	r2, [r3, #4]

    imu->errInit = bno055_init(imu->bno);
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fa69 	bl	8000a28 <bno055_init>
 8000556:	4603      	mov	r3, r0
 8000558:	461a      	mov	r2, r3
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    bno055_set_unit(imu->bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	6818      	ldr	r0, [r3, #0]
 8000564:	2300      	movs	r3, #0
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2300      	movs	r3, #0
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	f001 fe92 	bl	8002296 <bno055_set_unit>
 8000572:	e000      	b.n	8000576 <imu_init+0x62>
        return;
 8000574:	bf00      	nop
    	                      BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG); //set correct units!
}
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <imu_read_data>:

// Reading data
void imu_read_data(IMU* imu) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	imu->errGyr = imu->bno->gyro(imu->bno, &imu->gyroscope);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	6810      	ldr	r0, [r2, #0]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	3204      	adds	r2, #4
 8000592:	4611      	mov	r1, r2
 8000594:	4798      	blx	r3
 8000596:	4603      	mov	r3, r0
 8000598:	461a      	mov	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	imu->errAcc = imu->bno->acc(imu->bno, &imu->accelerometer);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	6810      	ldr	r0, [r2, #0]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	3210      	adds	r2, #16
 80005ae:	4611      	mov	r1, r2
 80005b0:	4798      	blx	r3
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

    imu->errQua = imu->bno->quaternion(imu->bno, &imu->quaternion);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	6810      	ldr	r0, [r2, #0]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	321c      	adds	r2, #28
 80005cc:	4611      	mov	r1, r2
 80005ce:	4798      	blx	r3
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <imu_update_payload>:
    if (imu->bno) {
        free(imu->bno);
    }
}

void imu_update_payload(IMU* imu) {
 80005e2:	b480      	push	{r7}
 80005e4:	b08d      	sub	sp, #52	; 0x34
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
    // Starting index for the payload
    int index = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Convert quaternion values to byte array format.
    float quaternion_values[4] = {
        imu->quaternion.x,
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	69db      	ldr	r3, [r3, #28]
    float quaternion_values[4] = {
 80005f2:	617b      	str	r3, [r7, #20]
        imu->quaternion.y,
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6a1b      	ldr	r3, [r3, #32]
    float quaternion_values[4] = {
 80005f8:	61bb      	str	r3, [r7, #24]
        imu->quaternion.z,
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    float quaternion_values[4] = {
 80005fe:	61fb      	str	r3, [r7, #28]
        imu->quaternion.w
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    float quaternion_values[4] = {
 8000604:	623b      	str	r3, [r7, #32]
    };

    for (int i = 0; i < 4; i++) {
 8000606:	2300      	movs	r3, #0
 8000608:	62bb      	str	r3, [r7, #40]	; 0x28
 800060a:	e010      	b.n	800062e <imu_update_payload+0x4c>
        memcpy(&imu->payload[index], &quaternion_values[i], 4);
 800060c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800060e:	3330      	adds	r3, #48	; 0x30
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	4413      	add	r3, r2
 8000614:	f107 0114 	add.w	r1, r7, #20
 8000618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800061a:	0092      	lsls	r2, r2, #2
 800061c:	440a      	add	r2, r1
 800061e:	6812      	ldr	r2, [r2, #0]
 8000620:	601a      	str	r2, [r3, #0]
        index += 4;
 8000622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000624:	3304      	adds	r3, #4
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < 4; i++) {
 8000628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800062a:	3301      	adds	r3, #1
 800062c:	62bb      	str	r3, [r7, #40]	; 0x28
 800062e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000630:	2b03      	cmp	r3, #3
 8000632:	ddeb      	ble.n	800060c <imu_update_payload+0x2a>
    }

    // Convert accelerometer values to byte array format.
    float accel_values[3] = {
        imu->accelerometer.x,
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	691b      	ldr	r3, [r3, #16]
    float accel_values[3] = {
 8000638:	60bb      	str	r3, [r7, #8]
        imu->accelerometer.y,
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	695b      	ldr	r3, [r3, #20]
    float accel_values[3] = {
 800063e:	60fb      	str	r3, [r7, #12]
        imu->accelerometer.z,
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	699b      	ldr	r3, [r3, #24]
    float accel_values[3] = {
 8000644:	613b      	str	r3, [r7, #16]
    };

    for (int i = 0; i < 3; i++) {
 8000646:	2300      	movs	r3, #0
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
 800064a:	e010      	b.n	800066e <imu_update_payload+0x8c>
        memcpy(&imu->payload[index], &accel_values[i], 4);
 800064c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064e:	3330      	adds	r3, #48	; 0x30
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	f107 0108 	add.w	r1, r7, #8
 8000658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800065a:	0092      	lsls	r2, r2, #2
 800065c:	440a      	add	r2, r1
 800065e:	6812      	ldr	r2, [r2, #0]
 8000660:	601a      	str	r2, [r3, #0]
        index += 4;
 8000662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000664:	3304      	adds	r3, #4
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < 3; i++) {
 8000668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066a:	3301      	adds	r3, #1
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
 800066e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000670:	2b02      	cmp	r3, #2
 8000672:	ddeb      	ble.n	800064c <imu_update_payload+0x6a>
    }
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3734      	adds	r7, #52	; 0x34
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <soul_init>:
#include "Imu.h"
#include "contact_sensors.h"
#include "configuration.h"

// Adjust soul_init to use pointers for the parameters
void soul_init(SoulSense* soul_sense, ContactSensors* adc_data, IMU* imu_data, FwVersion* sole_version){
 8000682:	b580      	push	{r7, lr}
 8000684:	b084      	sub	sp, #16
 8000686:	af00      	add	r7, sp, #0
 8000688:	60f8      	str	r0, [r7, #12]
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
 800068e:	603b      	str	r3, [r7, #0]
    memset(soul_sense->payload, 0, SIZE_OF_SOLE_DATA);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3393      	adds	r3, #147	; 0x93
 8000694:	223f      	movs	r2, #63	; 0x3f
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f008 ff4d 	bl	8009538 <memset>
    soul_sense->adc_data = *adc_data; // Dereference the pointers to copy the data
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	4610      	mov	r0, r2
 80006a4:	4619      	mov	r1, r3
 80006a6:	2344      	movs	r3, #68	; 0x44
 80006a8:	461a      	mov	r2, r3
 80006aa:	f008 ff89 	bl	80095c0 <memcpy>
    soul_sense->imu_data = *imu_data;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	3344      	adds	r3, #68	; 0x44
 80006b4:	4611      	mov	r1, r2
 80006b6:	224c      	movs	r2, #76	; 0x4c
 80006b8:	4618      	mov	r0, r3
 80006ba:	f008 ff81 	bl	80095c0 <memcpy>
    soul_sense->sole_version = *sole_version;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	683a      	ldr	r2, [r7, #0]
 80006c2:	3390      	adds	r3, #144	; 0x90
 80006c4:	8811      	ldrh	r1, [r2, #0]
 80006c6:	7892      	ldrb	r2, [r2, #2]
 80006c8:	8019      	strh	r1, [r3, #0]
 80006ca:	709a      	strb	r2, [r3, #2]
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <soul_update_payload>:

void soul_update_payload(SoulSense* soul_sense) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
    int index = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]

    // Copy ContactSensors payload
    memcpy(&soul_sense->payload[index], soul_sense->adc_data.payload, NUMBER_OF_SENSORS*4);
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3390      	adds	r3, #144	; 0x90
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	4413      	add	r3, r2
 80006e8:	1cd8      	adds	r0, r3, #3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	3324      	adds	r3, #36	; 0x24
 80006ee:	2220      	movs	r2, #32
 80006f0:	4619      	mov	r1, r3
 80006f2:	f008 ff65 	bl	80095c0 <memcpy>
    index += sizeof(soul_sense->adc_data.payload);
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3320      	adds	r3, #32
 80006fa:	60fb      	str	r3, [r7, #12]

    // Copy IMU payload
    memcpy(&soul_sense->payload[index], soul_sense->imu_data.payload, SIZE_OF_IMU_DATA);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3390      	adds	r3, #144	; 0x90
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	1cd8      	adds	r0, r3, #3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3374      	adds	r3, #116	; 0x74
 800070a:	221c      	movs	r2, #28
 800070c:	4619      	mov	r1, r3
 800070e:	f008 ff57 	bl	80095c0 <memcpy>
    index += sizeof(soul_sense->imu_data.payload);
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	331c      	adds	r3, #28
 8000716:	60fb      	str	r3, [r7, #12]

    // Copy FwVersion payload (version)
    memcpy(&soul_sense->payload[index], soul_sense->sole_version.version, VERSION_LEN);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	3390      	adds	r3, #144	; 0x90
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	1cd8      	adds	r0, r3, #3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3390      	adds	r3, #144	; 0x90
 8000726:	2203      	movs	r2, #3
 8000728:	4619      	mov	r1, r3
 800072a:	f008 ff49 	bl	80095c0 <memcpy>
}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073e:	463b      	mov	r3, r7
 8000740:	2220      	movs	r2, #32
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f008 fef7 	bl	8009538 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800074a:	4b5e      	ldr	r3, [pc, #376]	; (80008c4 <MX_ADC2_Init+0x18c>)
 800074c:	4a5e      	ldr	r2, [pc, #376]	; (80008c8 <MX_ADC2_Init+0x190>)
 800074e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000750:	4b5c      	ldr	r3, [pc, #368]	; (80008c4 <MX_ADC2_Init+0x18c>)
 8000752:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000756:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000758:	4b5a      	ldr	r3, [pc, #360]	; (80008c4 <MX_ADC2_Init+0x18c>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075e:	4b59      	ldr	r3, [pc, #356]	; (80008c4 <MX_ADC2_Init+0x18c>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000764:	4b57      	ldr	r3, [pc, #348]	; (80008c4 <MX_ADC2_Init+0x18c>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800076a:	4b56      	ldr	r3, [pc, #344]	; (80008c4 <MX_ADC2_Init+0x18c>)
 800076c:	2201      	movs	r2, #1
 800076e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000770:	4b54      	ldr	r3, [pc, #336]	; (80008c4 <MX_ADC2_Init+0x18c>)
 8000772:	2208      	movs	r2, #8
 8000774:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000776:	4b53      	ldr	r3, [pc, #332]	; (80008c4 <MX_ADC2_Init+0x18c>)
 8000778:	2200      	movs	r2, #0
 800077a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800077c:	4b51      	ldr	r3, [pc, #324]	; (80008c4 <MX_ADC2_Init+0x18c>)
 800077e:	2201      	movs	r2, #1
 8000780:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 8;
 8000782:	4b50      	ldr	r3, [pc, #320]	; (80008c4 <MX_ADC2_Init+0x18c>)
 8000784:	2208      	movs	r2, #8
 8000786:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000788:	4b4e      	ldr	r3, [pc, #312]	; (80008c4 <MX_ADC2_Init+0x18c>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000790:	4b4c      	ldr	r3, [pc, #304]	; (80008c4 <MX_ADC2_Init+0x18c>)
 8000792:	2200      	movs	r2, #0
 8000794:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000796:	4b4b      	ldr	r3, [pc, #300]	; (80008c4 <MX_ADC2_Init+0x18c>)
 8000798:	2200      	movs	r2, #0
 800079a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800079c:	4b49      	ldr	r3, [pc, #292]	; (80008c4 <MX_ADC2_Init+0x18c>)
 800079e:	2201      	movs	r2, #1
 80007a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007a4:	4b47      	ldr	r3, [pc, #284]	; (80008c4 <MX_ADC2_Init+0x18c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80007aa:	4b46      	ldr	r3, [pc, #280]	; (80008c4 <MX_ADC2_Init+0x18c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007b2:	4844      	ldr	r0, [pc, #272]	; (80008c4 <MX_ADC2_Init+0x18c>)
 80007b4:	f003 f82c 	bl	8003810 <HAL_ADC_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80007be:	f002 fad3 	bl	8002d68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007c2:	4b42      	ldr	r3, [pc, #264]	; (80008cc <MX_ADC2_Init+0x194>)
 80007c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c6:	2306      	movs	r3, #6
 80007c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80007ca:	2305      	movs	r3, #5
 80007cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ce:	237f      	movs	r3, #127	; 0x7f
 80007d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007d2:	2304      	movs	r3, #4
 80007d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007da:	463b      	mov	r3, r7
 80007dc:	4619      	mov	r1, r3
 80007de:	4839      	ldr	r0, [pc, #228]	; (80008c4 <MX_ADC2_Init+0x18c>)
 80007e0:	f003 faca 	bl	8003d78 <HAL_ADC_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007ea:	f002 fabd 	bl	8002d68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007ee:	4b38      	ldr	r3, [pc, #224]	; (80008d0 <MX_ADC2_Init+0x198>)
 80007f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007f2:	230c      	movs	r3, #12
 80007f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007f6:	463b      	mov	r3, r7
 80007f8:	4619      	mov	r1, r3
 80007fa:	4832      	ldr	r0, [pc, #200]	; (80008c4 <MX_ADC2_Init+0x18c>)
 80007fc:	f003 fabc 	bl	8003d78 <HAL_ADC_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8000806:	f002 faaf 	bl	8002d68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800080a:	4b32      	ldr	r3, [pc, #200]	; (80008d4 <MX_ADC2_Init+0x19c>)
 800080c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800080e:	2312      	movs	r3, #18
 8000810:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000812:	463b      	mov	r3, r7
 8000814:	4619      	mov	r1, r3
 8000816:	482b      	ldr	r0, [pc, #172]	; (80008c4 <MX_ADC2_Init+0x18c>)
 8000818:	f003 faae 	bl	8003d78 <HAL_ADC_ConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 8000822:	f002 faa1 	bl	8002d68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000826:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <MX_ADC2_Init+0x1a0>)
 8000828:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800082a:	2318      	movs	r3, #24
 800082c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800082e:	463b      	mov	r3, r7
 8000830:	4619      	mov	r1, r3
 8000832:	4824      	ldr	r0, [pc, #144]	; (80008c4 <MX_ADC2_Init+0x18c>)
 8000834:	f003 faa0 	bl	8003d78 <HAL_ADC_ConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 800083e:	f002 fa93 	bl	8002d68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <MX_ADC2_Init+0x1a4>)
 8000844:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800084a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	481c      	ldr	r0, [pc, #112]	; (80008c4 <MX_ADC2_Init+0x18c>)
 8000852:	f003 fa91 	bl	8003d78 <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 800085c:	f002 fa84 	bl	8002d68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_ADC2_Init+0x1a8>)
 8000862:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000864:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000868:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	4619      	mov	r1, r3
 800086e:	4815      	ldr	r0, [pc, #84]	; (80008c4 <MX_ADC2_Init+0x18c>)
 8000870:	f003 fa82 	bl	8003d78 <HAL_ADC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 800087a:	f002 fa75 	bl	8002d68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_ADC2_Init+0x1ac>)
 8000880:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000882:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000886:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	4619      	mov	r1, r3
 800088c:	480d      	ldr	r0, [pc, #52]	; (80008c4 <MX_ADC2_Init+0x18c>)
 800088e:	f003 fa73 	bl	8003d78 <HAL_ADC_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_ADC2_Init+0x164>
  {
    Error_Handler();
 8000898:	f002 fa66 	bl	8002d68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_ADC2_Init+0x1b0>)
 800089e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80008a0:	f44f 7389 	mov.w	r3, #274	; 0x112
 80008a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008a6:	463b      	mov	r3, r7
 80008a8:	4619      	mov	r1, r3
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <MX_ADC2_Init+0x18c>)
 80008ac:	f003 fa64 	bl	8003d78 <HAL_ADC_ConfigChannel>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_ADC2_Init+0x182>
  {
    Error_Handler();
 80008b6:	f002 fa57 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	3720      	adds	r7, #32
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000078 	.word	0x20000078
 80008c8:	50000100 	.word	0x50000100
 80008cc:	04300002 	.word	0x04300002
 80008d0:	08600004 	.word	0x08600004
 80008d4:	0c900008 	.word	0x0c900008
 80008d8:	10c00010 	.word	0x10c00010
 80008dc:	14f00020 	.word	0x14f00020
 80008e0:	19200040 	.word	0x19200040
 80008e4:	1d500080 	.word	0x1d500080
 80008e8:	21800100 	.word	0x21800100

080008ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0a0      	sub	sp, #128	; 0x80
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000904:	f107 0318 	add.w	r3, r7, #24
 8000908:	2254      	movs	r2, #84	; 0x54
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f008 fe13 	bl	8009538 <memset>
  if(adcHandle->Instance==ADC2)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a3f      	ldr	r2, [pc, #252]	; (8000a14 <HAL_ADC_MspInit+0x128>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d177      	bne.n	8000a0c <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800091c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000920:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000922:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000926:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000928:	f107 0318 	add.w	r3, r7, #24
 800092c:	4618      	mov	r0, r3
 800092e:	f006 ff4f 	bl	80077d0 <HAL_RCCEx_PeriphCLKConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000938:	f002 fa16 	bl	8002d68 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800093c:	4b36      	ldr	r3, [pc, #216]	; (8000a18 <HAL_ADC_MspInit+0x12c>)
 800093e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000940:	4a35      	ldr	r2, [pc, #212]	; (8000a18 <HAL_ADC_MspInit+0x12c>)
 8000942:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000946:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000948:	4b33      	ldr	r3, [pc, #204]	; (8000a18 <HAL_ADC_MspInit+0x12c>)
 800094a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000954:	4b30      	ldr	r3, [pc, #192]	; (8000a18 <HAL_ADC_MspInit+0x12c>)
 8000956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000958:	4a2f      	ldr	r2, [pc, #188]	; (8000a18 <HAL_ADC_MspInit+0x12c>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000960:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <HAL_ADC_MspInit+0x12c>)
 8000962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <HAL_ADC_MspInit+0x12c>)
 800096e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000970:	4a29      	ldr	r2, [pc, #164]	; (8000a18 <HAL_ADC_MspInit+0x12c>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000978:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <HAL_ADC_MspInit+0x12c>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    PC4     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8000984:	2317      	movs	r3, #23
 8000986:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000988:	2303      	movs	r3, #3
 800098a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000990:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000994:	4619      	mov	r1, r3
 8000996:	4821      	ldr	r0, [pc, #132]	; (8000a1c <HAL_ADC_MspInit+0x130>)
 8000998:	f005 f8b6 	bl	8005b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800099c:	23c3      	movs	r3, #195	; 0xc3
 800099e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a0:	2303      	movs	r3, #3
 80009a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009ac:	4619      	mov	r1, r3
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b2:	f005 f8a9 	bl	8005b08 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <HAL_ADC_MspInit+0x134>)
 80009b8:	4a1a      	ldr	r2, [pc, #104]	; (8000a24 <HAL_ADC_MspInit+0x138>)
 80009ba:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_ADC_MspInit+0x134>)
 80009be:	2224      	movs	r2, #36	; 0x24
 80009c0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <HAL_ADC_MspInit+0x134>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_ADC_MspInit+0x134>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <HAL_ADC_MspInit+0x134>)
 80009d0:	2280      	movs	r2, #128	; 0x80
 80009d2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_ADC_MspInit+0x134>)
 80009d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009da:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <HAL_ADC_MspInit+0x134>)
 80009de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009e2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_ADC_MspInit+0x134>)
 80009e6:	2220      	movs	r2, #32
 80009e8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <HAL_ADC_MspInit+0x134>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80009f0:	480b      	ldr	r0, [pc, #44]	; (8000a20 <HAL_ADC_MspInit+0x134>)
 80009f2:	f004 f807 	bl	8004a04 <HAL_DMA_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 80009fc:	f002 f9b4 	bl	8002d68 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_ADC_MspInit+0x134>)
 8000a04:	655a      	str	r2, [r3, #84]	; 0x54
 8000a06:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <HAL_ADC_MspInit+0x134>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3780      	adds	r7, #128	; 0x80
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	50000100 	.word	0x50000100
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	48000800 	.word	0x48000800
 8000a20:	200000e4 	.word	0x200000e4
 8000a24:	40020008 	.word	0x40020008

08000a28 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b0b1      	sub	sp, #196	; 0xc4
 8000a2c:	af2a      	add	r7, sp, #168	; 0xa8
 8000a2e:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
    error_bno err;
    uint32_t timeSaver;

    imu->addr = (imu->addr << 1);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	799b      	ldrb	r3, [r3, #6]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8000a40:	687c      	ldr	r4, [r7, #4]
 8000a42:	2301      	movs	r3, #1
 8000a44:	9329      	str	r3, [sp, #164]	; 0xa4
 8000a46:	f107 030f 	add.w	r3, r7, #15
 8000a4a:	9328      	str	r3, [sp, #160]	; 0xa0
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	9327      	str	r3, [sp, #156]	; 0x9c
 8000a50:	4668      	mov	r0, sp
 8000a52:	f104 0310 	add.w	r3, r4, #16
 8000a56:	229c      	movs	r2, #156	; 0x9c
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f008 fdb1 	bl	80095c0 <memcpy>
 8000a5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a62:	f001 fd23 	bl	80024ac <bno055_read_regs>
 8000a66:	4603      	mov	r3, r0
 8000a68:	75fb      	strb	r3, [r7, #23]
    if (err != BNO_OK) {
 8000a6a:	7dfb      	ldrb	r3, [r7, #23]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <bno055_init+0x4c>
        return err;
 8000a70:	7dfb      	ldrb	r3, [r7, #23]
 8000a72:	e0df      	b.n	8000c34 <bno055_init+0x20c>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	2ba0      	cmp	r3, #160	; 0xa0
 8000a78:	d001      	beq.n	8000a7e <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8000a7a:	2306      	movs	r3, #6
 8000a7c:	e0da      	b.n	8000c34 <bno055_init+0x20c>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8000a7e:	2100      	movs	r1, #0
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f001 fbd6 	bl	8002232 <bno055_set_opmode>
 8000a86:	4603      	mov	r3, r0
 8000a88:	75fb      	strb	r3, [r7, #23]
 8000a8a:	7dfb      	ldrb	r3, [r7, #23]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <bno055_init+0x6c>
        return err;
 8000a90:	7dfb      	ldrb	r3, [r7, #23]
 8000a92:	e0cf      	b.n	8000c34 <bno055_init+0x20c>
    }
    timeSaver = HAL_GetTick();
 8000a94:	f002 fc6c 	bl	8003370 <HAL_GetTick>
 8000a98:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < 2) {}//wait
 8000a9a:	bf00      	nop
 8000a9c:	f002 fc68 	bl	8003370 <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d9f8      	bls.n	8000a9c <bno055_init+0x74>
    //HAL_Delay(2);
    bno055_reset(imu);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f001 fcb8 	bl	8002420 <bno055_reset>
    timeSaver = HAL_GetTick();
 8000ab0:	f002 fc5e 	bl	8003370 <HAL_GetTick>
 8000ab4:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < 5000) {} //wait
 8000ab6:	bf00      	nop
 8000ab8:	f002 fc5a 	bl	8003370 <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	f241 3287 	movw	r2, #4999	; 0x1387
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d9f6      	bls.n	8000ab8 <bno055_init+0x90>
    //HAL_Delay(5000);
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8000aca:	2100      	movs	r1, #0
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f001 fc4a 	bl	8002366 <bno055_set_pwr_mode>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	75fb      	strb	r3, [r7, #23]
 8000ad6:	7dfb      	ldrb	r3, [r7, #23]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <bno055_init+0xb8>
        return err;
 8000adc:	7dfb      	ldrb	r3, [r7, #23]
 8000ade:	e0a9      	b.n	8000c34 <bno055_init+0x20c>
    }
    timeSaver = HAL_GetTick();
 8000ae0:	f002 fc46 	bl	8003370 <HAL_GetTick>
 8000ae4:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < 10) {}//wait
 8000ae6:	bf00      	nop
 8000ae8:	f002 fc42 	bl	8003370 <HAL_GetTick>
 8000aec:	4602      	mov	r2, r0
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	2b09      	cmp	r3, #9
 8000af4:	d9f8      	bls.n	8000ae8 <bno055_init+0xc0>
    //HAL_Delay(10);
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000af6:	2100      	movs	r1, #0
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f001 fd3a 	bl	8002572 <bno055_set_page>
 8000afe:	4603      	mov	r3, r0
 8000b00:	75fb      	strb	r3, [r7, #23]
 8000b02:	7dfb      	ldrb	r3, [r7, #23]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <bno055_init+0xe4>
        return err;
 8000b08:	7dfb      	ldrb	r3, [r7, #23]
 8000b0a:	e093      	b.n	8000c34 <bno055_init+0x20c>
    }
    timeSaver = HAL_GetTick();
 8000b0c:	f002 fc30 	bl	8003370 <HAL_GetTick>
 8000b10:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < BNO_CONFIG_TIME_DELAY + 5) {} //wait
 8000b12:	bf00      	nop
 8000b14:	f002 fc2c 	bl	8003370 <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	2b0b      	cmp	r3, #11
 8000b20:	d9f8      	bls.n	8000b14 <bno055_init+0xec>
    //HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
    bno055_on(imu);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f001 fc9f 	bl	8002466 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	791b      	ldrb	r3, [r3, #4]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f001 fb7f 	bl	8002232 <bno055_set_opmode>
 8000b34:	4603      	mov	r3, r0
 8000b36:	75fb      	strb	r3, [r7, #23]
 8000b38:	7dfb      	ldrb	r3, [r7, #23]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <bno055_init+0x11a>
        return err;
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
 8000b40:	e078      	b.n	8000c34 <bno055_init+0x20c>
    }
    timeSaver = HAL_GetTick();
 8000b42:	f002 fc15 	bl	8003370 <HAL_GetTick>
 8000b46:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < BNO_ANY_TIME_DELAY + 5) {}//wait
 8000b48:	bf00      	nop
 8000b4a:	f002 fc11 	bl	8003370 <HAL_GetTick>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	2b17      	cmp	r3, #23
 8000b56:	d9f8      	bls.n	8000b4a <bno055_init+0x122>
    //HAL_Delay(BNO_ANY_TIME_DELAY + 5);

    imu->temperature = &bno055_temperature;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a38      	ldr	r2, [pc, #224]	; (8000c3c <bno055_init+0x214>)
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
    imu->acc_x = &bno055_acc_x;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a37      	ldr	r2, [pc, #220]	; (8000c40 <bno055_init+0x218>)
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
    imu->acc_y = &bno055_acc_y;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a37      	ldr	r2, [pc, #220]	; (8000c44 <bno055_init+0x21c>)
 8000b68:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->acc_z = &bno055_acc_z;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a36      	ldr	r2, [pc, #216]	; (8000c48 <bno055_init+0x220>)
 8000b6e:	631a      	str	r2, [r3, #48]	; 0x30
    imu->acc = &bno055_acc;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a36      	ldr	r2, [pc, #216]	; (8000c4c <bno055_init+0x224>)
 8000b74:	635a      	str	r2, [r3, #52]	; 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a35      	ldr	r2, [pc, #212]	; (8000c50 <bno055_init+0x228>)
 8000b7a:	639a      	str	r2, [r3, #56]	; 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a35      	ldr	r2, [pc, #212]	; (8000c54 <bno055_init+0x22c>)
 8000b80:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a34      	ldr	r2, [pc, #208]	; (8000c58 <bno055_init+0x230>)
 8000b86:	641a      	str	r2, [r3, #64]	; 0x40
    imu->linear_acc = &bno055_linear_acc;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a34      	ldr	r2, [pc, #208]	; (8000c5c <bno055_init+0x234>)
 8000b8c:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyro_x = &bno055_gyro_x;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a33      	ldr	r2, [pc, #204]	; (8000c60 <bno055_init+0x238>)
 8000b92:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyro_y = &bno055_gyro_y;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a33      	ldr	r2, [pc, #204]	; (8000c64 <bno055_init+0x23c>)
 8000b98:	64da      	str	r2, [r3, #76]	; 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a32      	ldr	r2, [pc, #200]	; (8000c68 <bno055_init+0x240>)
 8000b9e:	651a      	str	r2, [r3, #80]	; 0x50
    imu->gyro = &bno055_gyro;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a32      	ldr	r2, [pc, #200]	; (8000c6c <bno055_init+0x244>)
 8000ba4:	655a      	str	r2, [r3, #84]	; 0x54
    imu->mag_x = &bno055_mag_x;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a31      	ldr	r2, [pc, #196]	; (8000c70 <bno055_init+0x248>)
 8000baa:	659a      	str	r2, [r3, #88]	; 0x58
    imu->mag_y = &bno055_mag_y;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <bno055_init+0x24c>)
 8000bb0:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->mag_z = &bno055_mag_z;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a30      	ldr	r2, [pc, #192]	; (8000c78 <bno055_init+0x250>)
 8000bb6:	661a      	str	r2, [r3, #96]	; 0x60
    imu->mag = &bno055_mag;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a30      	ldr	r2, [pc, #192]	; (8000c7c <bno055_init+0x254>)
 8000bbc:	665a      	str	r2, [r3, #100]	; 0x64
    imu->gravity_x = &bno055_gravity_x;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a2f      	ldr	r2, [pc, #188]	; (8000c80 <bno055_init+0x258>)
 8000bc2:	669a      	str	r2, [r3, #104]	; 0x68
    imu->gravity_y = &bno055_gravity_y;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a2f      	ldr	r2, [pc, #188]	; (8000c84 <bno055_init+0x25c>)
 8000bc8:	66da      	str	r2, [r3, #108]	; 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a2e      	ldr	r2, [pc, #184]	; (8000c88 <bno055_init+0x260>)
 8000bce:	671a      	str	r2, [r3, #112]	; 0x70
    imu->gravity = &bno055_gravity;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a2e      	ldr	r2, [pc, #184]	; (8000c8c <bno055_init+0x264>)
 8000bd4:	675a      	str	r2, [r3, #116]	; 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a2d      	ldr	r2, [pc, #180]	; (8000c90 <bno055_init+0x268>)
 8000bda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    imu->euler_roll = &bno055_euler_roll;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a2c      	ldr	r2, [pc, #176]	; (8000c94 <bno055_init+0x26c>)
 8000be2:	679a      	str	r2, [r3, #120]	; 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a2c      	ldr	r2, [pc, #176]	; (8000c98 <bno055_init+0x270>)
 8000be8:	67da      	str	r2, [r3, #124]	; 0x7c
    imu->euler = &bno055_euler;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a2b      	ldr	r2, [pc, #172]	; (8000c9c <bno055_init+0x274>)
 8000bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a2a      	ldr	r2, [pc, #168]	; (8000ca0 <bno055_init+0x278>)
 8000bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a29      	ldr	r2, [pc, #164]	; (8000ca4 <bno055_init+0x27c>)
 8000bfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a28      	ldr	r2, [pc, #160]	; (8000ca8 <bno055_init+0x280>)
 8000c06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a27      	ldr	r2, [pc, #156]	; (8000cac <bno055_init+0x284>)
 8000c0e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    imu->quaternion = &bno055_quaternion;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a26      	ldr	r2, [pc, #152]	; (8000cb0 <bno055_init+0x288>)
 8000c16:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    imu->acc_config = &bno055_acc_conf;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a25      	ldr	r2, [pc, #148]	; (8000cb4 <bno055_init+0x28c>)
 8000c1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a24      	ldr	r2, [pc, #144]	; (8000cb8 <bno055_init+0x290>)
 8000c26:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    imu->mag_config = &bno055_mag_conf;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a23      	ldr	r2, [pc, #140]	; (8000cbc <bno055_init+0x294>)
 8000c2e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return BNO_OK;
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	371c      	adds	r7, #28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	08000cc1 	.word	0x08000cc1
 8000c40:	08000d3d 	.word	0x08000d3d
 8000c44:	08000dd1 	.word	0x08000dd1
 8000c48:	08000e65 	.word	0x08000e65
 8000c4c:	08000ef9 	.word	0x08000ef9
 8000c50:	08000fd9 	.word	0x08000fd9
 8000c54:	0800106d 	.word	0x0800106d
 8000c58:	08001101 	.word	0x08001101
 8000c5c:	08001195 	.word	0x08001195
 8000c60:	08001275 	.word	0x08001275
 8000c64:	08001309 	.word	0x08001309
 8000c68:	0800139d 	.word	0x0800139d
 8000c6c:	08001431 	.word	0x08001431
 8000c70:	08001511 	.word	0x08001511
 8000c74:	08001593 	.word	0x08001593
 8000c78:	08001615 	.word	0x08001615
 8000c7c:	08001697 	.word	0x08001697
 8000c80:	08001761 	.word	0x08001761
 8000c84:	080017f9 	.word	0x080017f9
 8000c88:	08001891 	.word	0x08001891
 8000c8c:	08001929 	.word	0x08001929
 8000c90:	08001a09 	.word	0x08001a09
 8000c94:	08001aa1 	.word	0x08001aa1
 8000c98:	08001b39 	.word	0x08001b39
 8000c9c:	08001bd1 	.word	0x08001bd1
 8000ca0:	08001cb1 	.word	0x08001cb1
 8000ca4:	08001d39 	.word	0x08001d39
 8000ca8:	08001dc1 	.word	0x08001dc1
 8000cac:	08001e49 	.word	0x08001e49
 8000cb0:	08001ed1 	.word	0x08001ed1
 8000cb4:	08001fc5 	.word	0x08001fc5
 8000cb8:	08002095 	.word	0x08002095
 8000cbc:	08002163 	.word	0x08002163

08000cc0 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b0af      	sub	sp, #188	; 0xbc
 8000cc4:	af2a      	add	r7, sp, #168	; 0xa8
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000cca:	2100      	movs	r1, #0
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f001 fc50 	bl	8002572 <bno055_set_page>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	73fb      	strb	r3, [r7, #15]
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <bno055_temperature+0x20>
        return err;
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	e029      	b.n	8000d34 <bno055_temperature+0x74>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 8000ce4:	687c      	ldr	r4, [r7, #4]
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	9329      	str	r3, [sp, #164]	; 0xa4
 8000cea:	f107 030e 	add.w	r3, r7, #14
 8000cee:	9328      	str	r3, [sp, #160]	; 0xa0
 8000cf0:	2334      	movs	r3, #52	; 0x34
 8000cf2:	9327      	str	r3, [sp, #156]	; 0x9c
 8000cf4:	4668      	mov	r0, sp
 8000cf6:	f104 0310 	add.w	r3, r4, #16
 8000cfa:	229c      	movs	r2, #156	; 0x9c
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f008 fc5f 	bl	80095c0 <memcpy>
 8000d02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d06:	f001 fbd1 	bl	80024ac <bno055_read_regs>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <bno055_temperature+0x58>
        return err;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	e00d      	b.n	8000d34 <bno055_temperature+0x74>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7bdb      	ldrb	r3, [r3, #15]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d004      	beq.n	8000d2a <bno055_temperature+0x6a>
 8000d20:	7bbb      	ldrb	r3, [r7, #14]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	e001      	b.n	8000d2e <bno055_temperature+0x6e>
 8000d2a:	7bbb      	ldrb	r3, [r7, #14]
 8000d2c:	b25b      	sxtb	r3, r3
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd90      	pop	{r4, r7, pc}

08000d3c <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b0af      	sub	sp, #188	; 0xbc
 8000d40:	af2a      	add	r7, sp, #168	; 0xa8
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000d46:	2100      	movs	r1, #0
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f001 fc12 	bl	8002572 <bno055_set_page>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <bno055_acc_x+0x20>
        return err;
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	e033      	b.n	8000dc4 <bno055_acc_x+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000d5c:	687c      	ldr	r4, [r7, #4]
 8000d5e:	2302      	movs	r3, #2
 8000d60:	9329      	str	r3, [sp, #164]	; 0xa4
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	9328      	str	r3, [sp, #160]	; 0xa0
 8000d68:	2308      	movs	r3, #8
 8000d6a:	9327      	str	r3, [sp, #156]	; 0x9c
 8000d6c:	4668      	mov	r0, sp
 8000d6e:	f104 0310 	add.w	r3, r4, #16
 8000d72:	229c      	movs	r2, #156	; 0x9c
 8000d74:	4619      	mov	r1, r3
 8000d76:	f008 fc23 	bl	80095c0 <memcpy>
 8000d7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d7e:	f001 fb95 	bl	80024ac <bno055_read_regs>
 8000d82:	4603      	mov	r3, r0
 8000d84:	73fb      	strb	r3, [r7, #15]
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <bno055_acc_x+0x54>
        return err;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	e019      	b.n	8000dc4 <bno055_acc_x+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000d90:	7b7b      	ldrb	r3, [r7, #13]
 8000d92:	021b      	lsls	r3, r3, #8
 8000d94:	b21a      	sxth	r2, r3
 8000d96:	7b3b      	ldrb	r3, [r7, #12]
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	ee07 3a90 	vmov	s15, r3
 8000da2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d102      	bne.n	8000db4 <bno055_acc_x+0x78>
 8000dae:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000dcc <bno055_acc_x+0x90>
 8000db2:	e001      	b.n	8000db8 <bno055_acc_x+0x7c>
 8000db4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000dc2:	2300      	movs	r3, #0
};
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	42c80000 	.word	0x42c80000

08000dd0 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b0af      	sub	sp, #188	; 0xbc
 8000dd4:	af2a      	add	r7, sp, #168	; 0xa8
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000dda:	2100      	movs	r1, #0
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f001 fbc8 	bl	8002572 <bno055_set_page>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <bno055_acc_y+0x20>
        return err;
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	e033      	b.n	8000e58 <bno055_acc_y+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000df0:	687c      	ldr	r4, [r7, #4]
 8000df2:	2302      	movs	r3, #2
 8000df4:	9329      	str	r3, [sp, #164]	; 0xa4
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	9328      	str	r3, [sp, #160]	; 0xa0
 8000dfc:	230a      	movs	r3, #10
 8000dfe:	9327      	str	r3, [sp, #156]	; 0x9c
 8000e00:	4668      	mov	r0, sp
 8000e02:	f104 0310 	add.w	r3, r4, #16
 8000e06:	229c      	movs	r2, #156	; 0x9c
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f008 fbd9 	bl	80095c0 <memcpy>
 8000e0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e12:	f001 fb4b 	bl	80024ac <bno055_read_regs>
 8000e16:	4603      	mov	r3, r0
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <bno055_acc_y+0x54>
        return err;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	e019      	b.n	8000e58 <bno055_acc_y+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e24:	7b7b      	ldrb	r3, [r7, #13]
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	7b3b      	ldrb	r3, [r7, #12]
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	ee07 3a90 	vmov	s15, r3
 8000e36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d102      	bne.n	8000e48 <bno055_acc_y+0x78>
 8000e42:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000e60 <bno055_acc_y+0x90>
 8000e46:	e001      	b.n	8000e4c <bno055_acc_y+0x7c>
 8000e48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000e56:	2300      	movs	r3, #0
};
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd90      	pop	{r4, r7, pc}
 8000e60:	42c80000 	.word	0x42c80000

08000e64 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b0af      	sub	sp, #188	; 0xbc
 8000e68:	af2a      	add	r7, sp, #168	; 0xa8
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000e6e:	2100      	movs	r1, #0
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f001 fb7e 	bl	8002572 <bno055_set_page>
 8000e76:	4603      	mov	r3, r0
 8000e78:	73fb      	strb	r3, [r7, #15]
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <bno055_acc_z+0x20>
        return err;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	e033      	b.n	8000eec <bno055_acc_z+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000e84:	687c      	ldr	r4, [r7, #4]
 8000e86:	2302      	movs	r3, #2
 8000e88:	9329      	str	r3, [sp, #164]	; 0xa4
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	9328      	str	r3, [sp, #160]	; 0xa0
 8000e90:	230c      	movs	r3, #12
 8000e92:	9327      	str	r3, [sp, #156]	; 0x9c
 8000e94:	4668      	mov	r0, sp
 8000e96:	f104 0310 	add.w	r3, r4, #16
 8000e9a:	229c      	movs	r2, #156	; 0x9c
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f008 fb8f 	bl	80095c0 <memcpy>
 8000ea2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ea6:	f001 fb01 	bl	80024ac <bno055_read_regs>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	73fb      	strb	r3, [r7, #15]
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <bno055_acc_z+0x54>
        return err;
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	e019      	b.n	8000eec <bno055_acc_z+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000eb8:	7b7b      	ldrb	r3, [r7, #13]
 8000eba:	021b      	lsls	r3, r3, #8
 8000ebc:	b21a      	sxth	r2, r3
 8000ebe:	7b3b      	ldrb	r3, [r7, #12]
 8000ec0:	b21b      	sxth	r3, r3
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <bno055_acc_z+0x78>
 8000ed6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000ef4 <bno055_acc_z+0x90>
 8000eda:	e001      	b.n	8000ee0 <bno055_acc_z+0x7c>
 8000edc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000eea:	2300      	movs	r3, #0
};
 8000eec:	4618      	mov	r0, r3
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	42c80000 	.word	0x42c80000

08000ef8 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b0b1      	sub	sp, #196	; 0xc4
 8000efc:	af2a      	add	r7, sp, #168	; 0xa8
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000f02:	2100      	movs	r1, #0
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f001 fb34 	bl	8002572 <bno055_set_page>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	75fb      	strb	r3, [r7, #23]
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <bno055_acc+0x20>
        return err;
 8000f14:	7dfb      	ldrb	r3, [r7, #23]
 8000f16:	e059      	b.n	8000fcc <bno055_acc+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 8000f18:	687c      	ldr	r4, [r7, #4]
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	9329      	str	r3, [sp, #164]	; 0xa4
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	9328      	str	r3, [sp, #160]	; 0xa0
 8000f24:	2308      	movs	r3, #8
 8000f26:	9327      	str	r3, [sp, #156]	; 0x9c
 8000f28:	4668      	mov	r0, sp
 8000f2a:	f104 0310 	add.w	r3, r4, #16
 8000f2e:	229c      	movs	r2, #156	; 0x9c
 8000f30:	4619      	mov	r1, r3
 8000f32:	f008 fb45 	bl	80095c0 <memcpy>
 8000f36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f3a:	f001 fab7 	bl	80024ac <bno055_read_regs>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	75fb      	strb	r3, [r7, #23]
 8000f42:	7dfb      	ldrb	r3, [r7, #23]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <bno055_acc+0x54>
        return err;
 8000f48:	7dfb      	ldrb	r3, [r7, #23]
 8000f4a:	e03f      	b.n	8000fcc <bno055_acc+0xd4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <bno055_acc+0x60>
 8000f54:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <bno055_acc+0xdc>)
 8000f56:	e001      	b.n	8000f5c <bno055_acc+0x64>
 8000f58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000f5c:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000f5e:	7a7b      	ldrb	r3, [r7, #9]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	b21a      	sxth	r2, r3
 8000f64:	7a3b      	ldrb	r3, [r7, #8]
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	ee07 3a90 	vmov	s15, r3
 8000f70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f74:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000f82:	7afb      	ldrb	r3, [r7, #11]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	7abb      	ldrb	r3, [r7, #10]
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f98:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000fa6:	7b7b      	ldrb	r3, [r7, #13]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	7b3b      	ldrb	r3, [r7, #12]
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000fca:	2300      	movs	r3, #0
};
 8000fcc:	4618      	mov	r0, r3
 8000fce:	371c      	adds	r7, #28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	42c80000 	.word	0x42c80000

08000fd8 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b0af      	sub	sp, #188	; 0xbc
 8000fdc:	af2a      	add	r7, sp, #168	; 0xa8
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f001 fac4 	bl	8002572 <bno055_set_page>
 8000fea:	4603      	mov	r3, r0
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <bno055_linear_acc_x+0x20>
        return err;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	e033      	b.n	8001060 <bno055_linear_acc_x+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000ff8:	687c      	ldr	r4, [r7, #4]
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	9329      	str	r3, [sp, #164]	; 0xa4
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	9328      	str	r3, [sp, #160]	; 0xa0
 8001004:	2328      	movs	r3, #40	; 0x28
 8001006:	9327      	str	r3, [sp, #156]	; 0x9c
 8001008:	4668      	mov	r0, sp
 800100a:	f104 0310 	add.w	r3, r4, #16
 800100e:	229c      	movs	r2, #156	; 0x9c
 8001010:	4619      	mov	r1, r3
 8001012:	f008 fad5 	bl	80095c0 <memcpy>
 8001016:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800101a:	f001 fa47 	bl	80024ac <bno055_read_regs>
 800101e:	4603      	mov	r3, r0
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <bno055_linear_acc_x+0x54>
        return err;
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	e019      	b.n	8001060 <bno055_linear_acc_x+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800102c:	7b7b      	ldrb	r3, [r7, #13]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b21a      	sxth	r2, r3
 8001032:	7b3b      	ldrb	r3, [r7, #12]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21b      	sxth	r3, r3
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <bno055_linear_acc_x+0x78>
 800104a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001068 <bno055_linear_acc_x+0x90>
 800104e:	e001      	b.n	8001054 <bno055_linear_acc_x+0x7c>
 8001050:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800105e:	2300      	movs	r3, #0
};
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}
 8001068:	42c80000 	.word	0x42c80000

0800106c <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b0af      	sub	sp, #188	; 0xbc
 8001070:	af2a      	add	r7, sp, #168	; 0xa8
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001076:	2100      	movs	r1, #0
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f001 fa7a 	bl	8002572 <bno055_set_page>
 800107e:	4603      	mov	r3, r0
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <bno055_linear_acc_y+0x20>
        return err;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	e033      	b.n	80010f4 <bno055_linear_acc_y+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800108c:	687c      	ldr	r4, [r7, #4]
 800108e:	2302      	movs	r3, #2
 8001090:	9329      	str	r3, [sp, #164]	; 0xa4
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	9328      	str	r3, [sp, #160]	; 0xa0
 8001098:	232a      	movs	r3, #42	; 0x2a
 800109a:	9327      	str	r3, [sp, #156]	; 0x9c
 800109c:	4668      	mov	r0, sp
 800109e:	f104 0310 	add.w	r3, r4, #16
 80010a2:	229c      	movs	r2, #156	; 0x9c
 80010a4:	4619      	mov	r1, r3
 80010a6:	f008 fa8b 	bl	80095c0 <memcpy>
 80010aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010ae:	f001 f9fd 	bl	80024ac <bno055_read_regs>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <bno055_linear_acc_y+0x54>
        return err;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	e019      	b.n	80010f4 <bno055_linear_acc_y+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80010c0:	7b7b      	ldrb	r3, [r7, #13]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	7b3b      	ldrb	r3, [r7, #12]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <bno055_linear_acc_y+0x78>
 80010de:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80010fc <bno055_linear_acc_y+0x90>
 80010e2:	e001      	b.n	80010e8 <bno055_linear_acc_y+0x7c>
 80010e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80010e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80010f2:	2300      	movs	r3, #0
};
 80010f4:	4618      	mov	r0, r3
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd90      	pop	{r4, r7, pc}
 80010fc:	42c80000 	.word	0x42c80000

08001100 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b0af      	sub	sp, #188	; 0xbc
 8001104:	af2a      	add	r7, sp, #168	; 0xa8
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800110a:	2100      	movs	r1, #0
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f001 fa30 	bl	8002572 <bno055_set_page>
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <bno055_linear_acc_z+0x20>
        return err;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	e033      	b.n	8001188 <bno055_linear_acc_z+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001120:	687c      	ldr	r4, [r7, #4]
 8001122:	2302      	movs	r3, #2
 8001124:	9329      	str	r3, [sp, #164]	; 0xa4
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	9328      	str	r3, [sp, #160]	; 0xa0
 800112c:	232c      	movs	r3, #44	; 0x2c
 800112e:	9327      	str	r3, [sp, #156]	; 0x9c
 8001130:	4668      	mov	r0, sp
 8001132:	f104 0310 	add.w	r3, r4, #16
 8001136:	229c      	movs	r2, #156	; 0x9c
 8001138:	4619      	mov	r1, r3
 800113a:	f008 fa41 	bl	80095c0 <memcpy>
 800113e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001142:	f001 f9b3 	bl	80024ac <bno055_read_regs>
 8001146:	4603      	mov	r3, r0
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <bno055_linear_acc_z+0x54>
        return err;
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	e019      	b.n	8001188 <bno055_linear_acc_z+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001154:	7b7b      	ldrb	r3, [r7, #13]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	7b3b      	ldrb	r3, [r7, #12]
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21b      	sxth	r3, r3
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800116e:	2b00      	cmp	r3, #0
 8001170:	d102      	bne.n	8001178 <bno055_linear_acc_z+0x78>
 8001172:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001190 <bno055_linear_acc_z+0x90>
 8001176:	e001      	b.n	800117c <bno055_linear_acc_z+0x7c>
 8001178:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800117c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001186:	2300      	movs	r3, #0
};
 8001188:	4618      	mov	r0, r3
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}
 8001190:	42c80000 	.word	0x42c80000

08001194 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b0b1      	sub	sp, #196	; 0xc4
 8001198:	af2a      	add	r7, sp, #168	; 0xa8
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800119e:	2100      	movs	r1, #0
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f001 f9e6 	bl	8002572 <bno055_set_page>
 80011a6:	4603      	mov	r3, r0
 80011a8:	75fb      	strb	r3, [r7, #23]
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <bno055_linear_acc+0x20>
        return err;
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	e059      	b.n	8001268 <bno055_linear_acc+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 80011b4:	687c      	ldr	r4, [r7, #4]
 80011b6:	2306      	movs	r3, #6
 80011b8:	9329      	str	r3, [sp, #164]	; 0xa4
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	9328      	str	r3, [sp, #160]	; 0xa0
 80011c0:	2328      	movs	r3, #40	; 0x28
 80011c2:	9327      	str	r3, [sp, #156]	; 0x9c
 80011c4:	4668      	mov	r0, sp
 80011c6:	f104 0310 	add.w	r3, r4, #16
 80011ca:	229c      	movs	r2, #156	; 0x9c
 80011cc:	4619      	mov	r1, r3
 80011ce:	f008 f9f7 	bl	80095c0 <memcpy>
 80011d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011d6:	f001 f969 	bl	80024ac <bno055_read_regs>
 80011da:	4603      	mov	r3, r0
 80011dc:	75fb      	strb	r3, [r7, #23]
 80011de:	7dfb      	ldrb	r3, [r7, #23]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <bno055_linear_acc+0x54>
        return err;
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	e03f      	b.n	8001268 <bno055_linear_acc+0xd4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <bno055_linear_acc+0x60>
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <bno055_linear_acc+0xdc>)
 80011f2:	e001      	b.n	80011f8 <bno055_linear_acc+0x64>
 80011f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80011f8:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80011fa:	7a7b      	ldrb	r3, [r7, #9]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	b21a      	sxth	r2, r3
 8001200:	7a3b      	ldrb	r3, [r7, #8]
 8001202:	b21b      	sxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b21b      	sxth	r3, r3
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001210:	ed97 7a04 	vldr	s14, [r7, #16]
 8001214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 800121e:	7afb      	ldrb	r3, [r7, #11]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21a      	sxth	r2, r3
 8001224:	7abb      	ldrb	r3, [r7, #10]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21b      	sxth	r3, r3
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001234:	ed97 7a04 	vldr	s14, [r7, #16]
 8001238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001242:	7b7b      	ldrb	r3, [r7, #13]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21a      	sxth	r2, r3
 8001248:	7b3b      	ldrb	r3, [r7, #12]
 800124a:	b21b      	sxth	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b21b      	sxth	r3, r3
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001258:	ed97 7a04 	vldr	s14, [r7, #16]
 800125c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001266:	2300      	movs	r3, #0
};
 8001268:	4618      	mov	r0, r3
 800126a:	371c      	adds	r7, #28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	42c80000 	.word	0x42c80000

08001274 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b0af      	sub	sp, #188	; 0xbc
 8001278:	af2a      	add	r7, sp, #168	; 0xa8
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800127e:	2100      	movs	r1, #0
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f001 f976 	bl	8002572 <bno055_set_page>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <bno055_gyro_x+0x20>
        return err;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	e033      	b.n	80012fc <bno055_gyro_x+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001294:	687c      	ldr	r4, [r7, #4]
 8001296:	2302      	movs	r3, #2
 8001298:	9329      	str	r3, [sp, #164]	; 0xa4
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	9328      	str	r3, [sp, #160]	; 0xa0
 80012a0:	2314      	movs	r3, #20
 80012a2:	9327      	str	r3, [sp, #156]	; 0x9c
 80012a4:	4668      	mov	r0, sp
 80012a6:	f104 0310 	add.w	r3, r4, #16
 80012aa:	229c      	movs	r2, #156	; 0x9c
 80012ac:	4619      	mov	r1, r3
 80012ae:	f008 f987 	bl	80095c0 <memcpy>
 80012b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012b6:	f001 f8f9 	bl	80024ac <bno055_read_regs>
 80012ba:	4603      	mov	r3, r0
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <bno055_gyro_x+0x54>
        return err;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	e019      	b.n	80012fc <bno055_gyro_x+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80012c8:	7b7b      	ldrb	r3, [r7, #13]
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	7b3b      	ldrb	r3, [r7, #12]
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <bno055_gyro_x+0x78>
 80012e6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80012ea:	e001      	b.n	80012f0 <bno055_gyro_x+0x7c>
 80012ec:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001304 <bno055_gyro_x+0x90>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80012f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80012fa:	2300      	movs	r3, #0
};
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bd90      	pop	{r4, r7, pc}
 8001304:	44610000 	.word	0x44610000

08001308 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b0af      	sub	sp, #188	; 0xbc
 800130c:	af2a      	add	r7, sp, #168	; 0xa8
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001312:	2100      	movs	r1, #0
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f001 f92c 	bl	8002572 <bno055_set_page>
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <bno055_gyro_y+0x20>
        return err;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	e033      	b.n	8001390 <bno055_gyro_y+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001328:	687c      	ldr	r4, [r7, #4]
 800132a:	2302      	movs	r3, #2
 800132c:	9329      	str	r3, [sp, #164]	; 0xa4
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	9328      	str	r3, [sp, #160]	; 0xa0
 8001334:	2316      	movs	r3, #22
 8001336:	9327      	str	r3, [sp, #156]	; 0x9c
 8001338:	4668      	mov	r0, sp
 800133a:	f104 0310 	add.w	r3, r4, #16
 800133e:	229c      	movs	r2, #156	; 0x9c
 8001340:	4619      	mov	r1, r3
 8001342:	f008 f93d 	bl	80095c0 <memcpy>
 8001346:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800134a:	f001 f8af 	bl	80024ac <bno055_read_regs>
 800134e:	4603      	mov	r3, r0
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <bno055_gyro_y+0x54>
        return err;
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	e019      	b.n	8001390 <bno055_gyro_y+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800135c:	7b7b      	ldrb	r3, [r7, #13]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	b21a      	sxth	r2, r3
 8001362:	7b3b      	ldrb	r3, [r7, #12]
 8001364:	b21b      	sxth	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b21b      	sxth	r3, r3
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <bno055_gyro_y+0x78>
 800137a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800137e:	e001      	b.n	8001384 <bno055_gyro_y+0x7c>
 8001380:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001398 <bno055_gyro_y+0x90>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800138e:	2300      	movs	r3, #0
};
 8001390:	4618      	mov	r0, r3
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	bd90      	pop	{r4, r7, pc}
 8001398:	44610000 	.word	0x44610000

0800139c <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b0af      	sub	sp, #188	; 0xbc
 80013a0:	af2a      	add	r7, sp, #168	; 0xa8
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80013a6:	2100      	movs	r1, #0
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f001 f8e2 	bl	8002572 <bno055_set_page>
 80013ae:	4603      	mov	r3, r0
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <bno055_gyro_z+0x20>
        return err;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	e033      	b.n	8001424 <bno055_gyro_z+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80013bc:	687c      	ldr	r4, [r7, #4]
 80013be:	2302      	movs	r3, #2
 80013c0:	9329      	str	r3, [sp, #164]	; 0xa4
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	9328      	str	r3, [sp, #160]	; 0xa0
 80013c8:	2318      	movs	r3, #24
 80013ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80013cc:	4668      	mov	r0, sp
 80013ce:	f104 0310 	add.w	r3, r4, #16
 80013d2:	229c      	movs	r2, #156	; 0x9c
 80013d4:	4619      	mov	r1, r3
 80013d6:	f008 f8f3 	bl	80095c0 <memcpy>
 80013da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013de:	f001 f865 	bl	80024ac <bno055_read_regs>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <bno055_gyro_z+0x54>
        return err;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	e019      	b.n	8001424 <bno055_gyro_z+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80013f0:	7b7b      	ldrb	r3, [r7, #13]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	7b3b      	ldrb	r3, [r7, #12]
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 800140a:	2b00      	cmp	r3, #0
 800140c:	d102      	bne.n	8001414 <bno055_gyro_z+0x78>
 800140e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001412:	e001      	b.n	8001418 <bno055_gyro_z+0x7c>
 8001414:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800142c <bno055_gyro_z+0x90>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001422:	2300      	movs	r3, #0
};
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	bd90      	pop	{r4, r7, pc}
 800142c:	44610000 	.word	0x44610000

08001430 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b0b1      	sub	sp, #196	; 0xc4
 8001434:	af2a      	add	r7, sp, #168	; 0xa8
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800143a:	2100      	movs	r1, #0
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f001 f898 	bl	8002572 <bno055_set_page>
 8001442:	4603      	mov	r3, r0
 8001444:	75fb      	strb	r3, [r7, #23]
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <bno055_gyro+0x20>
        return err;
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	e059      	b.n	8001504 <bno055_gyro+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001450:	687c      	ldr	r4, [r7, #4]
 8001452:	2306      	movs	r3, #6
 8001454:	9329      	str	r3, [sp, #164]	; 0xa4
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	9328      	str	r3, [sp, #160]	; 0xa0
 800145c:	2314      	movs	r3, #20
 800145e:	9327      	str	r3, [sp, #156]	; 0x9c
 8001460:	4668      	mov	r0, sp
 8001462:	f104 0310 	add.w	r3, r4, #16
 8001466:	229c      	movs	r2, #156	; 0x9c
 8001468:	4619      	mov	r1, r3
 800146a:	f008 f8a9 	bl	80095c0 <memcpy>
 800146e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001472:	f001 f81b 	bl	80024ac <bno055_read_regs>
 8001476:	4603      	mov	r3, r0
 8001478:	75fb      	strb	r3, [r7, #23]
 800147a:	7dfb      	ldrb	r3, [r7, #23]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <bno055_gyro+0x54>
        return err;
 8001480:	7dfb      	ldrb	r3, [r7, #23]
 8001482:	e03f      	b.n	8001504 <bno055_gyro+0xd4>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <bno055_gyro+0x62>
 800148c:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001490:	e000      	b.n	8001494 <bno055_gyro+0x64>
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <bno055_gyro+0xdc>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001494:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001496:	7a7b      	ldrb	r3, [r7, #9]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	b21a      	sxth	r2, r3
 800149c:	7a3b      	ldrb	r3, [r7, #8]
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80014b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80014ba:	7afb      	ldrb	r3, [r7, #11]
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	b21a      	sxth	r2, r3
 80014c0:	7abb      	ldrb	r3, [r7, #10]
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80014d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80014de:	7b7b      	ldrb	r3, [r7, #13]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	7b3b      	ldrb	r3, [r7, #12]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	ee07 3a90 	vmov	s15, r3
 80014f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80014f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	371c      	adds	r7, #28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	44610000 	.word	0x44610000

08001510 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b0af      	sub	sp, #188	; 0xbc
 8001514:	af2a      	add	r7, sp, #168	; 0xa8
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800151a:	2100      	movs	r1, #0
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f001 f828 	bl	8002572 <bno055_set_page>
 8001522:	4603      	mov	r3, r0
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <bno055_mag_x+0x20>
        return err;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	e02c      	b.n	800158a <bno055_mag_x+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001530:	687c      	ldr	r4, [r7, #4]
 8001532:	2302      	movs	r3, #2
 8001534:	9329      	str	r3, [sp, #164]	; 0xa4
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	9328      	str	r3, [sp, #160]	; 0xa0
 800153c:	230e      	movs	r3, #14
 800153e:	9327      	str	r3, [sp, #156]	; 0x9c
 8001540:	4668      	mov	r0, sp
 8001542:	f104 0310 	add.w	r3, r4, #16
 8001546:	229c      	movs	r2, #156	; 0x9c
 8001548:	4619      	mov	r1, r3
 800154a:	f008 f839 	bl	80095c0 <memcpy>
 800154e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001552:	f000 ffab 	bl	80024ac <bno055_read_regs>
 8001556:	4603      	mov	r3, r0
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <bno055_mag_x+0x54>
        return err;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	e012      	b.n	800158a <bno055_mag_x+0x7a>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001564:	7b7b      	ldrb	r3, [r7, #13]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	7b3b      	ldrb	r3, [r7, #12]
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b21b      	sxth	r3, r3
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800157a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800157e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bd90      	pop	{r4, r7, pc}

08001592 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8001592:	b590      	push	{r4, r7, lr}
 8001594:	b0af      	sub	sp, #188	; 0xbc
 8001596:	af2a      	add	r7, sp, #168	; 0xa8
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800159c:	2100      	movs	r1, #0
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 ffe7 	bl	8002572 <bno055_set_page>
 80015a4:	4603      	mov	r3, r0
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <bno055_mag_y+0x20>
        return err;
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	e02c      	b.n	800160c <bno055_mag_y+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80015b2:	687c      	ldr	r4, [r7, #4]
 80015b4:	2302      	movs	r3, #2
 80015b6:	9329      	str	r3, [sp, #164]	; 0xa4
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	9328      	str	r3, [sp, #160]	; 0xa0
 80015be:	2310      	movs	r3, #16
 80015c0:	9327      	str	r3, [sp, #156]	; 0x9c
 80015c2:	4668      	mov	r0, sp
 80015c4:	f104 0310 	add.w	r3, r4, #16
 80015c8:	229c      	movs	r2, #156	; 0x9c
 80015ca:	4619      	mov	r1, r3
 80015cc:	f007 fff8 	bl	80095c0 <memcpy>
 80015d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015d4:	f000 ff6a 	bl	80024ac <bno055_read_regs>
 80015d8:	4603      	mov	r3, r0
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <bno055_mag_y+0x54>
        return err;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	e012      	b.n	800160c <bno055_mag_y+0x7a>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80015e6:	7b7b      	ldrb	r3, [r7, #13]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	7b3b      	ldrb	r3, [r7, #12]
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015fc:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001600:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	bd90      	pop	{r4, r7, pc}

08001614 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b0af      	sub	sp, #188	; 0xbc
 8001618:	af2a      	add	r7, sp, #168	; 0xa8
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800161e:	2100      	movs	r1, #0
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 ffa6 	bl	8002572 <bno055_set_page>
 8001626:	4603      	mov	r3, r0
 8001628:	73fb      	strb	r3, [r7, #15]
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <bno055_mag_z+0x20>
        return err;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	e02c      	b.n	800168e <bno055_mag_z+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001634:	687c      	ldr	r4, [r7, #4]
 8001636:	2302      	movs	r3, #2
 8001638:	9329      	str	r3, [sp, #164]	; 0xa4
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	9328      	str	r3, [sp, #160]	; 0xa0
 8001640:	2312      	movs	r3, #18
 8001642:	9327      	str	r3, [sp, #156]	; 0x9c
 8001644:	4668      	mov	r0, sp
 8001646:	f104 0310 	add.w	r3, r4, #16
 800164a:	229c      	movs	r2, #156	; 0x9c
 800164c:	4619      	mov	r1, r3
 800164e:	f007 ffb7 	bl	80095c0 <memcpy>
 8001652:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001656:	f000 ff29 	bl	80024ac <bno055_read_regs>
 800165a:	4603      	mov	r3, r0
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <bno055_mag_z+0x54>
        return err;
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	e012      	b.n	800168e <bno055_mag_z+0x7a>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001668:	7b7b      	ldrb	r3, [r7, #13]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b21a      	sxth	r2, r3
 800166e:	7b3b      	ldrb	r3, [r7, #12]
 8001670:	b21b      	sxth	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	b21b      	sxth	r3, r3
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800167e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001682:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bd90      	pop	{r4, r7, pc}

08001696 <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8001696:	b590      	push	{r4, r7, lr}
 8001698:	b0af      	sub	sp, #188	; 0xbc
 800169a:	af2a      	add	r7, sp, #168	; 0xa8
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80016a0:	2100      	movs	r1, #0
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 ff65 	bl	8002572 <bno055_set_page>
 80016a8:	4603      	mov	r3, r0
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <bno055_mag+0x20>
        return err;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	e050      	b.n	8001758 <bno055_mag+0xc2>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 80016b6:	687c      	ldr	r4, [r7, #4]
 80016b8:	2306      	movs	r3, #6
 80016ba:	9329      	str	r3, [sp, #164]	; 0xa4
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80016c2:	230e      	movs	r3, #14
 80016c4:	9327      	str	r3, [sp, #156]	; 0x9c
 80016c6:	4668      	mov	r0, sp
 80016c8:	f104 0310 	add.w	r3, r4, #16
 80016cc:	229c      	movs	r2, #156	; 0x9c
 80016ce:	4619      	mov	r1, r3
 80016d0:	f007 ff76 	bl	80095c0 <memcpy>
 80016d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016d8:	f000 fee8 	bl	80024ac <bno055_read_regs>
 80016dc:	4603      	mov	r3, r0
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <bno055_mag+0x54>
        return err;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	e036      	b.n	8001758 <bno055_mag+0xc2>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80016ea:	7a7b      	ldrb	r3, [r7, #9]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	7a3b      	ldrb	r3, [r7, #8]
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	ee07 3a90 	vmov	s15, r3
 80016fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001700:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 800170e:	7afb      	ldrb	r3, [r7, #11]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b21a      	sxth	r2, r3
 8001714:	7abb      	ldrb	r3, [r7, #10]
 8001716:	b21b      	sxth	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b21b      	sxth	r3, r3
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001724:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8001732:	7b7b      	ldrb	r3, [r7, #13]
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	b21a      	sxth	r2, r3
 8001738:	7b3b      	ldrb	r3, [r7, #12]
 800173a:	b21b      	sxth	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b21b      	sxth	r3, r3
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001748:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800174c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001756:	2300      	movs	r3, #0
};
 8001758:	4618      	mov	r0, r3
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}

08001760 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b0b1      	sub	sp, #196	; 0xc4
 8001764:	af2a      	add	r7, sp, #168	; 0xa8
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800176a:	2100      	movs	r1, #0
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 ff00 	bl	8002572 <bno055_set_page>
 8001772:	4603      	mov	r3, r0
 8001774:	75fb      	strb	r3, [r7, #23]
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <bno055_gravity_x+0x20>
        return err;
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	e035      	b.n	80017ec <bno055_gravity_x+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001780:	687c      	ldr	r4, [r7, #4]
 8001782:	2302      	movs	r3, #2
 8001784:	9329      	str	r3, [sp, #164]	; 0xa4
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	9328      	str	r3, [sp, #160]	; 0xa0
 800178c:	232e      	movs	r3, #46	; 0x2e
 800178e:	9327      	str	r3, [sp, #156]	; 0x9c
 8001790:	4668      	mov	r0, sp
 8001792:	f104 0310 	add.w	r3, r4, #16
 8001796:	229c      	movs	r2, #156	; 0x9c
 8001798:	4619      	mov	r1, r3
 800179a:	f007 ff11 	bl	80095c0 <memcpy>
 800179e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017a2:	f000 fe83 	bl	80024ac <bno055_read_regs>
 80017a6:	4603      	mov	r3, r0
 80017a8:	75fb      	strb	r3, [r7, #23]
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <bno055_gravity_x+0x54>
        return err;
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	e01b      	b.n	80017ec <bno055_gravity_x+0x8c>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <bno055_gravity_x+0x60>
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <bno055_gravity_x+0x94>)
 80017be:	e001      	b.n	80017c4 <bno055_gravity_x+0x64>
 80017c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80017c4:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80017c6:	7b7b      	ldrb	r3, [r7, #13]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	b21a      	sxth	r2, r3
 80017cc:	7b3b      	ldrb	r3, [r7, #12]
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80017e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	371c      	adds	r7, #28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd90      	pop	{r4, r7, pc}
 80017f4:	42c80000 	.word	0x42c80000

080017f8 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b0b1      	sub	sp, #196	; 0xc4
 80017fc:	af2a      	add	r7, sp, #168	; 0xa8
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001802:	2100      	movs	r1, #0
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 feb4 	bl	8002572 <bno055_set_page>
 800180a:	4603      	mov	r3, r0
 800180c:	75fb      	strb	r3, [r7, #23]
 800180e:	7dfb      	ldrb	r3, [r7, #23]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <bno055_gravity_y+0x20>
        return err;
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	e035      	b.n	8001884 <bno055_gravity_y+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001818:	687c      	ldr	r4, [r7, #4]
 800181a:	2302      	movs	r3, #2
 800181c:	9329      	str	r3, [sp, #164]	; 0xa4
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	9328      	str	r3, [sp, #160]	; 0xa0
 8001824:	2330      	movs	r3, #48	; 0x30
 8001826:	9327      	str	r3, [sp, #156]	; 0x9c
 8001828:	4668      	mov	r0, sp
 800182a:	f104 0310 	add.w	r3, r4, #16
 800182e:	229c      	movs	r2, #156	; 0x9c
 8001830:	4619      	mov	r1, r3
 8001832:	f007 fec5 	bl	80095c0 <memcpy>
 8001836:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800183a:	f000 fe37 	bl	80024ac <bno055_read_regs>
 800183e:	4603      	mov	r3, r0
 8001840:	75fb      	strb	r3, [r7, #23]
 8001842:	7dfb      	ldrb	r3, [r7, #23]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <bno055_gravity_y+0x54>
        return err;
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	e01b      	b.n	8001884 <bno055_gravity_y+0x8c>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <bno055_gravity_y+0x60>
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <bno055_gravity_y+0x94>)
 8001856:	e001      	b.n	800185c <bno055_gravity_y+0x64>
 8001858:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800185c:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 800185e:	7b7b      	ldrb	r3, [r7, #13]
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	b21a      	sxth	r2, r3
 8001864:	7b3b      	ldrb	r3, [r7, #12]
 8001866:	b21b      	sxth	r3, r3
 8001868:	4313      	orrs	r3, r2
 800186a:	b21b      	sxth	r3, r3
 800186c:	ee07 3a90 	vmov	s15, r3
 8001870:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001874:	ed97 7a04 	vldr	s14, [r7, #16]
 8001878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	371c      	adds	r7, #28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd90      	pop	{r4, r7, pc}
 800188c:	42c80000 	.word	0x42c80000

08001890 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b0b1      	sub	sp, #196	; 0xc4
 8001894:	af2a      	add	r7, sp, #168	; 0xa8
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800189a:	2100      	movs	r1, #0
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 fe68 	bl	8002572 <bno055_set_page>
 80018a2:	4603      	mov	r3, r0
 80018a4:	75fb      	strb	r3, [r7, #23]
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <bno055_gravity_z+0x20>
        return err;
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	e035      	b.n	800191c <bno055_gravity_z+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80018b0:	687c      	ldr	r4, [r7, #4]
 80018b2:	2302      	movs	r3, #2
 80018b4:	9329      	str	r3, [sp, #164]	; 0xa4
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	9328      	str	r3, [sp, #160]	; 0xa0
 80018bc:	2332      	movs	r3, #50	; 0x32
 80018be:	9327      	str	r3, [sp, #156]	; 0x9c
 80018c0:	4668      	mov	r0, sp
 80018c2:	f104 0310 	add.w	r3, r4, #16
 80018c6:	229c      	movs	r2, #156	; 0x9c
 80018c8:	4619      	mov	r1, r3
 80018ca:	f007 fe79 	bl	80095c0 <memcpy>
 80018ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018d2:	f000 fdeb 	bl	80024ac <bno055_read_regs>
 80018d6:	4603      	mov	r3, r0
 80018d8:	75fb      	strb	r3, [r7, #23]
 80018da:	7dfb      	ldrb	r3, [r7, #23]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <bno055_gravity_z+0x54>
        return err;
 80018e0:	7dfb      	ldrb	r3, [r7, #23]
 80018e2:	e01b      	b.n	800191c <bno055_gravity_z+0x8c>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <bno055_gravity_z+0x60>
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <bno055_gravity_z+0x94>)
 80018ee:	e001      	b.n	80018f4 <bno055_gravity_z+0x64>
 80018f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80018f4:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80018f6:	7b7b      	ldrb	r3, [r7, #13]
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	b21a      	sxth	r2, r3
 80018fc:	7b3b      	ldrb	r3, [r7, #12]
 80018fe:	b21b      	sxth	r3, r3
 8001900:	4313      	orrs	r3, r2
 8001902:	b21b      	sxth	r3, r3
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800190c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd90      	pop	{r4, r7, pc}
 8001924:	42c80000 	.word	0x42c80000

08001928 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b0b1      	sub	sp, #196	; 0xc4
 800192c:	af2a      	add	r7, sp, #168	; 0xa8
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001932:	2100      	movs	r1, #0
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fe1c 	bl	8002572 <bno055_set_page>
 800193a:	4603      	mov	r3, r0
 800193c:	75fb      	strb	r3, [r7, #23]
 800193e:	7dfb      	ldrb	r3, [r7, #23]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <bno055_gravity+0x20>
        return err;
 8001944:	7dfb      	ldrb	r3, [r7, #23]
 8001946:	e059      	b.n	80019fc <bno055_gravity+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001948:	687c      	ldr	r4, [r7, #4]
 800194a:	2306      	movs	r3, #6
 800194c:	9329      	str	r3, [sp, #164]	; 0xa4
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	9328      	str	r3, [sp, #160]	; 0xa0
 8001954:	232e      	movs	r3, #46	; 0x2e
 8001956:	9327      	str	r3, [sp, #156]	; 0x9c
 8001958:	4668      	mov	r0, sp
 800195a:	f104 0310 	add.w	r3, r4, #16
 800195e:	229c      	movs	r2, #156	; 0x9c
 8001960:	4619      	mov	r1, r3
 8001962:	f007 fe2d 	bl	80095c0 <memcpy>
 8001966:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800196a:	f000 fd9f 	bl	80024ac <bno055_read_regs>
 800196e:	4603      	mov	r3, r0
 8001970:	75fb      	strb	r3, [r7, #23]
 8001972:	7dfb      	ldrb	r3, [r7, #23]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <bno055_gravity+0x54>
        return err;
 8001978:	7dfb      	ldrb	r3, [r7, #23]
 800197a:	e03f      	b.n	80019fc <bno055_gravity+0xd4>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <bno055_gravity+0x60>
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <bno055_gravity+0xdc>)
 8001986:	e001      	b.n	800198c <bno055_gravity+0x64>
 8001988:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800198c:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 800198e:	7a7b      	ldrb	r3, [r7, #9]
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	b21a      	sxth	r2, r3
 8001994:	7a3b      	ldrb	r3, [r7, #8]
 8001996:	b21b      	sxth	r3, r3
 8001998:	4313      	orrs	r3, r2
 800199a:	b21b      	sxth	r3, r3
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80019a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 80019b2:	7afb      	ldrb	r3, [r7, #11]
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	b21a      	sxth	r2, r3
 80019b8:	7abb      	ldrb	r3, [r7, #10]
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	4313      	orrs	r3, r2
 80019be:	b21b      	sxth	r3, r3
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80019cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 80019d6:	7b7b      	ldrb	r3, [r7, #13]
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	b21a      	sxth	r2, r3
 80019dc:	7b3b      	ldrb	r3, [r7, #12]
 80019de:	b21b      	sxth	r3, r3
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80019f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd90      	pop	{r4, r7, pc}
 8001a04:	42c80000 	.word	0x42c80000

08001a08 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b0b1      	sub	sp, #196	; 0xc4
 8001a0c:	af2a      	add	r7, sp, #168	; 0xa8
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001a12:	2100      	movs	r1, #0
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fdac 	bl	8002572 <bno055_set_page>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	75fb      	strb	r3, [r7, #23]
 8001a1e:	7dfb      	ldrb	r3, [r7, #23]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <bno055_euler_yaw+0x20>
        return err;
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	e035      	b.n	8001a94 <bno055_euler_yaw+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001a28:	687c      	ldr	r4, [r7, #4]
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a34:	231a      	movs	r3, #26
 8001a36:	9327      	str	r3, [sp, #156]	; 0x9c
 8001a38:	4668      	mov	r0, sp
 8001a3a:	f104 0310 	add.w	r3, r4, #16
 8001a3e:	229c      	movs	r2, #156	; 0x9c
 8001a40:	4619      	mov	r1, r3
 8001a42:	f007 fdbd 	bl	80095c0 <memcpy>
 8001a46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a4a:	f000 fd2f 	bl	80024ac <bno055_read_regs>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	75fb      	strb	r3, [r7, #23]
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <bno055_euler_yaw+0x54>
        BNO_OK) {
        return err;
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
 8001a5a:	e01b      	b.n	8001a94 <bno055_euler_yaw+0x8c>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <bno055_euler_yaw+0x62>
 8001a64:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001a68:	e000      	b.n	8001a6c <bno055_euler_yaw+0x64>
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <bno055_euler_yaw+0x94>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001a6c:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001a6e:	7b7b      	ldrb	r3, [r7, #13]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	7b3b      	ldrb	r3, [r7, #12]
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a84:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd90      	pop	{r4, r7, pc}
 8001a9c:	44610000 	.word	0x44610000

08001aa0 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b0b1      	sub	sp, #196	; 0xc4
 8001aa4:	af2a      	add	r7, sp, #168	; 0xa8
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001aaa:	2100      	movs	r1, #0
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 fd60 	bl	8002572 <bno055_set_page>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	75fb      	strb	r3, [r7, #23]
 8001ab6:	7dfb      	ldrb	r3, [r7, #23]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <bno055_euler_roll+0x20>
        return err;
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	e035      	b.n	8001b2c <bno055_euler_roll+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001ac0:	687c      	ldr	r4, [r7, #4]
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	9329      	str	r3, [sp, #164]	; 0xa4
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	9328      	str	r3, [sp, #160]	; 0xa0
 8001acc:	231c      	movs	r3, #28
 8001ace:	9327      	str	r3, [sp, #156]	; 0x9c
 8001ad0:	4668      	mov	r0, sp
 8001ad2:	f104 0310 	add.w	r3, r4, #16
 8001ad6:	229c      	movs	r2, #156	; 0x9c
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f007 fd71 	bl	80095c0 <memcpy>
 8001ade:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ae2:	f000 fce3 	bl	80024ac <bno055_read_regs>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	75fb      	strb	r3, [r7, #23]
 8001aea:	7dfb      	ldrb	r3, [r7, #23]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <bno055_euler_roll+0x54>
        return err;
 8001af0:	7dfb      	ldrb	r3, [r7, #23]
 8001af2:	e01b      	b.n	8001b2c <bno055_euler_roll+0x8c>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <bno055_euler_roll+0x62>
 8001afc:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001b00:	e000      	b.n	8001b04 <bno055_euler_roll+0x64>
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <bno055_euler_roll+0x94>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001b04:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001b06:	7b7b      	ldrb	r3, [r7, #13]
 8001b08:	021b      	lsls	r3, r3, #8
 8001b0a:	b21a      	sxth	r2, r3
 8001b0c:	7b3b      	ldrb	r3, [r7, #12]
 8001b0e:	b21b      	sxth	r3, r3
 8001b10:	4313      	orrs	r3, r2
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b1c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	371c      	adds	r7, #28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd90      	pop	{r4, r7, pc}
 8001b34:	44610000 	.word	0x44610000

08001b38 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b0b1      	sub	sp, #196	; 0xc4
 8001b3c:	af2a      	add	r7, sp, #168	; 0xa8
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001b42:	2100      	movs	r1, #0
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 fd14 	bl	8002572 <bno055_set_page>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	75fb      	strb	r3, [r7, #23]
 8001b4e:	7dfb      	ldrb	r3, [r7, #23]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <bno055_euler_pitch+0x20>
        return err;
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	e035      	b.n	8001bc4 <bno055_euler_pitch+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8001b58:	687c      	ldr	r4, [r7, #4]
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b64:	231e      	movs	r3, #30
 8001b66:	9327      	str	r3, [sp, #156]	; 0x9c
 8001b68:	4668      	mov	r0, sp
 8001b6a:	f104 0310 	add.w	r3, r4, #16
 8001b6e:	229c      	movs	r2, #156	; 0x9c
 8001b70:	4619      	mov	r1, r3
 8001b72:	f007 fd25 	bl	80095c0 <memcpy>
 8001b76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b7a:	f000 fc97 	bl	80024ac <bno055_read_regs>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	75fb      	strb	r3, [r7, #23]
 8001b82:	7dfb      	ldrb	r3, [r7, #23]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <bno055_euler_pitch+0x54>
        return err;
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
 8001b8a:	e01b      	b.n	8001bc4 <bno055_euler_pitch+0x8c>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <bno055_euler_pitch+0x62>
 8001b94:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001b98:	e000      	b.n	8001b9c <bno055_euler_pitch+0x64>
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <bno055_euler_pitch+0x94>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001b9c:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001b9e:	7b7b      	ldrb	r3, [r7, #13]
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	b21a      	sxth	r2, r3
 8001ba4:	7b3b      	ldrb	r3, [r7, #12]
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bb4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	371c      	adds	r7, #28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}
 8001bcc:	44610000 	.word	0x44610000

08001bd0 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b0b1      	sub	sp, #196	; 0xc4
 8001bd4:	af2a      	add	r7, sp, #168	; 0xa8
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001bda:	2100      	movs	r1, #0
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 fcc8 	bl	8002572 <bno055_set_page>
 8001be2:	4603      	mov	r3, r0
 8001be4:	75fb      	strb	r3, [r7, #23]
 8001be6:	7dfb      	ldrb	r3, [r7, #23]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <bno055_euler+0x20>
        return err;
 8001bec:	7dfb      	ldrb	r3, [r7, #23]
 8001bee:	e059      	b.n	8001ca4 <bno055_euler+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8001bf0:	687c      	ldr	r4, [r7, #4]
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	9329      	str	r3, [sp, #164]	; 0xa4
 8001bf6:	f107 0308 	add.w	r3, r7, #8
 8001bfa:	9328      	str	r3, [sp, #160]	; 0xa0
 8001bfc:	231a      	movs	r3, #26
 8001bfe:	9327      	str	r3, [sp, #156]	; 0x9c
 8001c00:	4668      	mov	r0, sp
 8001c02:	f104 0310 	add.w	r3, r4, #16
 8001c06:	229c      	movs	r2, #156	; 0x9c
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f007 fcd9 	bl	80095c0 <memcpy>
 8001c0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c12:	f000 fc4b 	bl	80024ac <bno055_read_regs>
 8001c16:	4603      	mov	r3, r0
 8001c18:	75fb      	strb	r3, [r7, #23]
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <bno055_euler+0x54>
        BNO_OK) {
        return err;
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
 8001c22:	e03f      	b.n	8001ca4 <bno055_euler+0xd4>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d102      	bne.n	8001c32 <bno055_euler+0x62>
 8001c2c:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001c30:	e000      	b.n	8001c34 <bno055_euler+0x64>
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <bno055_euler+0xdc>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001c34:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8001c36:	7a7b      	ldrb	r3, [r7, #9]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	b21a      	sxth	r2, r3
 8001c3c:	7a3b      	ldrb	r3, [r7, #8]
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	4313      	orrs	r3, r2
 8001c42:	b21b      	sxth	r3, r3
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c4c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001c5a:	7afb      	ldrb	r3, [r7, #11]
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	b21a      	sxth	r2, r3
 8001c60:	7abb      	ldrb	r3, [r7, #10]
 8001c62:	b21b      	sxth	r3, r3
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c70:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8001c7e:	7b7b      	ldrb	r3, [r7, #13]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	7b3b      	ldrb	r3, [r7, #12]
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c94:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd90      	pop	{r4, r7, pc}
 8001cac:	44610000 	.word	0x44610000

08001cb0 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b0af      	sub	sp, #188	; 0xbc
 8001cb4:	af2a      	add	r7, sp, #168	; 0xa8
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001cba:	2100      	movs	r1, #0
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fc58 	bl	8002572 <bno055_set_page>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	73fb      	strb	r3, [r7, #15]
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <bno055_quaternion_w+0x20>
        return err;
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	e02c      	b.n	8001d2a <bno055_quaternion_w+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8001cd0:	687c      	ldr	r4, [r7, #4]
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	9329      	str	r3, [sp, #164]	; 0xa4
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	9328      	str	r3, [sp, #160]	; 0xa0
 8001cdc:	2320      	movs	r3, #32
 8001cde:	9327      	str	r3, [sp, #156]	; 0x9c
 8001ce0:	4668      	mov	r0, sp
 8001ce2:	f104 0310 	add.w	r3, r4, #16
 8001ce6:	229c      	movs	r2, #156	; 0x9c
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f007 fc69 	bl	80095c0 <memcpy>
 8001cee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cf2:	f000 fbdb 	bl	80024ac <bno055_read_regs>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	73fb      	strb	r3, [r7, #15]
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <bno055_quaternion_w+0x54>
        return err;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	e012      	b.n	8001d2a <bno055_quaternion_w+0x7a>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001d04:	7b7b      	ldrb	r3, [r7, #13]
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	b21a      	sxth	r2, r3
 8001d0a:	7b3b      	ldrb	r3, [r7, #12]
 8001d0c:	b21b      	sxth	r3, r3
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d1a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001d34 <bno055_quaternion_w+0x84>
 8001d1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd90      	pop	{r4, r7, pc}
 8001d32:	bf00      	nop
 8001d34:	46800000 	.word	0x46800000

08001d38 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b0af      	sub	sp, #188	; 0xbc
 8001d3c:	af2a      	add	r7, sp, #168	; 0xa8
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001d42:	2100      	movs	r1, #0
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fc14 	bl	8002572 <bno055_set_page>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <bno055_quaternion_x+0x20>
        return err;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	e02c      	b.n	8001db2 <bno055_quaternion_x+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001d58:	687c      	ldr	r4, [r7, #4]
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	9329      	str	r3, [sp, #164]	; 0xa4
 8001d5e:	f107 030c 	add.w	r3, r7, #12
 8001d62:	9328      	str	r3, [sp, #160]	; 0xa0
 8001d64:	2322      	movs	r3, #34	; 0x22
 8001d66:	9327      	str	r3, [sp, #156]	; 0x9c
 8001d68:	4668      	mov	r0, sp
 8001d6a:	f104 0310 	add.w	r3, r4, #16
 8001d6e:	229c      	movs	r2, #156	; 0x9c
 8001d70:	4619      	mov	r1, r3
 8001d72:	f007 fc25 	bl	80095c0 <memcpy>
 8001d76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d7a:	f000 fb97 	bl	80024ac <bno055_read_regs>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	73fb      	strb	r3, [r7, #15]
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <bno055_quaternion_x+0x54>
        return err;
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	e012      	b.n	8001db2 <bno055_quaternion_x+0x7a>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001d8c:	7b7b      	ldrb	r3, [r7, #13]
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	b21a      	sxth	r2, r3
 8001d92:	7b3b      	ldrb	r3, [r7, #12]
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	4313      	orrs	r3, r2
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da2:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001dbc <bno055_quaternion_x+0x84>
 8001da6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd90      	pop	{r4, r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	46800000 	.word	0x46800000

08001dc0 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b0af      	sub	sp, #188	; 0xbc
 8001dc4:	af2a      	add	r7, sp, #168	; 0xa8
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001dca:	2100      	movs	r1, #0
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fbd0 	bl	8002572 <bno055_set_page>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	73fb      	strb	r3, [r7, #15]
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <bno055_quaternion_y+0x20>
        return err;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	e02c      	b.n	8001e3a <bno055_quaternion_y+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001de0:	687c      	ldr	r4, [r7, #4]
 8001de2:	2302      	movs	r3, #2
 8001de4:	9329      	str	r3, [sp, #164]	; 0xa4
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	9328      	str	r3, [sp, #160]	; 0xa0
 8001dec:	2324      	movs	r3, #36	; 0x24
 8001dee:	9327      	str	r3, [sp, #156]	; 0x9c
 8001df0:	4668      	mov	r0, sp
 8001df2:	f104 0310 	add.w	r3, r4, #16
 8001df6:	229c      	movs	r2, #156	; 0x9c
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f007 fbe1 	bl	80095c0 <memcpy>
 8001dfe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e02:	f000 fb53 	bl	80024ac <bno055_read_regs>
 8001e06:	4603      	mov	r3, r0
 8001e08:	73fb      	strb	r3, [r7, #15]
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <bno055_quaternion_y+0x54>
        return err;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	e012      	b.n	8001e3a <bno055_quaternion_y+0x7a>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001e14:	7b7b      	ldrb	r3, [r7, #13]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	b21a      	sxth	r2, r3
 8001e1a:	7b3b      	ldrb	r3, [r7, #12]
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e2a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001e44 <bno055_quaternion_y+0x84>
 8001e2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd90      	pop	{r4, r7, pc}
 8001e42:	bf00      	nop
 8001e44:	46800000 	.word	0x46800000

08001e48 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b0af      	sub	sp, #188	; 0xbc
 8001e4c:	af2a      	add	r7, sp, #168	; 0xa8
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001e52:	2100      	movs	r1, #0
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 fb8c 	bl	8002572 <bno055_set_page>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <bno055_quaternion_z+0x20>
        return err;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	e02c      	b.n	8001ec2 <bno055_quaternion_z+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001e68:	687c      	ldr	r4, [r7, #4]
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e6e:	f107 030c 	add.w	r3, r7, #12
 8001e72:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e74:	2326      	movs	r3, #38	; 0x26
 8001e76:	9327      	str	r3, [sp, #156]	; 0x9c
 8001e78:	4668      	mov	r0, sp
 8001e7a:	f104 0310 	add.w	r3, r4, #16
 8001e7e:	229c      	movs	r2, #156	; 0x9c
 8001e80:	4619      	mov	r1, r3
 8001e82:	f007 fb9d 	bl	80095c0 <memcpy>
 8001e86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e8a:	f000 fb0f 	bl	80024ac <bno055_read_regs>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	73fb      	strb	r3, [r7, #15]
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <bno055_quaternion_z+0x54>
        return err;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	e012      	b.n	8001ec2 <bno055_quaternion_z+0x7a>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001e9c:	7b7b      	ldrb	r3, [r7, #13]
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	b21a      	sxth	r2, r3
 8001ea2:	7b3b      	ldrb	r3, [r7, #12]
 8001ea4:	b21b      	sxth	r3, r3
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eb2:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001ecc <bno055_quaternion_z+0x84>
 8001eb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd90      	pop	{r4, r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	46800000 	.word	0x46800000

08001ed0 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b0b1      	sub	sp, #196	; 0xc4
 8001ed4:	af2a      	add	r7, sp, #168	; 0xa8
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001eda:	2100      	movs	r1, #0
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fb48 	bl	8002572 <bno055_set_page>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	75fb      	strb	r3, [r7, #23]
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <bno055_quaternion+0x20>
        return err;
 8001eec:	7dfb      	ldrb	r3, [r7, #23]
 8001eee:	e062      	b.n	8001fb6 <bno055_quaternion+0xe6>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 8001ef0:	687c      	ldr	r4, [r7, #4]
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	9329      	str	r3, [sp, #164]	; 0xa4
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	9328      	str	r3, [sp, #160]	; 0xa0
 8001efc:	2320      	movs	r3, #32
 8001efe:	9327      	str	r3, [sp, #156]	; 0x9c
 8001f00:	4668      	mov	r0, sp
 8001f02:	f104 0310 	add.w	r3, r4, #16
 8001f06:	229c      	movs	r2, #156	; 0x9c
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f007 fb59 	bl	80095c0 <memcpy>
 8001f0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f12:	f000 facb 	bl	80024ac <bno055_read_regs>
 8001f16:	4603      	mov	r3, r0
 8001f18:	75fb      	strb	r3, [r7, #23]
 8001f1a:	7dfb      	ldrb	r3, [r7, #23]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <bno055_quaternion+0x54>
        return err;
 8001f20:	7dfb      	ldrb	r3, [r7, #23]
 8001f22:	e048      	b.n	8001fb6 <bno055_quaternion+0xe6>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001f24:	7b7b      	ldrb	r3, [r7, #13]
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	b21a      	sxth	r2, r3
 8001f2a:	7b3b      	ldrb	r3, [r7, #12]
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f3a:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001fc0 <bno055_quaternion+0xf0>
 8001f3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	b21a      	sxth	r2, r3
 8001f4e:	7bbb      	ldrb	r3, [r7, #14]
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	4313      	orrs	r3, r2
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f5e:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001fc0 <bno055_quaternion+0xf0>
 8001f62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 8001f6c:	7c7b      	ldrb	r3, [r7, #17]
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	b21a      	sxth	r2, r3
 8001f72:	7c3b      	ldrb	r3, [r7, #16]
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f82:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001fc0 <bno055_quaternion+0xf0>
 8001f86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 8001f90:	7cfb      	ldrb	r3, [r7, #19]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	b21a      	sxth	r2, r3
 8001f96:	7cbb      	ldrb	r3, [r7, #18]
 8001f98:	b21b      	sxth	r3, r3
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa6:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001fc0 <bno055_quaternion+0xf0>
 8001faa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd90      	pop	{r4, r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	46800000 	.word	0x46800000

08001fc4 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b0af      	sub	sp, #188	; 0xbc
 8001fc8:	af2a      	add	r7, sp, #168	; 0xa8
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	4608      	mov	r0, r1
 8001fce:	4611      	mov	r1, r2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	70fb      	strb	r3, [r7, #3]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	70bb      	strb	r3, [r7, #2]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8001fde:	2101      	movs	r1, #1
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fac6 	bl	8002572 <bno055_set_page>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	73fb      	strb	r3, [r7, #15]
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <bno055_acc_conf+0x30>
        return err;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	e04b      	b.n	800208c <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f91b 	bl	8002232 <bno055_set_opmode>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <bno055_acc_conf+0x46>
        return err;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	e040      	b.n	800208c <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800200a:	200c      	movs	r0, #12
 800200c:	f001 f9bc 	bl	8003388 <HAL_Delay>
    u8 config = range | bandwidth | mode;
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	78bb      	ldrb	r3, [r7, #2]
 8002014:	4313      	orrs	r3, r2
 8002016:	b2da      	uxtb	r2, r3
 8002018:	787b      	ldrb	r3, [r7, #1]
 800201a:	4313      	orrs	r3, r2
 800201c:	b2db      	uxtb	r3, r3
 800201e:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 8002020:	687c      	ldr	r4, [r7, #4]
 8002022:	2301      	movs	r3, #1
 8002024:	9329      	str	r3, [sp, #164]	; 0xa4
 8002026:	f107 030e 	add.w	r3, r7, #14
 800202a:	9328      	str	r3, [sp, #160]	; 0xa0
 800202c:	2308      	movs	r3, #8
 800202e:	9327      	str	r3, [sp, #156]	; 0x9c
 8002030:	4668      	mov	r0, sp
 8002032:	f104 0310 	add.w	r3, r4, #16
 8002036:	229c      	movs	r2, #156	; 0x9c
 8002038:	4619      	mov	r1, r3
 800203a:	f007 fac1 	bl	80095c0 <memcpy>
 800203e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002042:	f000 fa69 	bl	8002518 <bno055_write_regs>
 8002046:	4603      	mov	r3, r0
 8002048:	73fb      	strb	r3, [r7, #15]
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <bno055_acc_conf+0x90>
        return err;
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	e01b      	b.n	800208c <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	791b      	ldrb	r3, [r3, #4]
 8002058:	4619      	mov	r1, r3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8e9 	bl	8002232 <bno055_set_opmode>
 8002060:	4603      	mov	r3, r0
 8002062:	73fb      	strb	r3, [r7, #15]
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <bno055_acc_conf+0xaa>
        return err;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	e00e      	b.n	800208c <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800206e:	2018      	movs	r0, #24
 8002070:	f001 f98a 	bl	8003388 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002074:	2100      	movs	r1, #0
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 fa7b 	bl	8002572 <bno055_set_page>
 800207c:	4603      	mov	r3, r0
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <bno055_acc_conf+0xc6>
        return err;
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	e000      	b.n	800208c <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	bd90      	pop	{r4, r7, pc}

08002094 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b0af      	sub	sp, #188	; 0xbc
 8002098:	af2a      	add	r7, sp, #168	; 0xa8
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	4608      	mov	r0, r1
 800209e:	4611      	mov	r1, r2
 80020a0:	461a      	mov	r2, r3
 80020a2:	4603      	mov	r3, r0
 80020a4:	70fb      	strb	r3, [r7, #3]
 80020a6:	460b      	mov	r3, r1
 80020a8:	70bb      	strb	r3, [r7, #2]
 80020aa:	4613      	mov	r3, r2
 80020ac:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 80020ae:	2101      	movs	r1, #1
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 fa5e 	bl	8002572 <bno055_set_page>
 80020b6:	4603      	mov	r3, r0
 80020b8:	73fb      	strb	r3, [r7, #15]
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <bno055_gyr_conf+0x30>
        return err;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	e04a      	b.n	800215a <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80020c4:	2100      	movs	r1, #0
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f8b3 	bl	8002232 <bno055_set_opmode>
 80020cc:	4603      	mov	r3, r0
 80020ce:	73fb      	strb	r3, [r7, #15]
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <bno055_gyr_conf+0x46>
        return err;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	e03f      	b.n	800215a <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80020da:	200c      	movs	r0, #12
 80020dc:	f001 f954 	bl	8003388 <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 80020e0:	78fa      	ldrb	r2, [r7, #3]
 80020e2:	78bb      	ldrb	r3, [r7, #2]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	733b      	strb	r3, [r7, #12]
 80020ea:	787b      	ldrb	r3, [r7, #1]
 80020ec:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 80020ee:	687c      	ldr	r4, [r7, #4]
 80020f0:	2302      	movs	r3, #2
 80020f2:	9329      	str	r3, [sp, #164]	; 0xa4
 80020f4:	f107 030c 	add.w	r3, r7, #12
 80020f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80020fa:	230a      	movs	r3, #10
 80020fc:	9327      	str	r3, [sp, #156]	; 0x9c
 80020fe:	4668      	mov	r0, sp
 8002100:	f104 0310 	add.w	r3, r4, #16
 8002104:	229c      	movs	r2, #156	; 0x9c
 8002106:	4619      	mov	r1, r3
 8002108:	f007 fa5a 	bl	80095c0 <memcpy>
 800210c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002110:	f000 fa02 	bl	8002518 <bno055_write_regs>
 8002114:	4603      	mov	r3, r0
 8002116:	73fb      	strb	r3, [r7, #15]
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	e01b      	b.n	800215a <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	791b      	ldrb	r3, [r3, #4]
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f882 	bl	8002232 <bno055_set_opmode>
 800212e:	4603      	mov	r3, r0
 8002130:	73fb      	strb	r3, [r7, #15]
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <bno055_gyr_conf+0xa8>
        return err;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	e00e      	b.n	800215a <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800213c:	2018      	movs	r0, #24
 800213e:	f001 f923 	bl	8003388 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002142:	2100      	movs	r1, #0
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fa14 	bl	8002572 <bno055_set_page>
 800214a:	4603      	mov	r3, r0
 800214c:	73fb      	strb	r3, [r7, #15]
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <bno055_gyr_conf+0xc4>
        return err;
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	e000      	b.n	800215a <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	bd90      	pop	{r4, r7, pc}

08002162 <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 8002162:	b590      	push	{r4, r7, lr}
 8002164:	b0af      	sub	sp, #188	; 0xbc
 8002166:	af2a      	add	r7, sp, #168	; 0xa8
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	4608      	mov	r0, r1
 800216c:	4611      	mov	r1, r2
 800216e:	461a      	mov	r2, r3
 8002170:	4603      	mov	r3, r0
 8002172:	70fb      	strb	r3, [r7, #3]
 8002174:	460b      	mov	r3, r1
 8002176:	70bb      	strb	r3, [r7, #2]
 8002178:	4613      	mov	r3, r2
 800217a:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800217c:	2101      	movs	r1, #1
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f9f7 	bl	8002572 <bno055_set_page>
 8002184:	4603      	mov	r3, r0
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <bno055_mag_conf+0x30>
        return err;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	e04b      	b.n	800222a <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002192:	2100      	movs	r1, #0
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f84c 	bl	8002232 <bno055_set_opmode>
 800219a:	4603      	mov	r3, r0
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <bno055_mag_conf+0x46>
        return err;
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	e040      	b.n	800222a <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80021a8:	200c      	movs	r0, #12
 80021aa:	f001 f8ed 	bl	8003388 <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	78bb      	ldrb	r3, [r7, #2]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	787b      	ldrb	r3, [r7, #1]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 80021be:	687c      	ldr	r4, [r7, #4]
 80021c0:	2301      	movs	r3, #1
 80021c2:	9329      	str	r3, [sp, #164]	; 0xa4
 80021c4:	f107 030e 	add.w	r3, r7, #14
 80021c8:	9328      	str	r3, [sp, #160]	; 0xa0
 80021ca:	2309      	movs	r3, #9
 80021cc:	9327      	str	r3, [sp, #156]	; 0x9c
 80021ce:	4668      	mov	r0, sp
 80021d0:	f104 0310 	add.w	r3, r4, #16
 80021d4:	229c      	movs	r2, #156	; 0x9c
 80021d6:	4619      	mov	r1, r3
 80021d8:	f007 f9f2 	bl	80095c0 <memcpy>
 80021dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021e0:	f000 f99a 	bl	8002518 <bno055_write_regs>
 80021e4:	4603      	mov	r3, r0
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <bno055_mag_conf+0x90>
        return err;
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	e01b      	b.n	800222a <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	791b      	ldrb	r3, [r3, #4]
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f81a 	bl	8002232 <bno055_set_opmode>
 80021fe:	4603      	mov	r3, r0
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <bno055_mag_conf+0xaa>
        return err;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	e00e      	b.n	800222a <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800220c:	2018      	movs	r0, #24
 800220e:	f001 f8bb 	bl	8003388 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002212:	2100      	movs	r1, #0
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f9ac 	bl	8002572 <bno055_set_page>
 800221a:	4603      	mov	r3, r0
 800221c:	73fb      	strb	r3, [r7, #15]
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <bno055_mag_conf+0xc6>
        return err;
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	e000      	b.n	800222a <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bd90      	pop	{r4, r7, pc}

08002232 <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 8002232:	b590      	push	{r4, r7, lr}
 8002234:	b0af      	sub	sp, #188	; 0xbc
 8002236:	af2a      	add	r7, sp, #168	; 0xa8
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	460b      	mov	r3, r1
 800223c:	70fb      	strb	r3, [r7, #3]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800223e:	2100      	movs	r1, #0
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f996 	bl	8002572 <bno055_set_page>
 8002246:	4603      	mov	r3, r0
 8002248:	73fb      	strb	r3, [r7, #15]
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <bno055_set_opmode+0x22>
        return err;
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	e01c      	b.n	800228e <bno055_set_opmode+0x5c>
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 8002254:	687c      	ldr	r4, [r7, #4]
 8002256:	2301      	movs	r3, #1
 8002258:	9329      	str	r3, [sp, #164]	; 0xa4
 800225a:	1cfb      	adds	r3, r7, #3
 800225c:	9328      	str	r3, [sp, #160]	; 0xa0
 800225e:	233d      	movs	r3, #61	; 0x3d
 8002260:	9327      	str	r3, [sp, #156]	; 0x9c
 8002262:	4668      	mov	r0, sp
 8002264:	f104 0310 	add.w	r3, r4, #16
 8002268:	229c      	movs	r2, #156	; 0x9c
 800226a:	4619      	mov	r1, r3
 800226c:	f007 f9a8 	bl	80095c0 <memcpy>
 8002270:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002274:	f000 f950 	bl	8002518 <bno055_write_regs>
 8002278:	4603      	mov	r3, r0
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <bno055_set_opmode+0x54>
        BNO_OK) {
        return err;
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	e003      	b.n	800228e <bno055_set_opmode+0x5c>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002286:	2018      	movs	r0, #24
 8002288:	f001 f87e 	bl	8003388 <HAL_Delay>
    return BNO_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	bd90      	pop	{r4, r7, pc}

08002296 <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 8002296:	b590      	push	{r4, r7, lr}
 8002298:	b0af      	sub	sp, #188	; 0xbc
 800229a:	af2a      	add	r7, sp, #168	; 0xa8
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	4608      	mov	r0, r1
 80022a0:	4611      	mov	r1, r2
 80022a2:	461a      	mov	r2, r3
 80022a4:	4603      	mov	r3, r0
 80022a6:	70fb      	strb	r3, [r7, #3]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70bb      	strb	r3, [r7, #2]
 80022ac:	4613      	mov	r3, r2
 80022ae:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80022b0:	2100      	movs	r1, #0
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ffbd 	bl	8002232 <bno055_set_opmode>
 80022b8:	4603      	mov	r3, r0
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <bno055_set_unit+0x30>
        return err;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	e04b      	b.n	800235e <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80022c6:	2100      	movs	r1, #0
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f952 	bl	8002572 <bno055_set_page>
 80022ce:	4603      	mov	r3, r0
 80022d0:	73fb      	strb	r3, [r7, #15]
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <bno055_set_unit+0x46>
        return err;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	e040      	b.n	800235e <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	78bb      	ldrb	r3, [r7, #2]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	787b      	ldrb	r3, [r7, #1]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 80022f4:	687c      	ldr	r4, [r7, #4]
 80022f6:	2301      	movs	r3, #1
 80022f8:	9329      	str	r3, [sp, #164]	; 0xa4
 80022fa:	f107 030e 	add.w	r3, r7, #14
 80022fe:	9328      	str	r3, [sp, #160]	; 0xa0
 8002300:	233b      	movs	r3, #59	; 0x3b
 8002302:	9327      	str	r3, [sp, #156]	; 0x9c
 8002304:	4668      	mov	r0, sp
 8002306:	f104 0310 	add.w	r3, r4, #16
 800230a:	229c      	movs	r2, #156	; 0x9c
 800230c:	4619      	mov	r1, r3
 800230e:	f007 f957 	bl	80095c0 <memcpy>
 8002312:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002316:	f000 f8ff 	bl	8002518 <bno055_write_regs>
 800231a:	4603      	mov	r3, r0
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <bno055_set_unit+0x92>
        return err;
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	e01a      	b.n	800235e <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	78ba      	ldrb	r2, [r7, #2]
 800232c:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	787a      	ldrb	r2, [r7, #1]
 8002332:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f897 2020 	ldrb.w	r2, [r7, #32]
 800233a:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	791b      	ldrb	r3, [r3, #4]
 8002346:	4619      	mov	r1, r3
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff72 	bl	8002232 <bno055_set_opmode>
 800234e:	4603      	mov	r3, r0
 8002350:	73fb      	strb	r3, [r7, #15]
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <bno055_set_unit+0xc6>
        return err;
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	e000      	b.n	800235e <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bd90      	pop	{r4, r7, pc}

08002366 <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 8002366:	b590      	push	{r4, r7, lr}
 8002368:	b0af      	sub	sp, #188	; 0xbc
 800236a:	af2a      	add	r7, sp, #168	; 0xa8
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	460b      	mov	r3, r1
 8002370:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 8002378:	2304      	movs	r3, #4
 800237a:	e04d      	b.n	8002418 <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 800237c:	2100      	movs	r1, #0
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff ff57 	bl	8002232 <bno055_set_opmode>
 8002384:	4603      	mov	r3, r0
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <bno055_set_pwr_mode+0x2c>
        return err;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	e042      	b.n	8002418 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002392:	2100      	movs	r1, #0
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f8ec 	bl	8002572 <bno055_set_page>
 800239a:	4603      	mov	r3, r0
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <bno055_set_pwr_mode+0x42>
        return err;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	e037      	b.n	8002418 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 80023a8:	687c      	ldr	r4, [r7, #4]
 80023aa:	2301      	movs	r3, #1
 80023ac:	9329      	str	r3, [sp, #164]	; 0xa4
 80023ae:	1cfb      	adds	r3, r7, #3
 80023b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80023b2:	233e      	movs	r3, #62	; 0x3e
 80023b4:	9327      	str	r3, [sp, #156]	; 0x9c
 80023b6:	4668      	mov	r0, sp
 80023b8:	f104 0310 	add.w	r3, r4, #16
 80023bc:	229c      	movs	r2, #156	; 0x9c
 80023be:	4619      	mov	r1, r3
 80023c0:	f007 f8fe 	bl	80095c0 <memcpy>
 80023c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023c8:	f000 f8a6 	bl	8002518 <bno055_write_regs>
 80023cc:	4603      	mov	r3, r0
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	e01e      	b.n	8002418 <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 80023da:	78fa      	ldrb	r2, [r7, #3]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80023e0:	2100      	movs	r1, #0
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f8c5 	bl	8002572 <bno055_set_page>
 80023e8:	4603      	mov	r3, r0
 80023ea:	73fb      	strb	r3, [r7, #15]
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <bno055_set_pwr_mode+0x90>
        return err;
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	e010      	b.n	8002418 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	791b      	ldrb	r3, [r3, #4]
 80023fa:	4619      	mov	r1, r3
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff18 	bl	8002232 <bno055_set_opmode>
 8002402:	4603      	mov	r3, r0
 8002404:	73fb      	strb	r3, [r7, #15]
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <bno055_set_pwr_mode+0xaa>
        return err;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	e003      	b.n	8002418 <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 8002410:	2002      	movs	r0, #2
 8002412:	f000 ffb9 	bl	8003388 <HAL_Delay>
    return BNO_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	bd90      	pop	{r4, r7, pc}

08002420 <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b0af      	sub	sp, #188	; 0xbc
 8002424:	af2a      	add	r7, sp, #168	; 0xa8
 8002426:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 8002428:	2320      	movs	r3, #32
 800242a:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 800242c:	687c      	ldr	r4, [r7, #4]
 800242e:	2301      	movs	r3, #1
 8002430:	9329      	str	r3, [sp, #164]	; 0xa4
 8002432:	f107 030f 	add.w	r3, r7, #15
 8002436:	9328      	str	r3, [sp, #160]	; 0xa0
 8002438:	233f      	movs	r3, #63	; 0x3f
 800243a:	9327      	str	r3, [sp, #156]	; 0x9c
 800243c:	4668      	mov	r0, sp
 800243e:	f104 0310 	add.w	r3, r4, #16
 8002442:	229c      	movs	r2, #156	; 0x9c
 8002444:	4619      	mov	r1, r3
 8002446:	f007 f8bb 	bl	80095c0 <memcpy>
 800244a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800244e:	f000 f863 	bl	8002518 <bno055_write_regs>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <bno055_reset+0x3e>
    }
    return BNO_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	bd90      	pop	{r4, r7, pc}

08002466 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 8002466:	b590      	push	{r4, r7, lr}
 8002468:	b0af      	sub	sp, #188	; 0xbc
 800246a:	af2a      	add	r7, sp, #168	; 0xa8
 800246c:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8002472:	687c      	ldr	r4, [r7, #4]
 8002474:	2301      	movs	r3, #1
 8002476:	9329      	str	r3, [sp, #164]	; 0xa4
 8002478:	f107 030f 	add.w	r3, r7, #15
 800247c:	9328      	str	r3, [sp, #160]	; 0xa0
 800247e:	233f      	movs	r3, #63	; 0x3f
 8002480:	9327      	str	r3, [sp, #156]	; 0x9c
 8002482:	4668      	mov	r0, sp
 8002484:	f104 0310 	add.w	r3, r4, #16
 8002488:	229c      	movs	r2, #156	; 0x9c
 800248a:	4619      	mov	r1, r3
 800248c:	f007 f898 	bl	80095c0 <memcpy>
 8002490:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002494:	f000 f840 	bl	8002518 <bno055_write_regs>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <bno055_on+0x3e>
    }
    return BNO_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd90      	pop	{r4, r7, pc}

080024ac <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 80024ac:	b084      	sub	sp, #16
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af02      	add	r7, sp, #8
 80024b4:	f107 0c10 	add.w	ip, r7, #16
 80024b8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 80024bc:	6938      	ldr	r0, [r7, #16]
 80024be:	7dbb      	ldrb	r3, [r7, #22]
 80024c0:	b299      	uxth	r1, r3
 80024c2:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2301      	movs	r3, #1
 80024ce:	f003 fd45 	bl	8005f5c <HAL_I2C_Master_Transmit>
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 80024dc:	2301      	movs	r3, #1
 80024de:	e014      	b.n	800250a <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 80024e0:	6938      	ldr	r0, [r7, #16]
 80024e2:	7dbb      	ldrb	r3, [r7, #22]
 80024e4:	b299      	uxth	r1, r3
 80024e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024f0:	9200      	str	r2, [sp, #0]
 80024f2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80024f6:	f003 fe25 	bl	8006144 <HAL_I2C_Master_Receive>
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002514:	b004      	add	sp, #16
 8002516:	4770      	bx	lr

08002518 <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 8002518:	b084      	sub	sp, #16
 800251a:	b5b0      	push	{r4, r5, r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af04      	add	r7, sp, #16
 8002520:	f107 0418 	add.w	r4, r7, #24
 8002524:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 8002528:	69b8      	ldr	r0, [r7, #24]
 800252a:	7fbb      	ldrb	r3, [r7, #30]
 800252c:	b299      	uxth	r1, r3
 800252e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002532:	b29a      	uxth	r2, r3
 8002534:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002538:	b29c      	uxth	r4, r3
 800253a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800253e:	b29b      	uxth	r3, r3
 8002540:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002544:	9502      	str	r5, [sp, #8]
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	4623      	mov	r3, r4
 8002550:	f003 feee 	bl	8006330 <HAL_I2C_Mem_Write>
 8002554:	4603      	mov	r3, r0
 8002556:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <bno055_write_regs+0x4a>
        return BNO_ERR_I2C;
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <bno055_write_regs+0x4c>
    }
    return BNO_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800256e:	b004      	add	sp, #16
 8002570:	4770      	bx	lr

08002572 <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 8002572:	b590      	push	{r4, r7, lr}
 8002574:	b0af      	sub	sp, #188	; 0xbc
 8002576:	af2a      	add	r7, sp, #168	; 0xa8
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7b5a      	ldrb	r2, [r3, #13]
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <bno055_set_page+0x1a>
        return BNO_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	e024      	b.n	80025d6 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d901      	bls.n	8002596 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 8002592:	2302      	movs	r3, #2
 8002594:	e01f      	b.n	80025d6 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 8002596:	687c      	ldr	r4, [r7, #4]
 8002598:	2301      	movs	r3, #1
 800259a:	9329      	str	r3, [sp, #164]	; 0xa4
 800259c:	1cfb      	adds	r3, r7, #3
 800259e:	9328      	str	r3, [sp, #160]	; 0xa0
 80025a0:	2307      	movs	r3, #7
 80025a2:	9327      	str	r3, [sp, #156]	; 0x9c
 80025a4:	4668      	mov	r0, sp
 80025a6:	f104 0310 	add.w	r3, r4, #16
 80025aa:	229c      	movs	r2, #156	; 0x9c
 80025ac:	4619      	mov	r1, r3
 80025ae:	f007 f807 	bl	80095c0 <memcpy>
 80025b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025b6:	f7ff ffaf 	bl	8002518 <bno055_write_regs>
 80025ba:	4603      	mov	r3, r0
 80025bc:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <bno055_set_page+0x56>
        return err;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	e006      	b.n	80025d6 <bno055_set_page+0x64>
    }
    imu->_page = page;
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 80025ce:	2002      	movs	r0, #2
 80025d0:	f000 feda 	bl	8003388 <HAL_Delay>
    return BNO_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd90      	pop	{r4, r7, pc}

080025de <comm_controller_init>:
#include "commcontroller.h"
#include <string.h>



void comm_controller_init(FDCAN_HandleTypeDef* fdcan, CommController *comm){
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]

	comm->fdcan = *fdcan;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	3350      	adds	r3, #80	; 0x50
 80025ee:	4611      	mov	r1, r2
 80025f0:	2264      	movs	r2, #100	; 0x64
 80025f2:	4618      	mov	r0, r3
 80025f4:	f006 ffe4 	bl	80095c0 <memcpy>
	comm->device_id = DEVICE_ID;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2214      	movs	r2, #20
 80025fc:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	comm->send_message = false;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
	comm->received_message = false;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2200      	movs	r2, #0
 800260a:	705a      	strb	r2, [r3, #1]

	comm->TxHeader.Identifier = comm->device_id;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8002612:	461a      	mov	r2, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	605a      	str	r2, [r3, #4]
	comm->TxHeader.IdType=FDCAN_STANDARD_ID;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
	comm->TxHeader.TxFrameType=FDCAN_DATA_FRAME;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2200      	movs	r2, #0
 8002622:	60da      	str	r2, [r3, #12]
	comm->TxHeader.DataLength=FDCAN_DLC_BYTES_32;  //8 uint32_t values = 32 bytes
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800262a:	611a      	str	r2, [r3, #16]
	comm->TxHeader.ErrorStateIndicator=FDCAN_ESI_ACTIVE;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	615a      	str	r2, [r3, #20]
	comm->TxHeader.BitRateSwitch=FDCAN_BRS_OFF;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
	comm->TxHeader.FDFormat=FDCAN_FD_CAN;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800263e:	61da      	str	r2, [r3, #28]
	comm->TxHeader.TxEventFifoControl=FDCAN_NO_TX_EVENTS;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2200      	movs	r2, #0
 8002644:	621a      	str	r2, [r3, #32]
	comm->TxHeader.MessageMarker=0;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2200      	movs	r2, #0
 800264a:	625a      	str	r2, [r3, #36]	; 0x24

	memset(comm->RxData , 0 , RX_BUFFER_SIZE);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	33b4      	adds	r3, #180	; 0xb4
 8002650:	2240      	movs	r2, #64	; 0x40
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f006 ff6f 	bl	8009538 <memset>

	HAL_FDCAN_Start(&comm->fdcan);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	3350      	adds	r3, #80	; 0x50
 800265e:	4618      	mov	r0, r3
 8002660:	f002 fd9c 	bl	800519c <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&comm->fdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	3350      	adds	r3, #80	; 0x50
 8002668:	2200      	movs	r2, #0
 800266a:	2101      	movs	r1, #1
 800266c:	4618      	mov	r0, r3
 800266e:	f002 fedb 	bl	8005428 <HAL_FDCAN_ActivateNotification>

}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <send_message>:


void send_message(CommController *comm , uint8_t *payload) {
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
	if(HAL_FDCAN_AddMessageToTxFifoQ(&comm->fdcan, &comm->TxHeader, payload) != HAL_OK)//
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3304      	adds	r3, #4
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	4619      	mov	r1, r3
 8002692:	f002 fdab 	bl	80051ec <HAL_FDCAN_AddMessageToTxFifoQ>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <send_message+0x26>
		{
		  Error_Handler();
 800269c:	f000 fb64 	bl	8002d68 <Error_Handler>
		}
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <process_received_message>:

int process_received_message(CommController *comm) {
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	uint8_t data = comm->RxData[0];
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80026b6:	72fb      	strb	r3, [r7, #11]
	int flag = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
	if (comm->RxHeader.Identifier == DEVICE_ID) {  //simple logic for now, its a flag to send a message back from the device
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	2b14      	cmp	r3, #20
 80026c2:	d101      	bne.n	80026c8 <process_received_message+0x20>
		flag = 1;
 80026c4:	2301      	movs	r3, #1
 80026c6:	60fb      	str	r3, [r7, #12]
	}
	return flag;
 80026c8:	68fb      	ldr	r3, [r7, #12]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <ADC_init>:
#include "contact_sensors.h"
#include "configuration.h"
#include "adc.h"
#include "dma.h"

void ADC_init(ADC_HandleTypeDef *adc, ContactSensors *sensors){
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]
	sensors->adc = adc;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	621a      	str	r2, [r3, #32]
	memset(sensors->adcValues , 0 , sizeof(sensors->adcValues));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2220      	movs	r2, #32
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f006 ff23 	bl	8009538 <memset>
	HAL_ADC_Start_DMA(sensors->adc, sensors->adcValues, NUMBER_OF_SENSORS);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	6839      	ldr	r1, [r7, #0]
 80026f8:	2208      	movs	r2, #8
 80026fa:	4618      	mov	r0, r3
 80026fc:	f001 fa4a 	bl	8003b94 <HAL_ADC_Start_DMA>
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <ADC_update_payload>:


void ADC_update_payload(ContactSensors *sensors) {
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
    // Pointer to the current position in the payload
    uint8_t *payloadPtr = sensors->payload;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3324      	adds	r3, #36	; 0x24
 8002714:	60fb      	str	r3, [r7, #12]

    // Iterate through each ADC value
    for (int i = 0; i < NUMBER_OF_SENSORS; i++) {
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	e029      	b.n	8002770 <ADC_update_payload+0x68>
        // Extract each byte from the 32-bit ADC value
        *payloadPtr++ = (sensors->adcValues[i] >> 24) & 0xFF;  // MSB
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002724:	0e19      	lsrs	r1, r3, #24
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	60fa      	str	r2, [r7, #12]
 800272c:	b2ca      	uxtb	r2, r1
 800272e:	701a      	strb	r2, [r3, #0]
        *payloadPtr++ = (sensors->adcValues[i] >> 16) & 0xFF;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002738:	0c19      	lsrs	r1, r3, #16
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	60fa      	str	r2, [r7, #12]
 8002740:	b2ca      	uxtb	r2, r1
 8002742:	701a      	strb	r2, [r3, #0]
        *payloadPtr++ = (sensors->adcValues[i] >> 8) & 0xFF;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274c:	0a19      	lsrs	r1, r3, #8
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	60fa      	str	r2, [r7, #12]
 8002754:	b2ca      	uxtb	r2, r1
 8002756:	701a      	strb	r2, [r3, #0]
        *payloadPtr++ = sensors->adcValues[i] & 0xFF;          // LSB
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	60fa      	str	r2, [r7, #12]
 8002766:	b2ca      	uxtb	r2, r1
 8002768:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUMBER_OF_SENSORS; i++) {
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	3301      	adds	r3, #1
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b07      	cmp	r3, #7
 8002774:	ddd2      	ble.n	800271c <ADC_update_payload+0x14>
    }
}
 8002776:	bf00      	nop
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800278a:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <MX_DMA_Init+0x50>)
 800278c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278e:	4a11      	ldr	r2, [pc, #68]	; (80027d4 <MX_DMA_Init+0x50>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	6493      	str	r3, [r2, #72]	; 0x48
 8002796:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <MX_DMA_Init+0x50>)
 8002798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <MX_DMA_Init+0x50>)
 80027a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a6:	4a0b      	ldr	r2, [pc, #44]	; (80027d4 <MX_DMA_Init+0x50>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6493      	str	r3, [r2, #72]	; 0x48
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <MX_DMA_Init+0x50>)
 80027b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	200b      	movs	r0, #11
 80027c0:	f002 f8eb 	bl	800499a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027c4:	200b      	movs	r0, #11
 80027c6:	f002 f902 	bl	80049ce <HAL_NVIC_EnableIRQ>

}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000

080027d8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <MX_FDCAN1_Init+0x88>)
 80027de:	4a21      	ldr	r2, [pc, #132]	; (8002864 <MX_FDCAN1_Init+0x8c>)
 80027e0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <MX_FDCAN1_Init+0x88>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <MX_FDCAN1_Init+0x88>)
 80027ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ee:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <MX_FDCAN1_Init+0x88>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80027f6:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <MX_FDCAN1_Init+0x88>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <MX_FDCAN1_Init+0x88>)
 80027fe:	2200      	movs	r2, #0
 8002800:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002802:	4b17      	ldr	r3, [pc, #92]	; (8002860 <MX_FDCAN1_Init+0x88>)
 8002804:	2200      	movs	r2, #0
 8002806:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <MX_FDCAN1_Init+0x88>)
 800280a:	2201      	movs	r2, #1
 800280c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 800280e:	4b14      	ldr	r3, [pc, #80]	; (8002860 <MX_FDCAN1_Init+0x88>)
 8002810:	2202      	movs	r2, #2
 8002812:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 107;
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <MX_FDCAN1_Init+0x88>)
 8002816:	226b      	movs	r2, #107	; 0x6b
 8002818:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 36;
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <MX_FDCAN1_Init+0x88>)
 800281c:	2224      	movs	r2, #36	; 0x24
 800281e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 6;
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <MX_FDCAN1_Init+0x88>)
 8002822:	2206      	movs	r2, #6
 8002824:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <MX_FDCAN1_Init+0x88>)
 8002828:	2209      	movs	r2, #9
 800282a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <MX_FDCAN1_Init+0x88>)
 800282e:	220f      	movs	r2, #15
 8002830:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <MX_FDCAN1_Init+0x88>)
 8002834:	2209      	movs	r2, #9
 8002836:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <MX_FDCAN1_Init+0x88>)
 800283a:	2201      	movs	r2, #1
 800283c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <MX_FDCAN1_Init+0x88>)
 8002840:	2200      	movs	r2, #0
 8002842:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <MX_FDCAN1_Init+0x88>)
 8002846:	2200      	movs	r2, #0
 8002848:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800284a:	4805      	ldr	r0, [pc, #20]	; (8002860 <MX_FDCAN1_Init+0x88>)
 800284c:	f002 fb4c 	bl	8004ee8 <HAL_FDCAN_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8002856:	f000 fa87 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000144 	.word	0x20000144
 8002864:	40006400 	.word	0x40006400

08002868 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b09e      	sub	sp, #120	; 0x78
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002880:	f107 0310 	add.w	r3, r7, #16
 8002884:	2254      	movs	r2, #84	; 0x54
 8002886:	2100      	movs	r1, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f006 fe55 	bl	8009538 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a24      	ldr	r2, [pc, #144]	; (8002924 <HAL_FDCAN_MspInit+0xbc>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d141      	bne.n	800291c <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800289c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800289e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028a2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	4618      	mov	r0, r3
 80028aa:	f004 ff91 	bl	80077d0 <HAL_RCCEx_PeriphCLKConfig>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80028b4:	f000 fa58 	bl	8002d68 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80028b8:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <HAL_FDCAN_MspInit+0xc0>)
 80028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028bc:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <HAL_FDCAN_MspInit+0xc0>)
 80028be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028c2:	6593      	str	r3, [r2, #88]	; 0x58
 80028c4:	4b18      	ldr	r3, [pc, #96]	; (8002928 <HAL_FDCAN_MspInit+0xc0>)
 80028c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d0:	4b15      	ldr	r3, [pc, #84]	; (8002928 <HAL_FDCAN_MspInit+0xc0>)
 80028d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d4:	4a14      	ldr	r2, [pc, #80]	; (8002928 <HAL_FDCAN_MspInit+0xc0>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_FDCAN_MspInit+0xc0>)
 80028de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80028e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028ec:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ee:	2302      	movs	r3, #2
 80028f0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f6:	2300      	movs	r3, #0
 80028f8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80028fa:	2309      	movs	r3, #9
 80028fc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002902:	4619      	mov	r1, r3
 8002904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002908:	f003 f8fe 	bl	8005b08 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800290c:	2200      	movs	r2, #0
 800290e:	2100      	movs	r1, #0
 8002910:	2015      	movs	r0, #21
 8002912:	f002 f842 	bl	800499a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002916:	2015      	movs	r0, #21
 8002918:	f002 f859 	bl	80049ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800291c:	bf00      	nop
 800291e:	3778      	adds	r7, #120	; 0x78
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40006400 	.word	0x40006400
 8002928:	40021000 	.word	0x40021000

0800292c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002932:	f107 030c 	add.w	r3, r7, #12
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	60da      	str	r2, [r3, #12]
 8002940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002942:	4b1e      	ldr	r3, [pc, #120]	; (80029bc <MX_GPIO_Init+0x90>)
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <MX_GPIO_Init+0x90>)
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800294e:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <MX_GPIO_Init+0x90>)
 8002950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	4b18      	ldr	r3, [pc, #96]	; (80029bc <MX_GPIO_Init+0x90>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	4a17      	ldr	r2, [pc, #92]	; (80029bc <MX_GPIO_Init+0x90>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <MX_GPIO_Init+0x90>)
 8002968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <MX_GPIO_Init+0x90>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	4a11      	ldr	r2, [pc, #68]	; (80029bc <MX_GPIO_Init+0x90>)
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800297e:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <MX_GPIO_Init+0x90>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 800298a:	2200      	movs	r2, #0
 800298c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002990:	480b      	ldr	r0, [pc, #44]	; (80029c0 <MX_GPIO_Init+0x94>)
 8002992:	f003 fa3b 	bl	8005e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8002996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800299a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299c:	2301      	movs	r3, #1
 800299e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 80029a8:	f107 030c 	add.w	r3, r7, #12
 80029ac:	4619      	mov	r1, r3
 80029ae:	4804      	ldr	r0, [pc, #16]	; (80029c0 <MX_GPIO_Init+0x94>)
 80029b0:	f003 f8aa 	bl	8005b08 <HAL_GPIO_Init>

}
 80029b4:	bf00      	nop
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	48000800 	.word	0x48000800

080029c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029c8:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <MX_I2C1_Init+0x80>)
 80029ca:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <MX_I2C1_Init+0x84>)
 80029cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0070215B;
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <MX_I2C1_Init+0x80>)
 80029d0:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <MX_I2C1_Init+0x88>)
 80029d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <MX_I2C1_Init+0x80>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029da:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <MX_I2C1_Init+0x80>)
 80029dc:	2201      	movs	r2, #1
 80029de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029e0:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <MX_I2C1_Init+0x80>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029e6:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <MX_I2C1_Init+0x80>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029ec:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <MX_I2C1_Init+0x80>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029f2:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <MX_I2C1_Init+0x80>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029f8:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <MX_I2C1_Init+0x80>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029fe:	4811      	ldr	r0, [pc, #68]	; (8002a44 <MX_I2C1_Init+0x80>)
 8002a00:	f003 fa1c 	bl	8005e3c <HAL_I2C_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a0a:	f000 f9ad 	bl	8002d68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a0e:	2100      	movs	r1, #0
 8002a10:	480c      	ldr	r0, [pc, #48]	; (8002a44 <MX_I2C1_Init+0x80>)
 8002a12:	f004 f86d 	bl	8006af0 <HAL_I2CEx_ConfigAnalogFilter>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002a1c:	f000 f9a4 	bl	8002d68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a20:	2100      	movs	r1, #0
 8002a22:	4808      	ldr	r0, [pc, #32]	; (8002a44 <MX_I2C1_Init+0x80>)
 8002a24:	f004 f8af 	bl	8006b86 <HAL_I2CEx_ConfigDigitalFilter>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a2e:	f000 f99b 	bl	8002d68 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 8002a32:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <MX_I2C1_Init+0x8c>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4a06      	ldr	r2, [pc, #24]	; (8002a50 <MX_I2C1_Init+0x8c>)
 8002a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	200001a8 	.word	0x200001a8
 8002a48:	40005400 	.word	0x40005400
 8002a4c:	0070215b 	.word	0x0070215b
 8002a50:	40010000 	.word	0x40010000

08002a54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b0a0      	sub	sp, #128	; 0x80
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a6c:	f107 0318 	add.w	r3, r7, #24
 8002a70:	2254      	movs	r2, #84	; 0x54
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f006 fd5f 	bl	8009538 <memset>
  if(i2cHandle->Instance==I2C1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a2d      	ldr	r2, [pc, #180]	; (8002b34 <HAL_I2C_MspInit+0xe0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d153      	bne.n	8002b2c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a84:	2340      	movs	r3, #64	; 0x40
 8002a86:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a8c:	f107 0318 	add.w	r3, r7, #24
 8002a90:	4618      	mov	r0, r3
 8002a92:	f004 fe9d 	bl	80077d0 <HAL_RCCEx_PeriphCLKConfig>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002a9c:	f000 f964 	bl	8002d68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa0:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <HAL_I2C_MspInit+0xe4>)
 8002aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa4:	4a24      	ldr	r2, [pc, #144]	; (8002b38 <HAL_I2C_MspInit+0xe4>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aac:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <HAL_I2C_MspInit+0xe4>)
 8002aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab8:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <HAL_I2C_MspInit+0xe4>)
 8002aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abc:	4a1e      	ldr	r2, [pc, #120]	; (8002b38 <HAL_I2C_MspInit+0xe4>)
 8002abe:	f043 0302 	orr.w	r3, r3, #2
 8002ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ac4:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <HAL_I2C_MspInit+0xe4>)
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad6:	2312      	movs	r3, #18
 8002ad8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002aea:	4619      	mov	r1, r3
 8002aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002af0:	f003 f80a 	bl	8005b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002af8:	2312      	movs	r3, #18
 8002afa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b00:	2300      	movs	r3, #0
 8002b02:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b04:	2304      	movs	r3, #4
 8002b06:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	480b      	ldr	r0, [pc, #44]	; (8002b3c <HAL_I2C_MspInit+0xe8>)
 8002b10:	f002 fffa 	bl	8005b08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_I2C_MspInit+0xe4>)
 8002b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b18:	4a07      	ldr	r2, [pc, #28]	; (8002b38 <HAL_I2C_MspInit+0xe4>)
 8002b1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_I2C_MspInit+0xe4>)
 8002b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	3780      	adds	r7, #128	; 0x80
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40005400 	.word	0x40005400
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	48000400 	.word	0x48000400

08002b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b44:	f000 fbaf 	bl	80032a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b48:	f000 f87e 	bl	8002c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b4c:	f7ff feee 	bl	800292c <MX_GPIO_Init>
  MX_DMA_Init();
 8002b50:	f7ff fe18 	bl	8002784 <MX_DMA_Init>
  MX_ADC2_Init();
 8002b54:	f7fd fdf0 	bl	8000738 <MX_ADC2_Init>
  MX_I2C1_Init();
 8002b58:	f7ff ff34 	bl	80029c4 <MX_I2C1_Init>
  MX_UART4_Init();
 8002b5c:	f000 fa34 	bl	8002fc8 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8002b60:	f000 fa7e 	bl	8003060 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002b64:	f000 f9ba 	bl	8002edc <MX_TIM3_Init>
  MX_FDCAN1_Init();
 8002b68:	f7ff fe36 	bl	80027d8 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8002b6c:	482b      	ldr	r0, [pc, #172]	; (8002c1c <main+0xdc>)
 8002b6e:	f005 f8d5 	bl	8007d1c <HAL_TIM_Base_Start_IT>
  comm_controller_init(&hfdcan1 , &comm_controller);
 8002b72:	492b      	ldr	r1, [pc, #172]	; (8002c20 <main+0xe0>)
 8002b74:	482b      	ldr	r0, [pc, #172]	; (8002c24 <main+0xe4>)
 8002b76:	f7ff fd32 	bl	80025de <comm_controller_init>
  ADC_init(&hadc2,&sensors);
 8002b7a:	492b      	ldr	r1, [pc, #172]	; (8002c28 <main+0xe8>)
 8002b7c:	482b      	ldr	r0, [pc, #172]	; (8002c2c <main+0xec>)
 8002b7e:	f7ff fdaa 	bl	80026d6 <ADC_init>
  imu_init(&hi2c1 , &imu);
 8002b82:	492b      	ldr	r1, [pc, #172]	; (8002c30 <main+0xf0>)
 8002b84:	482b      	ldr	r0, [pc, #172]	; (8002c34 <main+0xf4>)
 8002b86:	f7fd fcc5 	bl	8000514 <imu_init>
  version_init(&version);
 8002b8a:	482b      	ldr	r0, [pc, #172]	; (8002c38 <main+0xf8>)
 8002b8c:	f000 fb4e 	bl	800322c <version_init>
  soul_init(&soul_sense, &sensors, &imu, &version);
 8002b90:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <main+0xf8>)
 8002b92:	4a27      	ldr	r2, [pc, #156]	; (8002c30 <main+0xf0>)
 8002b94:	4924      	ldr	r1, [pc, #144]	; (8002c28 <main+0xe8>)
 8002b96:	4829      	ldr	r0, [pc, #164]	; (8002c3c <main+0xfc>)
 8002b98:	f7fd fd73 	bl	8000682 <soul_init>
  currentState = IDLE;
 8002b9c:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <main+0x100>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
  {
//	  if (HAL_GetTick()%20 == 0) {
//		  imu_read_data(&imu); //TODO Oori to implement
//	  }

	  switch(currentState) {
 8002ba2:	4b27      	ldr	r3, [pc, #156]	; (8002c40 <main+0x100>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d832      	bhi.n	8002c10 <main+0xd0>
 8002baa:	a201      	add	r2, pc, #4	; (adr r2, 8002bb0 <main+0x70>)
 8002bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb0:	08002c19 	.word	0x08002c19
 8002bb4:	08002bc5 	.word	0x08002bc5
 8002bb8:	08002c11 	.word	0x08002c11
 8002bbc:	08002bd3 	.word	0x08002bd3
 8002bc0:	08002bef 	.word	0x08002bef
	  	  case IDLE:
		  	  break;

	      case READ_IMU:
	    	  imu_read_data(&imu); //TODO Oori to implement
 8002bc4:	481a      	ldr	r0, [pc, #104]	; (8002c30 <main+0xf0>)
 8002bc6:	f7fd fcd9 	bl	800057c <imu_read_data>
	    	  currentState = IDLE;
 8002bca:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <main+0x100>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
	          break;
 8002bd0:	e023      	b.n	8002c1a <main+0xda>


	      case RECEIVE_MESSAGE:
	    	  if(process_received_message(&comm_controller)){
 8002bd2:	4813      	ldr	r0, [pc, #76]	; (8002c20 <main+0xe0>)
 8002bd4:	f7ff fd68 	bl	80026a8 <process_received_message>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <main+0xa6>
	    		  currentState =  TRANSMIT_MESSAGE;
 8002bde:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <main+0x100>)
 8002be0:	2204      	movs	r2, #4
 8002be2:	701a      	strb	r2, [r3, #0]
	    	  else {
	    		  currentState = IDLE;
//	    		  memset(comm_controller.RxData, 0 , sizeof(comm_controller.RxData));
	    	  }

	          break;
 8002be4:	e019      	b.n	8002c1a <main+0xda>
	    		  currentState = IDLE;
 8002be6:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <main+0x100>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
	          break;
 8002bec:	e015      	b.n	8002c1a <main+0xda>

	      case TRANSMIT_MESSAGE:
	      {
			  imu_update_payload(&imu);
 8002bee:	4810      	ldr	r0, [pc, #64]	; (8002c30 <main+0xf0>)
 8002bf0:	f7fd fcf7 	bl	80005e2 <imu_update_payload>
			  ADC_update_payload(&sensors);
 8002bf4:	480c      	ldr	r0, [pc, #48]	; (8002c28 <main+0xe8>)
 8002bf6:	f7ff fd87 	bl	8002708 <ADC_update_payload>
			  soul_update_payload(&soul_sense);
 8002bfa:	4810      	ldr	r0, [pc, #64]	; (8002c3c <main+0xfc>)
 8002bfc:	f7fd fd6a 	bl	80006d4 <soul_update_payload>
	          send_message(&comm_controller, soul_sense.payload);
 8002c00:	4910      	ldr	r1, [pc, #64]	; (8002c44 <main+0x104>)
 8002c02:	4807      	ldr	r0, [pc, #28]	; (8002c20 <main+0xe0>)
 8002c04:	f7ff fd39 	bl	800267a <send_message>
//	          memset(comm_controller.RxData, 0 , sizeof(comm_controller.RxData));  //deleting used content from RxData buffer
	          currentState = IDLE;
 8002c08:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <main+0x100>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
	          break;
 8002c0e:	e004      	b.n	8002c1a <main+0xda>
	      }


	      default:
	          // Handle any unexpected state
	    	  currentState = IDLE;
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <main+0x100>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
	          break;
 8002c16:	e000      	b.n	8002c1a <main+0xda>
		  	  break;
 8002c18:	bf00      	nop
	  switch(currentState) {
 8002c1a:	e7c2      	b.n	8002ba2 <main+0x62>
 8002c1c:	20000458 	.word	0x20000458
 8002c20:	200001f4 	.word	0x200001f4
 8002c24:	20000144 	.word	0x20000144
 8002c28:	200002ec 	.word	0x200002ec
 8002c2c:	20000078 	.word	0x20000078
 8002c30:	20000330 	.word	0x20000330
 8002c34:	200001a8 	.word	0x200001a8
 8002c38:	2000037c 	.word	0x2000037c
 8002c3c:	20000380 	.word	0x20000380
 8002c40:	2000037f 	.word	0x2000037f
 8002c44:	20000413 	.word	0x20000413

08002c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b094      	sub	sp, #80	; 0x50
 8002c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c4e:	f107 0318 	add.w	r3, r7, #24
 8002c52:	2238      	movs	r2, #56	; 0x38
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f006 fc6e 	bl	8009538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	60da      	str	r2, [r3, #12]
 8002c68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c6e:	f003 ffd7 	bl	8006c20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c72:	2302      	movs	r3, #2
 8002c74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c7c:	2340      	movs	r3, #64	; 0x40
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c80:	2302      	movs	r3, #2
 8002c82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c84:	2302      	movs	r3, #2
 8002c86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 18;
 8002c8c:	2312      	movs	r3, #18
 8002c8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c90:	2302      	movs	r3, #2
 8002c92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c94:	2302      	movs	r3, #2
 8002c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c9c:	f107 0318 	add.w	r3, r7, #24
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f004 f861 	bl	8006d68 <HAL_RCC_OscConfig>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8002cac:	f000 f85c 	bl	8002d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cb0:	230f      	movs	r3, #15
 8002cb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	2104      	movs	r1, #4
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f004 fb65 	bl	8007398 <HAL_RCC_ClockConfig>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002cd4:	f000 f848 	bl	8002d68 <Error_Handler>
  }
}
 8002cd8:	bf00      	nop
 8002cda:	3750      	adds	r7, #80	; 0x50
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_FDCAN_RxFifo0Callback+0x2a>
	{
		if (HAL_FDCAN_GetRxMessage(&comm_controller.fdcan, FDCAN_RX_FIFO0, &comm_controller.RxHeader, comm_controller.RxData) != HAL_OK)
 8002cf4:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002cf6:	4a0e      	ldr	r2, [pc, #56]	; (8002d30 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8002cf8:	2140      	movs	r1, #64	; 0x40
 8002cfa:	480e      	ldr	r0, [pc, #56]	; (8002d34 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8002cfc:	f002 faba 	bl	8005274 <HAL_FDCAN_GetRxMessage>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_FDCAN_RxFifo0Callback+0x2a>
		{
			Error_Handler();
 8002d06:	f000 f82f 	bl	8002d68 <Error_Handler>
		}
	}
	currentState = RECEIVE_MESSAGE;
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	701a      	strb	r2, [r3, #0]
	if (HAL_FDCAN_ActivateNotification(&comm_controller.fdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002d10:	2200      	movs	r2, #0
 8002d12:	2101      	movs	r1, #1
 8002d14:	4807      	ldr	r0, [pc, #28]	; (8002d34 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8002d16:	f002 fb87 	bl	8005428 <HAL_FDCAN_ActivateNotification>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_FDCAN_RxFifo0Callback+0x44>
	{
		Error_Handler();
 8002d20:	f000 f822 	bl	8002d68 <Error_Handler>
	}
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	200002a8 	.word	0x200002a8
 8002d30:	2000021c 	.word	0x2000021c
 8002d34:	20000244 	.word	0x20000244
 8002d38:	2000037f 	.word	0x2000037f

08002d3c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a05      	ldr	r2, [pc, #20]	; (8002d60 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d102      	bne.n	8002d54 <HAL_TIM_PeriodElapsedCallback+0x18>
		currentState = READ_IMU;
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]

	}
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	40000400 	.word	0x40000400
 8002d64:	2000037f 	.word	0x2000037f

08002d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d6c:	b672      	cpsid	i
}
 8002d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d70:	e7fe      	b.n	8002d70 <Error_Handler+0x8>
	...

08002d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <HAL_MspInit+0x44>)
 8002d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7e:	4a0e      	ldr	r2, [pc, #56]	; (8002db8 <HAL_MspInit+0x44>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6613      	str	r3, [r2, #96]	; 0x60
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <HAL_MspInit+0x44>)
 8002d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d92:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <HAL_MspInit+0x44>)
 8002d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d96:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <HAL_MspInit+0x44>)
 8002d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d9e:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <HAL_MspInit+0x44>)
 8002da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000

08002dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <NMI_Handler+0x4>

08002dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc6:	e7fe      	b.n	8002dc6 <HardFault_Handler+0x4>

08002dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dcc:	e7fe      	b.n	8002dcc <MemManage_Handler+0x4>

08002dce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dd2:	e7fe      	b.n	8002dd2 <BusFault_Handler+0x4>

08002dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <UsageFault_Handler+0x4>

08002dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e08:	f000 faa0 	bl	800334c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002e14:	4802      	ldr	r0, [pc, #8]	; (8002e20 <DMA1_Channel1_IRQHandler+0x10>)
 8002e16:	f001 ff18 	bl	8004c4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200000e4 	.word	0x200000e4

08002e24 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002e28:	4802      	ldr	r0, [pc, #8]	; (8002e34 <FDCAN1_IT0_IRQHandler+0x10>)
 8002e2a:	f002 fbe3 	bl	80055f4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000144 	.word	0x20000144

08002e38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <TIM3_IRQHandler+0x10>)
 8002e3e:	f004 ffe5 	bl	8007e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000458 	.word	0x20000458

08002e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e54:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <_sbrk+0x5c>)
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <_sbrk+0x60>)
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <_sbrk+0x64>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <_sbrk+0x64>)
 8002e6a:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <_sbrk+0x68>)
 8002e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <_sbrk+0x64>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d207      	bcs.n	8002e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e7c:	f006 fb74 	bl	8009568 <__errno>
 8002e80:	4603      	mov	r3, r0
 8002e82:	220c      	movs	r2, #12
 8002e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e8a:	e009      	b.n	8002ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <_sbrk+0x64>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e92:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <_sbrk+0x64>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	4a05      	ldr	r2, [pc, #20]	; (8002eb0 <_sbrk+0x64>)
 8002e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20020000 	.word	0x20020000
 8002eac:	00000400 	.word	0x00000400
 8002eb0:	20000454 	.word	0x20000454
 8002eb4:	20000710 	.word	0x20000710

08002eb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <SystemInit+0x20>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	4a05      	ldr	r2, [pc, #20]	; (8002ed8 <SystemInit+0x20>)
 8002ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ee2:	f107 0310 	add.w	r3, r7, #16
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
 8002ef8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002efa:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <MX_TIM3_Init+0x98>)
 8002efc:	4a1e      	ldr	r2, [pc, #120]	; (8002f78 <MX_TIM3_Init+0x9c>)
 8002efe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8002f00:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <MX_TIM3_Init+0x98>)
 8002f02:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8002f06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f08:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <MX_TIM3_Init+0x98>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8002f0e:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <MX_TIM3_Init+0x98>)
 8002f10:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002f14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f16:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <MX_TIM3_Init+0x98>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1c:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <MX_TIM3_Init+0x98>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f22:	4814      	ldr	r0, [pc, #80]	; (8002f74 <MX_TIM3_Init+0x98>)
 8002f24:	f004 fea2 	bl	8007c6c <HAL_TIM_Base_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002f2e:	f7ff ff1b 	bl	8002d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f38:	f107 0310 	add.w	r3, r7, #16
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	480d      	ldr	r0, [pc, #52]	; (8002f74 <MX_TIM3_Init+0x98>)
 8002f40:	f005 f8e4 	bl	800810c <HAL_TIM_ConfigClockSource>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002f4a:	f7ff ff0d 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f56:	1d3b      	adds	r3, r7, #4
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4806      	ldr	r0, [pc, #24]	; (8002f74 <MX_TIM3_Init+0x98>)
 8002f5c:	f005 fb58 	bl	8008610 <HAL_TIMEx_MasterConfigSynchronization>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002f66:	f7ff feff 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f6a:	bf00      	nop
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000458 	.word	0x20000458
 8002f78:	40000400 	.word	0x40000400

08002f7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <HAL_TIM_Base_MspInit+0x44>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d113      	bne.n	8002fb6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <HAL_TIM_Base_MspInit+0x48>)
 8002f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f92:	4a0c      	ldr	r2, [pc, #48]	; (8002fc4 <HAL_TIM_Base_MspInit+0x48>)
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	6593      	str	r3, [r2, #88]	; 0x58
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_TIM_Base_MspInit+0x48>)
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2100      	movs	r1, #0
 8002faa:	201d      	movs	r0, #29
 8002fac:	f001 fcf5 	bl	800499a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002fb0:	201d      	movs	r0, #29
 8002fb2:	f001 fd0c 	bl	80049ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40000400 	.word	0x40000400
 8002fc4:	40021000 	.word	0x40021000

08002fc8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002fcc:	4b22      	ldr	r3, [pc, #136]	; (8003058 <MX_UART4_Init+0x90>)
 8002fce:	4a23      	ldr	r2, [pc, #140]	; (800305c <MX_UART4_Init+0x94>)
 8002fd0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002fd2:	4b21      	ldr	r3, [pc, #132]	; (8003058 <MX_UART4_Init+0x90>)
 8002fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fd8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002fda:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <MX_UART4_Init+0x90>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <MX_UART4_Init+0x90>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002fe6:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <MX_UART4_Init+0x90>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002fec:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <MX_UART4_Init+0x90>)
 8002fee:	220c      	movs	r2, #12
 8002ff0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff2:	4b19      	ldr	r3, [pc, #100]	; (8003058 <MX_UART4_Init+0x90>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff8:	4b17      	ldr	r3, [pc, #92]	; (8003058 <MX_UART4_Init+0x90>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ffe:	4b16      	ldr	r3, [pc, #88]	; (8003058 <MX_UART4_Init+0x90>)
 8003000:	2200      	movs	r2, #0
 8003002:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003004:	4b14      	ldr	r3, [pc, #80]	; (8003058 <MX_UART4_Init+0x90>)
 8003006:	2200      	movs	r2, #0
 8003008:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800300a:	4b13      	ldr	r3, [pc, #76]	; (8003058 <MX_UART4_Init+0x90>)
 800300c:	2200      	movs	r2, #0
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003010:	4811      	ldr	r0, [pc, #68]	; (8003058 <MX_UART4_Init+0x90>)
 8003012:	f005 fbd9 	bl	80087c8 <HAL_UART_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800301c:	f7ff fea4 	bl	8002d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003020:	2100      	movs	r1, #0
 8003022:	480d      	ldr	r0, [pc, #52]	; (8003058 <MX_UART4_Init+0x90>)
 8003024:	f006 f90a 	bl	800923c <HAL_UARTEx_SetTxFifoThreshold>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800302e:	f7ff fe9b 	bl	8002d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003032:	2100      	movs	r1, #0
 8003034:	4808      	ldr	r0, [pc, #32]	; (8003058 <MX_UART4_Init+0x90>)
 8003036:	f006 f93f 	bl	80092b8 <HAL_UARTEx_SetRxFifoThreshold>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003040:	f7ff fe92 	bl	8002d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003044:	4804      	ldr	r0, [pc, #16]	; (8003058 <MX_UART4_Init+0x90>)
 8003046:	f006 f8c0 	bl	80091ca <HAL_UARTEx_DisableFifoMode>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003050:	f7ff fe8a 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003054:	bf00      	nop
 8003056:	bd80      	pop	{r7, pc}
 8003058:	200004a4 	.word	0x200004a4
 800305c:	40004c00 	.word	0x40004c00

08003060 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003064:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <MX_USART3_UART_Init+0x90>)
 8003066:	4a23      	ldr	r2, [pc, #140]	; (80030f4 <MX_USART3_UART_Init+0x94>)
 8003068:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800306a:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <MX_USART3_UART_Init+0x90>)
 800306c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003070:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003072:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <MX_USART3_UART_Init+0x90>)
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <MX_USART3_UART_Init+0x90>)
 800307a:	2200      	movs	r2, #0
 800307c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800307e:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <MX_USART3_UART_Init+0x90>)
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003084:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <MX_USART3_UART_Init+0x90>)
 8003086:	220c      	movs	r2, #12
 8003088:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <MX_USART3_UART_Init+0x90>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003090:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <MX_USART3_UART_Init+0x90>)
 8003092:	2200      	movs	r2, #0
 8003094:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003096:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <MX_USART3_UART_Init+0x90>)
 8003098:	2200      	movs	r2, #0
 800309a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800309c:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <MX_USART3_UART_Init+0x90>)
 800309e:	2200      	movs	r2, #0
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030a2:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <MX_USART3_UART_Init+0x90>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030a8:	4811      	ldr	r0, [pc, #68]	; (80030f0 <MX_USART3_UART_Init+0x90>)
 80030aa:	f005 fb8d 	bl	80087c8 <HAL_UART_Init>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80030b4:	f7ff fe58 	bl	8002d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030b8:	2100      	movs	r1, #0
 80030ba:	480d      	ldr	r0, [pc, #52]	; (80030f0 <MX_USART3_UART_Init+0x90>)
 80030bc:	f006 f8be 	bl	800923c <HAL_UARTEx_SetTxFifoThreshold>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80030c6:	f7ff fe4f 	bl	8002d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030ca:	2100      	movs	r1, #0
 80030cc:	4808      	ldr	r0, [pc, #32]	; (80030f0 <MX_USART3_UART_Init+0x90>)
 80030ce:	f006 f8f3 	bl	80092b8 <HAL_UARTEx_SetRxFifoThreshold>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80030d8:	f7ff fe46 	bl	8002d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80030dc:	4804      	ldr	r0, [pc, #16]	; (80030f0 <MX_USART3_UART_Init+0x90>)
 80030de:	f006 f874 	bl	80091ca <HAL_UARTEx_DisableFifoMode>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80030e8:	f7ff fe3e 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030ec:	bf00      	nop
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	20000534 	.word	0x20000534
 80030f4:	40004800 	.word	0x40004800

080030f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b0a0      	sub	sp, #128	; 0x80
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003100:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003110:	f107 0318 	add.w	r3, r7, #24
 8003114:	2254      	movs	r2, #84	; 0x54
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f006 fa0d 	bl	8009538 <memset>
  if(uartHandle->Instance==UART4)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a3d      	ldr	r2, [pc, #244]	; (8003218 <HAL_UART_MspInit+0x120>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d137      	bne.n	8003198 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003128:	2308      	movs	r3, #8
 800312a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800312c:	2300      	movs	r3, #0
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003130:	f107 0318 	add.w	r3, r7, #24
 8003134:	4618      	mov	r0, r3
 8003136:	f004 fb4b 	bl	80077d0 <HAL_RCCEx_PeriphCLKConfig>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003140:	f7ff fe12 	bl	8002d68 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003144:	4b35      	ldr	r3, [pc, #212]	; (800321c <HAL_UART_MspInit+0x124>)
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	4a34      	ldr	r2, [pc, #208]	; (800321c <HAL_UART_MspInit+0x124>)
 800314a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800314e:	6593      	str	r3, [r2, #88]	; 0x58
 8003150:	4b32      	ldr	r3, [pc, #200]	; (800321c <HAL_UART_MspInit+0x124>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003154:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800315c:	4b2f      	ldr	r3, [pc, #188]	; (800321c <HAL_UART_MspInit+0x124>)
 800315e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003160:	4a2e      	ldr	r2, [pc, #184]	; (800321c <HAL_UART_MspInit+0x124>)
 8003162:	f043 0304 	orr.w	r3, r3, #4
 8003166:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003168:	4b2c      	ldr	r3, [pc, #176]	; (800321c <HAL_UART_MspInit+0x124>)
 800316a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003174:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003178:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317a:	2302      	movs	r3, #2
 800317c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003182:	2300      	movs	r3, #0
 8003184:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003186:	2305      	movs	r3, #5
 8003188:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800318a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800318e:	4619      	mov	r1, r3
 8003190:	4823      	ldr	r0, [pc, #140]	; (8003220 <HAL_UART_MspInit+0x128>)
 8003192:	f002 fcb9 	bl	8005b08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003196:	e03b      	b.n	8003210 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a21      	ldr	r2, [pc, #132]	; (8003224 <HAL_UART_MspInit+0x12c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d136      	bne.n	8003210 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80031a2:	2304      	movs	r3, #4
 80031a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80031a6:	2300      	movs	r3, #0
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031aa:	f107 0318 	add.w	r3, r7, #24
 80031ae:	4618      	mov	r0, r3
 80031b0:	f004 fb0e 	bl	80077d0 <HAL_RCCEx_PeriphCLKConfig>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80031ba:	f7ff fdd5 	bl	8002d68 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031be:	4b17      	ldr	r3, [pc, #92]	; (800321c <HAL_UART_MspInit+0x124>)
 80031c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c2:	4a16      	ldr	r2, [pc, #88]	; (800321c <HAL_UART_MspInit+0x124>)
 80031c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c8:	6593      	str	r3, [r2, #88]	; 0x58
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <HAL_UART_MspInit+0x124>)
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_UART_MspInit+0x124>)
 80031d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031da:	4a10      	ldr	r2, [pc, #64]	; (800321c <HAL_UART_MspInit+0x124>)
 80031dc:	f043 0302 	orr.w	r3, r3, #2
 80031e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_UART_MspInit+0x124>)
 80031e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f4:	2302      	movs	r3, #2
 80031f6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fc:	2300      	movs	r3, #0
 80031fe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003200:	2307      	movs	r3, #7
 8003202:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003204:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003208:	4619      	mov	r1, r3
 800320a:	4807      	ldr	r0, [pc, #28]	; (8003228 <HAL_UART_MspInit+0x130>)
 800320c:	f002 fc7c 	bl	8005b08 <HAL_GPIO_Init>
}
 8003210:	bf00      	nop
 8003212:	3780      	adds	r7, #128	; 0x80
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40004c00 	.word	0x40004c00
 800321c:	40021000 	.word	0x40021000
 8003220:	48000800 	.word	0x48000800
 8003224:	40004800 	.word	0x40004800
 8003228:	48000400 	.word	0x48000400

0800322c <version_init>:
 */


#include "version.h"

void version_init(FwVersion* version){
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
	version->version[0] = HW_VERSION;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	701a      	strb	r2, [r3, #0]
	version->version[1] = SW_MAJOR_VERSION;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	705a      	strb	r2, [r3, #1]
	version->version[2] = SW_MINOR_VERSION;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	709a      	strb	r2, [r3, #2]
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003254:	480d      	ldr	r0, [pc, #52]	; (800328c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003256:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003258:	480d      	ldr	r0, [pc, #52]	; (8003290 <LoopForever+0x6>)
  ldr r1, =_edata
 800325a:	490e      	ldr	r1, [pc, #56]	; (8003294 <LoopForever+0xa>)
  ldr r2, =_sidata
 800325c:	4a0e      	ldr	r2, [pc, #56]	; (8003298 <LoopForever+0xe>)
  movs r3, #0
 800325e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003260:	e002      	b.n	8003268 <LoopCopyDataInit>

08003262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003266:	3304      	adds	r3, #4

08003268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800326a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800326c:	d3f9      	bcc.n	8003262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800326e:	4a0b      	ldr	r2, [pc, #44]	; (800329c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003270:	4c0b      	ldr	r4, [pc, #44]	; (80032a0 <LoopForever+0x16>)
  movs r3, #0
 8003272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003274:	e001      	b.n	800327a <LoopFillZerobss>

08003276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003278:	3204      	adds	r2, #4

0800327a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800327a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800327c:	d3fb      	bcc.n	8003276 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800327e:	f7ff fe1b 	bl	8002eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003282:	f006 f977 	bl	8009574 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003286:	f7ff fc5b 	bl	8002b40 <main>

0800328a <LoopForever>:

LoopForever:
    b LoopForever
 800328a:	e7fe      	b.n	800328a <LoopForever>
  ldr   r0, =_estack
 800328c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003294:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003298:	08009654 	.word	0x08009654
  ldr r2, =_sbss
 800329c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80032a0:	20000710 	.word	0x20000710

080032a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032a4:	e7fe      	b.n	80032a4 <ADC1_2_IRQHandler>

080032a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032b0:	2003      	movs	r0, #3
 80032b2:	f001 fb67 	bl	8004984 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032b6:	200f      	movs	r0, #15
 80032b8:	f000 f80e 	bl	80032d8 <HAL_InitTick>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	71fb      	strb	r3, [r7, #7]
 80032c6:	e001      	b.n	80032cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032c8:	f7ff fd54 	bl	8002d74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032cc:	79fb      	ldrb	r3, [r7, #7]

}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80032e4:	4b16      	ldr	r3, [pc, #88]	; (8003340 <HAL_InitTick+0x68>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d022      	beq.n	8003332 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80032ec:	4b15      	ldr	r3, [pc, #84]	; (8003344 <HAL_InitTick+0x6c>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b13      	ldr	r3, [pc, #76]	; (8003340 <HAL_InitTick+0x68>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80032f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80032fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003300:	4618      	mov	r0, r3
 8003302:	f001 fb72 	bl	80049ea <HAL_SYSTICK_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10f      	bne.n	800332c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b0f      	cmp	r3, #15
 8003310:	d809      	bhi.n	8003326 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003312:	2200      	movs	r2, #0
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800331a:	f001 fb3e 	bl	800499a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800331e:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <HAL_InitTick+0x70>)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	e007      	b.n	8003336 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
 800332a:	e004      	b.n	8003336 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	e001      	b.n	8003336 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003336:	7bfb      	ldrb	r3, [r7, #15]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000008 	.word	0x20000008
 8003344:	20000000 	.word	0x20000000
 8003348:	20000004 	.word	0x20000004

0800334c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_IncTick+0x1c>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_IncTick+0x20>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4413      	add	r3, r2
 800335a:	4a03      	ldr	r2, [pc, #12]	; (8003368 <HAL_IncTick+0x1c>)
 800335c:	6013      	str	r3, [r2, #0]
}
 800335e:	bf00      	nop
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	200005c4 	.word	0x200005c4
 800336c:	20000008 	.word	0x20000008

08003370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  return uwTick;
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <HAL_GetTick+0x14>)
 8003376:	681b      	ldr	r3, [r3, #0]
}
 8003378:	4618      	mov	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	200005c4 	.word	0x200005c4

08003388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003390:	f7ff ffee 	bl	8003370 <HAL_GetTick>
 8003394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033a0:	d004      	beq.n	80033ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80033a2:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <HAL_Delay+0x40>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4413      	add	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033ac:	bf00      	nop
 80033ae:	f7ff ffdf 	bl	8003370 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d8f7      	bhi.n	80033ae <HAL_Delay+0x26>
  {
  }
}
 80033be:	bf00      	nop
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000008 	.word	0x20000008

080033cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	609a      	str	r2, [r3, #8]
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	609a      	str	r2, [r3, #8]
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3360      	adds	r3, #96	; 0x60
 8003446:	461a      	mov	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b08      	ldr	r3, [pc, #32]	; (8003478 <LL_ADC_SetOffset+0x44>)
 8003456:	4013      	ands	r3, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	4313      	orrs	r3, r2
 8003464:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800346c:	bf00      	nop
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	03fff000 	.word	0x03fff000

0800347c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3360      	adds	r3, #96	; 0x60
 800348a:	461a      	mov	r2, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3360      	adds	r3, #96	; 0x60
 80034b8:	461a      	mov	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	431a      	orrs	r2, r3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80034de:	b480      	push	{r7}
 80034e0:	b087      	sub	sp, #28
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3360      	adds	r3, #96	; 0x60
 80034ee:	461a      	mov	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	431a      	orrs	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003508:	bf00      	nop
 800350a:	371c      	adds	r7, #28
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3360      	adds	r3, #96	; 0x60
 8003524:	461a      	mov	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	431a      	orrs	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	615a      	str	r2, [r3, #20]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003596:	b480      	push	{r7}
 8003598:	b087      	sub	sp, #28
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3330      	adds	r3, #48	; 0x30
 80035a6:	461a      	mov	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	0a1b      	lsrs	r3, r3, #8
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	4413      	add	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	211f      	movs	r1, #31
 80035c2:	fa01 f303 	lsl.w	r3, r1, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	401a      	ands	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	0e9b      	lsrs	r3, r3, #26
 80035ce:	f003 011f 	and.w	r1, r3, #31
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	431a      	orrs	r2, r3
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035e2:	bf00      	nop
 80035e4:	371c      	adds	r7, #28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b087      	sub	sp, #28
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3314      	adds	r3, #20
 80035fe:	461a      	mov	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	0e5b      	lsrs	r3, r3, #25
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	4413      	add	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	0d1b      	lsrs	r3, r3, #20
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	2107      	movs	r1, #7
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	401a      	ands	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	0d1b      	lsrs	r3, r3, #20
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	431a      	orrs	r2, r3
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003638:	bf00      	nop
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a0f      	ldr	r2, [pc, #60]	; (8003690 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d10a      	bne.n	800366e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003664:	431a      	orrs	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800366c:	e00a      	b.n	8003684 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367a:	43db      	mvns	r3, r3
 800367c:	401a      	ands	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	407f0000 	.word	0x407f0000

08003694 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 031f 	and.w	r3, r3, #31
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80036c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6093      	str	r3, [r2, #8]
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e8:	d101      	bne.n	80036ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800370c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003710:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003734:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003738:	d101      	bne.n	800373e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800375c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003760:	f043 0201 	orr.w	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <LL_ADC_IsEnabled+0x18>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <LL_ADC_IsEnabled+0x1a>
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037ae:	f043 0204 	orr.w	r2, r3, #4
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d101      	bne.n	80037da <LL_ADC_REG_IsConversionOngoing+0x18>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d101      	bne.n	8003800 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b089      	sub	sp, #36	; 0x24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800381c:	2300      	movs	r3, #0
 800381e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e1af      	b.n	8003b8a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d109      	bne.n	800384c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fd f857 	bl	80008ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff ff3f 	bl	80036d4 <LL_ADC_IsDeepPowerDownEnabled>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d004      	beq.n	8003866 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ff25 	bl	80036b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff ff5a 	bl	8003724 <LL_ADC_IsInternalRegulatorEnabled>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d115      	bne.n	80038a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff ff3e 	bl	80036fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003880:	4b9f      	ldr	r3, [pc, #636]	; (8003b00 <HAL_ADC_Init+0x2f0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	099b      	lsrs	r3, r3, #6
 8003886:	4a9f      	ldr	r2, [pc, #636]	; (8003b04 <HAL_ADC_Init+0x2f4>)
 8003888:	fba2 2303 	umull	r2, r3, r2, r3
 800388c:	099b      	lsrs	r3, r3, #6
 800388e:	3301      	adds	r3, #1
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003894:	e002      	b.n	800389c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	3b01      	subs	r3, #1
 800389a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f9      	bne.n	8003896 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff ff3c 	bl	8003724 <LL_ADC_IsInternalRegulatorEnabled>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10d      	bne.n	80038ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b6:	f043 0210 	orr.w	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff ff75 	bl	80037c2 <LL_ADC_REG_IsConversionOngoing>
 80038d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f040 8148 	bne.w	8003b78 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f040 8144 	bne.w	8003b78 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80038f8:	f043 0202 	orr.w	r2, r3, #2
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ff35 	bl	8003774 <LL_ADC_IsEnabled>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d141      	bne.n	8003994 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003918:	d004      	beq.n	8003924 <HAL_ADC_Init+0x114>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a7a      	ldr	r2, [pc, #488]	; (8003b08 <HAL_ADC_Init+0x2f8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d10f      	bne.n	8003944 <HAL_ADC_Init+0x134>
 8003924:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003928:	f7ff ff24 	bl	8003774 <LL_ADC_IsEnabled>
 800392c:	4604      	mov	r4, r0
 800392e:	4876      	ldr	r0, [pc, #472]	; (8003b08 <HAL_ADC_Init+0x2f8>)
 8003930:	f7ff ff20 	bl	8003774 <LL_ADC_IsEnabled>
 8003934:	4603      	mov	r3, r0
 8003936:	4323      	orrs	r3, r4
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf0c      	ite	eq
 800393c:	2301      	moveq	r3, #1
 800393e:	2300      	movne	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e012      	b.n	800396a <HAL_ADC_Init+0x15a>
 8003944:	4871      	ldr	r0, [pc, #452]	; (8003b0c <HAL_ADC_Init+0x2fc>)
 8003946:	f7ff ff15 	bl	8003774 <LL_ADC_IsEnabled>
 800394a:	4604      	mov	r4, r0
 800394c:	4870      	ldr	r0, [pc, #448]	; (8003b10 <HAL_ADC_Init+0x300>)
 800394e:	f7ff ff11 	bl	8003774 <LL_ADC_IsEnabled>
 8003952:	4603      	mov	r3, r0
 8003954:	431c      	orrs	r4, r3
 8003956:	486f      	ldr	r0, [pc, #444]	; (8003b14 <HAL_ADC_Init+0x304>)
 8003958:	f7ff ff0c 	bl	8003774 <LL_ADC_IsEnabled>
 800395c:	4603      	mov	r3, r0
 800395e:	4323      	orrs	r3, r4
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d012      	beq.n	8003994 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003976:	d004      	beq.n	8003982 <HAL_ADC_Init+0x172>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a62      	ldr	r2, [pc, #392]	; (8003b08 <HAL_ADC_Init+0x2f8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d101      	bne.n	8003986 <HAL_ADC_Init+0x176>
 8003982:	4a65      	ldr	r2, [pc, #404]	; (8003b18 <HAL_ADC_Init+0x308>)
 8003984:	e000      	b.n	8003988 <HAL_ADC_Init+0x178>
 8003986:	4a65      	ldr	r2, [pc, #404]	; (8003b1c <HAL_ADC_Init+0x30c>)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4619      	mov	r1, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f7ff fd1c 	bl	80033cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	7f5b      	ldrb	r3, [r3, #29]
 8003998:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800399e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80039a4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80039aa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039b2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d106      	bne.n	80039d0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	3b01      	subs	r3, #1
 80039c8:	045b      	lsls	r3, r3, #17
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d009      	beq.n	80039ec <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <HAL_ADC_Init+0x310>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	69b9      	ldr	r1, [r7, #24]
 80039fc:	430b      	orrs	r3, r1
 80039fe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff fed1 	bl	80037c2 <LL_ADC_REG_IsConversionOngoing>
 8003a20:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fede 	bl	80037e8 <LL_ADC_INJ_IsConversionOngoing>
 8003a2c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d17f      	bne.n	8003b34 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d17c      	bne.n	8003b34 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a3e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a46:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a56:	f023 0302 	bic.w	r3, r3, #2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	69b9      	ldr	r1, [r7, #24]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d017      	beq.n	8003a9c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a7a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003a84:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6911      	ldr	r1, [r2, #16]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	430b      	orrs	r3, r1
 8003a96:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003a9a:	e013      	b.n	8003ac4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003aaa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003abc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ac0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d12a      	bne.n	8003b24 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ad8:	f023 0304 	bic.w	r3, r3, #4
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ae4:	4311      	orrs	r1, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003aea:	4311      	orrs	r1, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003af0:	430a      	orrs	r2, r1
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0201 	orr.w	r2, r2, #1
 8003afc:	611a      	str	r2, [r3, #16]
 8003afe:	e019      	b.n	8003b34 <HAL_ADC_Init+0x324>
 8003b00:	20000000 	.word	0x20000000
 8003b04:	053e2d63 	.word	0x053e2d63
 8003b08:	50000100 	.word	0x50000100
 8003b0c:	50000400 	.word	0x50000400
 8003b10:	50000500 	.word	0x50000500
 8003b14:	50000600 	.word	0x50000600
 8003b18:	50000300 	.word	0x50000300
 8003b1c:	50000700 	.word	0x50000700
 8003b20:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0201 	bic.w	r2, r2, #1
 8003b32:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d10c      	bne.n	8003b56 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f023 010f 	bic.w	r1, r3, #15
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	1e5a      	subs	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
 8003b54:	e007      	b.n	8003b66 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 020f 	bic.w	r2, r2, #15
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6a:	f023 0303 	bic.w	r3, r3, #3
 8003b6e:	f043 0201 	orr.w	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b76:	e007      	b.n	8003b88 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7c:	f043 0210 	orr.w	r2, r3, #16
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b88:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3724      	adds	r7, #36	; 0x24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd90      	pop	{r4, r7, pc}
 8003b92:	bf00      	nop

08003b94 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ba8:	d004      	beq.n	8003bb4 <HAL_ADC_Start_DMA+0x20>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a5a      	ldr	r2, [pc, #360]	; (8003d18 <HAL_ADC_Start_DMA+0x184>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d101      	bne.n	8003bb8 <HAL_ADC_Start_DMA+0x24>
 8003bb4:	4b59      	ldr	r3, [pc, #356]	; (8003d1c <HAL_ADC_Start_DMA+0x188>)
 8003bb6:	e000      	b.n	8003bba <HAL_ADC_Start_DMA+0x26>
 8003bb8:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <HAL_ADC_Start_DMA+0x18c>)
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff fd6a 	bl	8003694 <LL_ADC_GetMultimode>
 8003bc0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff fdfb 	bl	80037c2 <LL_ADC_REG_IsConversionOngoing>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f040 809b 	bne.w	8003d0a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_ADC_Start_DMA+0x4e>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e096      	b.n	8003d10 <HAL_ADC_Start_DMA+0x17c>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a4d      	ldr	r2, [pc, #308]	; (8003d24 <HAL_ADC_Start_DMA+0x190>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d008      	beq.n	8003c06 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	d002      	beq.n	8003c06 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b09      	cmp	r3, #9
 8003c04:	d17a      	bne.n	8003cfc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fcf6 	bl	80045f8 <ADC_Enable>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d16d      	bne.n	8003cf2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a3a      	ldr	r2, [pc, #232]	; (8003d18 <HAL_ADC_Start_DMA+0x184>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d009      	beq.n	8003c48 <HAL_ADC_Start_DMA+0xb4>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a3b      	ldr	r2, [pc, #236]	; (8003d28 <HAL_ADC_Start_DMA+0x194>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d002      	beq.n	8003c44 <HAL_ADC_Start_DMA+0xb0>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	e003      	b.n	8003c4c <HAL_ADC_Start_DMA+0xb8>
 8003c44:	4b39      	ldr	r3, [pc, #228]	; (8003d2c <HAL_ADC_Start_DMA+0x198>)
 8003c46:	e001      	b.n	8003c4c <HAL_ADC_Start_DMA+0xb8>
 8003c48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	6812      	ldr	r2, [r2, #0]
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d002      	beq.n	8003c5a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d105      	bne.n	8003c66 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d006      	beq.n	8003c80 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c76:	f023 0206 	bic.w	r2, r3, #6
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	661a      	str	r2, [r3, #96]	; 0x60
 8003c7e:	e002      	b.n	8003c86 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8a:	4a29      	ldr	r2, [pc, #164]	; (8003d30 <HAL_ADC_Start_DMA+0x19c>)
 8003c8c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c92:	4a28      	ldr	r2, [pc, #160]	; (8003d34 <HAL_ADC_Start_DMA+0x1a0>)
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9a:	4a27      	ldr	r2, [pc, #156]	; (8003d38 <HAL_ADC_Start_DMA+0x1a4>)
 8003c9c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	221c      	movs	r2, #28
 8003ca4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0210 	orr.w	r2, r2, #16
 8003cbc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0201 	orr.w	r2, r2, #1
 8003ccc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3340      	adds	r3, #64	; 0x40
 8003cd8:	4619      	mov	r1, r3
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f000 ff39 	bl	8004b54 <HAL_DMA_Start_IT>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fd55 	bl	800379a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003cf0:	e00d      	b.n	8003d0e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003cfa:	e008      	b.n	8003d0e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003d08:	e001      	b.n	8003d0e <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	50000100 	.word	0x50000100
 8003d1c:	50000300 	.word	0x50000300
 8003d20:	50000700 	.word	0x50000700
 8003d24:	50000600 	.word	0x50000600
 8003d28:	50000500 	.word	0x50000500
 8003d2c:	50000400 	.word	0x50000400
 8003d30:	080046bd 	.word	0x080046bd
 8003d34:	08004795 	.word	0x08004795
 8003d38:	080047b1 	.word	0x080047b1

08003d3c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b0b6      	sub	sp, #216	; 0xd8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d102      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x24>
 8003d96:	2302      	movs	r3, #2
 8003d98:	f000 bc13 	b.w	80045c2 <HAL_ADC_ConfigChannel+0x84a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fd0a 	bl	80037c2 <LL_ADC_REG_IsConversionOngoing>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f040 83f3 	bne.w	800459c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6859      	ldr	r1, [r3, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f7ff fbe7 	bl	8003596 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fcf8 	bl	80037c2 <LL_ADC_REG_IsConversionOngoing>
 8003dd2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff fd04 	bl	80037e8 <LL_ADC_INJ_IsConversionOngoing>
 8003de0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003de4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f040 81d9 	bne.w	80041a0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f040 81d4 	bne.w	80041a0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e00:	d10f      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f7ff fbee 	bl	80035ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fb95 	bl	800354a <LL_ADC_SetSamplingTimeCommonConfig>
 8003e20:	e00e      	b.n	8003e40 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6819      	ldr	r1, [r3, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f7ff fbdd 	bl	80035ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff fb85 	bl	800354a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	08db      	lsrs	r3, r3, #3
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d022      	beq.n	8003ea8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6919      	ldr	r1, [r3, #16]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e72:	f7ff fadf 	bl	8003434 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6919      	ldr	r1, [r3, #16]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	461a      	mov	r2, r3
 8003e84:	f7ff fb2b 	bl	80034de <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	6919      	ldr	r1, [r3, #16]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	7f1b      	ldrb	r3, [r3, #28]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d102      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x126>
 8003e98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e9c:	e000      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x128>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	f7ff fb37 	bl	8003514 <LL_ADC_SetOffsetSaturation>
 8003ea6:	e17b      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2100      	movs	r1, #0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff fae4 	bl	800347c <LL_ADC_GetOffsetChannel>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10a      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x15c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fad9 	bl	800347c <LL_ADC_GetOffsetChannel>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	0e9b      	lsrs	r3, r3, #26
 8003ece:	f003 021f 	and.w	r2, r3, #31
 8003ed2:	e01e      	b.n	8003f12 <HAL_ADC_ConfigChannel+0x19a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff face 	bl	800347c <LL_ADC_GetOffsetChannel>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003eea:	fa93 f3a3 	rbit	r3, r3
 8003eee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ef2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003efa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003f02:	2320      	movs	r3, #32
 8003f04:	e004      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003f06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d105      	bne.n	8003f2a <HAL_ADC_ConfigChannel+0x1b2>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	0e9b      	lsrs	r3, r3, #26
 8003f24:	f003 031f 	and.w	r3, r3, #31
 8003f28:	e018      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x1e4>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f36:	fa93 f3a3 	rbit	r3, r3
 8003f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003f46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003f4e:	2320      	movs	r3, #32
 8003f50:	e004      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f56:	fab3 f383 	clz	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d106      	bne.n	8003f6e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2200      	movs	r2, #0
 8003f66:	2100      	movs	r1, #0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff fa9d 	bl	80034a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2101      	movs	r1, #1
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fa81 	bl	800347c <LL_ADC_GetOffsetChannel>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x222>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2101      	movs	r1, #1
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff fa76 	bl	800347c <LL_ADC_GetOffsetChannel>
 8003f90:	4603      	mov	r3, r0
 8003f92:	0e9b      	lsrs	r3, r3, #26
 8003f94:	f003 021f 	and.w	r2, r3, #31
 8003f98:	e01e      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x260>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff fa6b 	bl	800347c <LL_ADC_GetOffsetChannel>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003fb0:	fa93 f3a3 	rbit	r3, r3
 8003fb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003fb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003fc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003fc8:	2320      	movs	r3, #32
 8003fca:	e004      	b.n	8003fd6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fd0:	fab3 f383 	clz	r3, r3
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x278>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	0e9b      	lsrs	r3, r3, #26
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	e018      	b.n	8004022 <HAL_ADC_ConfigChannel+0x2aa>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ffc:	fa93 f3a3 	rbit	r3, r3
 8004000:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004004:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004008:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800400c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004014:	2320      	movs	r3, #32
 8004016:	e004      	b.n	8004022 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800401c:	fab3 f383 	clz	r3, r3
 8004020:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004022:	429a      	cmp	r2, r3
 8004024:	d106      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2200      	movs	r2, #0
 800402c:	2101      	movs	r1, #1
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff fa3a 	bl	80034a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2102      	movs	r1, #2
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff fa1e 	bl	800347c <LL_ADC_GetOffsetChannel>
 8004040:	4603      	mov	r3, r0
 8004042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x2e8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2102      	movs	r1, #2
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff fa13 	bl	800347c <LL_ADC_GetOffsetChannel>
 8004056:	4603      	mov	r3, r0
 8004058:	0e9b      	lsrs	r3, r3, #26
 800405a:	f003 021f 	and.w	r2, r3, #31
 800405e:	e01e      	b.n	800409e <HAL_ADC_ConfigChannel+0x326>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2102      	movs	r1, #2
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff fa08 	bl	800347c <LL_ADC_GetOffsetChannel>
 800406c:	4603      	mov	r3, r0
 800406e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004076:	fa93 f3a3 	rbit	r3, r3
 800407a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800407e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004082:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004086:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800408e:	2320      	movs	r3, #32
 8004090:	e004      	b.n	800409c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d105      	bne.n	80040b6 <HAL_ADC_ConfigChannel+0x33e>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	0e9b      	lsrs	r3, r3, #26
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	e016      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x36c>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040c2:	fa93 f3a3 	rbit	r3, r3
 80040c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80040c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80040ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80040d6:	2320      	movs	r3, #32
 80040d8:	e004      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80040da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040de:	fab3 f383 	clz	r3, r3
 80040e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d106      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2200      	movs	r2, #0
 80040ee:	2102      	movs	r1, #2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff f9d9 	bl	80034a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2103      	movs	r1, #3
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff f9bd 	bl	800347c <LL_ADC_GetOffsetChannel>
 8004102:	4603      	mov	r3, r0
 8004104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x3aa>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2103      	movs	r1, #3
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff f9b2 	bl	800347c <LL_ADC_GetOffsetChannel>
 8004118:	4603      	mov	r3, r0
 800411a:	0e9b      	lsrs	r3, r3, #26
 800411c:	f003 021f 	and.w	r2, r3, #31
 8004120:	e017      	b.n	8004152 <HAL_ADC_ConfigChannel+0x3da>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2103      	movs	r1, #3
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff f9a7 	bl	800347c <LL_ADC_GetOffsetChannel>
 800412e:	4603      	mov	r3, r0
 8004130:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004134:	fa93 f3a3 	rbit	r3, r3
 8004138:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800413a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800413c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800413e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004144:	2320      	movs	r3, #32
 8004146:	e003      	b.n	8004150 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800414a:	fab3 f383 	clz	r3, r3
 800414e:	b2db      	uxtb	r3, r3
 8004150:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415a:	2b00      	cmp	r3, #0
 800415c:	d105      	bne.n	800416a <HAL_ADC_ConfigChannel+0x3f2>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	0e9b      	lsrs	r3, r3, #26
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	e011      	b.n	800418e <HAL_ADC_ConfigChannel+0x416>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004170:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004172:	fa93 f3a3 	rbit	r3, r3
 8004176:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800417a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800417c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004182:	2320      	movs	r3, #32
 8004184:	e003      	b.n	800418e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004188:	fab3 f383 	clz	r3, r3
 800418c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800418e:	429a      	cmp	r2, r3
 8004190:	d106      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2200      	movs	r2, #0
 8004198:	2103      	movs	r1, #3
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff f984 	bl	80034a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff fae5 	bl	8003774 <LL_ADC_IsEnabled>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f040 813d 	bne.w	800442c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	6819      	ldr	r1, [r3, #0]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	461a      	mov	r2, r3
 80041c0:	f7ff fa40 	bl	8003644 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	4aa2      	ldr	r2, [pc, #648]	; (8004454 <HAL_ADC_ConfigChannel+0x6dc>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	f040 812e 	bne.w	800442c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10b      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x480>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	0e9b      	lsrs	r3, r3, #26
 80041e6:	3301      	adds	r3, #1
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	2b09      	cmp	r3, #9
 80041ee:	bf94      	ite	ls
 80041f0:	2301      	movls	r3, #1
 80041f2:	2300      	movhi	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	e019      	b.n	800422c <HAL_ADC_ConfigChannel+0x4b4>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004200:	fa93 f3a3 	rbit	r3, r3
 8004204:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004208:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800420a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004210:	2320      	movs	r3, #32
 8004212:	e003      	b.n	800421c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004216:	fab3 f383 	clz	r3, r3
 800421a:	b2db      	uxtb	r3, r3
 800421c:	3301      	adds	r3, #1
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	2b09      	cmp	r3, #9
 8004224:	bf94      	ite	ls
 8004226:	2301      	movls	r3, #1
 8004228:	2300      	movhi	r3, #0
 800422a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800422c:	2b00      	cmp	r3, #0
 800422e:	d079      	beq.n	8004324 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004238:	2b00      	cmp	r3, #0
 800423a:	d107      	bne.n	800424c <HAL_ADC_ConfigChannel+0x4d4>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	0e9b      	lsrs	r3, r3, #26
 8004242:	3301      	adds	r3, #1
 8004244:	069b      	lsls	r3, r3, #26
 8004246:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800424a:	e015      	b.n	8004278 <HAL_ADC_ConfigChannel+0x500>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004254:	fa93 f3a3 	rbit	r3, r3
 8004258:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800425a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800425c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800425e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004264:	2320      	movs	r3, #32
 8004266:	e003      	b.n	8004270 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800426a:	fab3 f383 	clz	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	3301      	adds	r3, #1
 8004272:	069b      	lsls	r3, r3, #26
 8004274:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004280:	2b00      	cmp	r3, #0
 8004282:	d109      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x520>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	0e9b      	lsrs	r3, r3, #26
 800428a:	3301      	adds	r3, #1
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	2101      	movs	r1, #1
 8004292:	fa01 f303 	lsl.w	r3, r1, r3
 8004296:	e017      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x550>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a0:	fa93 f3a3 	rbit	r3, r3
 80042a4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80042a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80042aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80042b0:	2320      	movs	r3, #32
 80042b2:	e003      	b.n	80042bc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80042b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042b6:	fab3 f383 	clz	r3, r3
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	3301      	adds	r3, #1
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	2101      	movs	r1, #1
 80042c4:	fa01 f303 	lsl.w	r3, r1, r3
 80042c8:	ea42 0103 	orr.w	r1, r2, r3
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x576>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	0e9b      	lsrs	r3, r3, #26
 80042de:	3301      	adds	r3, #1
 80042e0:	f003 021f 	and.w	r2, r3, #31
 80042e4:	4613      	mov	r3, r2
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	4413      	add	r3, r2
 80042ea:	051b      	lsls	r3, r3, #20
 80042ec:	e018      	b.n	8004320 <HAL_ADC_ConfigChannel+0x5a8>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f6:	fa93 f3a3 	rbit	r3, r3
 80042fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80042fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004306:	2320      	movs	r3, #32
 8004308:	e003      	b.n	8004312 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800430a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800430c:	fab3 f383 	clz	r3, r3
 8004310:	b2db      	uxtb	r3, r3
 8004312:	3301      	adds	r3, #1
 8004314:	f003 021f 	and.w	r2, r3, #31
 8004318:	4613      	mov	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4413      	add	r3, r2
 800431e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004320:	430b      	orrs	r3, r1
 8004322:	e07e      	b.n	8004422 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432c:	2b00      	cmp	r3, #0
 800432e:	d107      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x5c8>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	0e9b      	lsrs	r3, r3, #26
 8004336:	3301      	adds	r3, #1
 8004338:	069b      	lsls	r3, r3, #26
 800433a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800433e:	e015      	b.n	800436c <HAL_ADC_ConfigChannel+0x5f4>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	fa93 f3a3 	rbit	r3, r3
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004358:	2320      	movs	r3, #32
 800435a:	e003      	b.n	8004364 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	fab3 f383 	clz	r3, r3
 8004362:	b2db      	uxtb	r3, r3
 8004364:	3301      	adds	r3, #1
 8004366:	069b      	lsls	r3, r3, #26
 8004368:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004374:	2b00      	cmp	r3, #0
 8004376:	d109      	bne.n	800438c <HAL_ADC_ConfigChannel+0x614>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	0e9b      	lsrs	r3, r3, #26
 800437e:	3301      	adds	r3, #1
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	2101      	movs	r1, #1
 8004386:	fa01 f303 	lsl.w	r3, r1, r3
 800438a:	e017      	b.n	80043bc <HAL_ADC_ConfigChannel+0x644>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	fa93 f3a3 	rbit	r3, r3
 8004398:	61fb      	str	r3, [r7, #28]
  return result;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80043a4:	2320      	movs	r3, #32
 80043a6:	e003      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	fab3 f383 	clz	r3, r3
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	3301      	adds	r3, #1
 80043b2:	f003 031f 	and.w	r3, r3, #31
 80043b6:	2101      	movs	r1, #1
 80043b8:	fa01 f303 	lsl.w	r3, r1, r3
 80043bc:	ea42 0103 	orr.w	r1, r2, r3
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10d      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x670>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	0e9b      	lsrs	r3, r3, #26
 80043d2:	3301      	adds	r3, #1
 80043d4:	f003 021f 	and.w	r2, r3, #31
 80043d8:	4613      	mov	r3, r2
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	4413      	add	r3, r2
 80043de:	3b1e      	subs	r3, #30
 80043e0:	051b      	lsls	r3, r3, #20
 80043e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043e6:	e01b      	b.n	8004420 <HAL_ADC_ConfigChannel+0x6a8>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	fa93 f3a3 	rbit	r3, r3
 80043f4:	613b      	str	r3, [r7, #16]
  return result;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004400:	2320      	movs	r3, #32
 8004402:	e003      	b.n	800440c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	fab3 f383 	clz	r3, r3
 800440a:	b2db      	uxtb	r3, r3
 800440c:	3301      	adds	r3, #1
 800440e:	f003 021f 	and.w	r2, r3, #31
 8004412:	4613      	mov	r3, r2
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	4413      	add	r3, r2
 8004418:	3b1e      	subs	r3, #30
 800441a:	051b      	lsls	r3, r3, #20
 800441c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004420:	430b      	orrs	r3, r1
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	6892      	ldr	r2, [r2, #8]
 8004426:	4619      	mov	r1, r3
 8004428:	f7ff f8e1 	bl	80035ee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4b09      	ldr	r3, [pc, #36]	; (8004458 <HAL_ADC_ConfigChannel+0x6e0>)
 8004432:	4013      	ands	r3, r2
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80be 	beq.w	80045b6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004442:	d004      	beq.n	800444e <HAL_ADC_ConfigChannel+0x6d6>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <HAL_ADC_ConfigChannel+0x6e4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d10a      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x6ec>
 800444e:	4b04      	ldr	r3, [pc, #16]	; (8004460 <HAL_ADC_ConfigChannel+0x6e8>)
 8004450:	e009      	b.n	8004466 <HAL_ADC_ConfigChannel+0x6ee>
 8004452:	bf00      	nop
 8004454:	407f0000 	.word	0x407f0000
 8004458:	80080000 	.word	0x80080000
 800445c:	50000100 	.word	0x50000100
 8004460:	50000300 	.word	0x50000300
 8004464:	4b59      	ldr	r3, [pc, #356]	; (80045cc <HAL_ADC_ConfigChannel+0x854>)
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe ffd6 	bl	8003418 <LL_ADC_GetCommonPathInternalCh>
 800446c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a56      	ldr	r2, [pc, #344]	; (80045d0 <HAL_ADC_ConfigChannel+0x858>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d004      	beq.n	8004484 <HAL_ADC_ConfigChannel+0x70c>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a55      	ldr	r2, [pc, #340]	; (80045d4 <HAL_ADC_ConfigChannel+0x85c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d13a      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004484:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d134      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004498:	d005      	beq.n	80044a6 <HAL_ADC_ConfigChannel+0x72e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a4e      	ldr	r2, [pc, #312]	; (80045d8 <HAL_ADC_ConfigChannel+0x860>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	f040 8085 	bne.w	80045b0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044ae:	d004      	beq.n	80044ba <HAL_ADC_ConfigChannel+0x742>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a49      	ldr	r2, [pc, #292]	; (80045dc <HAL_ADC_ConfigChannel+0x864>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d101      	bne.n	80044be <HAL_ADC_ConfigChannel+0x746>
 80044ba:	4a49      	ldr	r2, [pc, #292]	; (80045e0 <HAL_ADC_ConfigChannel+0x868>)
 80044bc:	e000      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x748>
 80044be:	4a43      	ldr	r2, [pc, #268]	; (80045cc <HAL_ADC_ConfigChannel+0x854>)
 80044c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f7fe ff91 	bl	80033f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044d0:	4b44      	ldr	r3, [pc, #272]	; (80045e4 <HAL_ADC_ConfigChannel+0x86c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	099b      	lsrs	r3, r3, #6
 80044d6:	4a44      	ldr	r2, [pc, #272]	; (80045e8 <HAL_ADC_ConfigChannel+0x870>)
 80044d8:	fba2 2303 	umull	r2, r3, r2, r3
 80044dc:	099b      	lsrs	r3, r3, #6
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	4613      	mov	r3, r2
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044ea:	e002      	b.n	80044f2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f9      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044f8:	e05a      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a3b      	ldr	r2, [pc, #236]	; (80045ec <HAL_ADC_ConfigChannel+0x874>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d125      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x7d8>
 8004504:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d11f      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a31      	ldr	r2, [pc, #196]	; (80045dc <HAL_ADC_ConfigChannel+0x864>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d104      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x7ac>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a34      	ldr	r2, [pc, #208]	; (80045f0 <HAL_ADC_ConfigChannel+0x878>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d047      	beq.n	80045b4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800452c:	d004      	beq.n	8004538 <HAL_ADC_ConfigChannel+0x7c0>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <HAL_ADC_ConfigChannel+0x864>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d101      	bne.n	800453c <HAL_ADC_ConfigChannel+0x7c4>
 8004538:	4a29      	ldr	r2, [pc, #164]	; (80045e0 <HAL_ADC_ConfigChannel+0x868>)
 800453a:	e000      	b.n	800453e <HAL_ADC_ConfigChannel+0x7c6>
 800453c:	4a23      	ldr	r2, [pc, #140]	; (80045cc <HAL_ADC_ConfigChannel+0x854>)
 800453e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004546:	4619      	mov	r1, r3
 8004548:	4610      	mov	r0, r2
 800454a:	f7fe ff52 	bl	80033f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800454e:	e031      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a27      	ldr	r2, [pc, #156]	; (80045f4 <HAL_ADC_ConfigChannel+0x87c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d12d      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800455a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d127      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1c      	ldr	r2, [pc, #112]	; (80045dc <HAL_ADC_ConfigChannel+0x864>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d022      	beq.n	80045b6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004578:	d004      	beq.n	8004584 <HAL_ADC_ConfigChannel+0x80c>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a17      	ldr	r2, [pc, #92]	; (80045dc <HAL_ADC_ConfigChannel+0x864>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d101      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x810>
 8004584:	4a16      	ldr	r2, [pc, #88]	; (80045e0 <HAL_ADC_ConfigChannel+0x868>)
 8004586:	e000      	b.n	800458a <HAL_ADC_ConfigChannel+0x812>
 8004588:	4a10      	ldr	r2, [pc, #64]	; (80045cc <HAL_ADC_ConfigChannel+0x854>)
 800458a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800458e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004592:	4619      	mov	r1, r3
 8004594:	4610      	mov	r0, r2
 8004596:	f7fe ff2c 	bl	80033f2 <LL_ADC_SetCommonPathInternalCh>
 800459a:	e00c      	b.n	80045b6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a0:	f043 0220 	orr.w	r2, r3, #32
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80045ae:	e002      	b.n	80045b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045b0:	bf00      	nop
 80045b2:	e000      	b.n	80045b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80045be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	37d8      	adds	r7, #216	; 0xd8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	50000700 	.word	0x50000700
 80045d0:	c3210000 	.word	0xc3210000
 80045d4:	90c00010 	.word	0x90c00010
 80045d8:	50000600 	.word	0x50000600
 80045dc:	50000100 	.word	0x50000100
 80045e0:	50000300 	.word	0x50000300
 80045e4:	20000000 	.word	0x20000000
 80045e8:	053e2d63 	.word	0x053e2d63
 80045ec:	c7520000 	.word	0xc7520000
 80045f0:	50000500 	.word	0x50000500
 80045f4:	cb840000 	.word	0xcb840000

080045f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff f8b5 	bl	8003774 <LL_ADC_IsEnabled>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d14d      	bne.n	80046ac <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <ADC_Enable+0xc0>)
 8004618:	4013      	ands	r3, r2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00d      	beq.n	800463a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004622:	f043 0210 	orr.w	r2, r3, #16
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800462e:	f043 0201 	orr.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e039      	b.n	80046ae <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff f884 	bl	800374c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004644:	f7fe fe94 	bl	8003370 <HAL_GetTick>
 8004648:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800464a:	e028      	b.n	800469e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff f88f 	bl	8003774 <LL_ADC_IsEnabled>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d104      	bne.n	8004666 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff f873 	bl	800374c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004666:	f7fe fe83 	bl	8003370 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d914      	bls.n	800469e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b01      	cmp	r3, #1
 8004680:	d00d      	beq.n	800469e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004686:	f043 0210 	orr.w	r2, r3, #16
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004692:	f043 0201 	orr.w	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e007      	b.n	80046ae <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d1cf      	bne.n	800464c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	8000003f 	.word	0x8000003f

080046bc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d14b      	bne.n	800476e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d021      	beq.n	8004734 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fe ff3b 	bl	8003570 <LL_ADC_REG_IsTriggerSourceSWStart>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d032      	beq.n	8004766 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d12b      	bne.n	8004766 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004712:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d11f      	bne.n	8004766 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472a:	f043 0201 	orr.w	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	65da      	str	r2, [r3, #92]	; 0x5c
 8004732:	e018      	b.n	8004766 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d111      	bne.n	8004766 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d105      	bne.n	8004766 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475e:	f043 0201 	orr.w	r2, r3, #1
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff fae8 	bl	8003d3c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800476c:	e00e      	b.n	800478c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004772:	f003 0310 	and.w	r3, r3, #16
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f7ff faf2 	bl	8003d64 <HAL_ADC_ErrorCallback>
}
 8004780:	e004      	b.n	800478c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	4798      	blx	r3
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f7ff fad4 	bl	8003d50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ce:	f043 0204 	orr.w	r2, r3, #4
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f7ff fac4 	bl	8003d64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047f4:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <__NVIC_SetPriorityGrouping+0x44>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004800:	4013      	ands	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800480c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004816:	4a04      	ldr	r2, [pc, #16]	; (8004828 <__NVIC_SetPriorityGrouping+0x44>)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	60d3      	str	r3, [r2, #12]
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	e000ed00 	.word	0xe000ed00

0800482c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <__NVIC_GetPriorityGrouping+0x18>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	0a1b      	lsrs	r3, r3, #8
 8004836:	f003 0307 	and.w	r3, r3, #7
}
 800483a:	4618      	mov	r0, r3
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	e000ed00 	.word	0xe000ed00

08004848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004856:	2b00      	cmp	r3, #0
 8004858:	db0b      	blt.n	8004872 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	f003 021f 	and.w	r2, r3, #31
 8004860:	4907      	ldr	r1, [pc, #28]	; (8004880 <__NVIC_EnableIRQ+0x38>)
 8004862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	2001      	movs	r0, #1
 800486a:	fa00 f202 	lsl.w	r2, r0, r2
 800486e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	e000e100 	.word	0xe000e100

08004884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	6039      	str	r1, [r7, #0]
 800488e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004894:	2b00      	cmp	r3, #0
 8004896:	db0a      	blt.n	80048ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	b2da      	uxtb	r2, r3
 800489c:	490c      	ldr	r1, [pc, #48]	; (80048d0 <__NVIC_SetPriority+0x4c>)
 800489e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a2:	0112      	lsls	r2, r2, #4
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	440b      	add	r3, r1
 80048a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048ac:	e00a      	b.n	80048c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	4908      	ldr	r1, [pc, #32]	; (80048d4 <__NVIC_SetPriority+0x50>)
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	3b04      	subs	r3, #4
 80048bc:	0112      	lsls	r2, r2, #4
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	440b      	add	r3, r1
 80048c2:	761a      	strb	r2, [r3, #24]
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	e000e100 	.word	0xe000e100
 80048d4:	e000ed00 	.word	0xe000ed00

080048d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048d8:	b480      	push	{r7}
 80048da:	b089      	sub	sp, #36	; 0x24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f1c3 0307 	rsb	r3, r3, #7
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	bf28      	it	cs
 80048f6:	2304      	movcs	r3, #4
 80048f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	3304      	adds	r3, #4
 80048fe:	2b06      	cmp	r3, #6
 8004900:	d902      	bls.n	8004908 <NVIC_EncodePriority+0x30>
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	3b03      	subs	r3, #3
 8004906:	e000      	b.n	800490a <NVIC_EncodePriority+0x32>
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800490c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	43da      	mvns	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	401a      	ands	r2, r3
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004920:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	fa01 f303 	lsl.w	r3, r1, r3
 800492a:	43d9      	mvns	r1, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004930:	4313      	orrs	r3, r2
         );
}
 8004932:	4618      	mov	r0, r3
 8004934:	3724      	adds	r7, #36	; 0x24
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3b01      	subs	r3, #1
 800494c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004950:	d301      	bcc.n	8004956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004952:	2301      	movs	r3, #1
 8004954:	e00f      	b.n	8004976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004956:	4a0a      	ldr	r2, [pc, #40]	; (8004980 <SysTick_Config+0x40>)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3b01      	subs	r3, #1
 800495c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800495e:	210f      	movs	r1, #15
 8004960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004964:	f7ff ff8e 	bl	8004884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004968:	4b05      	ldr	r3, [pc, #20]	; (8004980 <SysTick_Config+0x40>)
 800496a:	2200      	movs	r2, #0
 800496c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800496e:	4b04      	ldr	r3, [pc, #16]	; (8004980 <SysTick_Config+0x40>)
 8004970:	2207      	movs	r2, #7
 8004972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	e000e010 	.word	0xe000e010

08004984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff ff29 	bl	80047e4 <__NVIC_SetPriorityGrouping>
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b086      	sub	sp, #24
 800499e:	af00      	add	r7, sp, #0
 80049a0:	4603      	mov	r3, r0
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
 80049a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049a8:	f7ff ff40 	bl	800482c <__NVIC_GetPriorityGrouping>
 80049ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	6978      	ldr	r0, [r7, #20]
 80049b4:	f7ff ff90 	bl	80048d8 <NVIC_EncodePriority>
 80049b8:	4602      	mov	r2, r0
 80049ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049be:	4611      	mov	r1, r2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff ff5f 	bl	8004884 <__NVIC_SetPriority>
}
 80049c6:	bf00      	nop
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	4603      	mov	r3, r0
 80049d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff ff33 	bl	8004848 <__NVIC_EnableIRQ>
}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7ff ffa4 	bl	8004940 <SysTick_Config>
 80049f8:	4603      	mov	r3, r0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e08d      	b.n	8004b32 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	4b47      	ldr	r3, [pc, #284]	; (8004b3c <HAL_DMA_Init+0x138>)
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d80f      	bhi.n	8004a42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	4b45      	ldr	r3, [pc, #276]	; (8004b40 <HAL_DMA_Init+0x13c>)
 8004a2a:	4413      	add	r3, r2
 8004a2c:	4a45      	ldr	r2, [pc, #276]	; (8004b44 <HAL_DMA_Init+0x140>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	091b      	lsrs	r3, r3, #4
 8004a34:	009a      	lsls	r2, r3, #2
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a42      	ldr	r2, [pc, #264]	; (8004b48 <HAL_DMA_Init+0x144>)
 8004a3e:	641a      	str	r2, [r3, #64]	; 0x40
 8004a40:	e00e      	b.n	8004a60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	4b40      	ldr	r3, [pc, #256]	; (8004b4c <HAL_DMA_Init+0x148>)
 8004a4a:	4413      	add	r3, r2
 8004a4c:	4a3d      	ldr	r2, [pc, #244]	; (8004b44 <HAL_DMA_Init+0x140>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	091b      	lsrs	r3, r3, #4
 8004a54:	009a      	lsls	r2, r3, #2
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a3c      	ldr	r2, [pc, #240]	; (8004b50 <HAL_DMA_Init+0x14c>)
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f9b6 	bl	8004e24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ac0:	d102      	bne.n	8004ac8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004adc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d010      	beq.n	8004b08 <HAL_DMA_Init+0x104>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d80c      	bhi.n	8004b08 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f9d6 	bl	8004ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	e008      	b.n	8004b1a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40020407 	.word	0x40020407
 8004b40:	bffdfff8 	.word	0xbffdfff8
 8004b44:	cccccccd 	.word	0xcccccccd
 8004b48:	40020000 	.word	0x40020000
 8004b4c:	bffdfbf8 	.word	0xbffdfbf8
 8004b50:	40020400 	.word	0x40020400

08004b54 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_DMA_Start_IT+0x20>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e066      	b.n	8004c42 <HAL_DMA_Start_IT+0xee>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d155      	bne.n	8004c34 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0201 	bic.w	r2, r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f8fb 	bl	8004da8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 020e 	orr.w	r2, r2, #14
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	e00f      	b.n	8004bec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0204 	bic.w	r2, r2, #4
 8004bda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 020a 	orr.w	r2, r2, #10
 8004bea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d007      	beq.n	8004c0a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c08:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d007      	beq.n	8004c22 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c20:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	e005      	b.n	8004c40 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	f003 031f 	and.w	r3, r3, #31
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	409a      	lsls	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4013      	ands	r3, r2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d026      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x7a>
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d021      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d107      	bne.n	8004c9e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0204 	bic.w	r2, r2, #4
 8004c9c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca2:	f003 021f 	and.w	r2, r3, #31
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	2104      	movs	r1, #4
 8004cac:	fa01 f202 	lsl.w	r2, r1, r2
 8004cb0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d071      	beq.n	8004d9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004cc2:	e06c      	b.n	8004d9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	2202      	movs	r2, #2
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d02e      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d029      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10b      	bne.n	8004d08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 020a 	bic.w	r2, r2, #10
 8004cfe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0c:	f003 021f 	and.w	r2, r3, #31
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	2102      	movs	r1, #2
 8004d16:	fa01 f202 	lsl.w	r2, r1, r2
 8004d1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d038      	beq.n	8004d9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004d34:	e033      	b.n	8004d9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	f003 031f 	and.w	r3, r3, #31
 8004d3e:	2208      	movs	r2, #8
 8004d40:	409a      	lsls	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4013      	ands	r3, r2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d02a      	beq.n	8004da0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d025      	beq.n	8004da0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 020e 	bic.w	r2, r2, #14
 8004d62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d68:	f003 021f 	and.w	r2, r3, #31
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d70:	2101      	movs	r1, #1
 8004d72:	fa01 f202 	lsl.w	r2, r1, r2
 8004d76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d004      	beq.n	8004da0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
}
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004dbe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d004      	beq.n	8004dd2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004dd0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd6:	f003 021f 	and.w	r2, r3, #31
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	2101      	movs	r1, #1
 8004de0:	fa01 f202 	lsl.w	r2, r1, r2
 8004de4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b10      	cmp	r3, #16
 8004df4:	d108      	bne.n	8004e08 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004e06:	e007      	b.n	8004e18 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	60da      	str	r2, [r3, #12]
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	4b16      	ldr	r3, [pc, #88]	; (8004e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d802      	bhi.n	8004e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004e38:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	e001      	b.n	8004e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004e3e:	4b15      	ldr	r3, [pc, #84]	; (8004e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004e40:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	3b08      	subs	r3, #8
 8004e4e:	4a12      	ldr	r2, [pc, #72]	; (8004e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	091b      	lsrs	r3, r3, #4
 8004e56:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5c:	089b      	lsrs	r3, r3, #2
 8004e5e:	009a      	lsls	r2, r3, #2
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	4413      	add	r3, r2
 8004e64:	461a      	mov	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a0b      	ldr	r2, [pc, #44]	; (8004e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004e6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f003 031f 	and.w	r3, r3, #31
 8004e76:	2201      	movs	r2, #1
 8004e78:	409a      	lsls	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e7e:	bf00      	nop
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	40020407 	.word	0x40020407
 8004e90:	40020800 	.word	0x40020800
 8004e94:	40020820 	.word	0x40020820
 8004e98:	cccccccd 	.word	0xcccccccd
 8004e9c:	40020880 	.word	0x40020880

08004ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	461a      	mov	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ec2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	2201      	movs	r2, #1
 8004ece:	409a      	lsls	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	1000823f 	.word	0x1000823f
 8004ee4:	40020940 	.word	0x40020940

08004ee8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e147      	b.n	800518a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fd fcaa 	bl	8002868 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0210 	bic.w	r2, r2, #16
 8004f22:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f24:	f7fe fa24 	bl	8003370 <HAL_GetTick>
 8004f28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004f2a:	e012      	b.n	8004f52 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004f2c:	f7fe fa20 	bl	8003370 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b0a      	cmp	r3, #10
 8004f38:	d90b      	bls.n	8004f52 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f3e:	f043 0201 	orr.w	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2203      	movs	r2, #3
 8004f4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e11b      	b.n	800518a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d0e5      	beq.n	8004f2c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f70:	f7fe f9fe 	bl	8003370 <HAL_GetTick>
 8004f74:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004f76:	e012      	b.n	8004f9e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004f78:	f7fe f9fa 	bl	8003370 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b0a      	cmp	r3, #10
 8004f84:	d90b      	bls.n	8004f9e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f8a:	f043 0201 	orr.w	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2203      	movs	r2, #3
 8004f96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e0f5      	b.n	800518a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0e5      	beq.n	8004f78 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0202 	orr.w	r2, r2, #2
 8004fba:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a74      	ldr	r2, [pc, #464]	; (8005194 <HAL_FDCAN_Init+0x2ac>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d103      	bne.n	8004fce <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004fc6:	4a74      	ldr	r2, [pc, #464]	; (8005198 <HAL_FDCAN_Init+0x2b0>)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	7c1b      	ldrb	r3, [r3, #16]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d108      	bne.n	8004fe8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	699a      	ldr	r2, [r3, #24]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe4:	619a      	str	r2, [r3, #24]
 8004fe6:	e007      	b.n	8004ff8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699a      	ldr	r2, [r3, #24]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ff6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	7c5b      	ldrb	r3, [r3, #17]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d108      	bne.n	8005012 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800500e:	619a      	str	r2, [r3, #24]
 8005010:	e007      	b.n	8005022 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699a      	ldr	r2, [r3, #24]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005020:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	7c9b      	ldrb	r3, [r3, #18]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d108      	bne.n	800503c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699a      	ldr	r2, [r3, #24]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005038:	619a      	str	r2, [r3, #24]
 800503a:	e007      	b.n	800504c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800504a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699a      	ldr	r2, [r3, #24]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005070:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0210 	bic.w	r2, r2, #16
 8005080:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d108      	bne.n	800509c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	699a      	ldr	r2, [r3, #24]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f042 0204 	orr.w	r2, r2, #4
 8005098:	619a      	str	r2, [r3, #24]
 800509a:	e02c      	b.n	80050f6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d028      	beq.n	80050f6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d01c      	beq.n	80050e6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050ba:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	691a      	ldr	r2, [r3, #16]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0210 	orr.w	r2, r2, #16
 80050ca:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d110      	bne.n	80050f6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0220 	orr.w	r2, r2, #32
 80050e2:	619a      	str	r2, [r3, #24]
 80050e4:	e007      	b.n	80050f6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	699a      	ldr	r2, [r3, #24]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0220 	orr.w	r2, r2, #32
 80050f4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	3b01      	subs	r3, #1
 8005104:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005106:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800510e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	3b01      	subs	r3, #1
 8005118:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800511e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005120:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800512a:	d115      	bne.n	8005158 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005130:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	3b01      	subs	r3, #1
 8005138:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800513a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005140:	3b01      	subs	r3, #1
 8005142:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005144:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	3b01      	subs	r3, #1
 800514e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005154:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005156:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fbe2 	bl	8005938 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40006400 	.word	0x40006400
 8005198:	40006500 	.word	0x40006500

0800519c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d110      	bne.n	80051d2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0201 	bic.w	r2, r2, #1
 80051c6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e006      	b.n	80051e0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d6:	f043 0204 	orr.w	r2, r3, #4
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
  }
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d12c      	bne.n	800525e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800520c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d007      	beq.n	8005224 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005218:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e023      	b.n	800526c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800522c:	0c1b      	lsrs	r3, r3, #16
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fbe8 	bl	8005a10 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2101      	movs	r1, #1
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	fa01 f202 	lsl.w	r2, r1, r2
 800524c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005250:	2201      	movs	r2, #1
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	409a      	lsls	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	e006      	b.n	800526c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005262:	f043 0208 	orr.w	r2, r3, #8
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
  }
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005274:	b480      	push	{r7}
 8005276:	b08b      	sub	sp, #44	; 0x2c
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005288:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800528a:	7efb      	ldrb	r3, [r7, #27]
 800528c:	2b02      	cmp	r3, #2
 800528e:	f040 80bc 	bne.w	800540a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b40      	cmp	r3, #64	; 0x40
 8005296:	d121      	bne.n	80052dc <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d107      	bne.n	80052b8 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0af      	b.n	8005418 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c0:	0a1b      	lsrs	r3, r3, #8
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	4613      	mov	r3, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	4413      	add	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	440b      	add	r3, r1
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
 80052da:	e020      	b.n	800531e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d107      	bne.n	80052fc <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e08d      	b.n	8005418 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005304:	0a1b      	lsrs	r3, r3, #8
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	4613      	mov	r3, r2
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	4413      	add	r3, r2
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	440b      	add	r3, r1
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d107      	bne.n	8005342 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	0c9b      	lsrs	r3, r3, #18
 8005338:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	e005      	b.n	800534e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	3304      	adds	r3, #4
 800536a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	b29a      	uxth	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	0e1b      	lsrs	r3, r3, #24
 80053a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	0fda      	lsrs	r2, r3, #31
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	3304      	adds	r3, #4
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80053bc:	2300      	movs	r3, #0
 80053be:	623b      	str	r3, [r7, #32]
 80053c0:	e00a      	b.n	80053d8 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	441a      	add	r2, r3
 80053c8:	6839      	ldr	r1, [r7, #0]
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	440b      	add	r3, r1
 80053ce:	7812      	ldrb	r2, [r2, #0]
 80053d0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	3301      	adds	r3, #1
 80053d6:	623b      	str	r3, [r7, #32]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	0c1b      	lsrs	r3, r3, #16
 80053de:	4a11      	ldr	r2, [pc, #68]	; (8005424 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80053e0:	5cd3      	ldrb	r3, [r2, r3]
 80053e2:	461a      	mov	r2, r3
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d3eb      	bcc.n	80053c2 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d105      	bne.n	80053fc <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80053fa:	e004      	b.n	8005406 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	e006      	b.n	8005418 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540e:	f043 0208 	orr.w	r2, r3, #8
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
  }
}
 8005418:	4618      	mov	r0, r3
 800541a:	372c      	adds	r7, #44	; 0x2c
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	0800960c 	.word	0x0800960c

08005428 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800543a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800543c:	7dfb      	ldrb	r3, [r7, #23]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d003      	beq.n	800544a <HAL_FDCAN_ActivateNotification+0x22>
 8005442:	7dfb      	ldrb	r3, [r7, #23]
 8005444:	2b02      	cmp	r3, #2
 8005446:	f040 80c8 	bne.w	80055da <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005450:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d03b      	beq.n	80054de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800546c:	2b00      	cmp	r3, #0
 800546e:	d004      	beq.n	800547a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d031      	beq.n	80054de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005480:	2b00      	cmp	r3, #0
 8005482:	d004      	beq.n	800548e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b00      	cmp	r3, #0
 800548c:	d027      	beq.n	80054de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005494:	2b00      	cmp	r3, #0
 8005496:	d004      	beq.n	80054a2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d01d      	beq.n	80054de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d004      	beq.n	80054b6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d013      	beq.n	80054de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d009      	beq.n	80054de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00c      	beq.n	80054ee <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d107      	bne.n	80054ee <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0201 	orr.w	r2, r2, #1
 80054ec:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d004      	beq.n	8005502 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d13b      	bne.n	800557a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005508:	2b00      	cmp	r3, #0
 800550a:	d004      	beq.n	8005516 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d131      	bne.n	800557a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	2b00      	cmp	r3, #0
 8005528:	d127      	bne.n	800557a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005530:	2b00      	cmp	r3, #0
 8005532:	d004      	beq.n	800553e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d11d      	bne.n	800557a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005544:	2b00      	cmp	r3, #0
 8005546:	d004      	beq.n	8005552 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f003 0310 	and.w	r3, r3, #16
 800554e:	2b00      	cmp	r3, #0
 8005550:	d113      	bne.n	800557a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00c      	beq.n	800558a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	d007      	beq.n	800558a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0202 	orr.w	r2, r2, #2
 8005588:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005590:	2b00      	cmp	r3, #0
 8005592:	d009      	beq.n	80055a8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d009      	beq.n	80055c6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	e006      	b.n	80055e8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055de:	f043 0202 	orr.w	r2, r3, #2
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
  }
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	371c      	adds	r7, #28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08a      	sub	sp, #40	; 0x28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005602:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005610:	4013      	ands	r3, r2
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005626:	6a3a      	ldr	r2, [r7, #32]
 8005628:	4013      	ands	r3, r2
 800562a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005636:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	4013      	ands	r3, r2
 8005642:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800564e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	4013      	ands	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005662:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005666:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4013      	ands	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00d      	beq.n	800569e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568c:	2b00      	cmp	r3, #0
 800568e:	d006      	beq.n	800569e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2240      	movs	r2, #64	; 0x40
 8005696:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f92e 	bl	80058fa <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01b      	beq.n	80056e4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d014      	beq.n	80056e4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80056c2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4013      	ands	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056da:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80056dc:	6939      	ldr	r1, [r7, #16]
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f8ec 	bl	80058bc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80056f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f8b6 	bl	8005866 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d007      	beq.n	8005710 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6a3a      	ldr	r2, [r7, #32]
 8005706:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005708:	6a39      	ldr	r1, [r7, #32]
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fd fae8 	bl	8002ce0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d007      	beq.n	8005726 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800571e:	69f9      	ldr	r1, [r7, #28]
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f8ab 	bl	800587c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800572c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00e      	beq.n	8005752 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800573e:	2b00      	cmp	r3, #0
 8005740:	d007      	beq.n	8005752 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800574a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f8a0 	bl	8005892 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01a      	beq.n	8005796 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576a:	2b00      	cmp	r3, #0
 800576c:	d013      	beq.n	8005796 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005776:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4013      	ands	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2280      	movs	r2, #128	; 0x80
 800578c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800578e:	68f9      	ldr	r1, [r7, #12]
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f888 	bl	80058a6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00e      	beq.n	80057c2 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d007      	beq.n	80057c2 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057ba:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f888 	bl	80058d2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00e      	beq.n	80057ee <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d007      	beq.n	80057ee <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80057e6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f87c 	bl	80058e6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d011      	beq.n	8005820 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005812:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005818:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d007      	beq.n	8005836 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800582e:	6979      	ldr	r1, [r7, #20]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f876 	bl	8005922 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d009      	beq.n	8005850 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f858 	bl	800590e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800585e:	bf00      	nop
 8005860:	3728      	adds	r7, #40	; 0x28
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005940:	4b30      	ldr	r3, [pc, #192]	; (8005a04 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005942:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a2f      	ldr	r2, [pc, #188]	; (8005a08 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d103      	bne.n	8005956 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005954:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a2c      	ldr	r2, [pc, #176]	; (8005a0c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d103      	bne.n	8005968 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005966:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005976:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597e:	041a      	lsls	r2, r3, #16
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800599c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	061a      	lsls	r2, r3, #24
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	e005      	b.n	80059ea <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	3304      	adds	r3, #4
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d3f3      	bcc.n	80059de <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80059f6:	bf00      	nop
 80059f8:	bf00      	nop
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	4000a400 	.word	0x4000a400
 8005a08:	40006800 	.word	0x40006800
 8005a0c:	40006c00 	.word	0x40006c00

08005a10 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b089      	sub	sp, #36	; 0x24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10a      	bne.n	8005a3c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005a2e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005a36:	4313      	orrs	r3, r2
 8005a38:	61fb      	str	r3, [r7, #28]
 8005a3a:	e00a      	b.n	8005a52 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005a44:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005a4a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005a4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a50:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005a5c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005a62:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005a68:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	440b      	add	r3, r1
 8005a82:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	69fa      	ldr	r2, [r7, #28]
 8005a88:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	e020      	b.n	8005ae4 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	3303      	adds	r3, #3
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	3302      	adds	r3, #2
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	440b      	add	r3, r1
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005aba:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	440b      	add	r3, r1
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005ac8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	440a      	add	r2, r1
 8005ad0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005ad2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	3304      	adds	r3, #4
 8005adc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	0c1b      	lsrs	r3, r3, #16
 8005aea:	4a06      	ldr	r2, [pc, #24]	; (8005b04 <FDCAN_CopyMessageToRAM+0xf4>)
 8005aec:	5cd3      	ldrb	r3, [r2, r3]
 8005aee:	461a      	mov	r2, r3
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d3d5      	bcc.n	8005aa2 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8005af6:	bf00      	nop
 8005af8:	bf00      	nop
 8005afa:	3724      	adds	r7, #36	; 0x24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	0800960c 	.word	0x0800960c

08005b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005b16:	e15a      	b.n	8005dce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	fa01 f303 	lsl.w	r3, r1, r3
 8005b24:	4013      	ands	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 814c 	beq.w	8005dc8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d005      	beq.n	8005b48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d130      	bne.n	8005baa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	2203      	movs	r2, #3
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b7e:	2201      	movs	r2, #1
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	43db      	mvns	r3, r3
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	091b      	lsrs	r3, r3, #4
 8005b94:	f003 0201 	and.w	r2, r3, #1
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d017      	beq.n	8005be6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	43db      	mvns	r3, r3
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d123      	bne.n	8005c3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	08da      	lsrs	r2, r3, #3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	3208      	adds	r2, #8
 8005bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	220f      	movs	r2, #15
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	43db      	mvns	r3, r3
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4013      	ands	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	691a      	ldr	r2, [r3, #16]
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	fa02 f303 	lsl.w	r3, r2, r3
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	08da      	lsrs	r2, r3, #3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3208      	adds	r2, #8
 8005c34:	6939      	ldr	r1, [r7, #16]
 8005c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	2203      	movs	r2, #3
 8005c46:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4a:	43db      	mvns	r3, r3
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f003 0203 	and.w	r2, r3, #3
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 80a6 	beq.w	8005dc8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c7c:	4b5b      	ldr	r3, [pc, #364]	; (8005dec <HAL_GPIO_Init+0x2e4>)
 8005c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c80:	4a5a      	ldr	r2, [pc, #360]	; (8005dec <HAL_GPIO_Init+0x2e4>)
 8005c82:	f043 0301 	orr.w	r3, r3, #1
 8005c86:	6613      	str	r3, [r2, #96]	; 0x60
 8005c88:	4b58      	ldr	r3, [pc, #352]	; (8005dec <HAL_GPIO_Init+0x2e4>)
 8005c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	60bb      	str	r3, [r7, #8]
 8005c92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c94:	4a56      	ldr	r2, [pc, #344]	; (8005df0 <HAL_GPIO_Init+0x2e8>)
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	089b      	lsrs	r3, r3, #2
 8005c9a:	3302      	adds	r3, #2
 8005c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f003 0303 	and.w	r3, r3, #3
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	220f      	movs	r2, #15
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005cbe:	d01f      	beq.n	8005d00 <HAL_GPIO_Init+0x1f8>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a4c      	ldr	r2, [pc, #304]	; (8005df4 <HAL_GPIO_Init+0x2ec>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d019      	beq.n	8005cfc <HAL_GPIO_Init+0x1f4>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a4b      	ldr	r2, [pc, #300]	; (8005df8 <HAL_GPIO_Init+0x2f0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d013      	beq.n	8005cf8 <HAL_GPIO_Init+0x1f0>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a4a      	ldr	r2, [pc, #296]	; (8005dfc <HAL_GPIO_Init+0x2f4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00d      	beq.n	8005cf4 <HAL_GPIO_Init+0x1ec>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a49      	ldr	r2, [pc, #292]	; (8005e00 <HAL_GPIO_Init+0x2f8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d007      	beq.n	8005cf0 <HAL_GPIO_Init+0x1e8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a48      	ldr	r2, [pc, #288]	; (8005e04 <HAL_GPIO_Init+0x2fc>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d101      	bne.n	8005cec <HAL_GPIO_Init+0x1e4>
 8005ce8:	2305      	movs	r3, #5
 8005cea:	e00a      	b.n	8005d02 <HAL_GPIO_Init+0x1fa>
 8005cec:	2306      	movs	r3, #6
 8005cee:	e008      	b.n	8005d02 <HAL_GPIO_Init+0x1fa>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	e006      	b.n	8005d02 <HAL_GPIO_Init+0x1fa>
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e004      	b.n	8005d02 <HAL_GPIO_Init+0x1fa>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e002      	b.n	8005d02 <HAL_GPIO_Init+0x1fa>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e000      	b.n	8005d02 <HAL_GPIO_Init+0x1fa>
 8005d00:	2300      	movs	r3, #0
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	f002 0203 	and.w	r2, r2, #3
 8005d08:	0092      	lsls	r2, r2, #2
 8005d0a:	4093      	lsls	r3, r2
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d12:	4937      	ldr	r1, [pc, #220]	; (8005df0 <HAL_GPIO_Init+0x2e8>)
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	089b      	lsrs	r3, r3, #2
 8005d18:	3302      	adds	r3, #2
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d20:	4b39      	ldr	r3, [pc, #228]	; (8005e08 <HAL_GPIO_Init+0x300>)
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d44:	4a30      	ldr	r2, [pc, #192]	; (8005e08 <HAL_GPIO_Init+0x300>)
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005d4a:	4b2f      	ldr	r3, [pc, #188]	; (8005e08 <HAL_GPIO_Init+0x300>)
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	43db      	mvns	r3, r3
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4013      	ands	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d6e:	4a26      	ldr	r2, [pc, #152]	; (8005e08 <HAL_GPIO_Init+0x300>)
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005d74:	4b24      	ldr	r3, [pc, #144]	; (8005e08 <HAL_GPIO_Init+0x300>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4013      	ands	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d98:	4a1b      	ldr	r2, [pc, #108]	; (8005e08 <HAL_GPIO_Init+0x300>)
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005d9e:	4b1a      	ldr	r3, [pc, #104]	; (8005e08 <HAL_GPIO_Init+0x300>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	43db      	mvns	r3, r3
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4013      	ands	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005dc2:	4a11      	ldr	r2, [pc, #68]	; (8005e08 <HAL_GPIO_Init+0x300>)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f47f ae9d 	bne.w	8005b18 <HAL_GPIO_Init+0x10>
  }
}
 8005dde:	bf00      	nop
 8005de0:	bf00      	nop
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	40021000 	.word	0x40021000
 8005df0:	40010000 	.word	0x40010000
 8005df4:	48000400 	.word	0x48000400
 8005df8:	48000800 	.word	0x48000800
 8005dfc:	48000c00 	.word	0x48000c00
 8005e00:	48001000 	.word	0x48001000
 8005e04:	48001400 	.word	0x48001400
 8005e08:	40010400 	.word	0x40010400

08005e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	807b      	strh	r3, [r7, #2]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e1c:	787b      	ldrb	r3, [r7, #1]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e22:	887a      	ldrh	r2, [r7, #2]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e28:	e002      	b.n	8005e30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e2a:	887a      	ldrh	r2, [r7, #2]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e081      	b.n	8005f52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fc fdf6 	bl	8002a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2224      	movs	r2, #36	; 0x24
 8005e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0201 	bic.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d107      	bne.n	8005eb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eb2:	609a      	str	r2, [r3, #8]
 8005eb4:	e006      	b.n	8005ec4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005ec2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d104      	bne.n	8005ed6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ed4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ef8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	69d9      	ldr	r1, [r3, #28]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1a      	ldr	r2, [r3, #32]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	607a      	str	r2, [r7, #4]
 8005f66:	461a      	mov	r2, r3
 8005f68:	460b      	mov	r3, r1
 8005f6a:	817b      	strh	r3, [r7, #10]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	f040 80da 	bne.w	8006132 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_I2C_Master_Transmit+0x30>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e0d3      	b.n	8006134 <HAL_I2C_Master_Transmit+0x1d8>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f94:	f7fd f9ec 	bl	8003370 <HAL_GetTick>
 8005f98:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	2319      	movs	r3, #25
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 fb4e 	bl	8006648 <I2C_WaitOnFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e0be      	b.n	8006134 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2221      	movs	r2, #33	; 0x21
 8005fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2210      	movs	r2, #16
 8005fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	893a      	ldrh	r2, [r7, #8]
 8005fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2bff      	cmp	r3, #255	; 0xff
 8005fe6:	d90e      	bls.n	8006006 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	22ff      	movs	r2, #255	; 0xff
 8005fec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	8979      	ldrh	r1, [r7, #10]
 8005ff6:	4b51      	ldr	r3, [pc, #324]	; (800613c <HAL_I2C_Master_Transmit+0x1e0>)
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 fd44 	bl	8006a8c <I2C_TransferConfig>
 8006004:	e06c      	b.n	80060e0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006014:	b2da      	uxtb	r2, r3
 8006016:	8979      	ldrh	r1, [r7, #10]
 8006018:	4b48      	ldr	r3, [pc, #288]	; (800613c <HAL_I2C_Master_Transmit+0x1e0>)
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 fd33 	bl	8006a8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006026:	e05b      	b.n	80060e0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	6a39      	ldr	r1, [r7, #32]
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 fb4b 	bl	80066c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e07b      	b.n	8006134 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	781a      	ldrb	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006056:	b29b      	uxth	r3, r3
 8006058:	3b01      	subs	r3, #1
 800605a:	b29a      	uxth	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d034      	beq.n	80060e0 <HAL_I2C_Master_Transmit+0x184>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607a:	2b00      	cmp	r3, #0
 800607c:	d130      	bne.n	80060e0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	2200      	movs	r2, #0
 8006086:	2180      	movs	r1, #128	; 0x80
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 fadd 	bl	8006648 <I2C_WaitOnFlagUntilTimeout>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e04d      	b.n	8006134 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609c:	b29b      	uxth	r3, r3
 800609e:	2bff      	cmp	r3, #255	; 0xff
 80060a0:	d90e      	bls.n	80060c0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	22ff      	movs	r2, #255	; 0xff
 80060a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	8979      	ldrh	r1, [r7, #10]
 80060b0:	2300      	movs	r3, #0
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 fce7 	bl	8006a8c <I2C_TransferConfig>
 80060be:	e00f      	b.n	80060e0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	8979      	ldrh	r1, [r7, #10]
 80060d2:	2300      	movs	r3, #0
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 fcd6 	bl	8006a8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d19e      	bne.n	8006028 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	6a39      	ldr	r1, [r7, #32]
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 fb2a 	bl	8006748 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e01a      	b.n	8006134 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2220      	movs	r2, #32
 8006104:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6859      	ldr	r1, [r3, #4]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <HAL_I2C_Master_Transmit+0x1e4>)
 8006112:	400b      	ands	r3, r1
 8006114:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	e000      	b.n	8006134 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006132:	2302      	movs	r3, #2
  }
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	80002000 	.word	0x80002000
 8006140:	fe00e800 	.word	0xfe00e800

08006144 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	607a      	str	r2, [r7, #4]
 800614e:	461a      	mov	r2, r3
 8006150:	460b      	mov	r3, r1
 8006152:	817b      	strh	r3, [r7, #10]
 8006154:	4613      	mov	r3, r2
 8006156:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b20      	cmp	r3, #32
 8006162:	f040 80db 	bne.w	800631c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_I2C_Master_Receive+0x30>
 8006170:	2302      	movs	r3, #2
 8006172:	e0d4      	b.n	800631e <HAL_I2C_Master_Receive+0x1da>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800617c:	f7fd f8f8 	bl	8003370 <HAL_GetTick>
 8006180:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	2319      	movs	r3, #25
 8006188:	2201      	movs	r2, #1
 800618a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 fa5a 	bl	8006648 <I2C_WaitOnFlagUntilTimeout>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e0bf      	b.n	800631e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2222      	movs	r2, #34	; 0x22
 80061a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2210      	movs	r2, #16
 80061aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	893a      	ldrh	r2, [r7, #8]
 80061be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2bff      	cmp	r3, #255	; 0xff
 80061ce:	d90e      	bls.n	80061ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	22ff      	movs	r2, #255	; 0xff
 80061d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	8979      	ldrh	r1, [r7, #10]
 80061de:	4b52      	ldr	r3, [pc, #328]	; (8006328 <HAL_I2C_Master_Receive+0x1e4>)
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 fc50 	bl	8006a8c <I2C_TransferConfig>
 80061ec:	e06d      	b.n	80062ca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	8979      	ldrh	r1, [r7, #10]
 8006200:	4b49      	ldr	r3, [pc, #292]	; (8006328 <HAL_I2C_Master_Receive+0x1e4>)
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 fc3f 	bl	8006a8c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800620e:	e05c      	b.n	80062ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	6a39      	ldr	r1, [r7, #32]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 fad3 	bl	80067c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e07c      	b.n	800631e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006240:	3b01      	subs	r3, #1
 8006242:	b29a      	uxth	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624c:	b29b      	uxth	r3, r3
 800624e:	3b01      	subs	r3, #1
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d034      	beq.n	80062ca <HAL_I2C_Master_Receive+0x186>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006264:	2b00      	cmp	r3, #0
 8006266:	d130      	bne.n	80062ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	2200      	movs	r2, #0
 8006270:	2180      	movs	r1, #128	; 0x80
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 f9e8 	bl	8006648 <I2C_WaitOnFlagUntilTimeout>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e04d      	b.n	800631e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006286:	b29b      	uxth	r3, r3
 8006288:	2bff      	cmp	r3, #255	; 0xff
 800628a:	d90e      	bls.n	80062aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	22ff      	movs	r2, #255	; 0xff
 8006290:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006296:	b2da      	uxtb	r2, r3
 8006298:	8979      	ldrh	r1, [r7, #10]
 800629a:	2300      	movs	r3, #0
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 fbf2 	bl	8006a8c <I2C_TransferConfig>
 80062a8:	e00f      	b.n	80062ca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	8979      	ldrh	r1, [r7, #10]
 80062bc:	2300      	movs	r3, #0
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 fbe1 	bl	8006a8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d19d      	bne.n	8006210 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	6a39      	ldr	r1, [r7, #32]
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 fa35 	bl	8006748 <I2C_WaitOnSTOPFlagUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e01a      	b.n	800631e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2220      	movs	r2, #32
 80062ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6859      	ldr	r1, [r3, #4]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4b0c      	ldr	r3, [pc, #48]	; (800632c <HAL_I2C_Master_Receive+0x1e8>)
 80062fc:	400b      	ands	r3, r1
 80062fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2220      	movs	r2, #32
 8006304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	e000      	b.n	800631e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800631c:	2302      	movs	r3, #2
  }
}
 800631e:	4618      	mov	r0, r3
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	80002400 	.word	0x80002400
 800632c:	fe00e800 	.word	0xfe00e800

08006330 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b088      	sub	sp, #32
 8006334:	af02      	add	r7, sp, #8
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	4608      	mov	r0, r1
 800633a:	4611      	mov	r1, r2
 800633c:	461a      	mov	r2, r3
 800633e:	4603      	mov	r3, r0
 8006340:	817b      	strh	r3, [r7, #10]
 8006342:	460b      	mov	r3, r1
 8006344:	813b      	strh	r3, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b20      	cmp	r3, #32
 8006354:	f040 80f9 	bne.w	800654a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <HAL_I2C_Mem_Write+0x34>
 800635e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006360:	2b00      	cmp	r3, #0
 8006362:	d105      	bne.n	8006370 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800636a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e0ed      	b.n	800654c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006376:	2b01      	cmp	r3, #1
 8006378:	d101      	bne.n	800637e <HAL_I2C_Mem_Write+0x4e>
 800637a:	2302      	movs	r3, #2
 800637c:	e0e6      	b.n	800654c <HAL_I2C_Mem_Write+0x21c>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006386:	f7fc fff3 	bl	8003370 <HAL_GetTick>
 800638a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	2319      	movs	r3, #25
 8006392:	2201      	movs	r2, #1
 8006394:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f955 	bl	8006648 <I2C_WaitOnFlagUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e0d1      	b.n	800654c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2221      	movs	r2, #33	; 0x21
 80063ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2240      	movs	r2, #64	; 0x40
 80063b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a3a      	ldr	r2, [r7, #32]
 80063c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063d0:	88f8      	ldrh	r0, [r7, #6]
 80063d2:	893a      	ldrh	r2, [r7, #8]
 80063d4:	8979      	ldrh	r1, [r7, #10]
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	9301      	str	r3, [sp, #4]
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	4603      	mov	r3, r0
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f8b9 	bl	8006558 <I2C_RequestMemoryWrite>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0a9      	b.n	800654c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2bff      	cmp	r3, #255	; 0xff
 8006400:	d90e      	bls.n	8006420 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	22ff      	movs	r2, #255	; 0xff
 8006406:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640c:	b2da      	uxtb	r2, r3
 800640e:	8979      	ldrh	r1, [r7, #10]
 8006410:	2300      	movs	r3, #0
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 fb37 	bl	8006a8c <I2C_TransferConfig>
 800641e:	e00f      	b.n	8006440 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642e:	b2da      	uxtb	r2, r3
 8006430:	8979      	ldrh	r1, [r7, #10]
 8006432:	2300      	movs	r3, #0
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 fb26 	bl	8006a8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f93f 	bl	80066c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e07b      	b.n	800654c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	781a      	ldrb	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d034      	beq.n	80064f8 <HAL_I2C_Mem_Write+0x1c8>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006492:	2b00      	cmp	r3, #0
 8006494:	d130      	bne.n	80064f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649c:	2200      	movs	r2, #0
 800649e:	2180      	movs	r1, #128	; 0x80
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 f8d1 	bl	8006648 <I2C_WaitOnFlagUntilTimeout>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e04d      	b.n	800654c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	2bff      	cmp	r3, #255	; 0xff
 80064b8:	d90e      	bls.n	80064d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	22ff      	movs	r2, #255	; 0xff
 80064be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	8979      	ldrh	r1, [r7, #10]
 80064c8:	2300      	movs	r3, #0
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 fadb 	bl	8006a8c <I2C_TransferConfig>
 80064d6:	e00f      	b.n	80064f8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	8979      	ldrh	r1, [r7, #10]
 80064ea:	2300      	movs	r3, #0
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 faca 	bl	8006a8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d19e      	bne.n	8006440 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 f91e 	bl	8006748 <I2C_WaitOnSTOPFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e01a      	b.n	800654c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2220      	movs	r2, #32
 800651c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6859      	ldr	r1, [r3, #4]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <HAL_I2C_Mem_Write+0x224>)
 800652a:	400b      	ands	r3, r1
 800652c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2220      	movs	r2, #32
 8006532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	e000      	b.n	800654c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800654a:	2302      	movs	r3, #2
  }
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	fe00e800 	.word	0xfe00e800

08006558 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af02      	add	r7, sp, #8
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	4608      	mov	r0, r1
 8006562:	4611      	mov	r1, r2
 8006564:	461a      	mov	r2, r3
 8006566:	4603      	mov	r3, r0
 8006568:	817b      	strh	r3, [r7, #10]
 800656a:	460b      	mov	r3, r1
 800656c:	813b      	strh	r3, [r7, #8]
 800656e:	4613      	mov	r3, r2
 8006570:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006572:	88fb      	ldrh	r3, [r7, #6]
 8006574:	b2da      	uxtb	r2, r3
 8006576:	8979      	ldrh	r1, [r7, #10]
 8006578:	4b20      	ldr	r3, [pc, #128]	; (80065fc <I2C_RequestMemoryWrite+0xa4>)
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fa83 	bl	8006a8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006586:	69fa      	ldr	r2, [r7, #28]
 8006588:	69b9      	ldr	r1, [r7, #24]
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 f89c 	bl	80066c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e02c      	b.n	80065f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800659a:	88fb      	ldrh	r3, [r7, #6]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d105      	bne.n	80065ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065a0:	893b      	ldrh	r3, [r7, #8]
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	629a      	str	r2, [r3, #40]	; 0x28
 80065aa:	e015      	b.n	80065d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80065ac:	893b      	ldrh	r3, [r7, #8]
 80065ae:	0a1b      	lsrs	r3, r3, #8
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ba:	69fa      	ldr	r2, [r7, #28]
 80065bc:	69b9      	ldr	r1, [r7, #24]
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f000 f882 	bl	80066c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e012      	b.n	80065f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065ce:	893b      	ldrh	r3, [r7, #8]
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	2200      	movs	r2, #0
 80065e0:	2180      	movs	r1, #128	; 0x80
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 f830 	bl	8006648 <I2C_WaitOnFlagUntilTimeout>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e000      	b.n	80065f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	80002000 	.word	0x80002000

08006600 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b02      	cmp	r3, #2
 8006614:	d103      	bne.n	800661e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2200      	movs	r2, #0
 800661c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b01      	cmp	r3, #1
 800662a:	d007      	beq.n	800663c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699a      	ldr	r2, [r3, #24]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0201 	orr.w	r2, r2, #1
 800663a:	619a      	str	r2, [r3, #24]
  }
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	4613      	mov	r3, r2
 8006656:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006658:	e022      	b.n	80066a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006660:	d01e      	beq.n	80066a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006662:	f7fc fe85 	bl	8003370 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d302      	bcc.n	8006678 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d113      	bne.n	80066a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667c:	f043 0220 	orr.w	r2, r3, #32
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e00f      	b.n	80066c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699a      	ldr	r2, [r3, #24]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	4013      	ands	r3, r2
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	bf0c      	ite	eq
 80066b0:	2301      	moveq	r3, #1
 80066b2:	2300      	movne	r3, #0
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	461a      	mov	r2, r3
 80066b8:	79fb      	ldrb	r3, [r7, #7]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d0cd      	beq.n	800665a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066d4:	e02c      	b.n	8006730 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	68b9      	ldr	r1, [r7, #8]
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 f8ea 	bl	80068b4 <I2C_IsErrorOccurred>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e02a      	b.n	8006740 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066f0:	d01e      	beq.n	8006730 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f2:	f7fc fe3d 	bl	8003370 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d302      	bcc.n	8006708 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d113      	bne.n	8006730 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670c:	f043 0220 	orr.w	r2, r3, #32
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e007      	b.n	8006740 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b02      	cmp	r3, #2
 800673c:	d1cb      	bne.n	80066d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006754:	e028      	b.n	80067a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	68b9      	ldr	r1, [r7, #8]
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 f8aa 	bl	80068b4 <I2C_IsErrorOccurred>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e026      	b.n	80067b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800676a:	f7fc fe01 	bl	8003370 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	429a      	cmp	r2, r3
 8006778:	d302      	bcc.n	8006780 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d113      	bne.n	80067a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006784:	f043 0220 	orr.w	r2, r3, #32
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e007      	b.n	80067b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	f003 0320 	and.w	r3, r3, #32
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	d1cf      	bne.n	8006756 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067cc:	e064      	b.n	8006898 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	68b9      	ldr	r1, [r7, #8]
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f86e 	bl	80068b4 <I2C_IsErrorOccurred>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e062      	b.n	80068a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	f003 0320 	and.w	r3, r3, #32
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	d138      	bne.n	8006862 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d105      	bne.n	800680a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	e04e      	b.n	80068a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	f003 0310 	and.w	r3, r3, #16
 8006814:	2b10      	cmp	r3, #16
 8006816:	d107      	bne.n	8006828 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2210      	movs	r2, #16
 800681e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2204      	movs	r2, #4
 8006824:	645a      	str	r2, [r3, #68]	; 0x44
 8006826:	e002      	b.n	800682e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2220      	movs	r2, #32
 8006834:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6859      	ldr	r1, [r3, #4]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	4b1b      	ldr	r3, [pc, #108]	; (80068b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006842:	400b      	ands	r3, r1
 8006844:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2220      	movs	r2, #32
 800684a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e022      	b.n	80068a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006862:	f7fc fd85 	bl	8003370 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	429a      	cmp	r2, r3
 8006870:	d302      	bcc.n	8006878 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10f      	bne.n	8006898 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687c:	f043 0220 	orr.w	r2, r3, #32
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2220      	movs	r2, #32
 8006888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e007      	b.n	80068a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f003 0304 	and.w	r3, r3, #4
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d193      	bne.n	80067ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	fe00e800 	.word	0xfe00e800

080068b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08a      	sub	sp, #40	; 0x28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80068ce:	2300      	movs	r3, #0
 80068d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	f003 0310 	and.w	r3, r3, #16
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d075      	beq.n	80069cc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2210      	movs	r2, #16
 80068e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068e8:	e056      	b.n	8006998 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f0:	d052      	beq.n	8006998 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80068f2:	f7fc fd3d 	bl	8003370 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d302      	bcc.n	8006908 <I2C_IsErrorOccurred+0x54>
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d147      	bne.n	8006998 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006912:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800691a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800692a:	d12e      	bne.n	800698a <I2C_IsErrorOccurred+0xd6>
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006932:	d02a      	beq.n	800698a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006934:	7cfb      	ldrb	r3, [r7, #19]
 8006936:	2b20      	cmp	r3, #32
 8006938:	d027      	beq.n	800698a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006948:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800694a:	f7fc fd11 	bl	8003370 <HAL_GetTick>
 800694e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006950:	e01b      	b.n	800698a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006952:	f7fc fd0d 	bl	8003370 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b19      	cmp	r3, #25
 800695e:	d914      	bls.n	800698a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006964:	f043 0220 	orr.w	r2, r3, #32
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2220      	movs	r2, #32
 8006970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b20      	cmp	r3, #32
 8006996:	d1dc      	bne.n	8006952 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d003      	beq.n	80069ae <I2C_IsErrorOccurred+0xfa>
 80069a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d09d      	beq.n	80068ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80069ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d103      	bne.n	80069be <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2220      	movs	r2, #32
 80069bc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	f043 0304 	orr.w	r3, r3, #4
 80069c4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00b      	beq.n	80069f6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	f043 0301 	orr.w	r3, r3, #1
 80069e4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	f043 0308 	orr.w	r3, r3, #8
 8006a06:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00b      	beq.n	8006a3a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	f043 0302 	orr.w	r3, r3, #2
 8006a28:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d01c      	beq.n	8006a7c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f7ff fddc 	bl	8006600 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6859      	ldr	r1, [r3, #4]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	4b0d      	ldr	r3, [pc, #52]	; (8006a88 <I2C_IsErrorOccurred+0x1d4>)
 8006a54:	400b      	ands	r3, r1
 8006a56:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3728      	adds	r7, #40	; 0x28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	fe00e800 	.word	0xfe00e800

08006a8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	607b      	str	r3, [r7, #4]
 8006a96:	460b      	mov	r3, r1
 8006a98:	817b      	strh	r3, [r7, #10]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a9e:	897b      	ldrh	r3, [r7, #10]
 8006aa0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006aa4:	7a7b      	ldrb	r3, [r7, #9]
 8006aa6:	041b      	lsls	r3, r3, #16
 8006aa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006aac:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006aba:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	0d5b      	lsrs	r3, r3, #21
 8006ac6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006aca:	4b08      	ldr	r3, [pc, #32]	; (8006aec <I2C_TransferConfig+0x60>)
 8006acc:	430b      	orrs	r3, r1
 8006ace:	43db      	mvns	r3, r3
 8006ad0:	ea02 0103 	and.w	r1, r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006ade:	bf00      	nop
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	03ff63ff 	.word	0x03ff63ff

08006af0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	d138      	bne.n	8006b78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e032      	b.n	8006b7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2224      	movs	r2, #36	; 0x24
 8006b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0201 	bic.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6819      	ldr	r1, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f042 0201 	orr.w	r2, r2, #1
 8006b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	e000      	b.n	8006b7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b78:	2302      	movs	r3, #2
  }
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b085      	sub	sp, #20
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b20      	cmp	r3, #32
 8006b9a:	d139      	bne.n	8006c10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d101      	bne.n	8006baa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	e033      	b.n	8006c12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2224      	movs	r2, #36	; 0x24
 8006bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0201 	bic.w	r2, r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006bd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	021b      	lsls	r3, r3, #8
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	e000      	b.n	8006c12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c10:	2302      	movs	r3, #2
  }
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
	...

08006c20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d141      	bne.n	8006cb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c2e:	4b4b      	ldr	r3, [pc, #300]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c3a:	d131      	bne.n	8006ca0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c3c:	4b47      	ldr	r3, [pc, #284]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c42:	4a46      	ldr	r2, [pc, #280]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c4c:	4b43      	ldr	r3, [pc, #268]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c54:	4a41      	ldr	r2, [pc, #260]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c5c:	4b40      	ldr	r3, [pc, #256]	; (8006d60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2232      	movs	r2, #50	; 0x32
 8006c62:	fb02 f303 	mul.w	r3, r2, r3
 8006c66:	4a3f      	ldr	r2, [pc, #252]	; (8006d64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006c68:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6c:	0c9b      	lsrs	r3, r3, #18
 8006c6e:	3301      	adds	r3, #1
 8006c70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c72:	e002      	b.n	8006c7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c7a:	4b38      	ldr	r3, [pc, #224]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c86:	d102      	bne.n	8006c8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1f2      	bne.n	8006c74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c8e:	4b33      	ldr	r3, [pc, #204]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9a:	d158      	bne.n	8006d4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e057      	b.n	8006d50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ca0:	4b2e      	ldr	r3, [pc, #184]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ca6:	4a2d      	ldr	r2, [pc, #180]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006cb0:	e04d      	b.n	8006d4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb8:	d141      	bne.n	8006d3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006cba:	4b28      	ldr	r3, [pc, #160]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cc6:	d131      	bne.n	8006d2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006cc8:	4b24      	ldr	r3, [pc, #144]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cce:	4a23      	ldr	r2, [pc, #140]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cd8:	4b20      	ldr	r3, [pc, #128]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ce0:	4a1e      	ldr	r2, [pc, #120]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ce6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ce8:	4b1d      	ldr	r3, [pc, #116]	; (8006d60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2232      	movs	r2, #50	; 0x32
 8006cee:	fb02 f303 	mul.w	r3, r2, r3
 8006cf2:	4a1c      	ldr	r2, [pc, #112]	; (8006d64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf8:	0c9b      	lsrs	r3, r3, #18
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cfe:	e002      	b.n	8006d06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3b01      	subs	r3, #1
 8006d04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d06:	4b15      	ldr	r3, [pc, #84]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d12:	d102      	bne.n	8006d1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1f2      	bne.n	8006d00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d1a:	4b10      	ldr	r3, [pc, #64]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d26:	d112      	bne.n	8006d4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e011      	b.n	8006d50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d2c:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d32:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006d3c:	e007      	b.n	8006d4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d3e:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d46:	4a05      	ldr	r2, [pc, #20]	; (8006d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	40007000 	.word	0x40007000
 8006d60:	20000000 	.word	0x20000000
 8006d64:	431bde83 	.word	0x431bde83

08006d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e306      	b.n	8007388 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d075      	beq.n	8006e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d86:	4b97      	ldr	r3, [pc, #604]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f003 030c 	and.w	r3, r3, #12
 8006d8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d90:	4b94      	ldr	r3, [pc, #592]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f003 0303 	and.w	r3, r3, #3
 8006d98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	2b0c      	cmp	r3, #12
 8006d9e:	d102      	bne.n	8006da6 <HAL_RCC_OscConfig+0x3e>
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d002      	beq.n	8006dac <HAL_RCC_OscConfig+0x44>
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d10b      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dac:	4b8d      	ldr	r3, [pc, #564]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d05b      	beq.n	8006e70 <HAL_RCC_OscConfig+0x108>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d157      	bne.n	8006e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e2e1      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dcc:	d106      	bne.n	8006ddc <HAL_RCC_OscConfig+0x74>
 8006dce:	4b85      	ldr	r3, [pc, #532]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a84      	ldr	r2, [pc, #528]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	e01d      	b.n	8006e18 <HAL_RCC_OscConfig+0xb0>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006de4:	d10c      	bne.n	8006e00 <HAL_RCC_OscConfig+0x98>
 8006de6:	4b7f      	ldr	r3, [pc, #508]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a7e      	ldr	r2, [pc, #504]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	4b7c      	ldr	r3, [pc, #496]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a7b      	ldr	r2, [pc, #492]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	e00b      	b.n	8006e18 <HAL_RCC_OscConfig+0xb0>
 8006e00:	4b78      	ldr	r3, [pc, #480]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a77      	ldr	r2, [pc, #476]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	4b75      	ldr	r3, [pc, #468]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a74      	ldr	r2, [pc, #464]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d013      	beq.n	8006e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e20:	f7fc faa6 	bl	8003370 <HAL_GetTick>
 8006e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e26:	e008      	b.n	8006e3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e28:	f7fc faa2 	bl	8003370 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b64      	cmp	r3, #100	; 0x64
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e2a6      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e3a:	4b6a      	ldr	r3, [pc, #424]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0f0      	beq.n	8006e28 <HAL_RCC_OscConfig+0xc0>
 8006e46:	e014      	b.n	8006e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e48:	f7fc fa92 	bl	8003370 <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e4e:	e008      	b.n	8006e62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e50:	f7fc fa8e 	bl	8003370 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b64      	cmp	r3, #100	; 0x64
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e292      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e62:	4b60      	ldr	r3, [pc, #384]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1f0      	bne.n	8006e50 <HAL_RCC_OscConfig+0xe8>
 8006e6e:	e000      	b.n	8006e72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d075      	beq.n	8006f6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e7e:	4b59      	ldr	r3, [pc, #356]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f003 030c 	and.w	r3, r3, #12
 8006e86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e88:	4b56      	ldr	r3, [pc, #344]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f003 0303 	and.w	r3, r3, #3
 8006e90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	2b0c      	cmp	r3, #12
 8006e96:	d102      	bne.n	8006e9e <HAL_RCC_OscConfig+0x136>
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d002      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x13c>
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d11f      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ea4:	4b4f      	ldr	r3, [pc, #316]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d005      	beq.n	8006ebc <HAL_RCC_OscConfig+0x154>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e265      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ebc:	4b49      	ldr	r3, [pc, #292]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	061b      	lsls	r3, r3, #24
 8006eca:	4946      	ldr	r1, [pc, #280]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006ed0:	4b45      	ldr	r3, [pc, #276]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fc f9ff 	bl	80032d8 <HAL_InitTick>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d043      	beq.n	8006f68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e251      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d023      	beq.n	8006f34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006eec:	4b3d      	ldr	r3, [pc, #244]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a3c      	ldr	r2, [pc, #240]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef8:	f7fc fa3a 	bl	8003370 <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006efe:	e008      	b.n	8006f12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f00:	f7fc fa36 	bl	8003370 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d901      	bls.n	8006f12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e23a      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f12:	4b34      	ldr	r3, [pc, #208]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0f0      	beq.n	8006f00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f1e:	4b31      	ldr	r3, [pc, #196]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	061b      	lsls	r3, r3, #24
 8006f2c:	492d      	ldr	r1, [pc, #180]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	604b      	str	r3, [r1, #4]
 8006f32:	e01a      	b.n	8006f6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f34:	4b2b      	ldr	r3, [pc, #172]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a2a      	ldr	r2, [pc, #168]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006f3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f40:	f7fc fa16 	bl	8003370 <HAL_GetTick>
 8006f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f46:	e008      	b.n	8006f5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f48:	f7fc fa12 	bl	8003370 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e216      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f5a:	4b22      	ldr	r3, [pc, #136]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1f0      	bne.n	8006f48 <HAL_RCC_OscConfig+0x1e0>
 8006f66:	e000      	b.n	8006f6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0308 	and.w	r3, r3, #8
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d041      	beq.n	8006ffa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d01c      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f7e:	4b19      	ldr	r3, [pc, #100]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f84:	4a17      	ldr	r2, [pc, #92]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006f86:	f043 0301 	orr.w	r3, r3, #1
 8006f8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f8e:	f7fc f9ef 	bl	8003370 <HAL_GetTick>
 8006f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f94:	e008      	b.n	8006fa8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f96:	f7fc f9eb 	bl	8003370 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d901      	bls.n	8006fa8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e1ef      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fa8:	4b0e      	ldr	r3, [pc, #56]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0ef      	beq.n	8006f96 <HAL_RCC_OscConfig+0x22e>
 8006fb6:	e020      	b.n	8006ffa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fb8:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fbe:	4a09      	ldr	r2, [pc, #36]	; (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006fc0:	f023 0301 	bic.w	r3, r3, #1
 8006fc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc8:	f7fc f9d2 	bl	8003370 <HAL_GetTick>
 8006fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006fce:	e00d      	b.n	8006fec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fd0:	f7fc f9ce 	bl	8003370 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d906      	bls.n	8006fec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e1d2      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
 8006fe2:	bf00      	nop
 8006fe4:	40021000 	.word	0x40021000
 8006fe8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006fec:	4b8c      	ldr	r3, [pc, #560]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8006fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1ea      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0304 	and.w	r3, r3, #4
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 80a6 	beq.w	8007154 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007008:	2300      	movs	r3, #0
 800700a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800700c:	4b84      	ldr	r3, [pc, #528]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 800700e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <HAL_RCC_OscConfig+0x2b4>
 8007018:	2301      	movs	r3, #1
 800701a:	e000      	b.n	800701e <HAL_RCC_OscConfig+0x2b6>
 800701c:	2300      	movs	r3, #0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00d      	beq.n	800703e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007022:	4b7f      	ldr	r3, [pc, #508]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007026:	4a7e      	ldr	r2, [pc, #504]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800702c:	6593      	str	r3, [r2, #88]	; 0x58
 800702e:	4b7c      	ldr	r3, [pc, #496]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800703a:	2301      	movs	r3, #1
 800703c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800703e:	4b79      	ldr	r3, [pc, #484]	; (8007224 <HAL_RCC_OscConfig+0x4bc>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007046:	2b00      	cmp	r3, #0
 8007048:	d118      	bne.n	800707c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800704a:	4b76      	ldr	r3, [pc, #472]	; (8007224 <HAL_RCC_OscConfig+0x4bc>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a75      	ldr	r2, [pc, #468]	; (8007224 <HAL_RCC_OscConfig+0x4bc>)
 8007050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007056:	f7fc f98b 	bl	8003370 <HAL_GetTick>
 800705a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800705c:	e008      	b.n	8007070 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800705e:	f7fc f987 	bl	8003370 <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	2b02      	cmp	r3, #2
 800706a:	d901      	bls.n	8007070 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e18b      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007070:	4b6c      	ldr	r3, [pc, #432]	; (8007224 <HAL_RCC_OscConfig+0x4bc>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007078:	2b00      	cmp	r3, #0
 800707a:	d0f0      	beq.n	800705e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d108      	bne.n	8007096 <HAL_RCC_OscConfig+0x32e>
 8007084:	4b66      	ldr	r3, [pc, #408]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800708a:	4a65      	ldr	r2, [pc, #404]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 800708c:	f043 0301 	orr.w	r3, r3, #1
 8007090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007094:	e024      	b.n	80070e0 <HAL_RCC_OscConfig+0x378>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	2b05      	cmp	r3, #5
 800709c:	d110      	bne.n	80070c0 <HAL_RCC_OscConfig+0x358>
 800709e:	4b60      	ldr	r3, [pc, #384]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80070a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a4:	4a5e      	ldr	r2, [pc, #376]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80070a6:	f043 0304 	orr.w	r3, r3, #4
 80070aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070ae:	4b5c      	ldr	r3, [pc, #368]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80070b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b4:	4a5a      	ldr	r2, [pc, #360]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80070b6:	f043 0301 	orr.w	r3, r3, #1
 80070ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070be:	e00f      	b.n	80070e0 <HAL_RCC_OscConfig+0x378>
 80070c0:	4b57      	ldr	r3, [pc, #348]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80070c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c6:	4a56      	ldr	r2, [pc, #344]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80070c8:	f023 0301 	bic.w	r3, r3, #1
 80070cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070d0:	4b53      	ldr	r3, [pc, #332]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80070d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d6:	4a52      	ldr	r2, [pc, #328]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80070d8:	f023 0304 	bic.w	r3, r3, #4
 80070dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d016      	beq.n	8007116 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e8:	f7fc f942 	bl	8003370 <HAL_GetTick>
 80070ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070ee:	e00a      	b.n	8007106 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070f0:	f7fc f93e 	bl	8003370 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80070fe:	4293      	cmp	r3, r2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e140      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007106:	4b46      	ldr	r3, [pc, #280]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0ed      	beq.n	80070f0 <HAL_RCC_OscConfig+0x388>
 8007114:	e015      	b.n	8007142 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007116:	f7fc f92b 	bl	8003370 <HAL_GetTick>
 800711a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800711c:	e00a      	b.n	8007134 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800711e:	f7fc f927 	bl	8003370 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	f241 3288 	movw	r2, #5000	; 0x1388
 800712c:	4293      	cmp	r3, r2
 800712e:	d901      	bls.n	8007134 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e129      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007134:	4b3a      	ldr	r3, [pc, #232]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1ed      	bne.n	800711e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007142:	7ffb      	ldrb	r3, [r7, #31]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d105      	bne.n	8007154 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007148:	4b35      	ldr	r3, [pc, #212]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 800714a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714c:	4a34      	ldr	r2, [pc, #208]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 800714e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007152:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0320 	and.w	r3, r3, #32
 800715c:	2b00      	cmp	r3, #0
 800715e:	d03c      	beq.n	80071da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d01c      	beq.n	80071a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007168:	4b2d      	ldr	r3, [pc, #180]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 800716a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800716e:	4a2c      	ldr	r2, [pc, #176]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007170:	f043 0301 	orr.w	r3, r3, #1
 8007174:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007178:	f7fc f8fa 	bl	8003370 <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007180:	f7fc f8f6 	bl	8003370 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e0fa      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007192:	4b23      	ldr	r3, [pc, #140]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007194:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0ef      	beq.n	8007180 <HAL_RCC_OscConfig+0x418>
 80071a0:	e01b      	b.n	80071da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071a2:	4b1f      	ldr	r3, [pc, #124]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80071a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071a8:	4a1d      	ldr	r2, [pc, #116]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80071aa:	f023 0301 	bic.w	r3, r3, #1
 80071ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b2:	f7fc f8dd 	bl	8003370 <HAL_GetTick>
 80071b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80071b8:	e008      	b.n	80071cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071ba:	f7fc f8d9 	bl	8003370 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d901      	bls.n	80071cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e0dd      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80071cc:	4b14      	ldr	r3, [pc, #80]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80071ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1ef      	bne.n	80071ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 80d1 	beq.w	8007386 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071e4:	4b0e      	ldr	r3, [pc, #56]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f003 030c 	and.w	r3, r3, #12
 80071ec:	2b0c      	cmp	r3, #12
 80071ee:	f000 808b 	beq.w	8007308 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d15e      	bne.n	80072b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071fa:	4b09      	ldr	r3, [pc, #36]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a08      	ldr	r2, [pc, #32]	; (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007200:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007206:	f7fc f8b3 	bl	8003370 <HAL_GetTick>
 800720a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800720c:	e00c      	b.n	8007228 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800720e:	f7fc f8af 	bl	8003370 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	2b02      	cmp	r3, #2
 800721a:	d905      	bls.n	8007228 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e0b3      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
 8007220:	40021000 	.word	0x40021000
 8007224:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007228:	4b59      	ldr	r3, [pc, #356]	; (8007390 <HAL_RCC_OscConfig+0x628>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1ec      	bne.n	800720e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007234:	4b56      	ldr	r3, [pc, #344]	; (8007390 <HAL_RCC_OscConfig+0x628>)
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	4b56      	ldr	r3, [pc, #344]	; (8007394 <HAL_RCC_OscConfig+0x62c>)
 800723a:	4013      	ands	r3, r2
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	6a11      	ldr	r1, [r2, #32]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007244:	3a01      	subs	r2, #1
 8007246:	0112      	lsls	r2, r2, #4
 8007248:	4311      	orrs	r1, r2
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800724e:	0212      	lsls	r2, r2, #8
 8007250:	4311      	orrs	r1, r2
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007256:	0852      	lsrs	r2, r2, #1
 8007258:	3a01      	subs	r2, #1
 800725a:	0552      	lsls	r2, r2, #21
 800725c:	4311      	orrs	r1, r2
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007262:	0852      	lsrs	r2, r2, #1
 8007264:	3a01      	subs	r2, #1
 8007266:	0652      	lsls	r2, r2, #25
 8007268:	4311      	orrs	r1, r2
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800726e:	06d2      	lsls	r2, r2, #27
 8007270:	430a      	orrs	r2, r1
 8007272:	4947      	ldr	r1, [pc, #284]	; (8007390 <HAL_RCC_OscConfig+0x628>)
 8007274:	4313      	orrs	r3, r2
 8007276:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007278:	4b45      	ldr	r3, [pc, #276]	; (8007390 <HAL_RCC_OscConfig+0x628>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a44      	ldr	r2, [pc, #272]	; (8007390 <HAL_RCC_OscConfig+0x628>)
 800727e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007282:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007284:	4b42      	ldr	r3, [pc, #264]	; (8007390 <HAL_RCC_OscConfig+0x628>)
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	4a41      	ldr	r2, [pc, #260]	; (8007390 <HAL_RCC_OscConfig+0x628>)
 800728a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800728e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007290:	f7fc f86e 	bl	8003370 <HAL_GetTick>
 8007294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007296:	e008      	b.n	80072aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007298:	f7fc f86a 	bl	8003370 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e06e      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072aa:	4b39      	ldr	r3, [pc, #228]	; (8007390 <HAL_RCC_OscConfig+0x628>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0f0      	beq.n	8007298 <HAL_RCC_OscConfig+0x530>
 80072b6:	e066      	b.n	8007386 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072b8:	4b35      	ldr	r3, [pc, #212]	; (8007390 <HAL_RCC_OscConfig+0x628>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a34      	ldr	r2, [pc, #208]	; (8007390 <HAL_RCC_OscConfig+0x628>)
 80072be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072c2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80072c4:	4b32      	ldr	r3, [pc, #200]	; (8007390 <HAL_RCC_OscConfig+0x628>)
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	4a31      	ldr	r2, [pc, #196]	; (8007390 <HAL_RCC_OscConfig+0x628>)
 80072ca:	f023 0303 	bic.w	r3, r3, #3
 80072ce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80072d0:	4b2f      	ldr	r3, [pc, #188]	; (8007390 <HAL_RCC_OscConfig+0x628>)
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	4a2e      	ldr	r2, [pc, #184]	; (8007390 <HAL_RCC_OscConfig+0x628>)
 80072d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80072da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e0:	f7fc f846 	bl	8003370 <HAL_GetTick>
 80072e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072e6:	e008      	b.n	80072fa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072e8:	f7fc f842 	bl	8003370 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d901      	bls.n	80072fa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e046      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072fa:	4b25      	ldr	r3, [pc, #148]	; (8007390 <HAL_RCC_OscConfig+0x628>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1f0      	bne.n	80072e8 <HAL_RCC_OscConfig+0x580>
 8007306:	e03e      	b.n	8007386 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d101      	bne.n	8007314 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e039      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007314:	4b1e      	ldr	r3, [pc, #120]	; (8007390 <HAL_RCC_OscConfig+0x628>)
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f003 0203 	and.w	r2, r3, #3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	429a      	cmp	r2, r3
 8007326:	d12c      	bne.n	8007382 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	3b01      	subs	r3, #1
 8007334:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007336:	429a      	cmp	r2, r3
 8007338:	d123      	bne.n	8007382 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007344:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007346:	429a      	cmp	r2, r3
 8007348:	d11b      	bne.n	8007382 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007356:	429a      	cmp	r2, r3
 8007358:	d113      	bne.n	8007382 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007364:	085b      	lsrs	r3, r3, #1
 8007366:	3b01      	subs	r3, #1
 8007368:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800736a:	429a      	cmp	r2, r3
 800736c:	d109      	bne.n	8007382 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007378:	085b      	lsrs	r3, r3, #1
 800737a:	3b01      	subs	r3, #1
 800737c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800737e:	429a      	cmp	r2, r3
 8007380:	d001      	beq.n	8007386 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e000      	b.n	8007388 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3720      	adds	r7, #32
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	40021000 	.word	0x40021000
 8007394:	019f800c 	.word	0x019f800c

08007398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80073a2:	2300      	movs	r3, #0
 80073a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e11e      	b.n	80075ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073b0:	4b91      	ldr	r3, [pc, #580]	; (80075f8 <HAL_RCC_ClockConfig+0x260>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d910      	bls.n	80073e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073be:	4b8e      	ldr	r3, [pc, #568]	; (80075f8 <HAL_RCC_ClockConfig+0x260>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f023 020f 	bic.w	r2, r3, #15
 80073c6:	498c      	ldr	r1, [pc, #560]	; (80075f8 <HAL_RCC_ClockConfig+0x260>)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ce:	4b8a      	ldr	r3, [pc, #552]	; (80075f8 <HAL_RCC_ClockConfig+0x260>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 030f 	and.w	r3, r3, #15
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d001      	beq.n	80073e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e106      	b.n	80075ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d073      	beq.n	80074d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d129      	bne.n	8007448 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073f4:	4b81      	ldr	r3, [pc, #516]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e0f4      	b.n	80075ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007404:	f000 f99e 	bl	8007744 <RCC_GetSysClockFreqFromPLLSource>
 8007408:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	4a7c      	ldr	r2, [pc, #496]	; (8007600 <HAL_RCC_ClockConfig+0x268>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d93f      	bls.n	8007492 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007412:	4b7a      	ldr	r3, [pc, #488]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d009      	beq.n	8007432 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007426:	2b00      	cmp	r3, #0
 8007428:	d033      	beq.n	8007492 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800742e:	2b00      	cmp	r3, #0
 8007430:	d12f      	bne.n	8007492 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007432:	4b72      	ldr	r3, [pc, #456]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800743a:	4a70      	ldr	r2, [pc, #448]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 800743c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007440:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007442:	2380      	movs	r3, #128	; 0x80
 8007444:	617b      	str	r3, [r7, #20]
 8007446:	e024      	b.n	8007492 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	2b02      	cmp	r3, #2
 800744e:	d107      	bne.n	8007460 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007450:	4b6a      	ldr	r3, [pc, #424]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d109      	bne.n	8007470 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e0c6      	b.n	80075ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007460:	4b66      	ldr	r3, [pc, #408]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e0be      	b.n	80075ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007470:	f000 f8ce 	bl	8007610 <HAL_RCC_GetSysClockFreq>
 8007474:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	4a61      	ldr	r2, [pc, #388]	; (8007600 <HAL_RCC_ClockConfig+0x268>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d909      	bls.n	8007492 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800747e:	4b5f      	ldr	r3, [pc, #380]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007486:	4a5d      	ldr	r2, [pc, #372]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 8007488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800748c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800748e:	2380      	movs	r3, #128	; 0x80
 8007490:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007492:	4b5a      	ldr	r3, [pc, #360]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f023 0203 	bic.w	r2, r3, #3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	4957      	ldr	r1, [pc, #348]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074a4:	f7fb ff64 	bl	8003370 <HAL_GetTick>
 80074a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074aa:	e00a      	b.n	80074c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074ac:	f7fb ff60 	bl	8003370 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e095      	b.n	80075ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074c2:	4b4e      	ldr	r3, [pc, #312]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f003 020c 	and.w	r2, r3, #12
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d1eb      	bne.n	80074ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d023      	beq.n	8007528 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0304 	and.w	r3, r3, #4
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074ec:	4b43      	ldr	r3, [pc, #268]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	4a42      	ldr	r2, [pc, #264]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 80074f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80074f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0308 	and.w	r3, r3, #8
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007504:	4b3d      	ldr	r3, [pc, #244]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800750c:	4a3b      	ldr	r2, [pc, #236]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 800750e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007512:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007514:	4b39      	ldr	r3, [pc, #228]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	4936      	ldr	r1, [pc, #216]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 8007522:	4313      	orrs	r3, r2
 8007524:	608b      	str	r3, [r1, #8]
 8007526:	e008      	b.n	800753a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2b80      	cmp	r3, #128	; 0x80
 800752c:	d105      	bne.n	800753a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800752e:	4b33      	ldr	r3, [pc, #204]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	4a32      	ldr	r2, [pc, #200]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 8007534:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007538:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800753a:	4b2f      	ldr	r3, [pc, #188]	; (80075f8 <HAL_RCC_ClockConfig+0x260>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d21d      	bcs.n	8007584 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007548:	4b2b      	ldr	r3, [pc, #172]	; (80075f8 <HAL_RCC_ClockConfig+0x260>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f023 020f 	bic.w	r2, r3, #15
 8007550:	4929      	ldr	r1, [pc, #164]	; (80075f8 <HAL_RCC_ClockConfig+0x260>)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	4313      	orrs	r3, r2
 8007556:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007558:	f7fb ff0a 	bl	8003370 <HAL_GetTick>
 800755c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800755e:	e00a      	b.n	8007576 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007560:	f7fb ff06 	bl	8003370 <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	f241 3288 	movw	r2, #5000	; 0x1388
 800756e:	4293      	cmp	r3, r2
 8007570:	d901      	bls.n	8007576 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e03b      	b.n	80075ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007576:	4b20      	ldr	r3, [pc, #128]	; (80075f8 <HAL_RCC_ClockConfig+0x260>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 030f 	and.w	r3, r3, #15
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	429a      	cmp	r2, r3
 8007582:	d1ed      	bne.n	8007560 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b00      	cmp	r3, #0
 800758e:	d008      	beq.n	80075a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007590:	4b1a      	ldr	r3, [pc, #104]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	4917      	ldr	r1, [pc, #92]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0308 	and.w	r3, r3, #8
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d009      	beq.n	80075c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075ae:	4b13      	ldr	r3, [pc, #76]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	490f      	ldr	r1, [pc, #60]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80075c2:	f000 f825 	bl	8007610 <HAL_RCC_GetSysClockFreq>
 80075c6:	4602      	mov	r2, r0
 80075c8:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <HAL_RCC_ClockConfig+0x264>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	091b      	lsrs	r3, r3, #4
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	490c      	ldr	r1, [pc, #48]	; (8007604 <HAL_RCC_ClockConfig+0x26c>)
 80075d4:	5ccb      	ldrb	r3, [r1, r3]
 80075d6:	f003 031f 	and.w	r3, r3, #31
 80075da:	fa22 f303 	lsr.w	r3, r2, r3
 80075de:	4a0a      	ldr	r2, [pc, #40]	; (8007608 <HAL_RCC_ClockConfig+0x270>)
 80075e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80075e2:	4b0a      	ldr	r3, [pc, #40]	; (800760c <HAL_RCC_ClockConfig+0x274>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fb fe76 	bl	80032d8 <HAL_InitTick>
 80075ec:	4603      	mov	r3, r0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	40022000 	.word	0x40022000
 80075fc:	40021000 	.word	0x40021000
 8007600:	04c4b400 	.word	0x04c4b400
 8007604:	080095f4 	.word	0x080095f4
 8007608:	20000000 	.word	0x20000000
 800760c:	20000004 	.word	0x20000004

08007610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007616:	4b2c      	ldr	r3, [pc, #176]	; (80076c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f003 030c 	and.w	r3, r3, #12
 800761e:	2b04      	cmp	r3, #4
 8007620:	d102      	bne.n	8007628 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007622:	4b2a      	ldr	r3, [pc, #168]	; (80076cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8007624:	613b      	str	r3, [r7, #16]
 8007626:	e047      	b.n	80076b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007628:	4b27      	ldr	r3, [pc, #156]	; (80076c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f003 030c 	and.w	r3, r3, #12
 8007630:	2b08      	cmp	r3, #8
 8007632:	d102      	bne.n	800763a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007634:	4b26      	ldr	r3, [pc, #152]	; (80076d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	e03e      	b.n	80076b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800763a:	4b23      	ldr	r3, [pc, #140]	; (80076c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f003 030c 	and.w	r3, r3, #12
 8007642:	2b0c      	cmp	r3, #12
 8007644:	d136      	bne.n	80076b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007646:	4b20      	ldr	r3, [pc, #128]	; (80076c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	f003 0303 	and.w	r3, r3, #3
 800764e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007650:	4b1d      	ldr	r3, [pc, #116]	; (80076c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	091b      	lsrs	r3, r3, #4
 8007656:	f003 030f 	and.w	r3, r3, #15
 800765a:	3301      	adds	r3, #1
 800765c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b03      	cmp	r3, #3
 8007662:	d10c      	bne.n	800767e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007664:	4a1a      	ldr	r2, [pc, #104]	; (80076d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	fbb2 f3f3 	udiv	r3, r2, r3
 800766c:	4a16      	ldr	r2, [pc, #88]	; (80076c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800766e:	68d2      	ldr	r2, [r2, #12]
 8007670:	0a12      	lsrs	r2, r2, #8
 8007672:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007676:	fb02 f303 	mul.w	r3, r2, r3
 800767a:	617b      	str	r3, [r7, #20]
      break;
 800767c:	e00c      	b.n	8007698 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800767e:	4a13      	ldr	r2, [pc, #76]	; (80076cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	fbb2 f3f3 	udiv	r3, r2, r3
 8007686:	4a10      	ldr	r2, [pc, #64]	; (80076c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007688:	68d2      	ldr	r2, [r2, #12]
 800768a:	0a12      	lsrs	r2, r2, #8
 800768c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007690:	fb02 f303 	mul.w	r3, r2, r3
 8007694:	617b      	str	r3, [r7, #20]
      break;
 8007696:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007698:	4b0b      	ldr	r3, [pc, #44]	; (80076c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	0e5b      	lsrs	r3, r3, #25
 800769e:	f003 0303 	and.w	r3, r3, #3
 80076a2:	3301      	adds	r3, #1
 80076a4:	005b      	lsls	r3, r3, #1
 80076a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b0:	613b      	str	r3, [r7, #16]
 80076b2:	e001      	b.n	80076b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80076b8:	693b      	ldr	r3, [r7, #16]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	40021000 	.word	0x40021000
 80076cc:	00f42400 	.word	0x00f42400
 80076d0:	007a1200 	.word	0x007a1200

080076d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076d4:	b480      	push	{r7}
 80076d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076d8:	4b03      	ldr	r3, [pc, #12]	; (80076e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80076da:	681b      	ldr	r3, [r3, #0]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	20000000 	.word	0x20000000

080076ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80076f0:	f7ff fff0 	bl	80076d4 <HAL_RCC_GetHCLKFreq>
 80076f4:	4602      	mov	r2, r0
 80076f6:	4b06      	ldr	r3, [pc, #24]	; (8007710 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	0a1b      	lsrs	r3, r3, #8
 80076fc:	f003 0307 	and.w	r3, r3, #7
 8007700:	4904      	ldr	r1, [pc, #16]	; (8007714 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007702:	5ccb      	ldrb	r3, [r1, r3]
 8007704:	f003 031f 	and.w	r3, r3, #31
 8007708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800770c:	4618      	mov	r0, r3
 800770e:	bd80      	pop	{r7, pc}
 8007710:	40021000 	.word	0x40021000
 8007714:	08009604 	.word	0x08009604

08007718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800771c:	f7ff ffda 	bl	80076d4 <HAL_RCC_GetHCLKFreq>
 8007720:	4602      	mov	r2, r0
 8007722:	4b06      	ldr	r3, [pc, #24]	; (800773c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	0adb      	lsrs	r3, r3, #11
 8007728:	f003 0307 	and.w	r3, r3, #7
 800772c:	4904      	ldr	r1, [pc, #16]	; (8007740 <HAL_RCC_GetPCLK2Freq+0x28>)
 800772e:	5ccb      	ldrb	r3, [r1, r3]
 8007730:	f003 031f 	and.w	r3, r3, #31
 8007734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007738:	4618      	mov	r0, r3
 800773a:	bd80      	pop	{r7, pc}
 800773c:	40021000 	.word	0x40021000
 8007740:	08009604 	.word	0x08009604

08007744 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007744:	b480      	push	{r7}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800774a:	4b1e      	ldr	r3, [pc, #120]	; (80077c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f003 0303 	and.w	r3, r3, #3
 8007752:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007754:	4b1b      	ldr	r3, [pc, #108]	; (80077c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	091b      	lsrs	r3, r3, #4
 800775a:	f003 030f 	and.w	r3, r3, #15
 800775e:	3301      	adds	r3, #1
 8007760:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	2b03      	cmp	r3, #3
 8007766:	d10c      	bne.n	8007782 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007768:	4a17      	ldr	r2, [pc, #92]	; (80077c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007770:	4a14      	ldr	r2, [pc, #80]	; (80077c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007772:	68d2      	ldr	r2, [r2, #12]
 8007774:	0a12      	lsrs	r2, r2, #8
 8007776:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800777a:	fb02 f303 	mul.w	r3, r2, r3
 800777e:	617b      	str	r3, [r7, #20]
    break;
 8007780:	e00c      	b.n	800779c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007782:	4a12      	ldr	r2, [pc, #72]	; (80077cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	fbb2 f3f3 	udiv	r3, r2, r3
 800778a:	4a0e      	ldr	r2, [pc, #56]	; (80077c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800778c:	68d2      	ldr	r2, [r2, #12]
 800778e:	0a12      	lsrs	r2, r2, #8
 8007790:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007794:	fb02 f303 	mul.w	r3, r2, r3
 8007798:	617b      	str	r3, [r7, #20]
    break;
 800779a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800779c:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	0e5b      	lsrs	r3, r3, #25
 80077a2:	f003 0303 	and.w	r3, r3, #3
 80077a6:	3301      	adds	r3, #1
 80077a8:	005b      	lsls	r3, r3, #1
 80077aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80077b6:	687b      	ldr	r3, [r7, #4]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	371c      	adds	r7, #28
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	40021000 	.word	0x40021000
 80077c8:	007a1200 	.word	0x007a1200
 80077cc:	00f42400 	.word	0x00f42400

080077d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80077d8:	2300      	movs	r3, #0
 80077da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80077dc:	2300      	movs	r3, #0
 80077de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 8098 	beq.w	800791e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077ee:	2300      	movs	r3, #0
 80077f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077f2:	4b43      	ldr	r3, [pc, #268]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10d      	bne.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077fe:	4b40      	ldr	r3, [pc, #256]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007802:	4a3f      	ldr	r2, [pc, #252]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007808:	6593      	str	r3, [r2, #88]	; 0x58
 800780a:	4b3d      	ldr	r3, [pc, #244]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800780c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007812:	60bb      	str	r3, [r7, #8]
 8007814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007816:	2301      	movs	r3, #1
 8007818:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800781a:	4b3a      	ldr	r3, [pc, #232]	; (8007904 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a39      	ldr	r2, [pc, #228]	; (8007904 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007824:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007826:	f7fb fda3 	bl	8003370 <HAL_GetTick>
 800782a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800782c:	e009      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800782e:	f7fb fd9f 	bl	8003370 <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	2b02      	cmp	r3, #2
 800783a:	d902      	bls.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	74fb      	strb	r3, [r7, #19]
        break;
 8007840:	e005      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007842:	4b30      	ldr	r3, [pc, #192]	; (8007904 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784a:	2b00      	cmp	r3, #0
 800784c:	d0ef      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800784e:	7cfb      	ldrb	r3, [r7, #19]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d159      	bne.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007854:	4b2a      	ldr	r3, [pc, #168]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800785a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800785e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d01e      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	429a      	cmp	r2, r3
 800786e:	d019      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007870:	4b23      	ldr	r3, [pc, #140]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800787a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800787c:	4b20      	ldr	r3, [pc, #128]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800787e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007882:	4a1f      	ldr	r2, [pc, #124]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800788c:	4b1c      	ldr	r3, [pc, #112]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800788e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007892:	4a1b      	ldr	r2, [pc, #108]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800789c:	4a18      	ldr	r2, [pc, #96]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d016      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ae:	f7fb fd5f 	bl	8003370 <HAL_GetTick>
 80078b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078b4:	e00b      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078b6:	f7fb fd5b 	bl	8003370 <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d902      	bls.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	74fb      	strb	r3, [r7, #19]
            break;
 80078cc:	e006      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078ce:	4b0c      	ldr	r3, [pc, #48]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d4:	f003 0302 	and.w	r3, r3, #2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0ec      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80078dc:	7cfb      	ldrb	r3, [r7, #19]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10b      	bne.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078e2:	4b07      	ldr	r3, [pc, #28]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f0:	4903      	ldr	r1, [pc, #12]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80078f8:	e008      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80078fa:	7cfb      	ldrb	r3, [r7, #19]
 80078fc:	74bb      	strb	r3, [r7, #18]
 80078fe:	e005      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007900:	40021000 	.word	0x40021000
 8007904:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007908:	7cfb      	ldrb	r3, [r7, #19]
 800790a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800790c:	7c7b      	ldrb	r3, [r7, #17]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d105      	bne.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007912:	4ba7      	ldr	r3, [pc, #668]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007916:	4aa6      	ldr	r2, [pc, #664]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800791c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00a      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800792a:	4ba1      	ldr	r3, [pc, #644]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800792c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007930:	f023 0203 	bic.w	r2, r3, #3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	499d      	ldr	r1, [pc, #628]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800793a:	4313      	orrs	r3, r2
 800793c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00a      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800794c:	4b98      	ldr	r3, [pc, #608]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800794e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007952:	f023 020c 	bic.w	r2, r3, #12
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	4995      	ldr	r1, [pc, #596]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800795c:	4313      	orrs	r3, r2
 800795e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0304 	and.w	r3, r3, #4
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800796e:	4b90      	ldr	r3, [pc, #576]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007974:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	498c      	ldr	r1, [pc, #560]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800797e:	4313      	orrs	r3, r2
 8007980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0308 	and.w	r3, r3, #8
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00a      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007990:	4b87      	ldr	r3, [pc, #540]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007996:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	4984      	ldr	r1, [pc, #528]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0310 	and.w	r3, r3, #16
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80079b2:	4b7f      	ldr	r3, [pc, #508]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	497b      	ldr	r1, [pc, #492]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0320 	and.w	r3, r3, #32
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00a      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80079d4:	4b76      	ldr	r3, [pc, #472]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	4973      	ldr	r1, [pc, #460]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00a      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80079f6:	4b6e      	ldr	r3, [pc, #440]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	69db      	ldr	r3, [r3, #28]
 8007a04:	496a      	ldr	r1, [pc, #424]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00a      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a18:	4b65      	ldr	r3, [pc, #404]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	4962      	ldr	r1, [pc, #392]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a3a:	4b5d      	ldr	r3, [pc, #372]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	4959      	ldr	r1, [pc, #356]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00a      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a5c:	4b54      	ldr	r3, [pc, #336]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a62:	f023 0203 	bic.w	r2, r3, #3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6a:	4951      	ldr	r1, [pc, #324]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a7e:	4b4c      	ldr	r3, [pc, #304]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8c:	4948      	ldr	r1, [pc, #288]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d015      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007aa0:	4b43      	ldr	r3, [pc, #268]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aae:	4940      	ldr	r1, [pc, #256]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007abe:	d105      	bne.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ac0:	4b3b      	ldr	r3, [pc, #236]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	4a3a      	ldr	r2, [pc, #232]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007aca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d015      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ad8:	4b35      	ldr	r3, [pc, #212]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ade:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae6:	4932      	ldr	r1, [pc, #200]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007af6:	d105      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007af8:	4b2d      	ldr	r3, [pc, #180]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	4a2c      	ldr	r2, [pc, #176]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b02:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d015      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b10:	4b27      	ldr	r3, [pc, #156]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1e:	4924      	ldr	r1, [pc, #144]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b2e:	d105      	bne.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b30:	4b1f      	ldr	r3, [pc, #124]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	4a1e      	ldr	r2, [pc, #120]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b3a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d015      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b48:	4b19      	ldr	r3, [pc, #100]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b56:	4916      	ldr	r1, [pc, #88]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b66:	d105      	bne.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b68:	4b11      	ldr	r3, [pc, #68]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	4a10      	ldr	r2, [pc, #64]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b72:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d019      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b80:	4b0b      	ldr	r3, [pc, #44]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8e:	4908      	ldr	r1, [pc, #32]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b90:	4313      	orrs	r3, r2
 8007b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b9e:	d109      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ba0:	4b03      	ldr	r3, [pc, #12]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	4a02      	ldr	r2, [pc, #8]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007baa:	60d3      	str	r3, [r2, #12]
 8007bac:	e002      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007bae:	bf00      	nop
 8007bb0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d015      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007bc0:	4b29      	ldr	r3, [pc, #164]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bce:	4926      	ldr	r1, [pc, #152]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bde:	d105      	bne.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007be0:	4b21      	ldr	r3, [pc, #132]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	4a20      	ldr	r2, [pc, #128]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d015      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007bf8:	4b1b      	ldr	r3, [pc, #108]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c06:	4918      	ldr	r1, [pc, #96]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c16:	d105      	bne.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007c18:	4b13      	ldr	r3, [pc, #76]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	4a12      	ldr	r2, [pc, #72]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c22:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d015      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c30:	4b0d      	ldr	r3, [pc, #52]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c3e:	490a      	ldr	r1, [pc, #40]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c4e:	d105      	bne.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c50:	4b05      	ldr	r3, [pc, #20]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	4a04      	ldr	r2, [pc, #16]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007c5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	40021000 	.word	0x40021000

08007c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e049      	b.n	8007d12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d106      	bne.n	8007c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7fb f972 	bl	8002f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4610      	mov	r0, r2
 8007cac:	f000 fb6c 	bl	8008388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d001      	beq.n	8007d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e054      	b.n	8007dde <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0201 	orr.w	r2, r2, #1
 8007d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a26      	ldr	r2, [pc, #152]	; (8007dec <HAL_TIM_Base_Start_IT+0xd0>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d022      	beq.n	8007d9c <HAL_TIM_Base_Start_IT+0x80>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d5e:	d01d      	beq.n	8007d9c <HAL_TIM_Base_Start_IT+0x80>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a22      	ldr	r2, [pc, #136]	; (8007df0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d018      	beq.n	8007d9c <HAL_TIM_Base_Start_IT+0x80>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a21      	ldr	r2, [pc, #132]	; (8007df4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d013      	beq.n	8007d9c <HAL_TIM_Base_Start_IT+0x80>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a1f      	ldr	r2, [pc, #124]	; (8007df8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d00e      	beq.n	8007d9c <HAL_TIM_Base_Start_IT+0x80>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a1e      	ldr	r2, [pc, #120]	; (8007dfc <HAL_TIM_Base_Start_IT+0xe0>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d009      	beq.n	8007d9c <HAL_TIM_Base_Start_IT+0x80>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a1c      	ldr	r2, [pc, #112]	; (8007e00 <HAL_TIM_Base_Start_IT+0xe4>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d004      	beq.n	8007d9c <HAL_TIM_Base_Start_IT+0x80>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a1b      	ldr	r2, [pc, #108]	; (8007e04 <HAL_TIM_Base_Start_IT+0xe8>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d115      	bne.n	8007dc8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689a      	ldr	r2, [r3, #8]
 8007da2:	4b19      	ldr	r3, [pc, #100]	; (8007e08 <HAL_TIM_Base_Start_IT+0xec>)
 8007da4:	4013      	ands	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b06      	cmp	r3, #6
 8007dac:	d015      	beq.n	8007dda <HAL_TIM_Base_Start_IT+0xbe>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007db4:	d011      	beq.n	8007dda <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f042 0201 	orr.w	r2, r2, #1
 8007dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dc6:	e008      	b.n	8007dda <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f042 0201 	orr.w	r2, r2, #1
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	e000      	b.n	8007ddc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	40012c00 	.word	0x40012c00
 8007df0:	40000400 	.word	0x40000400
 8007df4:	40000800 	.word	0x40000800
 8007df8:	40000c00 	.word	0x40000c00
 8007dfc:	40013400 	.word	0x40013400
 8007e00:	40014000 	.word	0x40014000
 8007e04:	40015000 	.word	0x40015000
 8007e08:	00010007 	.word	0x00010007

08007e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d122      	bne.n	8007e68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f003 0302 	and.w	r3, r3, #2
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d11b      	bne.n	8007e68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f06f 0202 	mvn.w	r2, #2
 8007e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fa7c 	bl	800834c <HAL_TIM_IC_CaptureCallback>
 8007e54:	e005      	b.n	8007e62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa6e 	bl	8008338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fa7f 	bl	8008360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	f003 0304 	and.w	r3, r3, #4
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	d122      	bne.n	8007ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	d11b      	bne.n	8007ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f06f 0204 	mvn.w	r2, #4
 8007e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2202      	movs	r2, #2
 8007e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fa52 	bl	800834c <HAL_TIM_IC_CaptureCallback>
 8007ea8:	e005      	b.n	8007eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa44 	bl	8008338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fa55 	bl	8008360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f003 0308 	and.w	r3, r3, #8
 8007ec6:	2b08      	cmp	r3, #8
 8007ec8:	d122      	bne.n	8007f10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	f003 0308 	and.w	r3, r3, #8
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d11b      	bne.n	8007f10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f06f 0208 	mvn.w	r2, #8
 8007ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2204      	movs	r2, #4
 8007ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa28 	bl	800834c <HAL_TIM_IC_CaptureCallback>
 8007efc:	e005      	b.n	8007f0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fa1a 	bl	8008338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fa2b 	bl	8008360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	f003 0310 	and.w	r3, r3, #16
 8007f1a:	2b10      	cmp	r3, #16
 8007f1c:	d122      	bne.n	8007f64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f003 0310 	and.w	r3, r3, #16
 8007f28:	2b10      	cmp	r3, #16
 8007f2a:	d11b      	bne.n	8007f64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f06f 0210 	mvn.w	r2, #16
 8007f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2208      	movs	r2, #8
 8007f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f9fe 	bl	800834c <HAL_TIM_IC_CaptureCallback>
 8007f50:	e005      	b.n	8007f5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f9f0 	bl	8008338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fa01 	bl	8008360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d10e      	bne.n	8007f90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d107      	bne.n	8007f90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f06f 0201 	mvn.w	r2, #1
 8007f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7fa fed6 	bl	8002d3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f9a:	2b80      	cmp	r3, #128	; 0x80
 8007f9c:	d10e      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa8:	2b80      	cmp	r3, #128	; 0x80
 8007faa:	d107      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fbca 	bl	8008750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fca:	d10e      	bne.n	8007fea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd6:	2b80      	cmp	r3, #128	; 0x80
 8007fd8:	d107      	bne.n	8007fea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fbbd 	bl	8008764 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff4:	2b40      	cmp	r3, #64	; 0x40
 8007ff6:	d10e      	bne.n	8008016 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008002:	2b40      	cmp	r3, #64	; 0x40
 8008004:	d107      	bne.n	8008016 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800800e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f9af 	bl	8008374 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	f003 0320 	and.w	r3, r3, #32
 8008020:	2b20      	cmp	r3, #32
 8008022:	d10e      	bne.n	8008042 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f003 0320 	and.w	r3, r3, #32
 800802e:	2b20      	cmp	r3, #32
 8008030:	d107      	bne.n	8008042 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f06f 0220 	mvn.w	r2, #32
 800803a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fb7d 	bl	800873c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800804c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008050:	d10f      	bne.n	8008072 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800805c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008060:	d107      	bne.n	8008072 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800806a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fb83 	bl	8008778 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800807c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008080:	d10f      	bne.n	80080a2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800808c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008090:	d107      	bne.n	80080a2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800809a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fb75 	bl	800878c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080b0:	d10f      	bne.n	80080d2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080c0:	d107      	bne.n	80080d2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80080ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fb67 	bl	80087a0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080e0:	d10f      	bne.n	8008102 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080f0:	d107      	bne.n	8008102 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80080fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fb59 	bl	80087b4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008102:	bf00      	nop
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008120:	2b01      	cmp	r3, #1
 8008122:	d101      	bne.n	8008128 <HAL_TIM_ConfigClockSource+0x1c>
 8008124:	2302      	movs	r3, #2
 8008126:	e0f6      	b.n	8008316 <HAL_TIM_ConfigClockSource+0x20a>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2202      	movs	r2, #2
 8008134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008146:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800814a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008152:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a6f      	ldr	r2, [pc, #444]	; (8008320 <HAL_TIM_ConfigClockSource+0x214>)
 8008162:	4293      	cmp	r3, r2
 8008164:	f000 80c1 	beq.w	80082ea <HAL_TIM_ConfigClockSource+0x1de>
 8008168:	4a6d      	ldr	r2, [pc, #436]	; (8008320 <HAL_TIM_ConfigClockSource+0x214>)
 800816a:	4293      	cmp	r3, r2
 800816c:	f200 80c6 	bhi.w	80082fc <HAL_TIM_ConfigClockSource+0x1f0>
 8008170:	4a6c      	ldr	r2, [pc, #432]	; (8008324 <HAL_TIM_ConfigClockSource+0x218>)
 8008172:	4293      	cmp	r3, r2
 8008174:	f000 80b9 	beq.w	80082ea <HAL_TIM_ConfigClockSource+0x1de>
 8008178:	4a6a      	ldr	r2, [pc, #424]	; (8008324 <HAL_TIM_ConfigClockSource+0x218>)
 800817a:	4293      	cmp	r3, r2
 800817c:	f200 80be 	bhi.w	80082fc <HAL_TIM_ConfigClockSource+0x1f0>
 8008180:	4a69      	ldr	r2, [pc, #420]	; (8008328 <HAL_TIM_ConfigClockSource+0x21c>)
 8008182:	4293      	cmp	r3, r2
 8008184:	f000 80b1 	beq.w	80082ea <HAL_TIM_ConfigClockSource+0x1de>
 8008188:	4a67      	ldr	r2, [pc, #412]	; (8008328 <HAL_TIM_ConfigClockSource+0x21c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	f200 80b6 	bhi.w	80082fc <HAL_TIM_ConfigClockSource+0x1f0>
 8008190:	4a66      	ldr	r2, [pc, #408]	; (800832c <HAL_TIM_ConfigClockSource+0x220>)
 8008192:	4293      	cmp	r3, r2
 8008194:	f000 80a9 	beq.w	80082ea <HAL_TIM_ConfigClockSource+0x1de>
 8008198:	4a64      	ldr	r2, [pc, #400]	; (800832c <HAL_TIM_ConfigClockSource+0x220>)
 800819a:	4293      	cmp	r3, r2
 800819c:	f200 80ae 	bhi.w	80082fc <HAL_TIM_ConfigClockSource+0x1f0>
 80081a0:	4a63      	ldr	r2, [pc, #396]	; (8008330 <HAL_TIM_ConfigClockSource+0x224>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	f000 80a1 	beq.w	80082ea <HAL_TIM_ConfigClockSource+0x1de>
 80081a8:	4a61      	ldr	r2, [pc, #388]	; (8008330 <HAL_TIM_ConfigClockSource+0x224>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	f200 80a6 	bhi.w	80082fc <HAL_TIM_ConfigClockSource+0x1f0>
 80081b0:	4a60      	ldr	r2, [pc, #384]	; (8008334 <HAL_TIM_ConfigClockSource+0x228>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	f000 8099 	beq.w	80082ea <HAL_TIM_ConfigClockSource+0x1de>
 80081b8:	4a5e      	ldr	r2, [pc, #376]	; (8008334 <HAL_TIM_ConfigClockSource+0x228>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	f200 809e 	bhi.w	80082fc <HAL_TIM_ConfigClockSource+0x1f0>
 80081c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80081c4:	f000 8091 	beq.w	80082ea <HAL_TIM_ConfigClockSource+0x1de>
 80081c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80081cc:	f200 8096 	bhi.w	80082fc <HAL_TIM_ConfigClockSource+0x1f0>
 80081d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081d4:	f000 8089 	beq.w	80082ea <HAL_TIM_ConfigClockSource+0x1de>
 80081d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081dc:	f200 808e 	bhi.w	80082fc <HAL_TIM_ConfigClockSource+0x1f0>
 80081e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081e4:	d03e      	beq.n	8008264 <HAL_TIM_ConfigClockSource+0x158>
 80081e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ea:	f200 8087 	bhi.w	80082fc <HAL_TIM_ConfigClockSource+0x1f0>
 80081ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081f2:	f000 8086 	beq.w	8008302 <HAL_TIM_ConfigClockSource+0x1f6>
 80081f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081fa:	d87f      	bhi.n	80082fc <HAL_TIM_ConfigClockSource+0x1f0>
 80081fc:	2b70      	cmp	r3, #112	; 0x70
 80081fe:	d01a      	beq.n	8008236 <HAL_TIM_ConfigClockSource+0x12a>
 8008200:	2b70      	cmp	r3, #112	; 0x70
 8008202:	d87b      	bhi.n	80082fc <HAL_TIM_ConfigClockSource+0x1f0>
 8008204:	2b60      	cmp	r3, #96	; 0x60
 8008206:	d050      	beq.n	80082aa <HAL_TIM_ConfigClockSource+0x19e>
 8008208:	2b60      	cmp	r3, #96	; 0x60
 800820a:	d877      	bhi.n	80082fc <HAL_TIM_ConfigClockSource+0x1f0>
 800820c:	2b50      	cmp	r3, #80	; 0x50
 800820e:	d03c      	beq.n	800828a <HAL_TIM_ConfigClockSource+0x17e>
 8008210:	2b50      	cmp	r3, #80	; 0x50
 8008212:	d873      	bhi.n	80082fc <HAL_TIM_ConfigClockSource+0x1f0>
 8008214:	2b40      	cmp	r3, #64	; 0x40
 8008216:	d058      	beq.n	80082ca <HAL_TIM_ConfigClockSource+0x1be>
 8008218:	2b40      	cmp	r3, #64	; 0x40
 800821a:	d86f      	bhi.n	80082fc <HAL_TIM_ConfigClockSource+0x1f0>
 800821c:	2b30      	cmp	r3, #48	; 0x30
 800821e:	d064      	beq.n	80082ea <HAL_TIM_ConfigClockSource+0x1de>
 8008220:	2b30      	cmp	r3, #48	; 0x30
 8008222:	d86b      	bhi.n	80082fc <HAL_TIM_ConfigClockSource+0x1f0>
 8008224:	2b20      	cmp	r3, #32
 8008226:	d060      	beq.n	80082ea <HAL_TIM_ConfigClockSource+0x1de>
 8008228:	2b20      	cmp	r3, #32
 800822a:	d867      	bhi.n	80082fc <HAL_TIM_ConfigClockSource+0x1f0>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d05c      	beq.n	80082ea <HAL_TIM_ConfigClockSource+0x1de>
 8008230:	2b10      	cmp	r3, #16
 8008232:	d05a      	beq.n	80082ea <HAL_TIM_ConfigClockSource+0x1de>
 8008234:	e062      	b.n	80082fc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6818      	ldr	r0, [r3, #0]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	6899      	ldr	r1, [r3, #8]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	685a      	ldr	r2, [r3, #4]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	f000 f9c3 	bl	80085d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008258:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	609a      	str	r2, [r3, #8]
      break;
 8008262:	e04f      	b.n	8008304 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	6899      	ldr	r1, [r3, #8]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	f000 f9ac 	bl	80085d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689a      	ldr	r2, [r3, #8]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008286:	609a      	str	r2, [r3, #8]
      break;
 8008288:	e03c      	b.n	8008304 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	6859      	ldr	r1, [r3, #4]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	461a      	mov	r2, r3
 8008298:	f000 f91e 	bl	80084d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2150      	movs	r1, #80	; 0x50
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 f977 	bl	8008596 <TIM_ITRx_SetConfig>
      break;
 80082a8:	e02c      	b.n	8008304 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6818      	ldr	r0, [r3, #0]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	6859      	ldr	r1, [r3, #4]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	461a      	mov	r2, r3
 80082b8:	f000 f93d 	bl	8008536 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2160      	movs	r1, #96	; 0x60
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 f967 	bl	8008596 <TIM_ITRx_SetConfig>
      break;
 80082c8:	e01c      	b.n	8008304 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	6859      	ldr	r1, [r3, #4]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	461a      	mov	r2, r3
 80082d8:	f000 f8fe 	bl	80084d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2140      	movs	r1, #64	; 0x40
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 f957 	bl	8008596 <TIM_ITRx_SetConfig>
      break;
 80082e8:	e00c      	b.n	8008304 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4619      	mov	r1, r3
 80082f4:	4610      	mov	r0, r2
 80082f6:	f000 f94e 	bl	8008596 <TIM_ITRx_SetConfig>
      break;
 80082fa:	e003      	b.n	8008304 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008300:	e000      	b.n	8008304 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008314:	7bfb      	ldrb	r3, [r7, #15]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	00100070 	.word	0x00100070
 8008324:	00100060 	.word	0x00100060
 8008328:	00100050 	.word	0x00100050
 800832c:	00100040 	.word	0x00100040
 8008330:	00100030 	.word	0x00100030
 8008334:	00100020 	.word	0x00100020

08008338 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a46      	ldr	r2, [pc, #280]	; (80084b4 <TIM_Base_SetConfig+0x12c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d017      	beq.n	80083d0 <TIM_Base_SetConfig+0x48>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a6:	d013      	beq.n	80083d0 <TIM_Base_SetConfig+0x48>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a43      	ldr	r2, [pc, #268]	; (80084b8 <TIM_Base_SetConfig+0x130>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00f      	beq.n	80083d0 <TIM_Base_SetConfig+0x48>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a42      	ldr	r2, [pc, #264]	; (80084bc <TIM_Base_SetConfig+0x134>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d00b      	beq.n	80083d0 <TIM_Base_SetConfig+0x48>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a41      	ldr	r2, [pc, #260]	; (80084c0 <TIM_Base_SetConfig+0x138>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d007      	beq.n	80083d0 <TIM_Base_SetConfig+0x48>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a40      	ldr	r2, [pc, #256]	; (80084c4 <TIM_Base_SetConfig+0x13c>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d003      	beq.n	80083d0 <TIM_Base_SetConfig+0x48>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a3f      	ldr	r2, [pc, #252]	; (80084c8 <TIM_Base_SetConfig+0x140>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d108      	bne.n	80083e2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	4313      	orrs	r3, r2
 80083e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a33      	ldr	r2, [pc, #204]	; (80084b4 <TIM_Base_SetConfig+0x12c>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d023      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083f0:	d01f      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a30      	ldr	r2, [pc, #192]	; (80084b8 <TIM_Base_SetConfig+0x130>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d01b      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a2f      	ldr	r2, [pc, #188]	; (80084bc <TIM_Base_SetConfig+0x134>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d017      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a2e      	ldr	r2, [pc, #184]	; (80084c0 <TIM_Base_SetConfig+0x138>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d013      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a2d      	ldr	r2, [pc, #180]	; (80084c4 <TIM_Base_SetConfig+0x13c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d00f      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a2d      	ldr	r2, [pc, #180]	; (80084cc <TIM_Base_SetConfig+0x144>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d00b      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a2c      	ldr	r2, [pc, #176]	; (80084d0 <TIM_Base_SetConfig+0x148>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d007      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a2b      	ldr	r2, [pc, #172]	; (80084d4 <TIM_Base_SetConfig+0x14c>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d003      	beq.n	8008432 <TIM_Base_SetConfig+0xaa>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a26      	ldr	r2, [pc, #152]	; (80084c8 <TIM_Base_SetConfig+0x140>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d108      	bne.n	8008444 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	4313      	orrs	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a12      	ldr	r2, [pc, #72]	; (80084b4 <TIM_Base_SetConfig+0x12c>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d013      	beq.n	8008498 <TIM_Base_SetConfig+0x110>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a14      	ldr	r2, [pc, #80]	; (80084c4 <TIM_Base_SetConfig+0x13c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d00f      	beq.n	8008498 <TIM_Base_SetConfig+0x110>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a14      	ldr	r2, [pc, #80]	; (80084cc <TIM_Base_SetConfig+0x144>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d00b      	beq.n	8008498 <TIM_Base_SetConfig+0x110>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a13      	ldr	r2, [pc, #76]	; (80084d0 <TIM_Base_SetConfig+0x148>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d007      	beq.n	8008498 <TIM_Base_SetConfig+0x110>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a12      	ldr	r2, [pc, #72]	; (80084d4 <TIM_Base_SetConfig+0x14c>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d003      	beq.n	8008498 <TIM_Base_SetConfig+0x110>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a0d      	ldr	r2, [pc, #52]	; (80084c8 <TIM_Base_SetConfig+0x140>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d103      	bne.n	80084a0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	691a      	ldr	r2, [r3, #16]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	615a      	str	r2, [r3, #20]
}
 80084a6:	bf00      	nop
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	40012c00 	.word	0x40012c00
 80084b8:	40000400 	.word	0x40000400
 80084bc:	40000800 	.word	0x40000800
 80084c0:	40000c00 	.word	0x40000c00
 80084c4:	40013400 	.word	0x40013400
 80084c8:	40015000 	.word	0x40015000
 80084cc:	40014000 	.word	0x40014000
 80084d0:	40014400 	.word	0x40014400
 80084d4:	40014800 	.word	0x40014800

080084d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084d8:	b480      	push	{r7}
 80084da:	b087      	sub	sp, #28
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	f023 0201 	bic.w	r2, r3, #1
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	011b      	lsls	r3, r3, #4
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	4313      	orrs	r3, r2
 800850c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f023 030a 	bic.w	r3, r3, #10
 8008514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	4313      	orrs	r3, r2
 800851c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	621a      	str	r2, [r3, #32]
}
 800852a:	bf00      	nop
 800852c:	371c      	adds	r7, #28
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008536:	b480      	push	{r7}
 8008538:	b087      	sub	sp, #28
 800853a:	af00      	add	r7, sp, #0
 800853c:	60f8      	str	r0, [r7, #12]
 800853e:	60b9      	str	r1, [r7, #8]
 8008540:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	f023 0210 	bic.w	r2, r3, #16
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6a1b      	ldr	r3, [r3, #32]
 8008558:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008560:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	031b      	lsls	r3, r3, #12
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	4313      	orrs	r3, r2
 800856a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008572:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	011b      	lsls	r3, r3, #4
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	4313      	orrs	r3, r2
 800857c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	621a      	str	r2, [r3, #32]
}
 800858a:	bf00      	nop
 800858c:	371c      	adds	r7, #28
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008596:	b480      	push	{r7}
 8008598:	b085      	sub	sp, #20
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80085ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	f043 0307 	orr.w	r3, r3, #7
 80085bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	609a      	str	r2, [r3, #8]
}
 80085c4:	bf00      	nop
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b087      	sub	sp, #28
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	021a      	lsls	r2, r3, #8
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	431a      	orrs	r2, r3
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	697a      	ldr	r2, [r7, #20]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	697a      	ldr	r2, [r7, #20]
 8008602:	609a      	str	r2, [r3, #8]
}
 8008604:	bf00      	nop
 8008606:	371c      	adds	r7, #28
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008620:	2b01      	cmp	r3, #1
 8008622:	d101      	bne.n	8008628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008624:	2302      	movs	r3, #2
 8008626:	e074      	b.n	8008712 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2202      	movs	r2, #2
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a34      	ldr	r2, [pc, #208]	; (8008720 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d009      	beq.n	8008666 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a33      	ldr	r2, [pc, #204]	; (8008724 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d004      	beq.n	8008666 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a31      	ldr	r2, [pc, #196]	; (8008728 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d108      	bne.n	8008678 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800866c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	4313      	orrs	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800867e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a21      	ldr	r2, [pc, #132]	; (8008720 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d022      	beq.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086a8:	d01d      	beq.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a1f      	ldr	r2, [pc, #124]	; (800872c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d018      	beq.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a1d      	ldr	r2, [pc, #116]	; (8008730 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d013      	beq.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a1c      	ldr	r2, [pc, #112]	; (8008734 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d00e      	beq.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a15      	ldr	r2, [pc, #84]	; (8008724 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d009      	beq.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a18      	ldr	r2, [pc, #96]	; (8008738 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d004      	beq.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a11      	ldr	r2, [pc, #68]	; (8008728 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d10c      	bne.n	8008700 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	40012c00 	.word	0x40012c00
 8008724:	40013400 	.word	0x40013400
 8008728:	40015000 	.word	0x40015000
 800872c:	40000400 	.word	0x40000400
 8008730:	40000800 	.word	0x40000800
 8008734:	40000c00 	.word	0x40000c00
 8008738:	40014000 	.word	0x40014000

0800873c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e042      	b.n	8008860 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d106      	bne.n	80087f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7fa fc83 	bl	80030f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2224      	movs	r2, #36	; 0x24
 80087f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 0201 	bic.w	r2, r2, #1
 8008808:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f82c 	bl	8008868 <UART_SetConfig>
 8008810:	4603      	mov	r3, r0
 8008812:	2b01      	cmp	r3, #1
 8008814:	d101      	bne.n	800881a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e022      	b.n	8008860 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881e:	2b00      	cmp	r3, #0
 8008820:	d002      	beq.n	8008828 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fb1c 	bl	8008e60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689a      	ldr	r2, [r3, #8]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f042 0201 	orr.w	r2, r2, #1
 8008856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fba3 	bl	8008fa4 <UART_CheckIdleState>
 800885e:	4603      	mov	r3, r0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800886c:	b08c      	sub	sp, #48	; 0x30
 800886e:	af00      	add	r7, sp, #0
 8008870:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	689a      	ldr	r2, [r3, #8]
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	431a      	orrs	r2, r3
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	431a      	orrs	r2, r3
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	69db      	ldr	r3, [r3, #28]
 800888c:	4313      	orrs	r3, r2
 800888e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	4baa      	ldr	r3, [pc, #680]	; (8008b40 <UART_SetConfig+0x2d8>)
 8008898:	4013      	ands	r3, r2
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	6812      	ldr	r2, [r2, #0]
 800889e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088a0:	430b      	orrs	r3, r1
 80088a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	68da      	ldr	r2, [r3, #12]
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	430a      	orrs	r2, r1
 80088b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a9f      	ldr	r2, [pc, #636]	; (8008b44 <UART_SetConfig+0x2dc>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d004      	beq.n	80088d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088d0:	4313      	orrs	r3, r2
 80088d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80088de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	6812      	ldr	r2, [r2, #0]
 80088e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088e8:	430b      	orrs	r3, r1
 80088ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f2:	f023 010f 	bic.w	r1, r3, #15
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	430a      	orrs	r2, r1
 8008900:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a90      	ldr	r2, [pc, #576]	; (8008b48 <UART_SetConfig+0x2e0>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d125      	bne.n	8008958 <UART_SetConfig+0xf0>
 800890c:	4b8f      	ldr	r3, [pc, #572]	; (8008b4c <UART_SetConfig+0x2e4>)
 800890e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008912:	f003 0303 	and.w	r3, r3, #3
 8008916:	2b03      	cmp	r3, #3
 8008918:	d81a      	bhi.n	8008950 <UART_SetConfig+0xe8>
 800891a:	a201      	add	r2, pc, #4	; (adr r2, 8008920 <UART_SetConfig+0xb8>)
 800891c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008920:	08008931 	.word	0x08008931
 8008924:	08008941 	.word	0x08008941
 8008928:	08008939 	.word	0x08008939
 800892c:	08008949 	.word	0x08008949
 8008930:	2301      	movs	r3, #1
 8008932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008936:	e116      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008938:	2302      	movs	r3, #2
 800893a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800893e:	e112      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008940:	2304      	movs	r3, #4
 8008942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008946:	e10e      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008948:	2308      	movs	r3, #8
 800894a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800894e:	e10a      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008950:	2310      	movs	r3, #16
 8008952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008956:	e106      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a7c      	ldr	r2, [pc, #496]	; (8008b50 <UART_SetConfig+0x2e8>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d138      	bne.n	80089d4 <UART_SetConfig+0x16c>
 8008962:	4b7a      	ldr	r3, [pc, #488]	; (8008b4c <UART_SetConfig+0x2e4>)
 8008964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008968:	f003 030c 	and.w	r3, r3, #12
 800896c:	2b0c      	cmp	r3, #12
 800896e:	d82d      	bhi.n	80089cc <UART_SetConfig+0x164>
 8008970:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <UART_SetConfig+0x110>)
 8008972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008976:	bf00      	nop
 8008978:	080089ad 	.word	0x080089ad
 800897c:	080089cd 	.word	0x080089cd
 8008980:	080089cd 	.word	0x080089cd
 8008984:	080089cd 	.word	0x080089cd
 8008988:	080089bd 	.word	0x080089bd
 800898c:	080089cd 	.word	0x080089cd
 8008990:	080089cd 	.word	0x080089cd
 8008994:	080089cd 	.word	0x080089cd
 8008998:	080089b5 	.word	0x080089b5
 800899c:	080089cd 	.word	0x080089cd
 80089a0:	080089cd 	.word	0x080089cd
 80089a4:	080089cd 	.word	0x080089cd
 80089a8:	080089c5 	.word	0x080089c5
 80089ac:	2300      	movs	r3, #0
 80089ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089b2:	e0d8      	b.n	8008b66 <UART_SetConfig+0x2fe>
 80089b4:	2302      	movs	r3, #2
 80089b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ba:	e0d4      	b.n	8008b66 <UART_SetConfig+0x2fe>
 80089bc:	2304      	movs	r3, #4
 80089be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089c2:	e0d0      	b.n	8008b66 <UART_SetConfig+0x2fe>
 80089c4:	2308      	movs	r3, #8
 80089c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ca:	e0cc      	b.n	8008b66 <UART_SetConfig+0x2fe>
 80089cc:	2310      	movs	r3, #16
 80089ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089d2:	e0c8      	b.n	8008b66 <UART_SetConfig+0x2fe>
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a5e      	ldr	r2, [pc, #376]	; (8008b54 <UART_SetConfig+0x2ec>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d125      	bne.n	8008a2a <UART_SetConfig+0x1c2>
 80089de:	4b5b      	ldr	r3, [pc, #364]	; (8008b4c <UART_SetConfig+0x2e4>)
 80089e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80089e8:	2b30      	cmp	r3, #48	; 0x30
 80089ea:	d016      	beq.n	8008a1a <UART_SetConfig+0x1b2>
 80089ec:	2b30      	cmp	r3, #48	; 0x30
 80089ee:	d818      	bhi.n	8008a22 <UART_SetConfig+0x1ba>
 80089f0:	2b20      	cmp	r3, #32
 80089f2:	d00a      	beq.n	8008a0a <UART_SetConfig+0x1a2>
 80089f4:	2b20      	cmp	r3, #32
 80089f6:	d814      	bhi.n	8008a22 <UART_SetConfig+0x1ba>
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <UART_SetConfig+0x19a>
 80089fc:	2b10      	cmp	r3, #16
 80089fe:	d008      	beq.n	8008a12 <UART_SetConfig+0x1aa>
 8008a00:	e00f      	b.n	8008a22 <UART_SetConfig+0x1ba>
 8008a02:	2300      	movs	r3, #0
 8008a04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a08:	e0ad      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a10:	e0a9      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008a12:	2304      	movs	r3, #4
 8008a14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a18:	e0a5      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008a1a:	2308      	movs	r3, #8
 8008a1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a20:	e0a1      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008a22:	2310      	movs	r3, #16
 8008a24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a28:	e09d      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a4a      	ldr	r2, [pc, #296]	; (8008b58 <UART_SetConfig+0x2f0>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d125      	bne.n	8008a80 <UART_SetConfig+0x218>
 8008a34:	4b45      	ldr	r3, [pc, #276]	; (8008b4c <UART_SetConfig+0x2e4>)
 8008a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008a3e:	2bc0      	cmp	r3, #192	; 0xc0
 8008a40:	d016      	beq.n	8008a70 <UART_SetConfig+0x208>
 8008a42:	2bc0      	cmp	r3, #192	; 0xc0
 8008a44:	d818      	bhi.n	8008a78 <UART_SetConfig+0x210>
 8008a46:	2b80      	cmp	r3, #128	; 0x80
 8008a48:	d00a      	beq.n	8008a60 <UART_SetConfig+0x1f8>
 8008a4a:	2b80      	cmp	r3, #128	; 0x80
 8008a4c:	d814      	bhi.n	8008a78 <UART_SetConfig+0x210>
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <UART_SetConfig+0x1f0>
 8008a52:	2b40      	cmp	r3, #64	; 0x40
 8008a54:	d008      	beq.n	8008a68 <UART_SetConfig+0x200>
 8008a56:	e00f      	b.n	8008a78 <UART_SetConfig+0x210>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a5e:	e082      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008a60:	2302      	movs	r3, #2
 8008a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a66:	e07e      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008a68:	2304      	movs	r3, #4
 8008a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a6e:	e07a      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008a70:	2308      	movs	r3, #8
 8008a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a76:	e076      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008a78:	2310      	movs	r3, #16
 8008a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a7e:	e072      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a35      	ldr	r2, [pc, #212]	; (8008b5c <UART_SetConfig+0x2f4>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d12a      	bne.n	8008ae0 <UART_SetConfig+0x278>
 8008a8a:	4b30      	ldr	r3, [pc, #192]	; (8008b4c <UART_SetConfig+0x2e4>)
 8008a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a98:	d01a      	beq.n	8008ad0 <UART_SetConfig+0x268>
 8008a9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a9e:	d81b      	bhi.n	8008ad8 <UART_SetConfig+0x270>
 8008aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aa4:	d00c      	beq.n	8008ac0 <UART_SetConfig+0x258>
 8008aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aaa:	d815      	bhi.n	8008ad8 <UART_SetConfig+0x270>
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d003      	beq.n	8008ab8 <UART_SetConfig+0x250>
 8008ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ab4:	d008      	beq.n	8008ac8 <UART_SetConfig+0x260>
 8008ab6:	e00f      	b.n	8008ad8 <UART_SetConfig+0x270>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008abe:	e052      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ac6:	e04e      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008ac8:	2304      	movs	r3, #4
 8008aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ace:	e04a      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008ad0:	2308      	movs	r3, #8
 8008ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ad6:	e046      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008ad8:	2310      	movs	r3, #16
 8008ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ade:	e042      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a17      	ldr	r2, [pc, #92]	; (8008b44 <UART_SetConfig+0x2dc>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d13a      	bne.n	8008b60 <UART_SetConfig+0x2f8>
 8008aea:	4b18      	ldr	r3, [pc, #96]	; (8008b4c <UART_SetConfig+0x2e4>)
 8008aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008af4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008af8:	d01a      	beq.n	8008b30 <UART_SetConfig+0x2c8>
 8008afa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008afe:	d81b      	bhi.n	8008b38 <UART_SetConfig+0x2d0>
 8008b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b04:	d00c      	beq.n	8008b20 <UART_SetConfig+0x2b8>
 8008b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b0a:	d815      	bhi.n	8008b38 <UART_SetConfig+0x2d0>
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <UART_SetConfig+0x2b0>
 8008b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b14:	d008      	beq.n	8008b28 <UART_SetConfig+0x2c0>
 8008b16:	e00f      	b.n	8008b38 <UART_SetConfig+0x2d0>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b1e:	e022      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008b20:	2302      	movs	r3, #2
 8008b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b26:	e01e      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008b28:	2304      	movs	r3, #4
 8008b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b2e:	e01a      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008b30:	2308      	movs	r3, #8
 8008b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b36:	e016      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008b38:	2310      	movs	r3, #16
 8008b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b3e:	e012      	b.n	8008b66 <UART_SetConfig+0x2fe>
 8008b40:	cfff69f3 	.word	0xcfff69f3
 8008b44:	40008000 	.word	0x40008000
 8008b48:	40013800 	.word	0x40013800
 8008b4c:	40021000 	.word	0x40021000
 8008b50:	40004400 	.word	0x40004400
 8008b54:	40004800 	.word	0x40004800
 8008b58:	40004c00 	.word	0x40004c00
 8008b5c:	40005000 	.word	0x40005000
 8008b60:	2310      	movs	r3, #16
 8008b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4aae      	ldr	r2, [pc, #696]	; (8008e24 <UART_SetConfig+0x5bc>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	f040 8097 	bne.w	8008ca0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b76:	2b08      	cmp	r3, #8
 8008b78:	d823      	bhi.n	8008bc2 <UART_SetConfig+0x35a>
 8008b7a:	a201      	add	r2, pc, #4	; (adr r2, 8008b80 <UART_SetConfig+0x318>)
 8008b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b80:	08008ba5 	.word	0x08008ba5
 8008b84:	08008bc3 	.word	0x08008bc3
 8008b88:	08008bad 	.word	0x08008bad
 8008b8c:	08008bc3 	.word	0x08008bc3
 8008b90:	08008bb3 	.word	0x08008bb3
 8008b94:	08008bc3 	.word	0x08008bc3
 8008b98:	08008bc3 	.word	0x08008bc3
 8008b9c:	08008bc3 	.word	0x08008bc3
 8008ba0:	08008bbb 	.word	0x08008bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ba4:	f7fe fda2 	bl	80076ec <HAL_RCC_GetPCLK1Freq>
 8008ba8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008baa:	e010      	b.n	8008bce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bac:	4b9e      	ldr	r3, [pc, #632]	; (8008e28 <UART_SetConfig+0x5c0>)
 8008bae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bb0:	e00d      	b.n	8008bce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bb2:	f7fe fd2d 	bl	8007610 <HAL_RCC_GetSysClockFreq>
 8008bb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bb8:	e009      	b.n	8008bce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bc0:	e005      	b.n	8008bce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008bcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 8130 	beq.w	8008e36 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bda:	4a94      	ldr	r2, [pc, #592]	; (8008e2c <UART_SetConfig+0x5c4>)
 8008bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008be0:	461a      	mov	r2, r3
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008be8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	685a      	ldr	r2, [r3, #4]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	005b      	lsls	r3, r3, #1
 8008bf2:	4413      	add	r3, r2
 8008bf4:	69ba      	ldr	r2, [r7, #24]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d305      	bcc.n	8008c06 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d903      	bls.n	8008c0e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c0c:	e113      	b.n	8008e36 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c10:	2200      	movs	r2, #0
 8008c12:	60bb      	str	r3, [r7, #8]
 8008c14:	60fa      	str	r2, [r7, #12]
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1a:	4a84      	ldr	r2, [pc, #528]	; (8008e2c <UART_SetConfig+0x5c4>)
 8008c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	2200      	movs	r2, #0
 8008c24:	603b      	str	r3, [r7, #0]
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c30:	f7f7 faf2 	bl	8000218 <__aeabi_uldivmod>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4610      	mov	r0, r2
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	f04f 0200 	mov.w	r2, #0
 8008c40:	f04f 0300 	mov.w	r3, #0
 8008c44:	020b      	lsls	r3, r1, #8
 8008c46:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c4a:	0202      	lsls	r2, r0, #8
 8008c4c:	6979      	ldr	r1, [r7, #20]
 8008c4e:	6849      	ldr	r1, [r1, #4]
 8008c50:	0849      	lsrs	r1, r1, #1
 8008c52:	2000      	movs	r0, #0
 8008c54:	460c      	mov	r4, r1
 8008c56:	4605      	mov	r5, r0
 8008c58:	eb12 0804 	adds.w	r8, r2, r4
 8008c5c:	eb43 0905 	adc.w	r9, r3, r5
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	469a      	mov	sl, r3
 8008c68:	4693      	mov	fp, r2
 8008c6a:	4652      	mov	r2, sl
 8008c6c:	465b      	mov	r3, fp
 8008c6e:	4640      	mov	r0, r8
 8008c70:	4649      	mov	r1, r9
 8008c72:	f7f7 fad1 	bl	8000218 <__aeabi_uldivmod>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c7e:	6a3b      	ldr	r3, [r7, #32]
 8008c80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c84:	d308      	bcc.n	8008c98 <UART_SetConfig+0x430>
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c8c:	d204      	bcs.n	8008c98 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	6a3a      	ldr	r2, [r7, #32]
 8008c94:	60da      	str	r2, [r3, #12]
 8008c96:	e0ce      	b.n	8008e36 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c9e:	e0ca      	b.n	8008e36 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	69db      	ldr	r3, [r3, #28]
 8008ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ca8:	d166      	bne.n	8008d78 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008caa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008cae:	2b08      	cmp	r3, #8
 8008cb0:	d827      	bhi.n	8008d02 <UART_SetConfig+0x49a>
 8008cb2:	a201      	add	r2, pc, #4	; (adr r2, 8008cb8 <UART_SetConfig+0x450>)
 8008cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb8:	08008cdd 	.word	0x08008cdd
 8008cbc:	08008ce5 	.word	0x08008ce5
 8008cc0:	08008ced 	.word	0x08008ced
 8008cc4:	08008d03 	.word	0x08008d03
 8008cc8:	08008cf3 	.word	0x08008cf3
 8008ccc:	08008d03 	.word	0x08008d03
 8008cd0:	08008d03 	.word	0x08008d03
 8008cd4:	08008d03 	.word	0x08008d03
 8008cd8:	08008cfb 	.word	0x08008cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cdc:	f7fe fd06 	bl	80076ec <HAL_RCC_GetPCLK1Freq>
 8008ce0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ce2:	e014      	b.n	8008d0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ce4:	f7fe fd18 	bl	8007718 <HAL_RCC_GetPCLK2Freq>
 8008ce8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008cea:	e010      	b.n	8008d0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cec:	4b4e      	ldr	r3, [pc, #312]	; (8008e28 <UART_SetConfig+0x5c0>)
 8008cee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008cf0:	e00d      	b.n	8008d0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cf2:	f7fe fc8d 	bl	8007610 <HAL_RCC_GetSysClockFreq>
 8008cf6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008cf8:	e009      	b.n	8008d0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d00:	e005      	b.n	8008d0e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008d02:	2300      	movs	r3, #0
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008d0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 8090 	beq.w	8008e36 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1a:	4a44      	ldr	r2, [pc, #272]	; (8008e2c <UART_SetConfig+0x5c4>)
 8008d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d20:	461a      	mov	r2, r3
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d28:	005a      	lsls	r2, r3, #1
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	085b      	lsrs	r3, r3, #1
 8008d30:	441a      	add	r2, r3
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	2b0f      	cmp	r3, #15
 8008d40:	d916      	bls.n	8008d70 <UART_SetConfig+0x508>
 8008d42:	6a3b      	ldr	r3, [r7, #32]
 8008d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d48:	d212      	bcs.n	8008d70 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	f023 030f 	bic.w	r3, r3, #15
 8008d52:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	085b      	lsrs	r3, r3, #1
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	f003 0307 	and.w	r3, r3, #7
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	8bfb      	ldrh	r3, [r7, #30]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	8bfa      	ldrh	r2, [r7, #30]
 8008d6c:	60da      	str	r2, [r3, #12]
 8008d6e:	e062      	b.n	8008e36 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008d76:	e05e      	b.n	8008e36 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d7c:	2b08      	cmp	r3, #8
 8008d7e:	d828      	bhi.n	8008dd2 <UART_SetConfig+0x56a>
 8008d80:	a201      	add	r2, pc, #4	; (adr r2, 8008d88 <UART_SetConfig+0x520>)
 8008d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d86:	bf00      	nop
 8008d88:	08008dad 	.word	0x08008dad
 8008d8c:	08008db5 	.word	0x08008db5
 8008d90:	08008dbd 	.word	0x08008dbd
 8008d94:	08008dd3 	.word	0x08008dd3
 8008d98:	08008dc3 	.word	0x08008dc3
 8008d9c:	08008dd3 	.word	0x08008dd3
 8008da0:	08008dd3 	.word	0x08008dd3
 8008da4:	08008dd3 	.word	0x08008dd3
 8008da8:	08008dcb 	.word	0x08008dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dac:	f7fe fc9e 	bl	80076ec <HAL_RCC_GetPCLK1Freq>
 8008db0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008db2:	e014      	b.n	8008dde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008db4:	f7fe fcb0 	bl	8007718 <HAL_RCC_GetPCLK2Freq>
 8008db8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008dba:	e010      	b.n	8008dde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dbc:	4b1a      	ldr	r3, [pc, #104]	; (8008e28 <UART_SetConfig+0x5c0>)
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008dc0:	e00d      	b.n	8008dde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dc2:	f7fe fc25 	bl	8007610 <HAL_RCC_GetSysClockFreq>
 8008dc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008dc8:	e009      	b.n	8008dde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008dd0:	e005      	b.n	8008dde <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008ddc:	bf00      	nop
    }

    if (pclk != 0U)
 8008dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d028      	beq.n	8008e36 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de8:	4a10      	ldr	r2, [pc, #64]	; (8008e2c <UART_SetConfig+0x5c4>)
 8008dea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dee:	461a      	mov	r2, r3
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	085b      	lsrs	r3, r3, #1
 8008dfc:	441a      	add	r2, r3
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e08:	6a3b      	ldr	r3, [r7, #32]
 8008e0a:	2b0f      	cmp	r3, #15
 8008e0c:	d910      	bls.n	8008e30 <UART_SetConfig+0x5c8>
 8008e0e:	6a3b      	ldr	r3, [r7, #32]
 8008e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e14:	d20c      	bcs.n	8008e30 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	60da      	str	r2, [r3, #12]
 8008e20:	e009      	b.n	8008e36 <UART_SetConfig+0x5ce>
 8008e22:	bf00      	nop
 8008e24:	40008000 	.word	0x40008000
 8008e28:	00f42400 	.word	0x00f42400
 8008e2c:	0800961c 	.word	0x0800961c
      }
      else
      {
        ret = HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008e52:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3730      	adds	r7, #48	; 0x30
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00a      	beq.n	8008e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00a      	beq.n	8008eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb0:	f003 0304 	and.w	r3, r3, #4
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00a      	beq.n	8008ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed2:	f003 0308 	and.w	r3, r3, #8
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00a      	beq.n	8008ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef4:	f003 0310 	and.w	r3, r3, #16
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00a      	beq.n	8008f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f16:	f003 0320 	and.w	r3, r3, #32
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00a      	beq.n	8008f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	430a      	orrs	r2, r1
 8008f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d01a      	beq.n	8008f76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	430a      	orrs	r2, r1
 8008f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f5e:	d10a      	bne.n	8008f76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	430a      	orrs	r2, r1
 8008f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00a      	beq.n	8008f98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	430a      	orrs	r2, r1
 8008f96:	605a      	str	r2, [r3, #4]
  }
}
 8008f98:	bf00      	nop
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af02      	add	r7, sp, #8
 8008faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fb4:	f7fa f9dc 	bl	8003370 <HAL_GetTick>
 8008fb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0308 	and.w	r3, r3, #8
 8008fc4:	2b08      	cmp	r3, #8
 8008fc6:	d10e      	bne.n	8008fe6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f82f 	bl	800903a <UART_WaitOnFlagUntilTimeout>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d001      	beq.n	8008fe6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e025      	b.n	8009032 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0304 	and.w	r3, r3, #4
 8008ff0:	2b04      	cmp	r3, #4
 8008ff2:	d10e      	bne.n	8009012 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ff4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f819 	bl	800903a <UART_WaitOnFlagUntilTimeout>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e00f      	b.n	8009032 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2220      	movs	r2, #32
 8009016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2220      	movs	r2, #32
 800901e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b09c      	sub	sp, #112	; 0x70
 800903e:	af00      	add	r7, sp, #0
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	603b      	str	r3, [r7, #0]
 8009046:	4613      	mov	r3, r2
 8009048:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800904a:	e0a9      	b.n	80091a0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800904c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800904e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009052:	f000 80a5 	beq.w	80091a0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009056:	f7fa f98b 	bl	8003370 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009062:	429a      	cmp	r2, r3
 8009064:	d302      	bcc.n	800906c <UART_WaitOnFlagUntilTimeout+0x32>
 8009066:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009068:	2b00      	cmp	r3, #0
 800906a:	d140      	bne.n	80090ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800907a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800907c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009080:	667b      	str	r3, [r7, #100]	; 0x64
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800908a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800908c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009090:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e6      	bne.n	800906c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3308      	adds	r3, #8
 80090a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a8:	e853 3f00 	ldrex	r3, [r3]
 80090ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b0:	f023 0301 	bic.w	r3, r3, #1
 80090b4:	663b      	str	r3, [r7, #96]	; 0x60
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3308      	adds	r3, #8
 80090bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80090be:	64ba      	str	r2, [r7, #72]	; 0x48
 80090c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80090c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090c6:	e841 2300 	strex	r3, r2, [r1]
 80090ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80090cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1e5      	bne.n	800909e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2220      	movs	r2, #32
 80090d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2220      	movs	r2, #32
 80090de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e069      	b.n	80091c2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0304 	and.w	r3, r3, #4
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d051      	beq.n	80091a0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	69db      	ldr	r3, [r3, #28]
 8009102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800910a:	d149      	bne.n	80091a0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009114:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911e:	e853 3f00 	ldrex	r3, [r3]
 8009122:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800912a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	461a      	mov	r2, r3
 8009132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009134:	637b      	str	r3, [r7, #52]	; 0x34
 8009136:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009138:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800913a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800913c:	e841 2300 	strex	r3, r2, [r1]
 8009140:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e6      	bne.n	8009116 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	3308      	adds	r3, #8
 800914e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	e853 3f00 	ldrex	r3, [r3]
 8009156:	613b      	str	r3, [r7, #16]
   return(result);
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	f023 0301 	bic.w	r3, r3, #1
 800915e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3308      	adds	r3, #8
 8009166:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009168:	623a      	str	r2, [r7, #32]
 800916a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916c:	69f9      	ldr	r1, [r7, #28]
 800916e:	6a3a      	ldr	r2, [r7, #32]
 8009170:	e841 2300 	strex	r3, r2, [r1]
 8009174:	61bb      	str	r3, [r7, #24]
   return(result);
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1e5      	bne.n	8009148 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2220      	movs	r2, #32
 8009180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2220      	movs	r2, #32
 8009188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2220      	movs	r2, #32
 8009190:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	e010      	b.n	80091c2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	69da      	ldr	r2, [r3, #28]
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	4013      	ands	r3, r2
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	bf0c      	ite	eq
 80091b0:	2301      	moveq	r3, #1
 80091b2:	2300      	movne	r3, #0
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	461a      	mov	r2, r3
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	f43f af46 	beq.w	800904c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3770      	adds	r7, #112	; 0x70
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b085      	sub	sp, #20
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d101      	bne.n	80091e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80091dc:	2302      	movs	r3, #2
 80091de:	e027      	b.n	8009230 <HAL_UARTEx_DisableFifoMode+0x66>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2224      	movs	r2, #36	; 0x24
 80091ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f022 0201 	bic.w	r2, r2, #1
 8009206:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800920e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2220      	movs	r2, #32
 8009222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800924c:	2b01      	cmp	r3, #1
 800924e:	d101      	bne.n	8009254 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009250:	2302      	movs	r3, #2
 8009252:	e02d      	b.n	80092b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2224      	movs	r2, #36	; 0x24
 8009260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f022 0201 	bic.w	r2, r2, #1
 800927a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	430a      	orrs	r2, r1
 800928e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f84f 	bl	8009334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2220      	movs	r2, #32
 80092a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d101      	bne.n	80092d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80092cc:	2302      	movs	r3, #2
 80092ce:	e02d      	b.n	800932c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2224      	movs	r2, #36	; 0x24
 80092dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 0201 	bic.w	r2, r2, #1
 80092f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	430a      	orrs	r2, r1
 800930a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f811 	bl	8009334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2220      	movs	r2, #32
 800931e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009340:	2b00      	cmp	r3, #0
 8009342:	d108      	bne.n	8009356 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009354:	e031      	b.n	80093ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009356:	2308      	movs	r3, #8
 8009358:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800935a:	2308      	movs	r3, #8
 800935c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	0e5b      	lsrs	r3, r3, #25
 8009366:	b2db      	uxtb	r3, r3
 8009368:	f003 0307 	and.w	r3, r3, #7
 800936c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	0f5b      	lsrs	r3, r3, #29
 8009376:	b2db      	uxtb	r3, r3
 8009378:	f003 0307 	and.w	r3, r3, #7
 800937c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	7b3a      	ldrb	r2, [r7, #12]
 8009382:	4911      	ldr	r1, [pc, #68]	; (80093c8 <UARTEx_SetNbDataToProcess+0x94>)
 8009384:	5c8a      	ldrb	r2, [r1, r2]
 8009386:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800938a:	7b3a      	ldrb	r2, [r7, #12]
 800938c:	490f      	ldr	r1, [pc, #60]	; (80093cc <UARTEx_SetNbDataToProcess+0x98>)
 800938e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009390:	fb93 f3f2 	sdiv	r3, r3, r2
 8009394:	b29a      	uxth	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	7b7a      	ldrb	r2, [r7, #13]
 80093a0:	4909      	ldr	r1, [pc, #36]	; (80093c8 <UARTEx_SetNbDataToProcess+0x94>)
 80093a2:	5c8a      	ldrb	r2, [r1, r2]
 80093a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80093a8:	7b7a      	ldrb	r2, [r7, #13]
 80093aa:	4908      	ldr	r1, [pc, #32]	; (80093cc <UARTEx_SetNbDataToProcess+0x98>)
 80093ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80093ba:	bf00      	nop
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	08009634 	.word	0x08009634
 80093cc:	0800963c 	.word	0x0800963c

080093d0 <malloc>:
 80093d0:	4b02      	ldr	r3, [pc, #8]	; (80093dc <malloc+0xc>)
 80093d2:	4601      	mov	r1, r0
 80093d4:	6818      	ldr	r0, [r3, #0]
 80093d6:	f000 b823 	b.w	8009420 <_malloc_r>
 80093da:	bf00      	nop
 80093dc:	20000058 	.word	0x20000058

080093e0 <sbrk_aligned>:
 80093e0:	b570      	push	{r4, r5, r6, lr}
 80093e2:	4e0e      	ldr	r6, [pc, #56]	; (800941c <sbrk_aligned+0x3c>)
 80093e4:	460c      	mov	r4, r1
 80093e6:	6831      	ldr	r1, [r6, #0]
 80093e8:	4605      	mov	r5, r0
 80093ea:	b911      	cbnz	r1, 80093f2 <sbrk_aligned+0x12>
 80093ec:	f000 f8ac 	bl	8009548 <_sbrk_r>
 80093f0:	6030      	str	r0, [r6, #0]
 80093f2:	4621      	mov	r1, r4
 80093f4:	4628      	mov	r0, r5
 80093f6:	f000 f8a7 	bl	8009548 <_sbrk_r>
 80093fa:	1c43      	adds	r3, r0, #1
 80093fc:	d00a      	beq.n	8009414 <sbrk_aligned+0x34>
 80093fe:	1cc4      	adds	r4, r0, #3
 8009400:	f024 0403 	bic.w	r4, r4, #3
 8009404:	42a0      	cmp	r0, r4
 8009406:	d007      	beq.n	8009418 <sbrk_aligned+0x38>
 8009408:	1a21      	subs	r1, r4, r0
 800940a:	4628      	mov	r0, r5
 800940c:	f000 f89c 	bl	8009548 <_sbrk_r>
 8009410:	3001      	adds	r0, #1
 8009412:	d101      	bne.n	8009418 <sbrk_aligned+0x38>
 8009414:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009418:	4620      	mov	r0, r4
 800941a:	bd70      	pop	{r4, r5, r6, pc}
 800941c:	200005cc 	.word	0x200005cc

08009420 <_malloc_r>:
 8009420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009424:	1ccd      	adds	r5, r1, #3
 8009426:	f025 0503 	bic.w	r5, r5, #3
 800942a:	3508      	adds	r5, #8
 800942c:	2d0c      	cmp	r5, #12
 800942e:	bf38      	it	cc
 8009430:	250c      	movcc	r5, #12
 8009432:	2d00      	cmp	r5, #0
 8009434:	4607      	mov	r7, r0
 8009436:	db01      	blt.n	800943c <_malloc_r+0x1c>
 8009438:	42a9      	cmp	r1, r5
 800943a:	d905      	bls.n	8009448 <_malloc_r+0x28>
 800943c:	230c      	movs	r3, #12
 800943e:	603b      	str	r3, [r7, #0]
 8009440:	2600      	movs	r6, #0
 8009442:	4630      	mov	r0, r6
 8009444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009448:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800951c <_malloc_r+0xfc>
 800944c:	f000 f868 	bl	8009520 <__malloc_lock>
 8009450:	f8d8 3000 	ldr.w	r3, [r8]
 8009454:	461c      	mov	r4, r3
 8009456:	bb5c      	cbnz	r4, 80094b0 <_malloc_r+0x90>
 8009458:	4629      	mov	r1, r5
 800945a:	4638      	mov	r0, r7
 800945c:	f7ff ffc0 	bl	80093e0 <sbrk_aligned>
 8009460:	1c43      	adds	r3, r0, #1
 8009462:	4604      	mov	r4, r0
 8009464:	d155      	bne.n	8009512 <_malloc_r+0xf2>
 8009466:	f8d8 4000 	ldr.w	r4, [r8]
 800946a:	4626      	mov	r6, r4
 800946c:	2e00      	cmp	r6, #0
 800946e:	d145      	bne.n	80094fc <_malloc_r+0xdc>
 8009470:	2c00      	cmp	r4, #0
 8009472:	d048      	beq.n	8009506 <_malloc_r+0xe6>
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	4631      	mov	r1, r6
 8009478:	4638      	mov	r0, r7
 800947a:	eb04 0903 	add.w	r9, r4, r3
 800947e:	f000 f863 	bl	8009548 <_sbrk_r>
 8009482:	4581      	cmp	r9, r0
 8009484:	d13f      	bne.n	8009506 <_malloc_r+0xe6>
 8009486:	6821      	ldr	r1, [r4, #0]
 8009488:	1a6d      	subs	r5, r5, r1
 800948a:	4629      	mov	r1, r5
 800948c:	4638      	mov	r0, r7
 800948e:	f7ff ffa7 	bl	80093e0 <sbrk_aligned>
 8009492:	3001      	adds	r0, #1
 8009494:	d037      	beq.n	8009506 <_malloc_r+0xe6>
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	442b      	add	r3, r5
 800949a:	6023      	str	r3, [r4, #0]
 800949c:	f8d8 3000 	ldr.w	r3, [r8]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d038      	beq.n	8009516 <_malloc_r+0xf6>
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	42a2      	cmp	r2, r4
 80094a8:	d12b      	bne.n	8009502 <_malloc_r+0xe2>
 80094aa:	2200      	movs	r2, #0
 80094ac:	605a      	str	r2, [r3, #4]
 80094ae:	e00f      	b.n	80094d0 <_malloc_r+0xb0>
 80094b0:	6822      	ldr	r2, [r4, #0]
 80094b2:	1b52      	subs	r2, r2, r5
 80094b4:	d41f      	bmi.n	80094f6 <_malloc_r+0xd6>
 80094b6:	2a0b      	cmp	r2, #11
 80094b8:	d917      	bls.n	80094ea <_malloc_r+0xca>
 80094ba:	1961      	adds	r1, r4, r5
 80094bc:	42a3      	cmp	r3, r4
 80094be:	6025      	str	r5, [r4, #0]
 80094c0:	bf18      	it	ne
 80094c2:	6059      	strne	r1, [r3, #4]
 80094c4:	6863      	ldr	r3, [r4, #4]
 80094c6:	bf08      	it	eq
 80094c8:	f8c8 1000 	streq.w	r1, [r8]
 80094cc:	5162      	str	r2, [r4, r5]
 80094ce:	604b      	str	r3, [r1, #4]
 80094d0:	4638      	mov	r0, r7
 80094d2:	f104 060b 	add.w	r6, r4, #11
 80094d6:	f000 f829 	bl	800952c <__malloc_unlock>
 80094da:	f026 0607 	bic.w	r6, r6, #7
 80094de:	1d23      	adds	r3, r4, #4
 80094e0:	1af2      	subs	r2, r6, r3
 80094e2:	d0ae      	beq.n	8009442 <_malloc_r+0x22>
 80094e4:	1b9b      	subs	r3, r3, r6
 80094e6:	50a3      	str	r3, [r4, r2]
 80094e8:	e7ab      	b.n	8009442 <_malloc_r+0x22>
 80094ea:	42a3      	cmp	r3, r4
 80094ec:	6862      	ldr	r2, [r4, #4]
 80094ee:	d1dd      	bne.n	80094ac <_malloc_r+0x8c>
 80094f0:	f8c8 2000 	str.w	r2, [r8]
 80094f4:	e7ec      	b.n	80094d0 <_malloc_r+0xb0>
 80094f6:	4623      	mov	r3, r4
 80094f8:	6864      	ldr	r4, [r4, #4]
 80094fa:	e7ac      	b.n	8009456 <_malloc_r+0x36>
 80094fc:	4634      	mov	r4, r6
 80094fe:	6876      	ldr	r6, [r6, #4]
 8009500:	e7b4      	b.n	800946c <_malloc_r+0x4c>
 8009502:	4613      	mov	r3, r2
 8009504:	e7cc      	b.n	80094a0 <_malloc_r+0x80>
 8009506:	230c      	movs	r3, #12
 8009508:	603b      	str	r3, [r7, #0]
 800950a:	4638      	mov	r0, r7
 800950c:	f000 f80e 	bl	800952c <__malloc_unlock>
 8009510:	e797      	b.n	8009442 <_malloc_r+0x22>
 8009512:	6025      	str	r5, [r4, #0]
 8009514:	e7dc      	b.n	80094d0 <_malloc_r+0xb0>
 8009516:	605b      	str	r3, [r3, #4]
 8009518:	deff      	udf	#255	; 0xff
 800951a:	bf00      	nop
 800951c:	200005c8 	.word	0x200005c8

08009520 <__malloc_lock>:
 8009520:	4801      	ldr	r0, [pc, #4]	; (8009528 <__malloc_lock+0x8>)
 8009522:	f000 b84b 	b.w	80095bc <__retarget_lock_acquire_recursive>
 8009526:	bf00      	nop
 8009528:	2000070c 	.word	0x2000070c

0800952c <__malloc_unlock>:
 800952c:	4801      	ldr	r0, [pc, #4]	; (8009534 <__malloc_unlock+0x8>)
 800952e:	f000 b846 	b.w	80095be <__retarget_lock_release_recursive>
 8009532:	bf00      	nop
 8009534:	2000070c 	.word	0x2000070c

08009538 <memset>:
 8009538:	4402      	add	r2, r0
 800953a:	4603      	mov	r3, r0
 800953c:	4293      	cmp	r3, r2
 800953e:	d100      	bne.n	8009542 <memset+0xa>
 8009540:	4770      	bx	lr
 8009542:	f803 1b01 	strb.w	r1, [r3], #1
 8009546:	e7f9      	b.n	800953c <memset+0x4>

08009548 <_sbrk_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	4d06      	ldr	r5, [pc, #24]	; (8009564 <_sbrk_r+0x1c>)
 800954c:	2300      	movs	r3, #0
 800954e:	4604      	mov	r4, r0
 8009550:	4608      	mov	r0, r1
 8009552:	602b      	str	r3, [r5, #0]
 8009554:	f7f9 fc7a 	bl	8002e4c <_sbrk>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <_sbrk_r+0x1a>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	b103      	cbz	r3, 8009562 <_sbrk_r+0x1a>
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	20000708 	.word	0x20000708

08009568 <__errno>:
 8009568:	4b01      	ldr	r3, [pc, #4]	; (8009570 <__errno+0x8>)
 800956a:	6818      	ldr	r0, [r3, #0]
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	20000058 	.word	0x20000058

08009574 <__libc_init_array>:
 8009574:	b570      	push	{r4, r5, r6, lr}
 8009576:	4d0d      	ldr	r5, [pc, #52]	; (80095ac <__libc_init_array+0x38>)
 8009578:	4c0d      	ldr	r4, [pc, #52]	; (80095b0 <__libc_init_array+0x3c>)
 800957a:	1b64      	subs	r4, r4, r5
 800957c:	10a4      	asrs	r4, r4, #2
 800957e:	2600      	movs	r6, #0
 8009580:	42a6      	cmp	r6, r4
 8009582:	d109      	bne.n	8009598 <__libc_init_array+0x24>
 8009584:	4d0b      	ldr	r5, [pc, #44]	; (80095b4 <__libc_init_array+0x40>)
 8009586:	4c0c      	ldr	r4, [pc, #48]	; (80095b8 <__libc_init_array+0x44>)
 8009588:	f000 f828 	bl	80095dc <_init>
 800958c:	1b64      	subs	r4, r4, r5
 800958e:	10a4      	asrs	r4, r4, #2
 8009590:	2600      	movs	r6, #0
 8009592:	42a6      	cmp	r6, r4
 8009594:	d105      	bne.n	80095a2 <__libc_init_array+0x2e>
 8009596:	bd70      	pop	{r4, r5, r6, pc}
 8009598:	f855 3b04 	ldr.w	r3, [r5], #4
 800959c:	4798      	blx	r3
 800959e:	3601      	adds	r6, #1
 80095a0:	e7ee      	b.n	8009580 <__libc_init_array+0xc>
 80095a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095a6:	4798      	blx	r3
 80095a8:	3601      	adds	r6, #1
 80095aa:	e7f2      	b.n	8009592 <__libc_init_array+0x1e>
 80095ac:	0800964c 	.word	0x0800964c
 80095b0:	0800964c 	.word	0x0800964c
 80095b4:	0800964c 	.word	0x0800964c
 80095b8:	08009650 	.word	0x08009650

080095bc <__retarget_lock_acquire_recursive>:
 80095bc:	4770      	bx	lr

080095be <__retarget_lock_release_recursive>:
 80095be:	4770      	bx	lr

080095c0 <memcpy>:
 80095c0:	440a      	add	r2, r1
 80095c2:	4291      	cmp	r1, r2
 80095c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80095c8:	d100      	bne.n	80095cc <memcpy+0xc>
 80095ca:	4770      	bx	lr
 80095cc:	b510      	push	{r4, lr}
 80095ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095d6:	4291      	cmp	r1, r2
 80095d8:	d1f9      	bne.n	80095ce <memcpy+0xe>
 80095da:	bd10      	pop	{r4, pc}

080095dc <_init>:
 80095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095de:	bf00      	nop
 80095e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e2:	bc08      	pop	{r3}
 80095e4:	469e      	mov	lr, r3
 80095e6:	4770      	bx	lr

080095e8 <_fini>:
 80095e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ea:	bf00      	nop
 80095ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ee:	bc08      	pop	{r3}
 80095f0:	469e      	mov	lr, r3
 80095f2:	4770      	bx	lr
