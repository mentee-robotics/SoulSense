
SoulSense2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009578  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08009750  08009750  00019750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097a0  080097a0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080097a0  080097a0  000197a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097a8  080097a8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097a8  080097a8  000197a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097ac  080097ac  000197ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080097b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  2000005c  0800980c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  0800980c  00020614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023cba  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004419  00000000  00000000  00043d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab0  00000000  00000000  000481a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014b5  00000000  00000000  00049c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c03e  00000000  00000000  0004b10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000221df  00000000  00000000  0007714b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011bd98  00000000  00000000  0009932a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007480  00000000  00000000  001b50c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001bc544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009738 	.word	0x08009738

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08009738 	.word	0x08009738

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <imu_init>:

/* Private variables ---------------------------------------------------------*/


// Initializing the IMU
void imu_init(I2C_HandleTypeDef* i2c,IMU* imu) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af02      	add	r7, sp, #8
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
    // Ensure that the BNO pointer is allocated (if using dynamic memory)
    imu->bno = (bno055_t*) malloc(sizeof(bno055_t));
 800051e:	20ac      	movs	r0, #172	; 0xac
 8000520:	f009 f804 	bl	800952c <malloc>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	601a      	str	r2, [r3, #0]

    if (imu->bno == NULL) {
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d01f      	beq.n	8000574 <imu_init+0x60>
        // Handle memory allocation error
        return;
    }

    imu->bno->i2c = i2c;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	601a      	str	r2, [r3, #0]
    imu->bno->addr = BNO_ADDR_ALT;
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2228      	movs	r2, #40	; 0x28
 8000542:	719a      	strb	r2, [r3, #6]
    imu->bno->mode = BNO_MODE_IMU;
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2208      	movs	r2, #8
 800054a:	711a      	strb	r2, [r3, #4]

    imu->errInit = bno055_init(imu->bno);
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fa8d 	bl	8000a70 <bno055_init>
 8000556:	4603      	mov	r3, r0
 8000558:	461a      	mov	r2, r3
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    bno055_set_unit(imu->bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	6818      	ldr	r0, [r3, #0]
 8000564:	2300      	movs	r3, #0
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2300      	movs	r3, #0
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	f001 feb6 	bl	80022de <bno055_set_unit>
 8000572:	e000      	b.n	8000576 <imu_init+0x62>
        return;
 8000574:	bf00      	nop
    	                      BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG); //set correct units!
}
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <imu_read_data>:

// Reading data
void imu_read_data(IMU* imu) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	//TODO more checking
	if (imu->errInit == BNO_OK ) {  //checks that the imu has been properly initialized.
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800058a:	2b00      	cmp	r3, #0
 800058c:	d12a      	bne.n	80005e4 <imu_read_data+0x68>
		imu->errGyr = imu->bno->gyro(imu->bno, &imu->gyroscope);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	6810      	ldr	r0, [r2, #0]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	3204      	adds	r2, #4
 800059c:	4611      	mov	r1, r2
 800059e:	4798      	blx	r3
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		imu->errAcc = imu->bno->acc(imu->bno, &imu->accelerometer);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	3210      	adds	r2, #16
 80005b8:	4611      	mov	r1, r2
 80005ba:	4798      	blx	r3
 80005bc:	4603      	mov	r3, r0
 80005be:	461a      	mov	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	    imu->errQua = imu->bno->quaternion(imu->bno, &imu->quaternion);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	6810      	ldr	r0, [r2, #0]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	321c      	adds	r2, #28
 80005d6:	4611      	mov	r1, r2
 80005d8:	4798      	blx	r3
 80005da:	4603      	mov	r3, r0
 80005dc:	461a      	mov	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <imu_update_payload>:
    if (imu->bno) {
        free(imu->bno);
    }
}

void imu_update_payload(IMU* imu) {
 80005ec:	b480      	push	{r7}
 80005ee:	b08d      	sub	sp, #52	; 0x34
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    // Starting index for the payload
    int index = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Convert quaternion values to byte array format.
    float quaternion_values[4] = {
        imu->quaternion.x,
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	69db      	ldr	r3, [r3, #28]
    float quaternion_values[4] = {
 80005fc:	617b      	str	r3, [r7, #20]
        imu->quaternion.y,
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6a1b      	ldr	r3, [r3, #32]
    float quaternion_values[4] = {
 8000602:	61bb      	str	r3, [r7, #24]
        imu->quaternion.z,
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    float quaternion_values[4] = {
 8000608:	61fb      	str	r3, [r7, #28]
        imu->quaternion.w
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    float quaternion_values[4] = {
 800060e:	623b      	str	r3, [r7, #32]
    };

    for (int i = 0; i < 4; i++) {
 8000610:	2300      	movs	r3, #0
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
 8000614:	e010      	b.n	8000638 <imu_update_payload+0x4c>
        memcpy(&imu->payload[index], &quaternion_values[i], 4);
 8000616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000618:	3330      	adds	r3, #48	; 0x30
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	f107 0114 	add.w	r1, r7, #20
 8000622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000624:	0092      	lsls	r2, r2, #2
 8000626:	440a      	add	r2, r1
 8000628:	6812      	ldr	r2, [r2, #0]
 800062a:	601a      	str	r2, [r3, #0]
        index += 4;
 800062c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062e:	3304      	adds	r3, #4
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < 4; i++) {
 8000632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000634:	3301      	adds	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
 8000638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800063a:	2b03      	cmp	r3, #3
 800063c:	ddeb      	ble.n	8000616 <imu_update_payload+0x2a>
    }

    // Convert accelerometer values to byte array format.
    float accel_values[3] = {
        imu->accelerometer.x,
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	691b      	ldr	r3, [r3, #16]
    float accel_values[3] = {
 8000642:	60bb      	str	r3, [r7, #8]
        imu->accelerometer.y,
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	695b      	ldr	r3, [r3, #20]
    float accel_values[3] = {
 8000648:	60fb      	str	r3, [r7, #12]
        imu->accelerometer.z,
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	699b      	ldr	r3, [r3, #24]
    float accel_values[3] = {
 800064e:	613b      	str	r3, [r7, #16]
    };

    for (int i = 0; i < 3; i++) {
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
 8000654:	e010      	b.n	8000678 <imu_update_payload+0x8c>
        memcpy(&imu->payload[index], &accel_values[i], 4);
 8000656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000658:	3330      	adds	r3, #48	; 0x30
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	f107 0108 	add.w	r1, r7, #8
 8000662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000664:	0092      	lsls	r2, r2, #2
 8000666:	440a      	add	r2, r1
 8000668:	6812      	ldr	r2, [r2, #0]
 800066a:	601a      	str	r2, [r3, #0]
        index += 4;
 800066c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800066e:	3304      	adds	r3, #4
 8000670:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < 3; i++) {
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	3301      	adds	r3, #1
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
 8000678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067a:	2b02      	cmp	r3, #2
 800067c:	ddeb      	ble.n	8000656 <imu_update_payload+0x6a>
    }
}
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	3734      	adds	r7, #52	; 0x34
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <soul_init>:
#include "Imu.h"
#include "contact_sensors.h"
#include "configuration.h"

// Adjust soul_init to use pointers for the parameters
void soul_init(SoulSense* soul_sense , I2C_HandleTypeDef* i2c , ADC_HandleTypeDef *adc){
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
	ADC_init(adc , soul_sense->contact_sensors);
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069c:	4619      	mov	r1, r3
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f002 f8b6 	bl	8002810 <ADC_init>
	imu_init(i2c , soul_sense->imu);
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4619      	mov	r1, r3
 80006aa:	68b8      	ldr	r0, [r7, #8]
 80006ac:	f7ff ff32 	bl	8000514 <imu_init>
	version_init(soul_sense->version);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fdc3 	bl	8003240 <version_init>
    memset(soul_sense->payload, 0, SIZE_OF_SOLE_DATA);
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	223f      	movs	r2, #63	; 0x3f
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f008 ffe7 	bl	8009694 <memset>
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <soul_update_payload>:

void soul_update_payload(SoulSense* soul_sense) {
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b086      	sub	sp, #24
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
	imu_update_payload(soul_sense->imu);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff86 	bl	80005ec <imu_update_payload>
	ADC_update_payload(soul_sense->contact_sensors);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 f8ac 	bl	8002842 <ADC_update_payload>
    int index = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]

    // Copy ContactSensors payload
    for (int i = 0; i < NUMBER_OF_SENSORS * 4; i++) {
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	e010      	b.n	8000716 <soul_update_payload+0x48>
        soul_sense->payload[index] = soul_sense->contact_sensors->payload[i];
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	4413      	add	r3, r2
 80006fc:	3324      	adds	r3, #36	; 0x24
 80006fe:	7819      	ldrb	r1, [r3, #0]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	4413      	add	r3, r2
 8000706:	460a      	mov	r2, r1
 8000708:	701a      	strb	r2, [r3, #0]
        index++;
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	3301      	adds	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUMBER_OF_SENSORS * 4; i++) {
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	3301      	adds	r3, #1
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	2b1f      	cmp	r3, #31
 800071a:	ddeb      	ble.n	80006f4 <soul_update_payload+0x26>
    }

    // Copy IMU payload
    for (int i = 0; i < SIZE_OF_IMU_DATA; i++) {
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	e010      	b.n	8000744 <soul_update_payload+0x76>
        soul_sense->payload[index] = soul_sense->imu->payload[i];
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	4413      	add	r3, r2
 800072a:	3330      	adds	r3, #48	; 0x30
 800072c:	7819      	ldrb	r1, [r3, #0]
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	4413      	add	r3, r2
 8000734:	460a      	mov	r2, r1
 8000736:	701a      	strb	r2, [r3, #0]
        index++;
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	3301      	adds	r3, #1
 800073c:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < SIZE_OF_IMU_DATA; i++) {
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2b1b      	cmp	r3, #27
 8000748:	ddeb      	ble.n	8000722 <soul_update_payload+0x54>
    }

    // Copy FwVersion payload (version)
    for (int i = 0; i < VERSION_LEN; i++) {
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	e00f      	b.n	8000770 <soul_update_payload+0xa2>
        soul_sense->payload[index] = soul_sense->version->version[i];
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	4413      	add	r3, r2
 8000758:	7819      	ldrb	r1, [r3, #0]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	4413      	add	r3, r2
 8000760:	460a      	mov	r2, r1
 8000762:	701a      	strb	r2, [r3, #0]
        index++;
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < VERSION_LEN; i++) {
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	3301      	adds	r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	2b02      	cmp	r3, #2
 8000774:	ddec      	ble.n	8000750 <soul_update_payload+0x82>
    }
}
 8000776:	bf00      	nop
 8000778:	bf00      	nop
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000786:	463b      	mov	r3, r7
 8000788:	2220      	movs	r2, #32
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f008 ff81 	bl	8009694 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000792:	4b5e      	ldr	r3, [pc, #376]	; (800090c <MX_ADC2_Init+0x18c>)
 8000794:	4a5e      	ldr	r2, [pc, #376]	; (8000910 <MX_ADC2_Init+0x190>)
 8000796:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000798:	4b5c      	ldr	r3, [pc, #368]	; (800090c <MX_ADC2_Init+0x18c>)
 800079a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800079e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007a0:	4b5a      	ldr	r3, [pc, #360]	; (800090c <MX_ADC2_Init+0x18c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a6:	4b59      	ldr	r3, [pc, #356]	; (800090c <MX_ADC2_Init+0x18c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80007ac:	4b57      	ldr	r3, [pc, #348]	; (800090c <MX_ADC2_Init+0x18c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007b2:	4b56      	ldr	r3, [pc, #344]	; (800090c <MX_ADC2_Init+0x18c>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007b8:	4b54      	ldr	r3, [pc, #336]	; (800090c <MX_ADC2_Init+0x18c>)
 80007ba:	2208      	movs	r2, #8
 80007bc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007be:	4b53      	ldr	r3, [pc, #332]	; (800090c <MX_ADC2_Init+0x18c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007c4:	4b51      	ldr	r3, [pc, #324]	; (800090c <MX_ADC2_Init+0x18c>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 8;
 80007ca:	4b50      	ldr	r3, [pc, #320]	; (800090c <MX_ADC2_Init+0x18c>)
 80007cc:	2208      	movs	r2, #8
 80007ce:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007d0:	4b4e      	ldr	r3, [pc, #312]	; (800090c <MX_ADC2_Init+0x18c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d8:	4b4c      	ldr	r3, [pc, #304]	; (800090c <MX_ADC2_Init+0x18c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007de:	4b4b      	ldr	r3, [pc, #300]	; (800090c <MX_ADC2_Init+0x18c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80007e4:	4b49      	ldr	r3, [pc, #292]	; (800090c <MX_ADC2_Init+0x18c>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ec:	4b47      	ldr	r3, [pc, #284]	; (800090c <MX_ADC2_Init+0x18c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80007f2:	4b46      	ldr	r3, [pc, #280]	; (800090c <MX_ADC2_Init+0x18c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007fa:	4844      	ldr	r0, [pc, #272]	; (800090c <MX_ADC2_Init+0x18c>)
 80007fc:	f003 f812 	bl	8003824 <HAL_ADC_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000806:	f002 fb45 	bl	8002e94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800080a:	4b42      	ldr	r3, [pc, #264]	; (8000914 <MX_ADC2_Init+0x194>)
 800080c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800080e:	2306      	movs	r3, #6
 8000810:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000812:	2305      	movs	r3, #5
 8000814:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000816:	237f      	movs	r3, #127	; 0x7f
 8000818:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800081a:	2304      	movs	r3, #4
 800081c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	4619      	mov	r1, r3
 8000826:	4839      	ldr	r0, [pc, #228]	; (800090c <MX_ADC2_Init+0x18c>)
 8000828:	f003 fab0 	bl	8003d8c <HAL_ADC_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000832:	f002 fb2f 	bl	8002e94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000836:	4b38      	ldr	r3, [pc, #224]	; (8000918 <MX_ADC2_Init+0x198>)
 8000838:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800083a:	230c      	movs	r3, #12
 800083c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	4619      	mov	r1, r3
 8000842:	4832      	ldr	r0, [pc, #200]	; (800090c <MX_ADC2_Init+0x18c>)
 8000844:	f003 faa2 	bl	8003d8c <HAL_ADC_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800084e:	f002 fb21 	bl	8002e94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000852:	4b32      	ldr	r3, [pc, #200]	; (800091c <MX_ADC2_Init+0x19c>)
 8000854:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000856:	2312      	movs	r3, #18
 8000858:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800085a:	463b      	mov	r3, r7
 800085c:	4619      	mov	r1, r3
 800085e:	482b      	ldr	r0, [pc, #172]	; (800090c <MX_ADC2_Init+0x18c>)
 8000860:	f003 fa94 	bl	8003d8c <HAL_ADC_ConfigChannel>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 800086a:	f002 fb13 	bl	8002e94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800086e:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <MX_ADC2_Init+0x1a0>)
 8000870:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000872:	2318      	movs	r3, #24
 8000874:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4619      	mov	r1, r3
 800087a:	4824      	ldr	r0, [pc, #144]	; (800090c <MX_ADC2_Init+0x18c>)
 800087c:	f003 fa86 	bl	8003d8c <HAL_ADC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 8000886:	f002 fb05 	bl	8002e94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <MX_ADC2_Init+0x1a4>)
 800088c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800088e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000892:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	481c      	ldr	r0, [pc, #112]	; (800090c <MX_ADC2_Init+0x18c>)
 800089a:	f003 fa77 	bl	8003d8c <HAL_ADC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 80008a4:	f002 faf6 	bl	8002e94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_ADC2_Init+0x1a8>)
 80008aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80008ac:	f44f 7383 	mov.w	r3, #262	; 0x106
 80008b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	4619      	mov	r1, r3
 80008b6:	4815      	ldr	r0, [pc, #84]	; (800090c <MX_ADC2_Init+0x18c>)
 80008b8:	f003 fa68 	bl	8003d8c <HAL_ADC_ConfigChannel>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 80008c2:	f002 fae7 	bl	8002e94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_ADC2_Init+0x1ac>)
 80008c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80008ca:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80008ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <MX_ADC2_Init+0x18c>)
 80008d6:	f003 fa59 	bl	8003d8c <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC2_Init+0x164>
  {
    Error_Handler();
 80008e0:	f002 fad8 	bl	8002e94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_ADC2_Init+0x1b0>)
 80008e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80008e8:	f44f 7389 	mov.w	r3, #274	; 0x112
 80008ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	4619      	mov	r1, r3
 80008f2:	4806      	ldr	r0, [pc, #24]	; (800090c <MX_ADC2_Init+0x18c>)
 80008f4:	f003 fa4a 	bl	8003d8c <HAL_ADC_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_ADC2_Init+0x182>
  {
    Error_Handler();
 80008fe:	f002 fac9 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	3720      	adds	r7, #32
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000078 	.word	0x20000078
 8000910:	50000100 	.word	0x50000100
 8000914:	04300002 	.word	0x04300002
 8000918:	08600004 	.word	0x08600004
 800091c:	0c900008 	.word	0x0c900008
 8000920:	10c00010 	.word	0x10c00010
 8000924:	14f00020 	.word	0x14f00020
 8000928:	19200040 	.word	0x19200040
 800092c:	1d500080 	.word	0x1d500080
 8000930:	21800100 	.word	0x21800100

08000934 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b0a0      	sub	sp, #128	; 0x80
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800094c:	f107 0318 	add.w	r3, r7, #24
 8000950:	2254      	movs	r2, #84	; 0x54
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f008 fe9d 	bl	8009694 <memset>
  if(adcHandle->Instance==ADC2)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a3f      	ldr	r2, [pc, #252]	; (8000a5c <HAL_ADC_MspInit+0x128>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d177      	bne.n	8000a54 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000964:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000968:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800096a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800096e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	4618      	mov	r0, r3
 8000976:	f006 ffd9 	bl	800792c <HAL_RCCEx_PeriphCLKConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000980:	f002 fa88 	bl	8002e94 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000984:	4b36      	ldr	r3, [pc, #216]	; (8000a60 <HAL_ADC_MspInit+0x12c>)
 8000986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000988:	4a35      	ldr	r2, [pc, #212]	; (8000a60 <HAL_ADC_MspInit+0x12c>)
 800098a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800098e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000990:	4b33      	ldr	r3, [pc, #204]	; (8000a60 <HAL_ADC_MspInit+0x12c>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800099c:	4b30      	ldr	r3, [pc, #192]	; (8000a60 <HAL_ADC_MspInit+0x12c>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a0:	4a2f      	ldr	r2, [pc, #188]	; (8000a60 <HAL_ADC_MspInit+0x12c>)
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a8:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <HAL_ADC_MspInit+0x12c>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <HAL_ADC_MspInit+0x12c>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b8:	4a29      	ldr	r2, [pc, #164]	; (8000a60 <HAL_ADC_MspInit+0x12c>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c0:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <HAL_ADC_MspInit+0x12c>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    PC4     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 80009cc:	2317      	movs	r3, #23
 80009ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d0:	2303      	movs	r3, #3
 80009d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009dc:	4619      	mov	r1, r3
 80009de:	4821      	ldr	r0, [pc, #132]	; (8000a64 <HAL_ADC_MspInit+0x130>)
 80009e0:	f005 f928 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80009e4:	23c3      	movs	r3, #195	; 0xc3
 80009e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e8:	2303      	movs	r3, #3
 80009ea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009f4:	4619      	mov	r1, r3
 80009f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fa:	f005 f91b 	bl	8005c34 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <HAL_ADC_MspInit+0x134>)
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <HAL_ADC_MspInit+0x138>)
 8000a02:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_ADC_MspInit+0x134>)
 8000a06:	2224      	movs	r2, #36	; 0x24
 8000a08:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <HAL_ADC_MspInit+0x134>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_ADC_MspInit+0x134>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_ADC_MspInit+0x134>)
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_ADC_MspInit+0x134>)
 8000a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a22:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_ADC_MspInit+0x134>)
 8000a26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a2a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_ADC_MspInit+0x134>)
 8000a2e:	2220      	movs	r2, #32
 8000a30:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_ADC_MspInit+0x134>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000a38:	480b      	ldr	r0, [pc, #44]	; (8000a68 <HAL_ADC_MspInit+0x134>)
 8000a3a:	f003 ffed 	bl	8004a18 <HAL_DMA_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000a44:	f002 fa26 	bl	8002e94 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_ADC_MspInit+0x134>)
 8000a4c:	655a      	str	r2, [r3, #84]	; 0x54
 8000a4e:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <HAL_ADC_MspInit+0x134>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000a54:	bf00      	nop
 8000a56:	3780      	adds	r7, #128	; 0x80
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	50000100 	.word	0x50000100
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48000800 	.word	0x48000800
 8000a68:	200000e4 	.word	0x200000e4
 8000a6c:	40020008 	.word	0x40020008

08000a70 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b0b1      	sub	sp, #196	; 0xc4
 8000a74:	af2a      	add	r7, sp, #168	; 0xa8
 8000a76:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]
    error_bno err;
    uint32_t timeSaver;

    imu->addr = (imu->addr << 1);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	799b      	ldrb	r3, [r3, #6]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8000a88:	687c      	ldr	r4, [r7, #4]
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	9329      	str	r3, [sp, #164]	; 0xa4
 8000a8e:	f107 030f 	add.w	r3, r7, #15
 8000a92:	9328      	str	r3, [sp, #160]	; 0xa0
 8000a94:	2300      	movs	r3, #0
 8000a96:	9327      	str	r3, [sp, #156]	; 0x9c
 8000a98:	4668      	mov	r0, sp
 8000a9a:	f104 0310 	add.w	r3, r4, #16
 8000a9e:	229c      	movs	r2, #156	; 0x9c
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f008 fe3b 	bl	800971c <memcpy>
 8000aa6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000aaa:	f001 fd23 	bl	80024f4 <bno055_read_regs>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	75fb      	strb	r3, [r7, #23]
    if (err != BNO_OK) {
 8000ab2:	7dfb      	ldrb	r3, [r7, #23]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <bno055_init+0x4c>
        return err;
 8000ab8:	7dfb      	ldrb	r3, [r7, #23]
 8000aba:	e0df      	b.n	8000c7c <bno055_init+0x20c>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	2ba0      	cmp	r3, #160	; 0xa0
 8000ac0:	d001      	beq.n	8000ac6 <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8000ac2:	2306      	movs	r3, #6
 8000ac4:	e0da      	b.n	8000c7c <bno055_init+0x20c>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f001 fbd6 	bl	800227a <bno055_set_opmode>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	75fb      	strb	r3, [r7, #23]
 8000ad2:	7dfb      	ldrb	r3, [r7, #23]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <bno055_init+0x6c>
        return err;
 8000ad8:	7dfb      	ldrb	r3, [r7, #23]
 8000ada:	e0cf      	b.n	8000c7c <bno055_init+0x20c>
    }
    timeSaver = HAL_GetTick();
 8000adc:	f002 fc52 	bl	8003384 <HAL_GetTick>
 8000ae0:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < 2) {}//wait
 8000ae2:	bf00      	nop
 8000ae4:	f002 fc4e 	bl	8003384 <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d9f8      	bls.n	8000ae4 <bno055_init+0x74>
    //HAL_Delay(2);
    bno055_reset(imu);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f001 fcb8 	bl	8002468 <bno055_reset>
    timeSaver = HAL_GetTick();
 8000af8:	f002 fc44 	bl	8003384 <HAL_GetTick>
 8000afc:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < 5000) {} //wait
 8000afe:	bf00      	nop
 8000b00:	f002 fc40 	bl	8003384 <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	f241 3287 	movw	r2, #4999	; 0x1387
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d9f6      	bls.n	8000b00 <bno055_init+0x90>
    //HAL_Delay(5000);
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8000b12:	2100      	movs	r1, #0
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f001 fc4a 	bl	80023ae <bno055_set_pwr_mode>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	75fb      	strb	r3, [r7, #23]
 8000b1e:	7dfb      	ldrb	r3, [r7, #23]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <bno055_init+0xb8>
        return err;
 8000b24:	7dfb      	ldrb	r3, [r7, #23]
 8000b26:	e0a9      	b.n	8000c7c <bno055_init+0x20c>
    }
    timeSaver = HAL_GetTick();
 8000b28:	f002 fc2c 	bl	8003384 <HAL_GetTick>
 8000b2c:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < 10) {}//wait
 8000b2e:	bf00      	nop
 8000b30:	f002 fc28 	bl	8003384 <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	2b09      	cmp	r3, #9
 8000b3c:	d9f8      	bls.n	8000b30 <bno055_init+0xc0>
    //HAL_Delay(10);
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000b3e:	2100      	movs	r1, #0
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f001 fd3a 	bl	80025ba <bno055_set_page>
 8000b46:	4603      	mov	r3, r0
 8000b48:	75fb      	strb	r3, [r7, #23]
 8000b4a:	7dfb      	ldrb	r3, [r7, #23]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <bno055_init+0xe4>
        return err;
 8000b50:	7dfb      	ldrb	r3, [r7, #23]
 8000b52:	e093      	b.n	8000c7c <bno055_init+0x20c>
    }
    timeSaver = HAL_GetTick();
 8000b54:	f002 fc16 	bl	8003384 <HAL_GetTick>
 8000b58:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < BNO_CONFIG_TIME_DELAY + 5) {} //wait
 8000b5a:	bf00      	nop
 8000b5c:	f002 fc12 	bl	8003384 <HAL_GetTick>
 8000b60:	4602      	mov	r2, r0
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	2b0b      	cmp	r3, #11
 8000b68:	d9f8      	bls.n	8000b5c <bno055_init+0xec>
    //HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
    bno055_on(imu);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f001 fc9f 	bl	80024ae <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	791b      	ldrb	r3, [r3, #4]
 8000b74:	4619      	mov	r1, r3
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f001 fb7f 	bl	800227a <bno055_set_opmode>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	75fb      	strb	r3, [r7, #23]
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <bno055_init+0x11a>
        return err;
 8000b86:	7dfb      	ldrb	r3, [r7, #23]
 8000b88:	e078      	b.n	8000c7c <bno055_init+0x20c>
    }
    timeSaver = HAL_GetTick();
 8000b8a:	f002 fbfb 	bl	8003384 <HAL_GetTick>
 8000b8e:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < BNO_ANY_TIME_DELAY + 5) {}//wait
 8000b90:	bf00      	nop
 8000b92:	f002 fbf7 	bl	8003384 <HAL_GetTick>
 8000b96:	4602      	mov	r2, r0
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	2b17      	cmp	r3, #23
 8000b9e:	d9f8      	bls.n	8000b92 <bno055_init+0x122>
    //HAL_Delay(BNO_ANY_TIME_DELAY + 5);

    imu->temperature = &bno055_temperature;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a38      	ldr	r2, [pc, #224]	; (8000c84 <bno055_init+0x214>)
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
    imu->acc_x = &bno055_acc_x;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a37      	ldr	r2, [pc, #220]	; (8000c88 <bno055_init+0x218>)
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
    imu->acc_y = &bno055_acc_y;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a37      	ldr	r2, [pc, #220]	; (8000c8c <bno055_init+0x21c>)
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->acc_z = &bno055_acc_z;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a36      	ldr	r2, [pc, #216]	; (8000c90 <bno055_init+0x220>)
 8000bb6:	631a      	str	r2, [r3, #48]	; 0x30
    imu->acc = &bno055_acc;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a36      	ldr	r2, [pc, #216]	; (8000c94 <bno055_init+0x224>)
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a35      	ldr	r2, [pc, #212]	; (8000c98 <bno055_init+0x228>)
 8000bc2:	639a      	str	r2, [r3, #56]	; 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a35      	ldr	r2, [pc, #212]	; (8000c9c <bno055_init+0x22c>)
 8000bc8:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a34      	ldr	r2, [pc, #208]	; (8000ca0 <bno055_init+0x230>)
 8000bce:	641a      	str	r2, [r3, #64]	; 0x40
    imu->linear_acc = &bno055_linear_acc;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a34      	ldr	r2, [pc, #208]	; (8000ca4 <bno055_init+0x234>)
 8000bd4:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyro_x = &bno055_gyro_x;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a33      	ldr	r2, [pc, #204]	; (8000ca8 <bno055_init+0x238>)
 8000bda:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyro_y = &bno055_gyro_y;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a33      	ldr	r2, [pc, #204]	; (8000cac <bno055_init+0x23c>)
 8000be0:	64da      	str	r2, [r3, #76]	; 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a32      	ldr	r2, [pc, #200]	; (8000cb0 <bno055_init+0x240>)
 8000be6:	651a      	str	r2, [r3, #80]	; 0x50
    imu->gyro = &bno055_gyro;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a32      	ldr	r2, [pc, #200]	; (8000cb4 <bno055_init+0x244>)
 8000bec:	655a      	str	r2, [r3, #84]	; 0x54
    imu->mag_x = &bno055_mag_x;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a31      	ldr	r2, [pc, #196]	; (8000cb8 <bno055_init+0x248>)
 8000bf2:	659a      	str	r2, [r3, #88]	; 0x58
    imu->mag_y = &bno055_mag_y;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a31      	ldr	r2, [pc, #196]	; (8000cbc <bno055_init+0x24c>)
 8000bf8:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->mag_z = &bno055_mag_z;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a30      	ldr	r2, [pc, #192]	; (8000cc0 <bno055_init+0x250>)
 8000bfe:	661a      	str	r2, [r3, #96]	; 0x60
    imu->mag = &bno055_mag;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a30      	ldr	r2, [pc, #192]	; (8000cc4 <bno055_init+0x254>)
 8000c04:	665a      	str	r2, [r3, #100]	; 0x64
    imu->gravity_x = &bno055_gravity_x;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a2f      	ldr	r2, [pc, #188]	; (8000cc8 <bno055_init+0x258>)
 8000c0a:	669a      	str	r2, [r3, #104]	; 0x68
    imu->gravity_y = &bno055_gravity_y;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a2f      	ldr	r2, [pc, #188]	; (8000ccc <bno055_init+0x25c>)
 8000c10:	66da      	str	r2, [r3, #108]	; 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a2e      	ldr	r2, [pc, #184]	; (8000cd0 <bno055_init+0x260>)
 8000c16:	671a      	str	r2, [r3, #112]	; 0x70
    imu->gravity = &bno055_gravity;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a2e      	ldr	r2, [pc, #184]	; (8000cd4 <bno055_init+0x264>)
 8000c1c:	675a      	str	r2, [r3, #116]	; 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a2d      	ldr	r2, [pc, #180]	; (8000cd8 <bno055_init+0x268>)
 8000c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    imu->euler_roll = &bno055_euler_roll;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a2c      	ldr	r2, [pc, #176]	; (8000cdc <bno055_init+0x26c>)
 8000c2a:	679a      	str	r2, [r3, #120]	; 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ce0 <bno055_init+0x270>)
 8000c30:	67da      	str	r2, [r3, #124]	; 0x7c
    imu->euler = &bno055_euler;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a2b      	ldr	r2, [pc, #172]	; (8000ce4 <bno055_init+0x274>)
 8000c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a2a      	ldr	r2, [pc, #168]	; (8000ce8 <bno055_init+0x278>)
 8000c3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a29      	ldr	r2, [pc, #164]	; (8000cec <bno055_init+0x27c>)
 8000c46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a28      	ldr	r2, [pc, #160]	; (8000cf0 <bno055_init+0x280>)
 8000c4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a27      	ldr	r2, [pc, #156]	; (8000cf4 <bno055_init+0x284>)
 8000c56:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    imu->quaternion = &bno055_quaternion;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a26      	ldr	r2, [pc, #152]	; (8000cf8 <bno055_init+0x288>)
 8000c5e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    imu->acc_config = &bno055_acc_conf;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a25      	ldr	r2, [pc, #148]	; (8000cfc <bno055_init+0x28c>)
 8000c66:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a24      	ldr	r2, [pc, #144]	; (8000d00 <bno055_init+0x290>)
 8000c6e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    imu->mag_config = &bno055_mag_conf;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a23      	ldr	r2, [pc, #140]	; (8000d04 <bno055_init+0x294>)
 8000c76:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return BNO_OK;
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	371c      	adds	r7, #28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd90      	pop	{r4, r7, pc}
 8000c84:	08000d09 	.word	0x08000d09
 8000c88:	08000d85 	.word	0x08000d85
 8000c8c:	08000e19 	.word	0x08000e19
 8000c90:	08000ead 	.word	0x08000ead
 8000c94:	08000f41 	.word	0x08000f41
 8000c98:	08001021 	.word	0x08001021
 8000c9c:	080010b5 	.word	0x080010b5
 8000ca0:	08001149 	.word	0x08001149
 8000ca4:	080011dd 	.word	0x080011dd
 8000ca8:	080012bd 	.word	0x080012bd
 8000cac:	08001351 	.word	0x08001351
 8000cb0:	080013e5 	.word	0x080013e5
 8000cb4:	08001479 	.word	0x08001479
 8000cb8:	08001559 	.word	0x08001559
 8000cbc:	080015db 	.word	0x080015db
 8000cc0:	0800165d 	.word	0x0800165d
 8000cc4:	080016df 	.word	0x080016df
 8000cc8:	080017a9 	.word	0x080017a9
 8000ccc:	08001841 	.word	0x08001841
 8000cd0:	080018d9 	.word	0x080018d9
 8000cd4:	08001971 	.word	0x08001971
 8000cd8:	08001a51 	.word	0x08001a51
 8000cdc:	08001ae9 	.word	0x08001ae9
 8000ce0:	08001b81 	.word	0x08001b81
 8000ce4:	08001c19 	.word	0x08001c19
 8000ce8:	08001cf9 	.word	0x08001cf9
 8000cec:	08001d81 	.word	0x08001d81
 8000cf0:	08001e09 	.word	0x08001e09
 8000cf4:	08001e91 	.word	0x08001e91
 8000cf8:	08001f19 	.word	0x08001f19
 8000cfc:	0800200d 	.word	0x0800200d
 8000d00:	080020dd 	.word	0x080020dd
 8000d04:	080021ab 	.word	0x080021ab

08000d08 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b0af      	sub	sp, #188	; 0xbc
 8000d0c:	af2a      	add	r7, sp, #168	; 0xa8
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000d12:	2100      	movs	r1, #0
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f001 fc50 	bl	80025ba <bno055_set_page>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	73fb      	strb	r3, [r7, #15]
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <bno055_temperature+0x20>
        return err;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	e029      	b.n	8000d7c <bno055_temperature+0x74>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 8000d2c:	687c      	ldr	r4, [r7, #4]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	9329      	str	r3, [sp, #164]	; 0xa4
 8000d32:	f107 030e 	add.w	r3, r7, #14
 8000d36:	9328      	str	r3, [sp, #160]	; 0xa0
 8000d38:	2334      	movs	r3, #52	; 0x34
 8000d3a:	9327      	str	r3, [sp, #156]	; 0x9c
 8000d3c:	4668      	mov	r0, sp
 8000d3e:	f104 0310 	add.w	r3, r4, #16
 8000d42:	229c      	movs	r2, #156	; 0x9c
 8000d44:	4619      	mov	r1, r3
 8000d46:	f008 fce9 	bl	800971c <memcpy>
 8000d4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d4e:	f001 fbd1 	bl	80024f4 <bno055_read_regs>
 8000d52:	4603      	mov	r3, r0
 8000d54:	73fb      	strb	r3, [r7, #15]
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <bno055_temperature+0x58>
        return err;
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	e00d      	b.n	8000d7c <bno055_temperature+0x74>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7bdb      	ldrb	r3, [r3, #15]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d004      	beq.n	8000d72 <bno055_temperature+0x6a>
 8000d68:	7bbb      	ldrb	r3, [r7, #14]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	e001      	b.n	8000d76 <bno055_temperature+0x6e>
 8000d72:	7bbb      	ldrb	r3, [r7, #14]
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd90      	pop	{r4, r7, pc}

08000d84 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b0af      	sub	sp, #188	; 0xbc
 8000d88:	af2a      	add	r7, sp, #168	; 0xa8
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000d8e:	2100      	movs	r1, #0
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f001 fc12 	bl	80025ba <bno055_set_page>
 8000d96:	4603      	mov	r3, r0
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <bno055_acc_x+0x20>
        return err;
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	e033      	b.n	8000e0c <bno055_acc_x+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000da4:	687c      	ldr	r4, [r7, #4]
 8000da6:	2302      	movs	r3, #2
 8000da8:	9329      	str	r3, [sp, #164]	; 0xa4
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	9328      	str	r3, [sp, #160]	; 0xa0
 8000db0:	2308      	movs	r3, #8
 8000db2:	9327      	str	r3, [sp, #156]	; 0x9c
 8000db4:	4668      	mov	r0, sp
 8000db6:	f104 0310 	add.w	r3, r4, #16
 8000dba:	229c      	movs	r2, #156	; 0x9c
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f008 fcad 	bl	800971c <memcpy>
 8000dc2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dc6:	f001 fb95 	bl	80024f4 <bno055_read_regs>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	73fb      	strb	r3, [r7, #15]
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <bno055_acc_x+0x54>
        return err;
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	e019      	b.n	8000e0c <bno055_acc_x+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000dd8:	7b7b      	ldrb	r3, [r7, #13]
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	7b3b      	ldrb	r3, [r7, #12]
 8000de0:	b21b      	sxth	r3, r3
 8000de2:	4313      	orrs	r3, r2
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	ee07 3a90 	vmov	s15, r3
 8000dea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d102      	bne.n	8000dfc <bno055_acc_x+0x78>
 8000df6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000e14 <bno055_acc_x+0x90>
 8000dfa:	e001      	b.n	8000e00 <bno055_acc_x+0x7c>
 8000dfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000e0a:	2300      	movs	r3, #0
};
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}
 8000e14:	42c80000 	.word	0x42c80000

08000e18 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b0af      	sub	sp, #188	; 0xbc
 8000e1c:	af2a      	add	r7, sp, #168	; 0xa8
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000e22:	2100      	movs	r1, #0
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f001 fbc8 	bl	80025ba <bno055_set_page>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	73fb      	strb	r3, [r7, #15]
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <bno055_acc_y+0x20>
        return err;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	e033      	b.n	8000ea0 <bno055_acc_y+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000e38:	687c      	ldr	r4, [r7, #4]
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	9329      	str	r3, [sp, #164]	; 0xa4
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	9328      	str	r3, [sp, #160]	; 0xa0
 8000e44:	230a      	movs	r3, #10
 8000e46:	9327      	str	r3, [sp, #156]	; 0x9c
 8000e48:	4668      	mov	r0, sp
 8000e4a:	f104 0310 	add.w	r3, r4, #16
 8000e4e:	229c      	movs	r2, #156	; 0x9c
 8000e50:	4619      	mov	r1, r3
 8000e52:	f008 fc63 	bl	800971c <memcpy>
 8000e56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e5a:	f001 fb4b 	bl	80024f4 <bno055_read_regs>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <bno055_acc_y+0x54>
        return err;
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	e019      	b.n	8000ea0 <bno055_acc_y+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e6c:	7b7b      	ldrb	r3, [r7, #13]
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	7b3b      	ldrb	r3, [r7, #12]
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	4313      	orrs	r3, r2
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	ee07 3a90 	vmov	s15, r3
 8000e7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d102      	bne.n	8000e90 <bno055_acc_y+0x78>
 8000e8a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000ea8 <bno055_acc_y+0x90>
 8000e8e:	e001      	b.n	8000e94 <bno055_acc_y+0x7c>
 8000e90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000e9e:	2300      	movs	r3, #0
};
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd90      	pop	{r4, r7, pc}
 8000ea8:	42c80000 	.word	0x42c80000

08000eac <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b0af      	sub	sp, #188	; 0xbc
 8000eb0:	af2a      	add	r7, sp, #168	; 0xa8
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f001 fb7e 	bl	80025ba <bno055_set_page>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	73fb      	strb	r3, [r7, #15]
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <bno055_acc_z+0x20>
        return err;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	e033      	b.n	8000f34 <bno055_acc_z+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000ecc:	687c      	ldr	r4, [r7, #4]
 8000ece:	2302      	movs	r3, #2
 8000ed0:	9329      	str	r3, [sp, #164]	; 0xa4
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	9328      	str	r3, [sp, #160]	; 0xa0
 8000ed8:	230c      	movs	r3, #12
 8000eda:	9327      	str	r3, [sp, #156]	; 0x9c
 8000edc:	4668      	mov	r0, sp
 8000ede:	f104 0310 	add.w	r3, r4, #16
 8000ee2:	229c      	movs	r2, #156	; 0x9c
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f008 fc19 	bl	800971c <memcpy>
 8000eea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000eee:	f001 fb01 	bl	80024f4 <bno055_read_regs>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <bno055_acc_z+0x54>
        return err;
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	e019      	b.n	8000f34 <bno055_acc_z+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000f00:	7b7b      	ldrb	r3, [r7, #13]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	7b3b      	ldrb	r3, [r7, #12]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d102      	bne.n	8000f24 <bno055_acc_z+0x78>
 8000f1e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f3c <bno055_acc_z+0x90>
 8000f22:	e001      	b.n	8000f28 <bno055_acc_z+0x7c>
 8000f24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000f32:	2300      	movs	r3, #0
};
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd90      	pop	{r4, r7, pc}
 8000f3c:	42c80000 	.word	0x42c80000

08000f40 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b0b1      	sub	sp, #196	; 0xc4
 8000f44:	af2a      	add	r7, sp, #168	; 0xa8
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f001 fb34 	bl	80025ba <bno055_set_page>
 8000f52:	4603      	mov	r3, r0
 8000f54:	75fb      	strb	r3, [r7, #23]
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <bno055_acc+0x20>
        return err;
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	e059      	b.n	8001014 <bno055_acc+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 8000f60:	687c      	ldr	r4, [r7, #4]
 8000f62:	2306      	movs	r3, #6
 8000f64:	9329      	str	r3, [sp, #164]	; 0xa4
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	9328      	str	r3, [sp, #160]	; 0xa0
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	9327      	str	r3, [sp, #156]	; 0x9c
 8000f70:	4668      	mov	r0, sp
 8000f72:	f104 0310 	add.w	r3, r4, #16
 8000f76:	229c      	movs	r2, #156	; 0x9c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f008 fbcf 	bl	800971c <memcpy>
 8000f7e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f82:	f001 fab7 	bl	80024f4 <bno055_read_regs>
 8000f86:	4603      	mov	r3, r0
 8000f88:	75fb      	strb	r3, [r7, #23]
 8000f8a:	7dfb      	ldrb	r3, [r7, #23]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <bno055_acc+0x54>
        return err;
 8000f90:	7dfb      	ldrb	r3, [r7, #23]
 8000f92:	e03f      	b.n	8001014 <bno055_acc+0xd4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <bno055_acc+0x60>
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <bno055_acc+0xdc>)
 8000f9e:	e001      	b.n	8000fa4 <bno055_acc+0x64>
 8000fa0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000fa4:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000fa6:	7a7b      	ldrb	r3, [r7, #9]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	7a3b      	ldrb	r3, [r7, #8]
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000fca:	7afb      	ldrb	r3, [r7, #11]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	7abb      	ldrb	r3, [r7, #10]
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fe0:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000fee:	7b7b      	ldrb	r3, [r7, #13]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	7b3b      	ldrb	r3, [r7, #12]
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001004:	ed97 7a04 	vldr	s14, [r7, #16]
 8001008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001012:	2300      	movs	r3, #0
};
 8001014:	4618      	mov	r0, r3
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd90      	pop	{r4, r7, pc}
 800101c:	42c80000 	.word	0x42c80000

08001020 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b0af      	sub	sp, #188	; 0xbc
 8001024:	af2a      	add	r7, sp, #168	; 0xa8
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800102a:	2100      	movs	r1, #0
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f001 fac4 	bl	80025ba <bno055_set_page>
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <bno055_linear_acc_x+0x20>
        return err;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	e033      	b.n	80010a8 <bno055_linear_acc_x+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001040:	687c      	ldr	r4, [r7, #4]
 8001042:	2302      	movs	r3, #2
 8001044:	9329      	str	r3, [sp, #164]	; 0xa4
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	9328      	str	r3, [sp, #160]	; 0xa0
 800104c:	2328      	movs	r3, #40	; 0x28
 800104e:	9327      	str	r3, [sp, #156]	; 0x9c
 8001050:	4668      	mov	r0, sp
 8001052:	f104 0310 	add.w	r3, r4, #16
 8001056:	229c      	movs	r2, #156	; 0x9c
 8001058:	4619      	mov	r1, r3
 800105a:	f008 fb5f 	bl	800971c <memcpy>
 800105e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001062:	f001 fa47 	bl	80024f4 <bno055_read_regs>
 8001066:	4603      	mov	r3, r0
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <bno055_linear_acc_x+0x54>
        return err;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	e019      	b.n	80010a8 <bno055_linear_acc_x+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001074:	7b7b      	ldrb	r3, [r7, #13]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	7b3b      	ldrb	r3, [r7, #12]
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21b      	sxth	r3, r3
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <bno055_linear_acc_x+0x78>
 8001092:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80010b0 <bno055_linear_acc_x+0x90>
 8001096:	e001      	b.n	800109c <bno055_linear_acc_x+0x7c>
 8001098:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800109c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80010a6:	2300      	movs	r3, #0
};
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd90      	pop	{r4, r7, pc}
 80010b0:	42c80000 	.word	0x42c80000

080010b4 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b0af      	sub	sp, #188	; 0xbc
 80010b8:	af2a      	add	r7, sp, #168	; 0xa8
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80010be:	2100      	movs	r1, #0
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f001 fa7a 	bl	80025ba <bno055_set_page>
 80010c6:	4603      	mov	r3, r0
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <bno055_linear_acc_y+0x20>
        return err;
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	e033      	b.n	800113c <bno055_linear_acc_y+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80010d4:	687c      	ldr	r4, [r7, #4]
 80010d6:	2302      	movs	r3, #2
 80010d8:	9329      	str	r3, [sp, #164]	; 0xa4
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	9328      	str	r3, [sp, #160]	; 0xa0
 80010e0:	232a      	movs	r3, #42	; 0x2a
 80010e2:	9327      	str	r3, [sp, #156]	; 0x9c
 80010e4:	4668      	mov	r0, sp
 80010e6:	f104 0310 	add.w	r3, r4, #16
 80010ea:	229c      	movs	r2, #156	; 0x9c
 80010ec:	4619      	mov	r1, r3
 80010ee:	f008 fb15 	bl	800971c <memcpy>
 80010f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010f6:	f001 f9fd 	bl	80024f4 <bno055_read_regs>
 80010fa:	4603      	mov	r3, r0
 80010fc:	73fb      	strb	r3, [r7, #15]
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <bno055_linear_acc_y+0x54>
        return err;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	e019      	b.n	800113c <bno055_linear_acc_y+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001108:	7b7b      	ldrb	r3, [r7, #13]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	b21a      	sxth	r2, r3
 800110e:	7b3b      	ldrb	r3, [r7, #12]
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b21b      	sxth	r3, r3
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <bno055_linear_acc_y+0x78>
 8001126:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001144 <bno055_linear_acc_y+0x90>
 800112a:	e001      	b.n	8001130 <bno055_linear_acc_y+0x7c>
 800112c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800113a:	2300      	movs	r3, #0
};
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bd90      	pop	{r4, r7, pc}
 8001144:	42c80000 	.word	0x42c80000

08001148 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b0af      	sub	sp, #188	; 0xbc
 800114c:	af2a      	add	r7, sp, #168	; 0xa8
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001152:	2100      	movs	r1, #0
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f001 fa30 	bl	80025ba <bno055_set_page>
 800115a:	4603      	mov	r3, r0
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <bno055_linear_acc_z+0x20>
        return err;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	e033      	b.n	80011d0 <bno055_linear_acc_z+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001168:	687c      	ldr	r4, [r7, #4]
 800116a:	2302      	movs	r3, #2
 800116c:	9329      	str	r3, [sp, #164]	; 0xa4
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	9328      	str	r3, [sp, #160]	; 0xa0
 8001174:	232c      	movs	r3, #44	; 0x2c
 8001176:	9327      	str	r3, [sp, #156]	; 0x9c
 8001178:	4668      	mov	r0, sp
 800117a:	f104 0310 	add.w	r3, r4, #16
 800117e:	229c      	movs	r2, #156	; 0x9c
 8001180:	4619      	mov	r1, r3
 8001182:	f008 facb 	bl	800971c <memcpy>
 8001186:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800118a:	f001 f9b3 	bl	80024f4 <bno055_read_regs>
 800118e:	4603      	mov	r3, r0
 8001190:	73fb      	strb	r3, [r7, #15]
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <bno055_linear_acc_z+0x54>
        return err;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	e019      	b.n	80011d0 <bno055_linear_acc_z+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800119c:	7b7b      	ldrb	r3, [r7, #13]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	7b3b      	ldrb	r3, [r7, #12]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d102      	bne.n	80011c0 <bno055_linear_acc_z+0x78>
 80011ba:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80011d8 <bno055_linear_acc_z+0x90>
 80011be:	e001      	b.n	80011c4 <bno055_linear_acc_z+0x7c>
 80011c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80011c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80011ce:	2300      	movs	r3, #0
};
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd90      	pop	{r4, r7, pc}
 80011d8:	42c80000 	.word	0x42c80000

080011dc <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b0b1      	sub	sp, #196	; 0xc4
 80011e0:	af2a      	add	r7, sp, #168	; 0xa8
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80011e6:	2100      	movs	r1, #0
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f001 f9e6 	bl	80025ba <bno055_set_page>
 80011ee:	4603      	mov	r3, r0
 80011f0:	75fb      	strb	r3, [r7, #23]
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <bno055_linear_acc+0x20>
        return err;
 80011f8:	7dfb      	ldrb	r3, [r7, #23]
 80011fa:	e059      	b.n	80012b0 <bno055_linear_acc+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 80011fc:	687c      	ldr	r4, [r7, #4]
 80011fe:	2306      	movs	r3, #6
 8001200:	9329      	str	r3, [sp, #164]	; 0xa4
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	9328      	str	r3, [sp, #160]	; 0xa0
 8001208:	2328      	movs	r3, #40	; 0x28
 800120a:	9327      	str	r3, [sp, #156]	; 0x9c
 800120c:	4668      	mov	r0, sp
 800120e:	f104 0310 	add.w	r3, r4, #16
 8001212:	229c      	movs	r2, #156	; 0x9c
 8001214:	4619      	mov	r1, r3
 8001216:	f008 fa81 	bl	800971c <memcpy>
 800121a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800121e:	f001 f969 	bl	80024f4 <bno055_read_regs>
 8001222:	4603      	mov	r3, r0
 8001224:	75fb      	strb	r3, [r7, #23]
 8001226:	7dfb      	ldrb	r3, [r7, #23]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <bno055_linear_acc+0x54>
        return err;
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	e03f      	b.n	80012b0 <bno055_linear_acc+0xd4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <bno055_linear_acc+0x60>
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <bno055_linear_acc+0xdc>)
 800123a:	e001      	b.n	8001240 <bno055_linear_acc+0x64>
 800123c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001240:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001242:	7a7b      	ldrb	r3, [r7, #9]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21a      	sxth	r2, r3
 8001248:	7a3b      	ldrb	r3, [r7, #8]
 800124a:	b21b      	sxth	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b21b      	sxth	r3, r3
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001258:	ed97 7a04 	vldr	s14, [r7, #16]
 800125c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001266:	7afb      	ldrb	r3, [r7, #11]
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	b21a      	sxth	r2, r3
 800126c:	7abb      	ldrb	r3, [r7, #10]
 800126e:	b21b      	sxth	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b21b      	sxth	r3, r3
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800127c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 800128a:	7b7b      	ldrb	r3, [r7, #13]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	b21a      	sxth	r2, r3
 8001290:	7b3b      	ldrb	r3, [r7, #12]
 8001292:	b21b      	sxth	r3, r3
 8001294:	4313      	orrs	r3, r2
 8001296:	b21b      	sxth	r3, r3
 8001298:	ee07 3a90 	vmov	s15, r3
 800129c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80012a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80012ae:	2300      	movs	r3, #0
};
 80012b0:	4618      	mov	r0, r3
 80012b2:	371c      	adds	r7, #28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd90      	pop	{r4, r7, pc}
 80012b8:	42c80000 	.word	0x42c80000

080012bc <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b0af      	sub	sp, #188	; 0xbc
 80012c0:	af2a      	add	r7, sp, #168	; 0xa8
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80012c6:	2100      	movs	r1, #0
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f001 f976 	bl	80025ba <bno055_set_page>
 80012ce:	4603      	mov	r3, r0
 80012d0:	73fb      	strb	r3, [r7, #15]
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <bno055_gyro_x+0x20>
        return err;
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	e033      	b.n	8001344 <bno055_gyro_x+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 80012dc:	687c      	ldr	r4, [r7, #4]
 80012de:	2302      	movs	r3, #2
 80012e0:	9329      	str	r3, [sp, #164]	; 0xa4
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	9328      	str	r3, [sp, #160]	; 0xa0
 80012e8:	2314      	movs	r3, #20
 80012ea:	9327      	str	r3, [sp, #156]	; 0x9c
 80012ec:	4668      	mov	r0, sp
 80012ee:	f104 0310 	add.w	r3, r4, #16
 80012f2:	229c      	movs	r2, #156	; 0x9c
 80012f4:	4619      	mov	r1, r3
 80012f6:	f008 fa11 	bl	800971c <memcpy>
 80012fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012fe:	f001 f8f9 	bl	80024f4 <bno055_read_regs>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <bno055_gyro_x+0x54>
        return err;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	e019      	b.n	8001344 <bno055_gyro_x+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001310:	7b7b      	ldrb	r3, [r7, #13]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	b21a      	sxth	r2, r3
 8001316:	7b3b      	ldrb	r3, [r7, #12]
 8001318:	b21b      	sxth	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b21b      	sxth	r3, r3
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <bno055_gyro_x+0x78>
 800132e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001332:	e001      	b.n	8001338 <bno055_gyro_x+0x7c>
 8001334:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800134c <bno055_gyro_x+0x90>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001342:	2300      	movs	r3, #0
};
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	44610000 	.word	0x44610000

08001350 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b0af      	sub	sp, #188	; 0xbc
 8001354:	af2a      	add	r7, sp, #168	; 0xa8
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800135a:	2100      	movs	r1, #0
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f001 f92c 	bl	80025ba <bno055_set_page>
 8001362:	4603      	mov	r3, r0
 8001364:	73fb      	strb	r3, [r7, #15]
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <bno055_gyro_y+0x20>
        return err;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	e033      	b.n	80013d8 <bno055_gyro_y+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001370:	687c      	ldr	r4, [r7, #4]
 8001372:	2302      	movs	r3, #2
 8001374:	9329      	str	r3, [sp, #164]	; 0xa4
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	9328      	str	r3, [sp, #160]	; 0xa0
 800137c:	2316      	movs	r3, #22
 800137e:	9327      	str	r3, [sp, #156]	; 0x9c
 8001380:	4668      	mov	r0, sp
 8001382:	f104 0310 	add.w	r3, r4, #16
 8001386:	229c      	movs	r2, #156	; 0x9c
 8001388:	4619      	mov	r1, r3
 800138a:	f008 f9c7 	bl	800971c <memcpy>
 800138e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001392:	f001 f8af 	bl	80024f4 <bno055_read_regs>
 8001396:	4603      	mov	r3, r0
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <bno055_gyro_y+0x54>
        return err;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	e019      	b.n	80013d8 <bno055_gyro_y+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80013a4:	7b7b      	ldrb	r3, [r7, #13]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	7b3b      	ldrb	r3, [r7, #12]
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <bno055_gyro_y+0x78>
 80013c2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80013c6:	e001      	b.n	80013cc <bno055_gyro_y+0x7c>
 80013c8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80013e0 <bno055_gyro_y+0x90>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80013cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80013d6:	2300      	movs	r3, #0
};
 80013d8:	4618      	mov	r0, r3
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd90      	pop	{r4, r7, pc}
 80013e0:	44610000 	.word	0x44610000

080013e4 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b0af      	sub	sp, #188	; 0xbc
 80013e8:	af2a      	add	r7, sp, #168	; 0xa8
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80013ee:	2100      	movs	r1, #0
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f001 f8e2 	bl	80025ba <bno055_set_page>
 80013f6:	4603      	mov	r3, r0
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <bno055_gyro_z+0x20>
        return err;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	e033      	b.n	800146c <bno055_gyro_z+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001404:	687c      	ldr	r4, [r7, #4]
 8001406:	2302      	movs	r3, #2
 8001408:	9329      	str	r3, [sp, #164]	; 0xa4
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	9328      	str	r3, [sp, #160]	; 0xa0
 8001410:	2318      	movs	r3, #24
 8001412:	9327      	str	r3, [sp, #156]	; 0x9c
 8001414:	4668      	mov	r0, sp
 8001416:	f104 0310 	add.w	r3, r4, #16
 800141a:	229c      	movs	r2, #156	; 0x9c
 800141c:	4619      	mov	r1, r3
 800141e:	f008 f97d 	bl	800971c <memcpy>
 8001422:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001426:	f001 f865 	bl	80024f4 <bno055_read_regs>
 800142a:	4603      	mov	r3, r0
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <bno055_gyro_z+0x54>
        return err;
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	e019      	b.n	800146c <bno055_gyro_z+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001438:	7b7b      	ldrb	r3, [r7, #13]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	7b3b      	ldrb	r3, [r7, #12]
 8001440:	b21b      	sxth	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b21b      	sxth	r3, r3
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <bno055_gyro_z+0x78>
 8001456:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800145a:	e001      	b.n	8001460 <bno055_gyro_z+0x7c>
 800145c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001474 <bno055_gyro_z+0x90>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800146a:	2300      	movs	r3, #0
};
 800146c:	4618      	mov	r0, r3
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}
 8001474:	44610000 	.word	0x44610000

08001478 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b0b1      	sub	sp, #196	; 0xc4
 800147c:	af2a      	add	r7, sp, #168	; 0xa8
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001482:	2100      	movs	r1, #0
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f001 f898 	bl	80025ba <bno055_set_page>
 800148a:	4603      	mov	r3, r0
 800148c:	75fb      	strb	r3, [r7, #23]
 800148e:	7dfb      	ldrb	r3, [r7, #23]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <bno055_gyro+0x20>
        return err;
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	e059      	b.n	800154c <bno055_gyro+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001498:	687c      	ldr	r4, [r7, #4]
 800149a:	2306      	movs	r3, #6
 800149c:	9329      	str	r3, [sp, #164]	; 0xa4
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	9328      	str	r3, [sp, #160]	; 0xa0
 80014a4:	2314      	movs	r3, #20
 80014a6:	9327      	str	r3, [sp, #156]	; 0x9c
 80014a8:	4668      	mov	r0, sp
 80014aa:	f104 0310 	add.w	r3, r4, #16
 80014ae:	229c      	movs	r2, #156	; 0x9c
 80014b0:	4619      	mov	r1, r3
 80014b2:	f008 f933 	bl	800971c <memcpy>
 80014b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014ba:	f001 f81b 	bl	80024f4 <bno055_read_regs>
 80014be:	4603      	mov	r3, r0
 80014c0:	75fb      	strb	r3, [r7, #23]
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <bno055_gyro+0x54>
        return err;
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	e03f      	b.n	800154c <bno055_gyro+0xd4>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <bno055_gyro+0x62>
 80014d4:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80014d8:	e000      	b.n	80014dc <bno055_gyro+0x64>
 80014da:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <bno055_gyro+0xdc>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80014dc:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80014de:	7a7b      	ldrb	r3, [r7, #9]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	7a3b      	ldrb	r3, [r7, #8]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	ee07 3a90 	vmov	s15, r3
 80014f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80014f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001502:	7afb      	ldrb	r3, [r7, #11]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b21a      	sxth	r2, r3
 8001508:	7abb      	ldrb	r3, [r7, #10]
 800150a:	b21b      	sxth	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b21b      	sxth	r3, r3
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001518:	ed97 7a04 	vldr	s14, [r7, #16]
 800151c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001526:	7b7b      	ldrb	r3, [r7, #13]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	7b3b      	ldrb	r3, [r7, #12]
 800152e:	b21b      	sxth	r3, r3
 8001530:	4313      	orrs	r3, r2
 8001532:	b21b      	sxth	r3, r3
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800153c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	371c      	adds	r7, #28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd90      	pop	{r4, r7, pc}
 8001554:	44610000 	.word	0x44610000

08001558 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b0af      	sub	sp, #188	; 0xbc
 800155c:	af2a      	add	r7, sp, #168	; 0xa8
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001562:	2100      	movs	r1, #0
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f001 f828 	bl	80025ba <bno055_set_page>
 800156a:	4603      	mov	r3, r0
 800156c:	73fb      	strb	r3, [r7, #15]
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <bno055_mag_x+0x20>
        return err;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	e02c      	b.n	80015d2 <bno055_mag_x+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001578:	687c      	ldr	r4, [r7, #4]
 800157a:	2302      	movs	r3, #2
 800157c:	9329      	str	r3, [sp, #164]	; 0xa4
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	9328      	str	r3, [sp, #160]	; 0xa0
 8001584:	230e      	movs	r3, #14
 8001586:	9327      	str	r3, [sp, #156]	; 0x9c
 8001588:	4668      	mov	r0, sp
 800158a:	f104 0310 	add.w	r3, r4, #16
 800158e:	229c      	movs	r2, #156	; 0x9c
 8001590:	4619      	mov	r1, r3
 8001592:	f008 f8c3 	bl	800971c <memcpy>
 8001596:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800159a:	f000 ffab 	bl	80024f4 <bno055_read_regs>
 800159e:	4603      	mov	r3, r0
 80015a0:	73fb      	strb	r3, [r7, #15]
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <bno055_mag_x+0x54>
        return err;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	e012      	b.n	80015d2 <bno055_mag_x+0x7a>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80015ac:	7b7b      	ldrb	r3, [r7, #13]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	7b3b      	ldrb	r3, [r7, #12]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c2:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80015c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd90      	pop	{r4, r7, pc}

080015da <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 80015da:	b590      	push	{r4, r7, lr}
 80015dc:	b0af      	sub	sp, #188	; 0xbc
 80015de:	af2a      	add	r7, sp, #168	; 0xa8
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80015e4:	2100      	movs	r1, #0
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 ffe7 	bl	80025ba <bno055_set_page>
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <bno055_mag_y+0x20>
        return err;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	e02c      	b.n	8001654 <bno055_mag_y+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80015fa:	687c      	ldr	r4, [r7, #4]
 80015fc:	2302      	movs	r3, #2
 80015fe:	9329      	str	r3, [sp, #164]	; 0xa4
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	9328      	str	r3, [sp, #160]	; 0xa0
 8001606:	2310      	movs	r3, #16
 8001608:	9327      	str	r3, [sp, #156]	; 0x9c
 800160a:	4668      	mov	r0, sp
 800160c:	f104 0310 	add.w	r3, r4, #16
 8001610:	229c      	movs	r2, #156	; 0x9c
 8001612:	4619      	mov	r1, r3
 8001614:	f008 f882 	bl	800971c <memcpy>
 8001618:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800161c:	f000 ff6a 	bl	80024f4 <bno055_read_regs>
 8001620:	4603      	mov	r3, r0
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <bno055_mag_y+0x54>
        return err;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	e012      	b.n	8001654 <bno055_mag_y+0x7a>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	b21a      	sxth	r2, r3
 8001634:	7b3b      	ldrb	r3, [r7, #12]
 8001636:	b21b      	sxth	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	b21b      	sxth	r3, r3
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001644:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}

0800165c <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b0af      	sub	sp, #188	; 0xbc
 8001660:	af2a      	add	r7, sp, #168	; 0xa8
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001666:	2100      	movs	r1, #0
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 ffa6 	bl	80025ba <bno055_set_page>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <bno055_mag_z+0x20>
        return err;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	e02c      	b.n	80016d6 <bno055_mag_z+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800167c:	687c      	ldr	r4, [r7, #4]
 800167e:	2302      	movs	r3, #2
 8001680:	9329      	str	r3, [sp, #164]	; 0xa4
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	9328      	str	r3, [sp, #160]	; 0xa0
 8001688:	2312      	movs	r3, #18
 800168a:	9327      	str	r3, [sp, #156]	; 0x9c
 800168c:	4668      	mov	r0, sp
 800168e:	f104 0310 	add.w	r3, r4, #16
 8001692:	229c      	movs	r2, #156	; 0x9c
 8001694:	4619      	mov	r1, r3
 8001696:	f008 f841 	bl	800971c <memcpy>
 800169a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800169e:	f000 ff29 	bl	80024f4 <bno055_read_regs>
 80016a2:	4603      	mov	r3, r0
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <bno055_mag_z+0x54>
        return err;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	e012      	b.n	80016d6 <bno055_mag_z+0x7a>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80016b0:	7b7b      	ldrb	r3, [r7, #13]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	7b3b      	ldrb	r3, [r7, #12]
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	4313      	orrs	r3, r2
 80016bc:	b21b      	sxth	r3, r3
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80016ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd90      	pop	{r4, r7, pc}

080016de <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 80016de:	b590      	push	{r4, r7, lr}
 80016e0:	b0af      	sub	sp, #188	; 0xbc
 80016e2:	af2a      	add	r7, sp, #168	; 0xa8
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80016e8:	2100      	movs	r1, #0
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 ff65 	bl	80025ba <bno055_set_page>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <bno055_mag+0x20>
        return err;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	e050      	b.n	80017a0 <bno055_mag+0xc2>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 80016fe:	687c      	ldr	r4, [r7, #4]
 8001700:	2306      	movs	r3, #6
 8001702:	9329      	str	r3, [sp, #164]	; 0xa4
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	9328      	str	r3, [sp, #160]	; 0xa0
 800170a:	230e      	movs	r3, #14
 800170c:	9327      	str	r3, [sp, #156]	; 0x9c
 800170e:	4668      	mov	r0, sp
 8001710:	f104 0310 	add.w	r3, r4, #16
 8001714:	229c      	movs	r2, #156	; 0x9c
 8001716:	4619      	mov	r1, r3
 8001718:	f008 f800 	bl	800971c <memcpy>
 800171c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001720:	f000 fee8 	bl	80024f4 <bno055_read_regs>
 8001724:	4603      	mov	r3, r0
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <bno055_mag+0x54>
        return err;
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	e036      	b.n	80017a0 <bno055_mag+0xc2>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001732:	7a7b      	ldrb	r3, [r7, #9]
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	b21a      	sxth	r2, r3
 8001738:	7a3b      	ldrb	r3, [r7, #8]
 800173a:	b21b      	sxth	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b21b      	sxth	r3, r3
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001748:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800174c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 8001756:	7afb      	ldrb	r3, [r7, #11]
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	b21a      	sxth	r2, r3
 800175c:	7abb      	ldrb	r3, [r7, #10]
 800175e:	b21b      	sxth	r3, r3
 8001760:	4313      	orrs	r3, r2
 8001762:	b21b      	sxth	r3, r3
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800176c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 800177a:	7b7b      	ldrb	r3, [r7, #13]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b21a      	sxth	r2, r3
 8001780:	7b3b      	ldrb	r3, [r7, #12]
 8001782:	b21b      	sxth	r3, r3
 8001784:	4313      	orrs	r3, r2
 8001786:	b21b      	sxth	r3, r3
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001790:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001794:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 800179e:	2300      	movs	r3, #0
};
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd90      	pop	{r4, r7, pc}

080017a8 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b0b1      	sub	sp, #196	; 0xc4
 80017ac:	af2a      	add	r7, sp, #168	; 0xa8
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80017b2:	2100      	movs	r1, #0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 ff00 	bl	80025ba <bno055_set_page>
 80017ba:	4603      	mov	r3, r0
 80017bc:	75fb      	strb	r3, [r7, #23]
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <bno055_gravity_x+0x20>
        return err;
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	e035      	b.n	8001834 <bno055_gravity_x+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 80017c8:	687c      	ldr	r4, [r7, #4]
 80017ca:	2302      	movs	r3, #2
 80017cc:	9329      	str	r3, [sp, #164]	; 0xa4
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	9328      	str	r3, [sp, #160]	; 0xa0
 80017d4:	232e      	movs	r3, #46	; 0x2e
 80017d6:	9327      	str	r3, [sp, #156]	; 0x9c
 80017d8:	4668      	mov	r0, sp
 80017da:	f104 0310 	add.w	r3, r4, #16
 80017de:	229c      	movs	r2, #156	; 0x9c
 80017e0:	4619      	mov	r1, r3
 80017e2:	f007 ff9b 	bl	800971c <memcpy>
 80017e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017ea:	f000 fe83 	bl	80024f4 <bno055_read_regs>
 80017ee:	4603      	mov	r3, r0
 80017f0:	75fb      	strb	r3, [r7, #23]
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <bno055_gravity_x+0x54>
        return err;
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	e01b      	b.n	8001834 <bno055_gravity_x+0x8c>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <bno055_gravity_x+0x60>
 8001804:	4b0d      	ldr	r3, [pc, #52]	; (800183c <bno055_gravity_x+0x94>)
 8001806:	e001      	b.n	800180c <bno055_gravity_x+0x64>
 8001808:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800180c:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 800180e:	7b7b      	ldrb	r3, [r7, #13]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	b21a      	sxth	r2, r3
 8001814:	7b3b      	ldrb	r3, [r7, #12]
 8001816:	b21b      	sxth	r3, r3
 8001818:	4313      	orrs	r3, r2
 800181a:	b21b      	sxth	r3, r3
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001824:	ed97 7a04 	vldr	s14, [r7, #16]
 8001828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	371c      	adds	r7, #28
 8001838:	46bd      	mov	sp, r7
 800183a:	bd90      	pop	{r4, r7, pc}
 800183c:	42c80000 	.word	0x42c80000

08001840 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b0b1      	sub	sp, #196	; 0xc4
 8001844:	af2a      	add	r7, sp, #168	; 0xa8
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800184a:	2100      	movs	r1, #0
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 feb4 	bl	80025ba <bno055_set_page>
 8001852:	4603      	mov	r3, r0
 8001854:	75fb      	strb	r3, [r7, #23]
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <bno055_gravity_y+0x20>
        return err;
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	e035      	b.n	80018cc <bno055_gravity_y+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001860:	687c      	ldr	r4, [r7, #4]
 8001862:	2302      	movs	r3, #2
 8001864:	9329      	str	r3, [sp, #164]	; 0xa4
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	9328      	str	r3, [sp, #160]	; 0xa0
 800186c:	2330      	movs	r3, #48	; 0x30
 800186e:	9327      	str	r3, [sp, #156]	; 0x9c
 8001870:	4668      	mov	r0, sp
 8001872:	f104 0310 	add.w	r3, r4, #16
 8001876:	229c      	movs	r2, #156	; 0x9c
 8001878:	4619      	mov	r1, r3
 800187a:	f007 ff4f 	bl	800971c <memcpy>
 800187e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001882:	f000 fe37 	bl	80024f4 <bno055_read_regs>
 8001886:	4603      	mov	r3, r0
 8001888:	75fb      	strb	r3, [r7, #23]
 800188a:	7dfb      	ldrb	r3, [r7, #23]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <bno055_gravity_y+0x54>
        return err;
 8001890:	7dfb      	ldrb	r3, [r7, #23]
 8001892:	e01b      	b.n	80018cc <bno055_gravity_y+0x8c>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <bno055_gravity_y+0x60>
 800189c:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <bno055_gravity_y+0x94>)
 800189e:	e001      	b.n	80018a4 <bno055_gravity_y+0x64>
 80018a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80018a4:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80018a6:	7b7b      	ldrb	r3, [r7, #13]
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	b21a      	sxth	r2, r3
 80018ac:	7b3b      	ldrb	r3, [r7, #12]
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	4313      	orrs	r3, r2
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80018c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	371c      	adds	r7, #28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd90      	pop	{r4, r7, pc}
 80018d4:	42c80000 	.word	0x42c80000

080018d8 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b0b1      	sub	sp, #196	; 0xc4
 80018dc:	af2a      	add	r7, sp, #168	; 0xa8
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80018e2:	2100      	movs	r1, #0
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 fe68 	bl	80025ba <bno055_set_page>
 80018ea:	4603      	mov	r3, r0
 80018ec:	75fb      	strb	r3, [r7, #23]
 80018ee:	7dfb      	ldrb	r3, [r7, #23]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <bno055_gravity_z+0x20>
        return err;
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
 80018f6:	e035      	b.n	8001964 <bno055_gravity_z+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80018f8:	687c      	ldr	r4, [r7, #4]
 80018fa:	2302      	movs	r3, #2
 80018fc:	9329      	str	r3, [sp, #164]	; 0xa4
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	9328      	str	r3, [sp, #160]	; 0xa0
 8001904:	2332      	movs	r3, #50	; 0x32
 8001906:	9327      	str	r3, [sp, #156]	; 0x9c
 8001908:	4668      	mov	r0, sp
 800190a:	f104 0310 	add.w	r3, r4, #16
 800190e:	229c      	movs	r2, #156	; 0x9c
 8001910:	4619      	mov	r1, r3
 8001912:	f007 ff03 	bl	800971c <memcpy>
 8001916:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800191a:	f000 fdeb 	bl	80024f4 <bno055_read_regs>
 800191e:	4603      	mov	r3, r0
 8001920:	75fb      	strb	r3, [r7, #23]
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <bno055_gravity_z+0x54>
        return err;
 8001928:	7dfb      	ldrb	r3, [r7, #23]
 800192a:	e01b      	b.n	8001964 <bno055_gravity_z+0x8c>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <bno055_gravity_z+0x60>
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <bno055_gravity_z+0x94>)
 8001936:	e001      	b.n	800193c <bno055_gravity_z+0x64>
 8001938:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800193c:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 800193e:	7b7b      	ldrb	r3, [r7, #13]
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	b21a      	sxth	r2, r3
 8001944:	7b3b      	ldrb	r3, [r7, #12]
 8001946:	b21b      	sxth	r3, r3
 8001948:	4313      	orrs	r3, r2
 800194a:	b21b      	sxth	r3, r3
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001954:	ed97 7a04 	vldr	s14, [r7, #16]
 8001958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	bd90      	pop	{r4, r7, pc}
 800196c:	42c80000 	.word	0x42c80000

08001970 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b0b1      	sub	sp, #196	; 0xc4
 8001974:	af2a      	add	r7, sp, #168	; 0xa8
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800197a:	2100      	movs	r1, #0
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 fe1c 	bl	80025ba <bno055_set_page>
 8001982:	4603      	mov	r3, r0
 8001984:	75fb      	strb	r3, [r7, #23]
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <bno055_gravity+0x20>
        return err;
 800198c:	7dfb      	ldrb	r3, [r7, #23]
 800198e:	e059      	b.n	8001a44 <bno055_gravity+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001990:	687c      	ldr	r4, [r7, #4]
 8001992:	2306      	movs	r3, #6
 8001994:	9329      	str	r3, [sp, #164]	; 0xa4
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	9328      	str	r3, [sp, #160]	; 0xa0
 800199c:	232e      	movs	r3, #46	; 0x2e
 800199e:	9327      	str	r3, [sp, #156]	; 0x9c
 80019a0:	4668      	mov	r0, sp
 80019a2:	f104 0310 	add.w	r3, r4, #16
 80019a6:	229c      	movs	r2, #156	; 0x9c
 80019a8:	4619      	mov	r1, r3
 80019aa:	f007 feb7 	bl	800971c <memcpy>
 80019ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019b2:	f000 fd9f 	bl	80024f4 <bno055_read_regs>
 80019b6:	4603      	mov	r3, r0
 80019b8:	75fb      	strb	r3, [r7, #23]
 80019ba:	7dfb      	ldrb	r3, [r7, #23]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <bno055_gravity+0x54>
        return err;
 80019c0:	7dfb      	ldrb	r3, [r7, #23]
 80019c2:	e03f      	b.n	8001a44 <bno055_gravity+0xd4>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <bno055_gravity+0x60>
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <bno055_gravity+0xdc>)
 80019ce:	e001      	b.n	80019d4 <bno055_gravity+0x64>
 80019d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80019d4:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 80019d6:	7a7b      	ldrb	r3, [r7, #9]
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	b21a      	sxth	r2, r3
 80019dc:	7a3b      	ldrb	r3, [r7, #8]
 80019de:	b21b      	sxth	r3, r3
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80019f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 80019fa:	7afb      	ldrb	r3, [r7, #11]
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	7abb      	ldrb	r3, [r7, #10]
 8001a02:	b21b      	sxth	r3, r3
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	ee07 3a90 	vmov	s15, r3
 8001a0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a10:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8001a1e:	7b7b      	ldrb	r3, [r7, #13]
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	b21a      	sxth	r2, r3
 8001a24:	7b3b      	ldrb	r3, [r7, #12]
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	b21b      	sxth	r3, r3
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a34:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	371c      	adds	r7, #28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd90      	pop	{r4, r7, pc}
 8001a4c:	42c80000 	.word	0x42c80000

08001a50 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b0b1      	sub	sp, #196	; 0xc4
 8001a54:	af2a      	add	r7, sp, #168	; 0xa8
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fdac 	bl	80025ba <bno055_set_page>
 8001a62:	4603      	mov	r3, r0
 8001a64:	75fb      	strb	r3, [r7, #23]
 8001a66:	7dfb      	ldrb	r3, [r7, #23]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <bno055_euler_yaw+0x20>
        return err;
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
 8001a6e:	e035      	b.n	8001adc <bno055_euler_yaw+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001a70:	687c      	ldr	r4, [r7, #4]
 8001a72:	2302      	movs	r3, #2
 8001a74:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a7c:	231a      	movs	r3, #26
 8001a7e:	9327      	str	r3, [sp, #156]	; 0x9c
 8001a80:	4668      	mov	r0, sp
 8001a82:	f104 0310 	add.w	r3, r4, #16
 8001a86:	229c      	movs	r2, #156	; 0x9c
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f007 fe47 	bl	800971c <memcpy>
 8001a8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a92:	f000 fd2f 	bl	80024f4 <bno055_read_regs>
 8001a96:	4603      	mov	r3, r0
 8001a98:	75fb      	strb	r3, [r7, #23]
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <bno055_euler_yaw+0x54>
        BNO_OK) {
        return err;
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	e01b      	b.n	8001adc <bno055_euler_yaw+0x8c>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <bno055_euler_yaw+0x62>
 8001aac:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001ab0:	e000      	b.n	8001ab4 <bno055_euler_yaw+0x64>
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <bno055_euler_yaw+0x94>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001ab4:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001ab6:	7b7b      	ldrb	r3, [r7, #13]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	7b3b      	ldrb	r3, [r7, #12]
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b21b      	sxth	r3, r3
 8001ac4:	ee07 3a90 	vmov	s15, r3
 8001ac8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001acc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	371c      	adds	r7, #28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd90      	pop	{r4, r7, pc}
 8001ae4:	44610000 	.word	0x44610000

08001ae8 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b0b1      	sub	sp, #196	; 0xc4
 8001aec:	af2a      	add	r7, sp, #168	; 0xa8
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001af2:	2100      	movs	r1, #0
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 fd60 	bl	80025ba <bno055_set_page>
 8001afa:	4603      	mov	r3, r0
 8001afc:	75fb      	strb	r3, [r7, #23]
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <bno055_euler_roll+0x20>
        return err;
 8001b04:	7dfb      	ldrb	r3, [r7, #23]
 8001b06:	e035      	b.n	8001b74 <bno055_euler_roll+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001b08:	687c      	ldr	r4, [r7, #4]
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b0e:	f107 030c 	add.w	r3, r7, #12
 8001b12:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b14:	231c      	movs	r3, #28
 8001b16:	9327      	str	r3, [sp, #156]	; 0x9c
 8001b18:	4668      	mov	r0, sp
 8001b1a:	f104 0310 	add.w	r3, r4, #16
 8001b1e:	229c      	movs	r2, #156	; 0x9c
 8001b20:	4619      	mov	r1, r3
 8001b22:	f007 fdfb 	bl	800971c <memcpy>
 8001b26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b2a:	f000 fce3 	bl	80024f4 <bno055_read_regs>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	75fb      	strb	r3, [r7, #23]
 8001b32:	7dfb      	ldrb	r3, [r7, #23]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <bno055_euler_roll+0x54>
        return err;
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
 8001b3a:	e01b      	b.n	8001b74 <bno055_euler_roll+0x8c>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <bno055_euler_roll+0x62>
 8001b44:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001b48:	e000      	b.n	8001b4c <bno055_euler_roll+0x64>
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <bno055_euler_roll+0x94>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001b4c:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001b4e:	7b7b      	ldrb	r3, [r7, #13]
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	7b3b      	ldrb	r3, [r7, #12]
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b64:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd90      	pop	{r4, r7, pc}
 8001b7c:	44610000 	.word	0x44610000

08001b80 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b0b1      	sub	sp, #196	; 0xc4
 8001b84:	af2a      	add	r7, sp, #168	; 0xa8
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fd14 	bl	80025ba <bno055_set_page>
 8001b92:	4603      	mov	r3, r0
 8001b94:	75fb      	strb	r3, [r7, #23]
 8001b96:	7dfb      	ldrb	r3, [r7, #23]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <bno055_euler_pitch+0x20>
        return err;
 8001b9c:	7dfb      	ldrb	r3, [r7, #23]
 8001b9e:	e035      	b.n	8001c0c <bno055_euler_pitch+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8001ba0:	687c      	ldr	r4, [r7, #4]
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	9329      	str	r3, [sp, #164]	; 0xa4
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	9328      	str	r3, [sp, #160]	; 0xa0
 8001bac:	231e      	movs	r3, #30
 8001bae:	9327      	str	r3, [sp, #156]	; 0x9c
 8001bb0:	4668      	mov	r0, sp
 8001bb2:	f104 0310 	add.w	r3, r4, #16
 8001bb6:	229c      	movs	r2, #156	; 0x9c
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f007 fdaf 	bl	800971c <memcpy>
 8001bbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bc2:	f000 fc97 	bl	80024f4 <bno055_read_regs>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	75fb      	strb	r3, [r7, #23]
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <bno055_euler_pitch+0x54>
        return err;
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	e01b      	b.n	8001c0c <bno055_euler_pitch+0x8c>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <bno055_euler_pitch+0x62>
 8001bdc:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001be0:	e000      	b.n	8001be4 <bno055_euler_pitch+0x64>
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <bno055_euler_pitch+0x94>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001be4:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001be6:	7b7b      	ldrb	r3, [r7, #13]
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	b21a      	sxth	r2, r3
 8001bec:	7b3b      	ldrb	r3, [r7, #12]
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b21b      	sxth	r3, r3
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bfc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}
 8001c14:	44610000 	.word	0x44610000

08001c18 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b0b1      	sub	sp, #196	; 0xc4
 8001c1c:	af2a      	add	r7, sp, #168	; 0xa8
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001c22:	2100      	movs	r1, #0
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fcc8 	bl	80025ba <bno055_set_page>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	75fb      	strb	r3, [r7, #23]
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <bno055_euler+0x20>
        return err;
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	e059      	b.n	8001cec <bno055_euler+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8001c38:	687c      	ldr	r4, [r7, #4]
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	9328      	str	r3, [sp, #160]	; 0xa0
 8001c44:	231a      	movs	r3, #26
 8001c46:	9327      	str	r3, [sp, #156]	; 0x9c
 8001c48:	4668      	mov	r0, sp
 8001c4a:	f104 0310 	add.w	r3, r4, #16
 8001c4e:	229c      	movs	r2, #156	; 0x9c
 8001c50:	4619      	mov	r1, r3
 8001c52:	f007 fd63 	bl	800971c <memcpy>
 8001c56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c5a:	f000 fc4b 	bl	80024f4 <bno055_read_regs>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	75fb      	strb	r3, [r7, #23]
 8001c62:	7dfb      	ldrb	r3, [r7, #23]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <bno055_euler+0x54>
        BNO_OK) {
        return err;
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	e03f      	b.n	8001cec <bno055_euler+0xd4>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <bno055_euler+0x62>
 8001c74:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001c78:	e000      	b.n	8001c7c <bno055_euler+0x64>
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <bno055_euler+0xdc>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001c7c:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8001c7e:	7a7b      	ldrb	r3, [r7, #9]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	7a3b      	ldrb	r3, [r7, #8]
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c94:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001ca2:	7afb      	ldrb	r3, [r7, #11]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	7abb      	ldrb	r3, [r7, #10]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	4313      	orrs	r3, r2
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	ee07 3a90 	vmov	s15, r3
 8001cb4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cb8:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8001cc6:	7b7b      	ldrb	r3, [r7, #13]
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	b21a      	sxth	r2, r3
 8001ccc:	7b3b      	ldrb	r3, [r7, #12]
 8001cce:	b21b      	sxth	r3, r3
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cdc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	371c      	adds	r7, #28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd90      	pop	{r4, r7, pc}
 8001cf4:	44610000 	.word	0x44610000

08001cf8 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b0af      	sub	sp, #188	; 0xbc
 8001cfc:	af2a      	add	r7, sp, #168	; 0xa8
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001d02:	2100      	movs	r1, #0
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 fc58 	bl	80025ba <bno055_set_page>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <bno055_quaternion_w+0x20>
        return err;
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	e02c      	b.n	8001d72 <bno055_quaternion_w+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8001d18:	687c      	ldr	r4, [r7, #4]
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	9329      	str	r3, [sp, #164]	; 0xa4
 8001d1e:	f107 030c 	add.w	r3, r7, #12
 8001d22:	9328      	str	r3, [sp, #160]	; 0xa0
 8001d24:	2320      	movs	r3, #32
 8001d26:	9327      	str	r3, [sp, #156]	; 0x9c
 8001d28:	4668      	mov	r0, sp
 8001d2a:	f104 0310 	add.w	r3, r4, #16
 8001d2e:	229c      	movs	r2, #156	; 0x9c
 8001d30:	4619      	mov	r1, r3
 8001d32:	f007 fcf3 	bl	800971c <memcpy>
 8001d36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d3a:	f000 fbdb 	bl	80024f4 <bno055_read_regs>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	73fb      	strb	r3, [r7, #15]
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <bno055_quaternion_w+0x54>
        return err;
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	e012      	b.n	8001d72 <bno055_quaternion_w+0x7a>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001d4c:	7b7b      	ldrb	r3, [r7, #13]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	b21a      	sxth	r2, r3
 8001d52:	7b3b      	ldrb	r3, [r7, #12]
 8001d54:	b21b      	sxth	r3, r3
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	ee07 3a90 	vmov	s15, r3
 8001d5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d62:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001d7c <bno055_quaternion_w+0x84>
 8001d66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd90      	pop	{r4, r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	46800000 	.word	0x46800000

08001d80 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b0af      	sub	sp, #188	; 0xbc
 8001d84:	af2a      	add	r7, sp, #168	; 0xa8
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fc14 	bl	80025ba <bno055_set_page>
 8001d92:	4603      	mov	r3, r0
 8001d94:	73fb      	strb	r3, [r7, #15]
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <bno055_quaternion_x+0x20>
        return err;
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	e02c      	b.n	8001dfa <bno055_quaternion_x+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001da0:	687c      	ldr	r4, [r7, #4]
 8001da2:	2302      	movs	r3, #2
 8001da4:	9329      	str	r3, [sp, #164]	; 0xa4
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	9328      	str	r3, [sp, #160]	; 0xa0
 8001dac:	2322      	movs	r3, #34	; 0x22
 8001dae:	9327      	str	r3, [sp, #156]	; 0x9c
 8001db0:	4668      	mov	r0, sp
 8001db2:	f104 0310 	add.w	r3, r4, #16
 8001db6:	229c      	movs	r2, #156	; 0x9c
 8001db8:	4619      	mov	r1, r3
 8001dba:	f007 fcaf 	bl	800971c <memcpy>
 8001dbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dc2:	f000 fb97 	bl	80024f4 <bno055_read_regs>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	73fb      	strb	r3, [r7, #15]
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <bno055_quaternion_x+0x54>
        return err;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	e012      	b.n	8001dfa <bno055_quaternion_x+0x7a>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001dd4:	7b7b      	ldrb	r3, [r7, #13]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	b21a      	sxth	r2, r3
 8001dda:	7b3b      	ldrb	r3, [r7, #12]
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	ee07 3a90 	vmov	s15, r3
 8001de6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dea:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001e04 <bno055_quaternion_x+0x84>
 8001dee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd90      	pop	{r4, r7, pc}
 8001e02:	bf00      	nop
 8001e04:	46800000 	.word	0x46800000

08001e08 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b0af      	sub	sp, #188	; 0xbc
 8001e0c:	af2a      	add	r7, sp, #168	; 0xa8
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001e12:	2100      	movs	r1, #0
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fbd0 	bl	80025ba <bno055_set_page>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	73fb      	strb	r3, [r7, #15]
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <bno055_quaternion_y+0x20>
        return err;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	e02c      	b.n	8001e82 <bno055_quaternion_y+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001e28:	687c      	ldr	r4, [r7, #4]
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e34:	2324      	movs	r3, #36	; 0x24
 8001e36:	9327      	str	r3, [sp, #156]	; 0x9c
 8001e38:	4668      	mov	r0, sp
 8001e3a:	f104 0310 	add.w	r3, r4, #16
 8001e3e:	229c      	movs	r2, #156	; 0x9c
 8001e40:	4619      	mov	r1, r3
 8001e42:	f007 fc6b 	bl	800971c <memcpy>
 8001e46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e4a:	f000 fb53 	bl	80024f4 <bno055_read_regs>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <bno055_quaternion_y+0x54>
        return err;
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	e012      	b.n	8001e82 <bno055_quaternion_y+0x7a>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001e5c:	7b7b      	ldrb	r3, [r7, #13]
 8001e5e:	021b      	lsls	r3, r3, #8
 8001e60:	b21a      	sxth	r2, r3
 8001e62:	7b3b      	ldrb	r3, [r7, #12]
 8001e64:	b21b      	sxth	r3, r3
 8001e66:	4313      	orrs	r3, r2
 8001e68:	b21b      	sxth	r3, r3
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e72:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001e8c <bno055_quaternion_y+0x84>
 8001e76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd90      	pop	{r4, r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	46800000 	.word	0x46800000

08001e90 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b0af      	sub	sp, #188	; 0xbc
 8001e94:	af2a      	add	r7, sp, #168	; 0xa8
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 fb8c 	bl	80025ba <bno055_set_page>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	73fb      	strb	r3, [r7, #15]
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <bno055_quaternion_z+0x20>
        return err;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	e02c      	b.n	8001f0a <bno055_quaternion_z+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001eb0:	687c      	ldr	r4, [r7, #4]
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	9329      	str	r3, [sp, #164]	; 0xa4
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	9328      	str	r3, [sp, #160]	; 0xa0
 8001ebc:	2326      	movs	r3, #38	; 0x26
 8001ebe:	9327      	str	r3, [sp, #156]	; 0x9c
 8001ec0:	4668      	mov	r0, sp
 8001ec2:	f104 0310 	add.w	r3, r4, #16
 8001ec6:	229c      	movs	r2, #156	; 0x9c
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f007 fc27 	bl	800971c <memcpy>
 8001ece:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ed2:	f000 fb0f 	bl	80024f4 <bno055_read_regs>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	73fb      	strb	r3, [r7, #15]
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <bno055_quaternion_z+0x54>
        return err;
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	e012      	b.n	8001f0a <bno055_quaternion_z+0x7a>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001ee4:	7b7b      	ldrb	r3, [r7, #13]
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	b21a      	sxth	r2, r3
 8001eea:	7b3b      	ldrb	r3, [r7, #12]
 8001eec:	b21b      	sxth	r3, r3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001efa:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001f14 <bno055_quaternion_z+0x84>
 8001efe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd90      	pop	{r4, r7, pc}
 8001f12:	bf00      	nop
 8001f14:	46800000 	.word	0x46800000

08001f18 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b0b1      	sub	sp, #196	; 0xc4
 8001f1c:	af2a      	add	r7, sp, #168	; 0xa8
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001f22:	2100      	movs	r1, #0
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 fb48 	bl	80025ba <bno055_set_page>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	75fb      	strb	r3, [r7, #23]
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <bno055_quaternion+0x20>
        return err;
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
 8001f36:	e062      	b.n	8001ffe <bno055_quaternion+0xe6>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 8001f38:	687c      	ldr	r4, [r7, #4]
 8001f3a:	2308      	movs	r3, #8
 8001f3c:	9329      	str	r3, [sp, #164]	; 0xa4
 8001f3e:	f107 030c 	add.w	r3, r7, #12
 8001f42:	9328      	str	r3, [sp, #160]	; 0xa0
 8001f44:	2320      	movs	r3, #32
 8001f46:	9327      	str	r3, [sp, #156]	; 0x9c
 8001f48:	4668      	mov	r0, sp
 8001f4a:	f104 0310 	add.w	r3, r4, #16
 8001f4e:	229c      	movs	r2, #156	; 0x9c
 8001f50:	4619      	mov	r1, r3
 8001f52:	f007 fbe3 	bl	800971c <memcpy>
 8001f56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f5a:	f000 facb 	bl	80024f4 <bno055_read_regs>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	75fb      	strb	r3, [r7, #23]
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <bno055_quaternion+0x54>
        return err;
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	e048      	b.n	8001ffe <bno055_quaternion+0xe6>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001f6c:	7b7b      	ldrb	r3, [r7, #13]
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	b21a      	sxth	r2, r3
 8001f72:	7b3b      	ldrb	r3, [r7, #12]
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f82:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002008 <bno055_quaternion+0xf0>
 8001f86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	b21a      	sxth	r2, r3
 8001f96:	7bbb      	ldrb	r3, [r7, #14]
 8001f98:	b21b      	sxth	r3, r3
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa6:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002008 <bno055_quaternion+0xf0>
 8001faa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 8001fb4:	7c7b      	ldrb	r3, [r7, #17]
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	b21a      	sxth	r2, r3
 8001fba:	7c3b      	ldrb	r3, [r7, #16]
 8001fbc:	b21b      	sxth	r3, r3
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	ee07 3a90 	vmov	s15, r3
 8001fc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fca:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002008 <bno055_quaternion+0xf0>
 8001fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 8001fd8:	7cfb      	ldrb	r3, [r7, #19]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	7cbb      	ldrb	r3, [r7, #18]
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fee:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002008 <bno055_quaternion+0xf0>
 8001ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	371c      	adds	r7, #28
 8002002:	46bd      	mov	sp, r7
 8002004:	bd90      	pop	{r4, r7, pc}
 8002006:	bf00      	nop
 8002008:	46800000 	.word	0x46800000

0800200c <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b0af      	sub	sp, #188	; 0xbc
 8002010:	af2a      	add	r7, sp, #168	; 0xa8
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	4608      	mov	r0, r1
 8002016:	4611      	mov	r1, r2
 8002018:	461a      	mov	r2, r3
 800201a:	4603      	mov	r3, r0
 800201c:	70fb      	strb	r3, [r7, #3]
 800201e:	460b      	mov	r3, r1
 8002020:	70bb      	strb	r3, [r7, #2]
 8002022:	4613      	mov	r3, r2
 8002024:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002026:	2101      	movs	r1, #1
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fac6 	bl	80025ba <bno055_set_page>
 800202e:	4603      	mov	r3, r0
 8002030:	73fb      	strb	r3, [r7, #15]
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <bno055_acc_conf+0x30>
        return err;
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	e04b      	b.n	80020d4 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800203c:	2100      	movs	r1, #0
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f91b 	bl	800227a <bno055_set_opmode>
 8002044:	4603      	mov	r3, r0
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <bno055_acc_conf+0x46>
        return err;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	e040      	b.n	80020d4 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8002052:	200c      	movs	r0, #12
 8002054:	f001 f9a2 	bl	800339c <HAL_Delay>
    u8 config = range | bandwidth | mode;
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	78bb      	ldrb	r3, [r7, #2]
 800205c:	4313      	orrs	r3, r2
 800205e:	b2da      	uxtb	r2, r3
 8002060:	787b      	ldrb	r3, [r7, #1]
 8002062:	4313      	orrs	r3, r2
 8002064:	b2db      	uxtb	r3, r3
 8002066:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 8002068:	687c      	ldr	r4, [r7, #4]
 800206a:	2301      	movs	r3, #1
 800206c:	9329      	str	r3, [sp, #164]	; 0xa4
 800206e:	f107 030e 	add.w	r3, r7, #14
 8002072:	9328      	str	r3, [sp, #160]	; 0xa0
 8002074:	2308      	movs	r3, #8
 8002076:	9327      	str	r3, [sp, #156]	; 0x9c
 8002078:	4668      	mov	r0, sp
 800207a:	f104 0310 	add.w	r3, r4, #16
 800207e:	229c      	movs	r2, #156	; 0x9c
 8002080:	4619      	mov	r1, r3
 8002082:	f007 fb4b 	bl	800971c <memcpy>
 8002086:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800208a:	f000 fa69 	bl	8002560 <bno055_write_regs>
 800208e:	4603      	mov	r3, r0
 8002090:	73fb      	strb	r3, [r7, #15]
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <bno055_acc_conf+0x90>
        return err;
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	e01b      	b.n	80020d4 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	791b      	ldrb	r3, [r3, #4]
 80020a0:	4619      	mov	r1, r3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8e9 	bl	800227a <bno055_set_opmode>
 80020a8:	4603      	mov	r3, r0
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <bno055_acc_conf+0xaa>
        return err;
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	e00e      	b.n	80020d4 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80020b6:	2018      	movs	r0, #24
 80020b8:	f001 f970 	bl	800339c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80020bc:	2100      	movs	r1, #0
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fa7b 	bl	80025ba <bno055_set_page>
 80020c4:	4603      	mov	r3, r0
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <bno055_acc_conf+0xc6>
        return err;
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	e000      	b.n	80020d4 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd90      	pop	{r4, r7, pc}

080020dc <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 80020dc:	b590      	push	{r4, r7, lr}
 80020de:	b0af      	sub	sp, #188	; 0xbc
 80020e0:	af2a      	add	r7, sp, #168	; 0xa8
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	4608      	mov	r0, r1
 80020e6:	4611      	mov	r1, r2
 80020e8:	461a      	mov	r2, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	70fb      	strb	r3, [r7, #3]
 80020ee:	460b      	mov	r3, r1
 80020f0:	70bb      	strb	r3, [r7, #2]
 80020f2:	4613      	mov	r3, r2
 80020f4:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 80020f6:	2101      	movs	r1, #1
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 fa5e 	bl	80025ba <bno055_set_page>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <bno055_gyr_conf+0x30>
        return err;
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	e04a      	b.n	80021a2 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800210c:	2100      	movs	r1, #0
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f8b3 	bl	800227a <bno055_set_opmode>
 8002114:	4603      	mov	r3, r0
 8002116:	73fb      	strb	r3, [r7, #15]
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <bno055_gyr_conf+0x46>
        return err;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	e03f      	b.n	80021a2 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8002122:	200c      	movs	r0, #12
 8002124:	f001 f93a 	bl	800339c <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	78bb      	ldrb	r3, [r7, #2]
 800212c:	4313      	orrs	r3, r2
 800212e:	b2db      	uxtb	r3, r3
 8002130:	733b      	strb	r3, [r7, #12]
 8002132:	787b      	ldrb	r3, [r7, #1]
 8002134:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 8002136:	687c      	ldr	r4, [r7, #4]
 8002138:	2302      	movs	r3, #2
 800213a:	9329      	str	r3, [sp, #164]	; 0xa4
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	9328      	str	r3, [sp, #160]	; 0xa0
 8002142:	230a      	movs	r3, #10
 8002144:	9327      	str	r3, [sp, #156]	; 0x9c
 8002146:	4668      	mov	r0, sp
 8002148:	f104 0310 	add.w	r3, r4, #16
 800214c:	229c      	movs	r2, #156	; 0x9c
 800214e:	4619      	mov	r1, r3
 8002150:	f007 fae4 	bl	800971c <memcpy>
 8002154:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002158:	f000 fa02 	bl	8002560 <bno055_write_regs>
 800215c:	4603      	mov	r3, r0
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	e01b      	b.n	80021a2 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	791b      	ldrb	r3, [r3, #4]
 800216e:	4619      	mov	r1, r3
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f882 	bl	800227a <bno055_set_opmode>
 8002176:	4603      	mov	r3, r0
 8002178:	73fb      	strb	r3, [r7, #15]
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <bno055_gyr_conf+0xa8>
        return err;
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	e00e      	b.n	80021a2 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002184:	2018      	movs	r0, #24
 8002186:	f001 f909 	bl	800339c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800218a:	2100      	movs	r1, #0
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fa14 	bl	80025ba <bno055_set_page>
 8002192:	4603      	mov	r3, r0
 8002194:	73fb      	strb	r3, [r7, #15]
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <bno055_gyr_conf+0xc4>
        return err;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	e000      	b.n	80021a2 <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd90      	pop	{r4, r7, pc}

080021aa <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 80021aa:	b590      	push	{r4, r7, lr}
 80021ac:	b0af      	sub	sp, #188	; 0xbc
 80021ae:	af2a      	add	r7, sp, #168	; 0xa8
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	4608      	mov	r0, r1
 80021b4:	4611      	mov	r1, r2
 80021b6:	461a      	mov	r2, r3
 80021b8:	4603      	mov	r3, r0
 80021ba:	70fb      	strb	r3, [r7, #3]
 80021bc:	460b      	mov	r3, r1
 80021be:	70bb      	strb	r3, [r7, #2]
 80021c0:	4613      	mov	r3, r2
 80021c2:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 80021c4:	2101      	movs	r1, #1
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f9f7 	bl	80025ba <bno055_set_page>
 80021cc:	4603      	mov	r3, r0
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <bno055_mag_conf+0x30>
        return err;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	e04b      	b.n	8002272 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80021da:	2100      	movs	r1, #0
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f84c 	bl	800227a <bno055_set_opmode>
 80021e2:	4603      	mov	r3, r0
 80021e4:	73fb      	strb	r3, [r7, #15]
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <bno055_mag_conf+0x46>
        return err;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	e040      	b.n	8002272 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80021f0:	200c      	movs	r0, #12
 80021f2:	f001 f8d3 	bl	800339c <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	78bb      	ldrb	r3, [r7, #2]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	787b      	ldrb	r3, [r7, #1]
 8002200:	4313      	orrs	r3, r2
 8002202:	b2db      	uxtb	r3, r3
 8002204:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 8002206:	687c      	ldr	r4, [r7, #4]
 8002208:	2301      	movs	r3, #1
 800220a:	9329      	str	r3, [sp, #164]	; 0xa4
 800220c:	f107 030e 	add.w	r3, r7, #14
 8002210:	9328      	str	r3, [sp, #160]	; 0xa0
 8002212:	2309      	movs	r3, #9
 8002214:	9327      	str	r3, [sp, #156]	; 0x9c
 8002216:	4668      	mov	r0, sp
 8002218:	f104 0310 	add.w	r3, r4, #16
 800221c:	229c      	movs	r2, #156	; 0x9c
 800221e:	4619      	mov	r1, r3
 8002220:	f007 fa7c 	bl	800971c <memcpy>
 8002224:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002228:	f000 f99a 	bl	8002560 <bno055_write_regs>
 800222c:	4603      	mov	r3, r0
 800222e:	73fb      	strb	r3, [r7, #15]
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <bno055_mag_conf+0x90>
        return err;
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	e01b      	b.n	8002272 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	791b      	ldrb	r3, [r3, #4]
 800223e:	4619      	mov	r1, r3
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f81a 	bl	800227a <bno055_set_opmode>
 8002246:	4603      	mov	r3, r0
 8002248:	73fb      	strb	r3, [r7, #15]
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <bno055_mag_conf+0xaa>
        return err;
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	e00e      	b.n	8002272 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002254:	2018      	movs	r0, #24
 8002256:	f001 f8a1 	bl	800339c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800225a:	2100      	movs	r1, #0
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f9ac 	bl	80025ba <bno055_set_page>
 8002262:	4603      	mov	r3, r0
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <bno055_mag_conf+0xc6>
        return err;
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	e000      	b.n	8002272 <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	bd90      	pop	{r4, r7, pc}

0800227a <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 800227a:	b590      	push	{r4, r7, lr}
 800227c:	b0af      	sub	sp, #188	; 0xbc
 800227e:	af2a      	add	r7, sp, #168	; 0xa8
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	460b      	mov	r3, r1
 8002284:	70fb      	strb	r3, [r7, #3]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002286:	2100      	movs	r1, #0
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f996 	bl	80025ba <bno055_set_page>
 800228e:	4603      	mov	r3, r0
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <bno055_set_opmode+0x22>
        return err;
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	e01c      	b.n	80022d6 <bno055_set_opmode+0x5c>
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 800229c:	687c      	ldr	r4, [r7, #4]
 800229e:	2301      	movs	r3, #1
 80022a0:	9329      	str	r3, [sp, #164]	; 0xa4
 80022a2:	1cfb      	adds	r3, r7, #3
 80022a4:	9328      	str	r3, [sp, #160]	; 0xa0
 80022a6:	233d      	movs	r3, #61	; 0x3d
 80022a8:	9327      	str	r3, [sp, #156]	; 0x9c
 80022aa:	4668      	mov	r0, sp
 80022ac:	f104 0310 	add.w	r3, r4, #16
 80022b0:	229c      	movs	r2, #156	; 0x9c
 80022b2:	4619      	mov	r1, r3
 80022b4:	f007 fa32 	bl	800971c <memcpy>
 80022b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022bc:	f000 f950 	bl	8002560 <bno055_write_regs>
 80022c0:	4603      	mov	r3, r0
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <bno055_set_opmode+0x54>
        BNO_OK) {
        return err;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	e003      	b.n	80022d6 <bno055_set_opmode+0x5c>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80022ce:	2018      	movs	r0, #24
 80022d0:	f001 f864 	bl	800339c <HAL_Delay>
    return BNO_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd90      	pop	{r4, r7, pc}

080022de <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 80022de:	b590      	push	{r4, r7, lr}
 80022e0:	b0af      	sub	sp, #188	; 0xbc
 80022e2:	af2a      	add	r7, sp, #168	; 0xa8
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	4608      	mov	r0, r1
 80022e8:	4611      	mov	r1, r2
 80022ea:	461a      	mov	r2, r3
 80022ec:	4603      	mov	r3, r0
 80022ee:	70fb      	strb	r3, [r7, #3]
 80022f0:	460b      	mov	r3, r1
 80022f2:	70bb      	strb	r3, [r7, #2]
 80022f4:	4613      	mov	r3, r2
 80022f6:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80022f8:	2100      	movs	r1, #0
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff ffbd 	bl	800227a <bno055_set_opmode>
 8002300:	4603      	mov	r3, r0
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <bno055_set_unit+0x30>
        return err;
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	e04b      	b.n	80023a6 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800230e:	2100      	movs	r1, #0
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f952 	bl	80025ba <bno055_set_page>
 8002316:	4603      	mov	r3, r0
 8002318:	73fb      	strb	r3, [r7, #15]
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <bno055_set_unit+0x46>
        return err;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	e040      	b.n	80023a6 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	78bb      	ldrb	r3, [r7, #2]
 8002328:	4313      	orrs	r3, r2
 800232a:	b2da      	uxtb	r2, r3
 800232c:	787b      	ldrb	r3, [r7, #1]
 800232e:	4313      	orrs	r3, r2
 8002330:	b2da      	uxtb	r2, r3
 8002332:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002336:	4313      	orrs	r3, r2
 8002338:	b2db      	uxtb	r3, r3
 800233a:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 800233c:	687c      	ldr	r4, [r7, #4]
 800233e:	2301      	movs	r3, #1
 8002340:	9329      	str	r3, [sp, #164]	; 0xa4
 8002342:	f107 030e 	add.w	r3, r7, #14
 8002346:	9328      	str	r3, [sp, #160]	; 0xa0
 8002348:	233b      	movs	r3, #59	; 0x3b
 800234a:	9327      	str	r3, [sp, #156]	; 0x9c
 800234c:	4668      	mov	r0, sp
 800234e:	f104 0310 	add.w	r3, r4, #16
 8002352:	229c      	movs	r2, #156	; 0x9c
 8002354:	4619      	mov	r1, r3
 8002356:	f007 f9e1 	bl	800971c <memcpy>
 800235a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800235e:	f000 f8ff 	bl	8002560 <bno055_write_regs>
 8002362:	4603      	mov	r3, r0
 8002364:	73fb      	strb	r3, [r7, #15]
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <bno055_set_unit+0x92>
        return err;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	e01a      	b.n	80023a6 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	78ba      	ldrb	r2, [r7, #2]
 8002374:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	787a      	ldrb	r2, [r7, #1]
 800237a:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002382:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	791b      	ldrb	r3, [r3, #4]
 800238e:	4619      	mov	r1, r3
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ff72 	bl	800227a <bno055_set_opmode>
 8002396:	4603      	mov	r3, r0
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <bno055_set_unit+0xc6>
        return err;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	e000      	b.n	80023a6 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd90      	pop	{r4, r7, pc}

080023ae <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 80023ae:	b590      	push	{r4, r7, lr}
 80023b0:	b0af      	sub	sp, #188	; 0xbc
 80023b2:	af2a      	add	r7, sp, #168	; 0xa8
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 80023c0:	2304      	movs	r3, #4
 80023c2:	e04d      	b.n	8002460 <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 80023c4:	2100      	movs	r1, #0
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ff57 	bl	800227a <bno055_set_opmode>
 80023cc:	4603      	mov	r3, r0
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <bno055_set_pwr_mode+0x2c>
        return err;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	e042      	b.n	8002460 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80023da:	2100      	movs	r1, #0
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f8ec 	bl	80025ba <bno055_set_page>
 80023e2:	4603      	mov	r3, r0
 80023e4:	73fb      	strb	r3, [r7, #15]
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <bno055_set_pwr_mode+0x42>
        return err;
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	e037      	b.n	8002460 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 80023f0:	687c      	ldr	r4, [r7, #4]
 80023f2:	2301      	movs	r3, #1
 80023f4:	9329      	str	r3, [sp, #164]	; 0xa4
 80023f6:	1cfb      	adds	r3, r7, #3
 80023f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80023fa:	233e      	movs	r3, #62	; 0x3e
 80023fc:	9327      	str	r3, [sp, #156]	; 0x9c
 80023fe:	4668      	mov	r0, sp
 8002400:	f104 0310 	add.w	r3, r4, #16
 8002404:	229c      	movs	r2, #156	; 0x9c
 8002406:	4619      	mov	r1, r3
 8002408:	f007 f988 	bl	800971c <memcpy>
 800240c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002410:	f000 f8a6 	bl	8002560 <bno055_write_regs>
 8002414:	4603      	mov	r3, r0
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	e01e      	b.n	8002460 <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002428:	2100      	movs	r1, #0
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f8c5 	bl	80025ba <bno055_set_page>
 8002430:	4603      	mov	r3, r0
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <bno055_set_pwr_mode+0x90>
        return err;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	e010      	b.n	8002460 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	791b      	ldrb	r3, [r3, #4]
 8002442:	4619      	mov	r1, r3
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff ff18 	bl	800227a <bno055_set_opmode>
 800244a:	4603      	mov	r3, r0
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <bno055_set_pwr_mode+0xaa>
        return err;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	e003      	b.n	8002460 <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 8002458:	2002      	movs	r0, #2
 800245a:	f000 ff9f 	bl	800339c <HAL_Delay>
    return BNO_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bd90      	pop	{r4, r7, pc}

08002468 <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b0af      	sub	sp, #188	; 0xbc
 800246c:	af2a      	add	r7, sp, #168	; 0xa8
 800246e:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 8002470:	2320      	movs	r3, #32
 8002472:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8002474:	687c      	ldr	r4, [r7, #4]
 8002476:	2301      	movs	r3, #1
 8002478:	9329      	str	r3, [sp, #164]	; 0xa4
 800247a:	f107 030f 	add.w	r3, r7, #15
 800247e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002480:	233f      	movs	r3, #63	; 0x3f
 8002482:	9327      	str	r3, [sp, #156]	; 0x9c
 8002484:	4668      	mov	r0, sp
 8002486:	f104 0310 	add.w	r3, r4, #16
 800248a:	229c      	movs	r2, #156	; 0x9c
 800248c:	4619      	mov	r1, r3
 800248e:	f007 f945 	bl	800971c <memcpy>
 8002492:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002496:	f000 f863 	bl	8002560 <bno055_write_regs>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <bno055_reset+0x3e>
    }
    return BNO_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}

080024ae <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 80024ae:	b590      	push	{r4, r7, lr}
 80024b0:	b0af      	sub	sp, #188	; 0xbc
 80024b2:	af2a      	add	r7, sp, #168	; 0xa8
 80024b4:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80024ba:	687c      	ldr	r4, [r7, #4]
 80024bc:	2301      	movs	r3, #1
 80024be:	9329      	str	r3, [sp, #164]	; 0xa4
 80024c0:	f107 030f 	add.w	r3, r7, #15
 80024c4:	9328      	str	r3, [sp, #160]	; 0xa0
 80024c6:	233f      	movs	r3, #63	; 0x3f
 80024c8:	9327      	str	r3, [sp, #156]	; 0x9c
 80024ca:	4668      	mov	r0, sp
 80024cc:	f104 0310 	add.w	r3, r4, #16
 80024d0:	229c      	movs	r2, #156	; 0x9c
 80024d2:	4619      	mov	r1, r3
 80024d4:	f007 f922 	bl	800971c <memcpy>
 80024d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024dc:	f000 f840 	bl	8002560 <bno055_write_regs>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <bno055_on+0x3c>
        return BNO_ERR_I2C;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <bno055_on+0x3e>
    }
    return BNO_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd90      	pop	{r4, r7, pc}

080024f4 <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 80024f4:	b084      	sub	sp, #16
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af02      	add	r7, sp, #8
 80024fc:	f107 0c10 	add.w	ip, r7, #16
 8002500:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 8002504:	6938      	ldr	r0, [r7, #16]
 8002506:	7dbb      	ldrb	r3, [r7, #22]
 8002508:	b299      	uxth	r1, r3
 800250a:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800250e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2301      	movs	r3, #1
 8002516:	f003 fdcf 	bl	80060b8 <HAL_I2C_Master_Transmit>
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8002524:	2301      	movs	r3, #1
 8002526:	e014      	b.n	8002552 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 8002528:	6938      	ldr	r0, [r7, #16]
 800252a:	7dbb      	ldrb	r3, [r7, #22]
 800252c:	b299      	uxth	r1, r3
 800252e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002532:	b29b      	uxth	r3, r3
 8002534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002538:	9200      	str	r2, [sp, #0]
 800253a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800253e:	f003 feaf 	bl	80062a0 <HAL_I2C_Master_Receive>
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800255c:	b004      	add	sp, #16
 800255e:	4770      	bx	lr

08002560 <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 8002560:	b084      	sub	sp, #16
 8002562:	b5b0      	push	{r4, r5, r7, lr}
 8002564:	b086      	sub	sp, #24
 8002566:	af04      	add	r7, sp, #16
 8002568:	f107 0418 	add.w	r4, r7, #24
 800256c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 8002570:	69b8      	ldr	r0, [r7, #24]
 8002572:	7fbb      	ldrb	r3, [r7, #30]
 8002574:	b299      	uxth	r1, r3
 8002576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800257a:	b29a      	uxth	r2, r3
 800257c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002580:	b29c      	uxth	r4, r3
 8002582:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002586:	b29b      	uxth	r3, r3
 8002588:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800258c:	9502      	str	r5, [sp, #8]
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	4623      	mov	r3, r4
 8002598:	f003 ff78 	bl	800648c <HAL_I2C_Mem_Write>
 800259c:	4603      	mov	r3, r0
 800259e:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <bno055_write_regs+0x4a>
        return BNO_ERR_I2C;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <bno055_write_regs+0x4c>
    }
    return BNO_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80025b6:	b004      	add	sp, #16
 80025b8:	4770      	bx	lr

080025ba <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 80025ba:	b590      	push	{r4, r7, lr}
 80025bc:	b0af      	sub	sp, #188	; 0xbc
 80025be:	af2a      	add	r7, sp, #168	; 0xa8
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	460b      	mov	r3, r1
 80025c4:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	7b5a      	ldrb	r2, [r3, #13]
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <bno055_set_page+0x1a>
        return BNO_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e024      	b.n	800261e <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d901      	bls.n	80025de <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 80025da:	2302      	movs	r3, #2
 80025dc:	e01f      	b.n	800261e <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 80025de:	687c      	ldr	r4, [r7, #4]
 80025e0:	2301      	movs	r3, #1
 80025e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80025e4:	1cfb      	adds	r3, r7, #3
 80025e6:	9328      	str	r3, [sp, #160]	; 0xa0
 80025e8:	2307      	movs	r3, #7
 80025ea:	9327      	str	r3, [sp, #156]	; 0x9c
 80025ec:	4668      	mov	r0, sp
 80025ee:	f104 0310 	add.w	r3, r4, #16
 80025f2:	229c      	movs	r2, #156	; 0x9c
 80025f4:	4619      	mov	r1, r3
 80025f6:	f007 f891 	bl	800971c <memcpy>
 80025fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025fe:	f7ff ffaf 	bl	8002560 <bno055_write_regs>
 8002602:	4603      	mov	r3, r0
 8002604:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <bno055_set_page+0x56>
        return err;
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	e006      	b.n	800261e <bno055_set_page+0x64>
    }
    imu->_page = page;
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 8002616:	2002      	movs	r0, #2
 8002618:	f000 fec0 	bl	800339c <HAL_Delay>
    return BNO_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	bd90      	pop	{r4, r7, pc}

08002626 <comm_controller_init>:
#include "commcontroller.h"
#include <string.h>



void comm_controller_init(FDCAN_HandleTypeDef* fdcan, CommController *comm){
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af02      	add	r7, sp, #8
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]

	comm->fdcan = *fdcan;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	3350      	adds	r3, #80	; 0x50
 8002636:	4611      	mov	r1, r2
 8002638:	2264      	movs	r2, #100	; 0x64
 800263a:	4618      	mov	r0, r3
 800263c:	f007 f86e 	bl	800971c <memcpy>
	set_device_address(comm);
 8002640:	6838      	ldr	r0, [r7, #0]
 8002642:	f000 f899 	bl	8002778 <set_device_address>
	comm->send_message = false;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
	comm->received_message = false;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2200      	movs	r2, #0
 8002650:	705a      	strb	r2, [r3, #1]

	comm->TxHeader.Identifier = comm->device_id;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8002658:	461a      	mov	r2, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	605a      	str	r2, [r3, #4]
	comm->TxHeader.IdType=FDCAN_STANDARD_ID;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
	comm->TxHeader.TxFrameType=FDCAN_DATA_FRAME;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
	comm->TxHeader.DataLength=FDCAN_DLC_BYTES_64;  //8 uint32_t values = 32 bytes
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8002670:	611a      	str	r2, [r3, #16]
	comm->TxHeader.ErrorStateIndicator=FDCAN_ESI_ACTIVE;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2200      	movs	r2, #0
 8002676:	615a      	str	r2, [r3, #20]
	comm->TxHeader.BitRateSwitch=FDCAN_BRS_OFF;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2200      	movs	r2, #0
 800267c:	619a      	str	r2, [r3, #24]
	comm->TxHeader.FDFormat=FDCAN_FD_CAN;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002684:	61da      	str	r2, [r3, #28]
	comm->TxHeader.TxEventFifoControl=FDCAN_NO_TX_EVENTS;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2200      	movs	r2, #0
 800268a:	621a      	str	r2, [r3, #32]
	comm->TxHeader.MessageMarker=0;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	625a      	str	r2, [r3, #36]	; 0x24

	// Set number of extended ID filters to 1

	comm->filter.IdType = FDCAN_STANDARD_ID;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2200      	movs	r2, #0
 8002696:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	comm->filter.FilterIndex = 0;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2200      	movs	r2, #0
 800269e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	comm->filter.FilterType = FDCAN_FILTER_MASK;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2202      	movs	r2, #2
 80026a6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	comm->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	comm->filter.FilterID1 = comm->device_id;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80026b8:	461a      	mov	r2, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	comm->filter.FilterID2 = 0x7FF;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80026c6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	HAL_FDCAN_ConfigFilter(&comm->fdcan, &comm->filter);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	33b4      	adds	r3, #180	; 0xb4
 80026d4:	4619      	mov	r1, r3
 80026d6:	4610      	mov	r0, r2
 80026d8:	f002 fd6a 	bl	80051b0 <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&comm->fdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80026e2:	2301      	movs	r3, #1
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	2301      	movs	r3, #1
 80026e8:	2202      	movs	r2, #2
 80026ea:	2102      	movs	r1, #2
 80026ec:	f002 fdba 	bl	8005264 <HAL_FDCAN_ConfigGlobalFilter>

	memset(comm->RxData , 0 , RX_BUFFER_SIZE);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	33cc      	adds	r3, #204	; 0xcc
 80026f4:	2240      	movs	r2, #64	; 0x40
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f006 ffcb 	bl	8009694 <memset>

	HAL_FDCAN_Start(&comm->fdcan);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	3350      	adds	r3, #80	; 0x50
 8002702:	4618      	mov	r0, r3
 8002704:	f002 fddf 	bl	80052c6 <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&comm->fdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	3350      	adds	r3, #80	; 0x50
 800270c:	2200      	movs	r2, #0
 800270e:	2101      	movs	r1, #1
 8002710:	4618      	mov	r0, r3
 8002712:	f002 ff1f 	bl	8005554 <HAL_FDCAN_ActivateNotification>

}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <send_message>:


void send_message(CommController *comm , uint8_t *payload) {
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
	if(HAL_FDCAN_AddMessageToTxFifoQ(&comm->fdcan, &comm->TxHeader, payload) != HAL_OK)//
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3304      	adds	r3, #4
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	f002 fdee 	bl	8005316 <HAL_FDCAN_AddMessageToTxFifoQ>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <send_message+0x26>
		{
		  Error_Handler();
 8002740:	f000 fba8 	bl	8002e94 <Error_Handler>
		}
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <process_received_message>:

int process_received_message(CommController *comm) {
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

	int flag = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
	if (comm->RxHeader.Identifier == comm->device_id) {  //simple logic for now, its a flag to send a message back from the device
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	f8b2 210c 	ldrh.w	r2, [r2, #268]	; 0x10c
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <process_received_message+0x1e>
		flag = 1;
 8002766:	2301      	movs	r3, #1
 8002768:	60fb      	str	r3, [r7, #12]
	}
	return flag;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <set_device_address>:


void set_device_address(CommController *comm)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
    uint8_t bit0 = (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == GPIO_PIN_RESET); // Reads PA15
 8002780:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002784:	4821      	ldr	r0, [pc, #132]	; (800280c <set_device_address+0x94>)
 8002786:	f003 fbd7 	bl	8005f38 <HAL_GPIO_ReadPin>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	73fb      	strb	r3, [r7, #15]
    uint8_t bit1 = (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == GPIO_PIN_RESET); // Reads PC10
 8002798:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800279c:	481b      	ldr	r0, [pc, #108]	; (800280c <set_device_address+0x94>)
 800279e:	f003 fbcb 	bl	8005f38 <HAL_GPIO_ReadPin>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bf0c      	ite	eq
 80027a8:	2301      	moveq	r3, #1
 80027aa:	2300      	movne	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	73bb      	strb	r3, [r7, #14]
    uint8_t bit2 = (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == GPIO_PIN_RESET); // Reads PC11
 80027b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027b4:	4815      	ldr	r0, [pc, #84]	; (800280c <set_device_address+0x94>)
 80027b6:	f003 fbbf 	bl	8005f38 <HAL_GPIO_ReadPin>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	737b      	strb	r3, [r7, #13]

    uint8_t ID = (bit2 << 2) | (bit1 << 1) | bit0;
 80027c8:	7b7b      	ldrb	r3, [r7, #13]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	b25a      	sxtb	r2, r3
 80027ce:	7bbb      	ldrb	r3, [r7, #14]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	b25b      	sxtb	r3, r3
 80027d4:	4313      	orrs	r3, r2
 80027d6:	b25a      	sxtb	r2, r3
 80027d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027dc:	4313      	orrs	r3, r2
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	733b      	strb	r3, [r7, #12]

    switch(ID)
 80027e2:	7b3b      	ldrb	r3, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <set_device_address+0x76>
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d005      	beq.n	80027f8 <set_device_address+0x80>
            comm->device_id = LEFT_SOLE_SENSE_ID;
            break;

        // Consider adding cases for other ID values if needed
    }
}
 80027ec:	e009      	b.n	8002802 <set_device_address+0x8a>
            comm->device_id = RIGHT_SOLE_SENSE_ID;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2213      	movs	r2, #19
 80027f2:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
            break;
 80027f6:	e004      	b.n	8002802 <set_device_address+0x8a>
            comm->device_id = LEFT_SOLE_SENSE_ID;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2214      	movs	r2, #20
 80027fc:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
            break;
 8002800:	bf00      	nop
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	48000800 	.word	0x48000800

08002810 <ADC_init>:
#include "contact_sensors.h"
#include "configuration.h"
#include "adc.h"
#include "dma.h"

void ADC_init(ADC_HandleTypeDef *adc, ContactSensors *sensors){
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
	sensors->adc = adc;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	621a      	str	r2, [r3, #32]
	memset(sensors->adcValues , 0 , sizeof(sensors->adcValues));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	2220      	movs	r2, #32
 8002824:	2100      	movs	r1, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f006 ff34 	bl	8009694 <memset>
	HAL_ADC_Start_DMA(sensors->adc, sensors->adcValues, NUMBER_OF_SENSORS);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	6839      	ldr	r1, [r7, #0]
 8002832:	2208      	movs	r2, #8
 8002834:	4618      	mov	r0, r3
 8002836:	f001 f9b7 	bl	8003ba8 <HAL_ADC_Start_DMA>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <ADC_update_payload>:


void ADC_update_payload(ContactSensors *sensors) {
 8002842:	b480      	push	{r7}
 8002844:	b085      	sub	sp, #20
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
    // Pointer to the current position in the payload
    uint8_t *payloadPtr = sensors->payload;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3324      	adds	r3, #36	; 0x24
 800284e:	60fb      	str	r3, [r7, #12]

    // Iterate through each ADC value
    for (int i = 0; i < NUMBER_OF_SENSORS; i++) {
 8002850:	2300      	movs	r3, #0
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	e02d      	b.n	80028b2 <ADC_update_payload+0x70>
        // Extract each byte from the 32-bit ADC value and flip the MSB for the most significant byte
        *payloadPtr++ = ((sensors->adcValues[i] >> 24) & 0xFF) ^ 0x80;  // MSB with flipped bit
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285e:	0e1b      	lsrs	r3, r3, #24
 8002860:	b2db      	uxtb	r3, r3
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	1c51      	adds	r1, r2, #1
 8002866:	60f9      	str	r1, [r7, #12]
 8002868:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 800286c:	43db      	mvns	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	7013      	strb	r3, [r2, #0]
        *payloadPtr++ = (sensors->adcValues[i] >> 16) & 0xFF;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800287a:	0c19      	lsrs	r1, r3, #16
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	60fa      	str	r2, [r7, #12]
 8002882:	b2ca      	uxtb	r2, r1
 8002884:	701a      	strb	r2, [r3, #0]
        *payloadPtr++ = (sensors->adcValues[i] >> 8) & 0xFF;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288e:	0a19      	lsrs	r1, r3, #8
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	60fa      	str	r2, [r7, #12]
 8002896:	b2ca      	uxtb	r2, r1
 8002898:	701a      	strb	r2, [r3, #0]
        *payloadPtr++ = sensors->adcValues[i] & 0xFF;                    // LSB
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	60fa      	str	r2, [r7, #12]
 80028a8:	b2ca      	uxtb	r2, r1
 80028aa:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUMBER_OF_SENSORS; i++) {
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	3301      	adds	r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b07      	cmp	r3, #7
 80028b6:	ddce      	ble.n	8002856 <ADC_update_payload+0x14>
    }
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <MX_DMA_Init+0x50>)
 80028d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d2:	4a11      	ldr	r2, [pc, #68]	; (8002918 <MX_DMA_Init+0x50>)
 80028d4:	f043 0304 	orr.w	r3, r3, #4
 80028d8:	6493      	str	r3, [r2, #72]	; 0x48
 80028da:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <MX_DMA_Init+0x50>)
 80028dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028e6:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <MX_DMA_Init+0x50>)
 80028e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ea:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <MX_DMA_Init+0x50>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6493      	str	r3, [r2, #72]	; 0x48
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <MX_DMA_Init+0x50>)
 80028f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	2100      	movs	r1, #0
 8002902:	200b      	movs	r0, #11
 8002904:	f002 f853 	bl	80049ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002908:	200b      	movs	r0, #11
 800290a:	f002 f86a 	bl	80049e2 <HAL_NVIC_EnableIRQ>

}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000

0800291c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002920:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 8002922:	4a21      	ldr	r2, [pc, #132]	; (80029a8 <MX_FDCAN1_Init+0x8c>)
 8002924:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002926:	4b1f      	ldr	r3, [pc, #124]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 8002928:	2200      	movs	r2, #0
 800292a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 800292e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002932:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002934:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800293a:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 800293c:	2200      	movs	r2, #0
 800293e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002940:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 8002942:	2200      	movs	r2, #0
 8002944:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002946:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 8002948:	2200      	movs	r2, #0
 800294a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800294c:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 800294e:	2201      	movs	r2, #1
 8002950:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8002952:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 8002954:	2202      	movs	r2, #2
 8002956:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 107;
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 800295a:	226b      	movs	r2, #107	; 0x6b
 800295c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 36;
 800295e:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 8002960:	2224      	movs	r2, #36	; 0x24
 8002962:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 6;
 8002964:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 8002966:	2206      	movs	r2, #6
 8002968:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 800296a:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 800296c:	2209      	movs	r2, #9
 800296e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 8002972:	220f      	movs	r2, #15
 8002974:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 8002978:	2209      	movs	r2, #9
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 800297e:	2201      	movs	r2, #1
 8002980:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 8002984:	2200      	movs	r2, #0
 8002986:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 800298a:	2200      	movs	r2, #0
 800298c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800298e:	4805      	ldr	r0, [pc, #20]	; (80029a4 <MX_FDCAN1_Init+0x88>)
 8002990:	f002 fab4 	bl	8004efc <HAL_FDCAN_Init>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800299a:	f000 fa7b 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000144 	.word	0x20000144
 80029a8:	40006400 	.word	0x40006400

080029ac <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b09e      	sub	sp, #120	; 0x78
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	2254      	movs	r2, #84	; 0x54
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f006 fe61 	bl	8009694 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a24      	ldr	r2, [pc, #144]	; (8002a68 <HAL_FDCAN_MspInit+0xbc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d141      	bne.n	8002a60 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80029dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80029e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029e6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029e8:	f107 0310 	add.w	r3, r7, #16
 80029ec:	4618      	mov	r0, r3
 80029ee:	f004 ff9d 	bl	800792c <HAL_RCCEx_PeriphCLKConfig>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80029f8:	f000 fa4c 	bl	8002e94 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_FDCAN_MspInit+0xc0>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a00:	4a1a      	ldr	r2, [pc, #104]	; (8002a6c <HAL_FDCAN_MspInit+0xc0>)
 8002a02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a06:	6593      	str	r3, [r2, #88]	; 0x58
 8002a08:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <HAL_FDCAN_MspInit+0xc0>)
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a14:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <HAL_FDCAN_MspInit+0xc0>)
 8002a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a18:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <HAL_FDCAN_MspInit+0xc0>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_FDCAN_MspInit+0xc0>)
 8002a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a2c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a30:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002a3e:	2309      	movs	r3, #9
 8002a40:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a46:	4619      	mov	r1, r3
 8002a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4c:	f003 f8f2 	bl	8005c34 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2100      	movs	r1, #0
 8002a54:	2015      	movs	r0, #21
 8002a56:	f001 ffaa 	bl	80049ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002a5a:	2015      	movs	r0, #21
 8002a5c:	f001 ffc1 	bl	80049e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002a60:	bf00      	nop
 8002a62:	3778      	adds	r7, #120	; 0x78
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40006400 	.word	0x40006400
 8002a6c:	40021000 	.word	0x40021000

08002a70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a76:	f107 030c 	add.w	r3, r7, #12
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	60da      	str	r2, [r3, #12]
 8002a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a86:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <MX_GPIO_Init+0xac>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	4a24      	ldr	r2, [pc, #144]	; (8002b1c <MX_GPIO_Init+0xac>)
 8002a8c:	f043 0304 	orr.w	r3, r3, #4
 8002a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a92:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <MX_GPIO_Init+0xac>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <MX_GPIO_Init+0xac>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	4a1e      	ldr	r2, [pc, #120]	; (8002b1c <MX_GPIO_Init+0xac>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aaa:	4b1c      	ldr	r3, [pc, #112]	; (8002b1c <MX_GPIO_Init+0xac>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	607b      	str	r3, [r7, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <MX_GPIO_Init+0xac>)
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aba:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <MX_GPIO_Init+0xac>)
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ac2:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <MX_GPIO_Init+0xac>)
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ad4:	4812      	ldr	r0, [pc, #72]	; (8002b20 <MX_GPIO_Init+0xb0>)
 8002ad6:	f003 fa47 	bl	8005f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8002ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ade:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8002aec:	f107 030c 	add.w	r3, r7, #12
 8002af0:	4619      	mov	r1, r3
 8002af2:	480b      	ldr	r0, [pc, #44]	; (8002b20 <MX_GPIO_Init+0xb0>)
 8002af4:	f003 f89e 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FootPin0_Pin|FootPin1_Pin|FootPIn2_Pin;
 8002af8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b06:	f107 030c 	add.w	r3, r7, #12
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4804      	ldr	r0, [pc, #16]	; (8002b20 <MX_GPIO_Init+0xb0>)
 8002b0e:	f003 f891 	bl	8005c34 <HAL_GPIO_Init>

}
 8002b12:	bf00      	nop
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	48000800 	.word	0x48000800

08002b24 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b28:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <MX_I2C1_Init+0x74>)
 8002b2a:	4a1c      	ldr	r2, [pc, #112]	; (8002b9c <MX_I2C1_Init+0x78>)
 8002b2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002b2e:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <MX_I2C1_Init+0x74>)
 8002b30:	4a1b      	ldr	r2, [pc, #108]	; (8002ba0 <MX_I2C1_Init+0x7c>)
 8002b32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b34:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <MX_I2C1_Init+0x74>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <MX_I2C1_Init+0x74>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b40:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <MX_I2C1_Init+0x74>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b46:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <MX_I2C1_Init+0x74>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b4c:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <MX_I2C1_Init+0x74>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <MX_I2C1_Init+0x74>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <MX_I2C1_Init+0x74>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b5e:	480e      	ldr	r0, [pc, #56]	; (8002b98 <MX_I2C1_Init+0x74>)
 8002b60:	f003 fa1a 	bl	8005f98 <HAL_I2C_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b6a:	f000 f993 	bl	8002e94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4809      	ldr	r0, [pc, #36]	; (8002b98 <MX_I2C1_Init+0x74>)
 8002b72:	f004 f86b 	bl	8006c4c <HAL_I2CEx_ConfigAnalogFilter>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b7c:	f000 f98a 	bl	8002e94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b80:	2100      	movs	r1, #0
 8002b82:	4805      	ldr	r0, [pc, #20]	; (8002b98 <MX_I2C1_Init+0x74>)
 8002b84:	f004 f8ad 	bl	8006ce2 <HAL_I2CEx_ConfigDigitalFilter>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b8e:	f000 f981 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200001a8 	.word	0x200001a8
 8002b9c:	40005400 	.word	0x40005400
 8002ba0:	00303d5b 	.word	0x00303d5b

08002ba4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b0a0      	sub	sp, #128	; 0x80
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bbc:	f107 0318 	add.w	r3, r7, #24
 8002bc0:	2254      	movs	r2, #84	; 0x54
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f006 fd65 	bl	8009694 <memset>
  if(i2cHandle->Instance==I2C1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a2d      	ldr	r2, [pc, #180]	; (8002c84 <HAL_I2C_MspInit+0xe0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d153      	bne.n	8002c7c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002bd4:	2340      	movs	r3, #64	; 0x40
 8002bd6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bdc:	f107 0318 	add.w	r3, r7, #24
 8002be0:	4618      	mov	r0, r3
 8002be2:	f004 fea3 	bl	800792c <HAL_RCCEx_PeriphCLKConfig>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002bec:	f000 f952 	bl	8002e94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_I2C_MspInit+0xe4>)
 8002bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf4:	4a24      	ldr	r2, [pc, #144]	; (8002c88 <HAL_I2C_MspInit+0xe4>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bfc:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <HAL_I2C_MspInit+0xe4>)
 8002bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c08:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <HAL_I2C_MspInit+0xe4>)
 8002c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0c:	4a1e      	ldr	r2, [pc, #120]	; (8002c88 <HAL_I2C_MspInit+0xe4>)
 8002c0e:	f043 0302 	orr.w	r3, r3, #2
 8002c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c14:	4b1c      	ldr	r3, [pc, #112]	; (8002c88 <HAL_I2C_MspInit+0xe4>)
 8002c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c24:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c26:	2312      	movs	r3, #18
 8002c28:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c32:	2304      	movs	r3, #4
 8002c34:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c36:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c40:	f002 fff8 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c48:	2312      	movs	r3, #18
 8002c4a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c50:	2300      	movs	r3, #0
 8002c52:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c54:	2304      	movs	r3, #4
 8002c56:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	480b      	ldr	r0, [pc, #44]	; (8002c8c <HAL_I2C_MspInit+0xe8>)
 8002c60:	f002 ffe8 	bl	8005c34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c64:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <HAL_I2C_MspInit+0xe4>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c68:	4a07      	ldr	r2, [pc, #28]	; (8002c88 <HAL_I2C_MspInit+0xe4>)
 8002c6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_I2C_MspInit+0xe4>)
 8002c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3780      	adds	r7, #128	; 0x80
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40005400 	.word	0x40005400
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	48000400 	.word	0x48000400

08002c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c94:	f000 fb11 	bl	80032ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c98:	f000 f86c 	bl	8002d74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c9c:	f7ff fee8 	bl	8002a70 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ca0:	f7ff fe12 	bl	80028c8 <MX_DMA_Init>
  MX_ADC2_Init();
 8002ca4:	f7fd fd6c 	bl	8000780 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8002ca8:	f000 fa24 	bl	80030f4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002cac:	f000 f9ac 	bl	8003008 <MX_TIM3_Init>
  MX_FDCAN1_Init();
 8002cb0:	f7ff fe34 	bl	800291c <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8002cb4:	f7ff ff36 	bl	8002b24 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  soul_sense.imu = &imu;
 8002cb8:	4b23      	ldr	r3, [pc, #140]	; (8002d48 <main+0xb8>)
 8002cba:	4a24      	ldr	r2, [pc, #144]	; (8002d4c <main+0xbc>)
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
  soul_sense.contact_sensors = &contact_sensors;
 8002cbe:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <main+0xb8>)
 8002cc0:	4a23      	ldr	r2, [pc, #140]	; (8002d50 <main+0xc0>)
 8002cc2:	645a      	str	r2, [r3, #68]	; 0x44
  soul_sense.version = &fw_version;
 8002cc4:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <main+0xb8>)
 8002cc6:	4a23      	ldr	r2, [pc, #140]	; (8002d54 <main+0xc4>)
 8002cc8:	649a      	str	r2, [r3, #72]	; 0x48
  soul_init(&soul_sense , &hi2c1 , &hadc2); // inits the soulsense, imu, contact sensors
 8002cca:	4a23      	ldr	r2, [pc, #140]	; (8002d58 <main+0xc8>)
 8002ccc:	4923      	ldr	r1, [pc, #140]	; (8002d5c <main+0xcc>)
 8002cce:	481e      	ldr	r0, [pc, #120]	; (8002d48 <main+0xb8>)
 8002cd0:	f7fd fcdc 	bl	800068c <soul_init>
  comm_controller_init(&hfdcan1 , &comm_controller);
 8002cd4:	4922      	ldr	r1, [pc, #136]	; (8002d60 <main+0xd0>)
 8002cd6:	4823      	ldr	r0, [pc, #140]	; (8002d64 <main+0xd4>)
 8002cd8:	f7ff fca5 	bl	8002626 <comm_controller_init>

  currentState = IDLE;
 8002cdc:	4b22      	ldr	r3, [pc, #136]	; (8002d68 <main+0xd8>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim3); // starting timer IT
 8002ce2:	4822      	ldr	r0, [pc, #136]	; (8002d6c <main+0xdc>)
 8002ce4:	f005 f8c8 	bl	8007e78 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch(currentState) {
 8002ce8:	4b1f      	ldr	r3, [pc, #124]	; (8002d68 <main+0xd8>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d00e      	beq.n	8002d0e <main+0x7e>
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	dc22      	bgt.n	8002d3a <main+0xaa>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d024      	beq.n	8002d42 <main+0xb2>
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d11e      	bne.n	8002d3a <main+0xaa>
	  	  case IDLE:
		  	  break;


	      case READ_IMU:
	    	  imu_read_data(soul_sense.imu);
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <main+0xb8>)
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fc3b 	bl	800057c <imu_read_data>
	    	  currentState = IDLE;
 8002d06:	4b18      	ldr	r3, [pc, #96]	; (8002d68 <main+0xd8>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
	          break;
 8002d0c:	e01a      	b.n	8002d44 <main+0xb4>


	      case RECEIVE_N_TRANSMIT:
	    	  //received a request to send data
	    	  if(process_received_message(&comm_controller)){
 8002d0e:	4814      	ldr	r0, [pc, #80]	; (8002d60 <main+0xd0>)
 8002d10:	f7ff fd1c 	bl	800274c <process_received_message>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d006      	beq.n	8002d28 <main+0x98>
	    		  soul_update_payload(&soul_sense);  //converting the data into byte array
 8002d1a:	480b      	ldr	r0, [pc, #44]	; (8002d48 <main+0xb8>)
 8002d1c:	f7fd fcd7 	bl	80006ce <soul_update_payload>
				  send_message(&comm_controller, soul_sense.payload);  //sending the byte array
 8002d20:	4909      	ldr	r1, [pc, #36]	; (8002d48 <main+0xb8>)
 8002d22:	480f      	ldr	r0, [pc, #60]	; (8002d60 <main+0xd0>)
 8002d24:	f7ff fcfb 	bl	800271e <send_message>
	    	  }

	    	  memset(comm_controller.RxData, 0 , RX_BUFFER_SIZE);   //deleting used content from RxData buffer
 8002d28:	2240      	movs	r2, #64	; 0x40
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4810      	ldr	r0, [pc, #64]	; (8002d70 <main+0xe0>)
 8002d2e:	f006 fcb1 	bl	8009694 <memset>
	    	  currentState = IDLE;
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <main+0xd8>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
	          break;
 8002d38:	e004      	b.n	8002d44 <main+0xb4>


	      default:
	    	  currentState = IDLE;
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <main+0xd8>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
	          break;
 8002d40:	e000      	b.n	8002d44 <main+0xb4>
		  	  break;
 8002d42:	bf00      	nop
	  switch(currentState) {
 8002d44:	e7d0      	b.n	8002ce8 <main+0x58>
 8002d46:	bf00      	nop
 8002d48:	200001f8 	.word	0x200001f8
 8002d4c:	20000354 	.word	0x20000354
 8002d50:	200003a0 	.word	0x200003a0
 8002d54:	200003e4 	.word	0x200003e4
 8002d58:	20000078 	.word	0x20000078
 8002d5c:	200001a8 	.word	0x200001a8
 8002d60:	20000244 	.word	0x20000244
 8002d64:	20000144 	.word	0x20000144
 8002d68:	200001f4 	.word	0x200001f4
 8002d6c:	200003ec 	.word	0x200003ec
 8002d70:	20000310 	.word	0x20000310

08002d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b094      	sub	sp, #80	; 0x50
 8002d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d7a:	f107 0318 	add.w	r3, r7, #24
 8002d7e:	2238      	movs	r2, #56	; 0x38
 8002d80:	2100      	movs	r1, #0
 8002d82:	4618      	mov	r0, r3
 8002d84:	f006 fc86 	bl	8009694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d88:	1d3b      	adds	r3, r7, #4
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	60da      	str	r2, [r3, #12]
 8002d94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d9a:	f003 ffef 	bl	8006d7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002da2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002da8:	2340      	movs	r3, #64	; 0x40
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dac:	2302      	movs	r3, #2
 8002dae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002db0:	2302      	movs	r3, #2
 8002db2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002db4:	2301      	movs	r3, #1
 8002db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 18;
 8002db8:	2312      	movs	r3, #18
 8002dba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dc8:	f107 0318 	add.w	r3, r7, #24
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f004 f879 	bl	8006ec4 <HAL_RCC_OscConfig>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <SystemClock_Config+0x68>
  {
    Error_Handler();
 8002dd8:	f000 f85c 	bl	8002e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ddc:	230f      	movs	r3, #15
 8002dde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002de0:	2303      	movs	r3, #3
 8002de2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002de8:	2300      	movs	r3, #0
 8002dea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	2104      	movs	r1, #4
 8002df4:	4618      	mov	r0, r3
 8002df6:	f004 fb7d 	bl	80074f4 <HAL_RCC_ClockConfig>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002e00:	f000 f848 	bl	8002e94 <Error_Handler>
  }
}
 8002e04:	bf00      	nop
 8002e06:	3750      	adds	r7, #80	; 0x50
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) //fdcan callback IT
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_FDCAN_RxFifo0Callback+0x2a>
	{
		if (HAL_FDCAN_GetRxMessage(&comm_controller.fdcan, FDCAN_RX_FIFO0, &comm_controller.RxHeader, comm_controller.RxData) != HAL_OK)
 8002e20:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002e22:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <HAL_FDCAN_RxFifo0Callback+0x50>)
 8002e24:	2140      	movs	r1, #64	; 0x40
 8002e26:	480e      	ldr	r0, [pc, #56]	; (8002e60 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8002e28:	f002 faba 	bl	80053a0 <HAL_FDCAN_GetRxMessage>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_FDCAN_RxFifo0Callback+0x2a>
		{
			Error_Handler();
 8002e32:	f000 f82f 	bl	8002e94 <Error_Handler>
		}
	}
	currentState = RECEIVE_N_TRANSMIT;
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8002e38:	2203      	movs	r2, #3
 8002e3a:	701a      	strb	r2, [r3, #0]
	if (HAL_FDCAN_ActivateNotification(&comm_controller.fdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2101      	movs	r1, #1
 8002e40:	4807      	ldr	r0, [pc, #28]	; (8002e60 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8002e42:	f002 fb87 	bl	8005554 <HAL_FDCAN_ActivateNotification>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_FDCAN_RxFifo0Callback+0x44>
	{
		Error_Handler();
 8002e4c:	f000 f822 	bl	8002e94 <Error_Handler>
	}
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000310 	.word	0x20000310
 8002e5c:	2000026c 	.word	0x2000026c
 8002e60:	20000294 	.word	0x20000294
 8002e64:	200001f4 	.word	0x200001f4

08002e68 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)   //timer callback IT
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a05      	ldr	r2, [pc, #20]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d102      	bne.n	8002e80 <HAL_TIM_PeriodElapsedCallback+0x18>
		currentState = READ_IMU;
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
	}
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	40000400 	.word	0x40000400
 8002e90:	200001f4 	.word	0x200001f4

08002e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e98:	b672      	cpsid	i
}
 8002e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e9c:	e7fe      	b.n	8002e9c <Error_Handler+0x8>
	...

08002ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_MspInit+0x44>)
 8002ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ee4 <HAL_MspInit+0x44>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6613      	str	r3, [r2, #96]	; 0x60
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <HAL_MspInit+0x44>)
 8002eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_MspInit+0x44>)
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	4a08      	ldr	r2, [pc, #32]	; (8002ee4 <HAL_MspInit+0x44>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_MspInit+0x44>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000

08002ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002eec:	e7fe      	b.n	8002eec <NMI_Handler+0x4>

08002eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ef2:	e7fe      	b.n	8002ef2 <HardFault_Handler+0x4>

08002ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ef8:	e7fe      	b.n	8002ef8 <MemManage_Handler+0x4>

08002efa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002efe:	e7fe      	b.n	8002efe <BusFault_Handler+0x4>

08002f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f04:	e7fe      	b.n	8002f04 <UsageFault_Handler+0x4>

08002f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f34:	f000 fa14 	bl	8003360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f38:	bf00      	nop
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002f40:	4802      	ldr	r0, [pc, #8]	; (8002f4c <DMA1_Channel1_IRQHandler+0x10>)
 8002f42:	f001 fe8c 	bl	8004c5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	200000e4 	.word	0x200000e4

08002f50 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002f54:	4802      	ldr	r0, [pc, #8]	; (8002f60 <FDCAN1_IT0_IRQHandler+0x10>)
 8002f56:	f002 fbe3 	bl	8005720 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000144 	.word	0x20000144

08002f64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f68:	4802      	ldr	r0, [pc, #8]	; (8002f74 <TIM3_IRQHandler+0x10>)
 8002f6a:	f004 fffd 	bl	8007f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200003ec 	.word	0x200003ec

08002f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f80:	4a14      	ldr	r2, [pc, #80]	; (8002fd4 <_sbrk+0x5c>)
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <_sbrk+0x60>)
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f8c:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <_sbrk+0x64>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d102      	bne.n	8002f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f94:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <_sbrk+0x64>)
 8002f96:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <_sbrk+0x68>)
 8002f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <_sbrk+0x64>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d207      	bcs.n	8002fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fa8:	f006 fb8c 	bl	80096c4 <__errno>
 8002fac:	4603      	mov	r3, r0
 8002fae:	220c      	movs	r2, #12
 8002fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fb6:	e009      	b.n	8002fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fb8:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <_sbrk+0x64>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fbe:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <_sbrk+0x64>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	4a05      	ldr	r2, [pc, #20]	; (8002fdc <_sbrk+0x64>)
 8002fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fca:	68fb      	ldr	r3, [r7, #12]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20020000 	.word	0x20020000
 8002fd8:	00000400 	.word	0x00000400
 8002fdc:	200003e8 	.word	0x200003e8
 8002fe0:	20000618 	.word	0x20000618

08002fe4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <SystemInit+0x20>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	4a05      	ldr	r2, [pc, #20]	; (8003004 <SystemInit+0x20>)
 8002ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800300e:	f107 0310 	add.w	r3, r7, #16
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	609a      	str	r2, [r3, #8]
 800301a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800301c:	1d3b      	adds	r3, r7, #4
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003026:	4b1e      	ldr	r3, [pc, #120]	; (80030a0 <MX_TIM3_Init+0x98>)
 8003028:	4a1e      	ldr	r2, [pc, #120]	; (80030a4 <MX_TIM3_Init+0x9c>)
 800302a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 800302c:	4b1c      	ldr	r3, [pc, #112]	; (80030a0 <MX_TIM3_Init+0x98>)
 800302e:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8003032:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003034:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <MX_TIM3_Init+0x98>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 800303a:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <MX_TIM3_Init+0x98>)
 800303c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003040:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003042:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <MX_TIM3_Init+0x98>)
 8003044:	2200      	movs	r2, #0
 8003046:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <MX_TIM3_Init+0x98>)
 800304a:	2200      	movs	r2, #0
 800304c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800304e:	4814      	ldr	r0, [pc, #80]	; (80030a0 <MX_TIM3_Init+0x98>)
 8003050:	f004 feba 	bl	8007dc8 <HAL_TIM_Base_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800305a:	f7ff ff1b 	bl	8002e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800305e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003062:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003064:	f107 0310 	add.w	r3, r7, #16
 8003068:	4619      	mov	r1, r3
 800306a:	480d      	ldr	r0, [pc, #52]	; (80030a0 <MX_TIM3_Init+0x98>)
 800306c:	f005 f8fc 	bl	8008268 <HAL_TIM_ConfigClockSource>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8003076:	f7ff ff0d 	bl	8002e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003082:	1d3b      	adds	r3, r7, #4
 8003084:	4619      	mov	r1, r3
 8003086:	4806      	ldr	r0, [pc, #24]	; (80030a0 <MX_TIM3_Init+0x98>)
 8003088:	f005 fb70 	bl	800876c <HAL_TIMEx_MasterConfigSynchronization>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8003092:	f7ff feff 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003096:	bf00      	nop
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	200003ec 	.word	0x200003ec
 80030a4:	40000400 	.word	0x40000400

080030a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0d      	ldr	r2, [pc, #52]	; (80030ec <HAL_TIM_Base_MspInit+0x44>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d113      	bne.n	80030e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <HAL_TIM_Base_MspInit+0x48>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	4a0c      	ldr	r2, [pc, #48]	; (80030f0 <HAL_TIM_Base_MspInit+0x48>)
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	6593      	str	r3, [r2, #88]	; 0x58
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_TIM_Base_MspInit+0x48>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80030d2:	2200      	movs	r2, #0
 80030d4:	2100      	movs	r1, #0
 80030d6:	201d      	movs	r0, #29
 80030d8:	f001 fc69 	bl	80049ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80030dc:	201d      	movs	r0, #29
 80030de:	f001 fc80 	bl	80049e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40000400 	.word	0x40000400
 80030f0:	40021000 	.word	0x40021000

080030f4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030f8:	4b22      	ldr	r3, [pc, #136]	; (8003184 <MX_USART3_UART_Init+0x90>)
 80030fa:	4a23      	ldr	r2, [pc, #140]	; (8003188 <MX_USART3_UART_Init+0x94>)
 80030fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80030fe:	4b21      	ldr	r3, [pc, #132]	; (8003184 <MX_USART3_UART_Init+0x90>)
 8003100:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003104:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003106:	4b1f      	ldr	r3, [pc, #124]	; (8003184 <MX_USART3_UART_Init+0x90>)
 8003108:	2200      	movs	r2, #0
 800310a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800310c:	4b1d      	ldr	r3, [pc, #116]	; (8003184 <MX_USART3_UART_Init+0x90>)
 800310e:	2200      	movs	r2, #0
 8003110:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003112:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <MX_USART3_UART_Init+0x90>)
 8003114:	2200      	movs	r2, #0
 8003116:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003118:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <MX_USART3_UART_Init+0x90>)
 800311a:	220c      	movs	r2, #12
 800311c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800311e:	4b19      	ldr	r3, [pc, #100]	; (8003184 <MX_USART3_UART_Init+0x90>)
 8003120:	2200      	movs	r2, #0
 8003122:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003124:	4b17      	ldr	r3, [pc, #92]	; (8003184 <MX_USART3_UART_Init+0x90>)
 8003126:	2200      	movs	r2, #0
 8003128:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800312a:	4b16      	ldr	r3, [pc, #88]	; (8003184 <MX_USART3_UART_Init+0x90>)
 800312c:	2200      	movs	r2, #0
 800312e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <MX_USART3_UART_Init+0x90>)
 8003132:	2200      	movs	r2, #0
 8003134:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003136:	4b13      	ldr	r3, [pc, #76]	; (8003184 <MX_USART3_UART_Init+0x90>)
 8003138:	2200      	movs	r2, #0
 800313a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800313c:	4811      	ldr	r0, [pc, #68]	; (8003184 <MX_USART3_UART_Init+0x90>)
 800313e:	f005 fbf1 	bl	8008924 <HAL_UART_Init>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003148:	f7ff fea4 	bl	8002e94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800314c:	2100      	movs	r1, #0
 800314e:	480d      	ldr	r0, [pc, #52]	; (8003184 <MX_USART3_UART_Init+0x90>)
 8003150:	f006 f922 	bl	8009398 <HAL_UARTEx_SetTxFifoThreshold>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800315a:	f7ff fe9b 	bl	8002e94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800315e:	2100      	movs	r1, #0
 8003160:	4808      	ldr	r0, [pc, #32]	; (8003184 <MX_USART3_UART_Init+0x90>)
 8003162:	f006 f957 	bl	8009414 <HAL_UARTEx_SetRxFifoThreshold>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800316c:	f7ff fe92 	bl	8002e94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003170:	4804      	ldr	r0, [pc, #16]	; (8003184 <MX_USART3_UART_Init+0x90>)
 8003172:	f006 f8d8 	bl	8009326 <HAL_UARTEx_DisableFifoMode>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800317c:	f7ff fe8a 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000438 	.word	0x20000438
 8003188:	40004800 	.word	0x40004800

0800318c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b09e      	sub	sp, #120	; 0x78
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003194:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031a4:	f107 0310 	add.w	r3, r7, #16
 80031a8:	2254      	movs	r2, #84	; 0x54
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f006 fa71 	bl	8009694 <memset>
  if(uartHandle->Instance==USART3)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a1f      	ldr	r2, [pc, #124]	; (8003234 <HAL_UART_MspInit+0xa8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d136      	bne.n	800322a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80031bc:	2304      	movs	r3, #4
 80031be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031c4:	f107 0310 	add.w	r3, r7, #16
 80031c8:	4618      	mov	r0, r3
 80031ca:	f004 fbaf 	bl	800792c <HAL_RCCEx_PeriphCLKConfig>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80031d4:	f7ff fe5e 	bl	8002e94 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80031d8:	4b17      	ldr	r3, [pc, #92]	; (8003238 <HAL_UART_MspInit+0xac>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	4a16      	ldr	r2, [pc, #88]	; (8003238 <HAL_UART_MspInit+0xac>)
 80031de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e2:	6593      	str	r3, [r2, #88]	; 0x58
 80031e4:	4b14      	ldr	r3, [pc, #80]	; (8003238 <HAL_UART_MspInit+0xac>)
 80031e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_UART_MspInit+0xac>)
 80031f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f4:	4a10      	ldr	r2, [pc, #64]	; (8003238 <HAL_UART_MspInit+0xac>)
 80031f6:	f043 0302 	orr.w	r3, r3, #2
 80031fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031fc:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_UART_MspInit+0xac>)
 80031fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003208:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800320c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320e:	2302      	movs	r3, #2
 8003210:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003216:	2300      	movs	r3, #0
 8003218:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800321a:	2307      	movs	r3, #7
 800321c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800321e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003222:	4619      	mov	r1, r3
 8003224:	4805      	ldr	r0, [pc, #20]	; (800323c <HAL_UART_MspInit+0xb0>)
 8003226:	f002 fd05 	bl	8005c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800322a:	bf00      	nop
 800322c:	3778      	adds	r7, #120	; 0x78
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40004800 	.word	0x40004800
 8003238:	40021000 	.word	0x40021000
 800323c:	48000400 	.word	0x48000400

08003240 <version_init>:
 */


#include "version.h"

void version_init(FwVersion* version){
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	version->version[0] = HW_VERSION;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
	version->version[1] = SW_MAJOR_VERSION;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	705a      	strb	r2, [r3, #1]
	version->version[2] = SW_MINOR_VERSION;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	709a      	strb	r2, [r3, #2]
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003268:	480d      	ldr	r0, [pc, #52]	; (80032a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800326a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800326c:	480d      	ldr	r0, [pc, #52]	; (80032a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800326e:	490e      	ldr	r1, [pc, #56]	; (80032a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003270:	4a0e      	ldr	r2, [pc, #56]	; (80032ac <LoopForever+0xe>)
  movs r3, #0
 8003272:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003274:	e002      	b.n	800327c <LoopCopyDataInit>

08003276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800327a:	3304      	adds	r3, #4

0800327c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800327c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800327e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003280:	d3f9      	bcc.n	8003276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003282:	4a0b      	ldr	r2, [pc, #44]	; (80032b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003284:	4c0b      	ldr	r4, [pc, #44]	; (80032b4 <LoopForever+0x16>)
  movs r3, #0
 8003286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003288:	e001      	b.n	800328e <LoopFillZerobss>

0800328a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800328a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800328c:	3204      	adds	r2, #4

0800328e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800328e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003290:	d3fb      	bcc.n	800328a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003292:	f7ff fea7 	bl	8002fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003296:	f006 fa1b 	bl	80096d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800329a:	f7ff fcf9 	bl	8002c90 <main>

0800329e <LoopForever>:

LoopForever:
    b LoopForever
 800329e:	e7fe      	b.n	800329e <LoopForever>
  ldr   r0, =_estack
 80032a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80032ac:	080097b0 	.word	0x080097b0
  ldr r2, =_sbss
 80032b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80032b4:	20000614 	.word	0x20000614

080032b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032b8:	e7fe      	b.n	80032b8 <ADC1_2_IRQHandler>

080032ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c4:	2003      	movs	r0, #3
 80032c6:	f001 fb67 	bl	8004998 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032ca:	200f      	movs	r0, #15
 80032cc:	f000 f80e 	bl	80032ec <HAL_InitTick>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	71fb      	strb	r3, [r7, #7]
 80032da:	e001      	b.n	80032e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032dc:	f7ff fde0 	bl	8002ea0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032e0:	79fb      	ldrb	r3, [r7, #7]

}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80032f8:	4b16      	ldr	r3, [pc, #88]	; (8003354 <HAL_InitTick+0x68>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d022      	beq.n	8003346 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003300:	4b15      	ldr	r3, [pc, #84]	; (8003358 <HAL_InitTick+0x6c>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b13      	ldr	r3, [pc, #76]	; (8003354 <HAL_InitTick+0x68>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800330c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003310:	fbb2 f3f3 	udiv	r3, r2, r3
 8003314:	4618      	mov	r0, r3
 8003316:	f001 fb72 	bl	80049fe <HAL_SYSTICK_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10f      	bne.n	8003340 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b0f      	cmp	r3, #15
 8003324:	d809      	bhi.n	800333a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003326:	2200      	movs	r2, #0
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800332e:	f001 fb3e 	bl	80049ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003332:	4a0a      	ldr	r2, [pc, #40]	; (800335c <HAL_InitTick+0x70>)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	e007      	b.n	800334a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	e004      	b.n	800334a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
 8003344:	e001      	b.n	800334a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800334a:	7bfb      	ldrb	r3, [r7, #15]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20000008 	.word	0x20000008
 8003358:	20000000 	.word	0x20000000
 800335c:	20000004 	.word	0x20000004

08003360 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_IncTick+0x1c>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_IncTick+0x20>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4413      	add	r3, r2
 800336e:	4a03      	ldr	r2, [pc, #12]	; (800337c <HAL_IncTick+0x1c>)
 8003370:	6013      	str	r3, [r2, #0]
}
 8003372:	bf00      	nop
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	200004c8 	.word	0x200004c8
 8003380:	20000008 	.word	0x20000008

08003384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return uwTick;
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <HAL_GetTick+0x14>)
 800338a:	681b      	ldr	r3, [r3, #0]
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	200004c8 	.word	0x200004c8

0800339c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a4:	f7ff ffee 	bl	8003384 <HAL_GetTick>
 80033a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033b4:	d004      	beq.n	80033c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <HAL_Delay+0x40>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4413      	add	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033c0:	bf00      	nop
 80033c2:	f7ff ffdf 	bl	8003384 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d8f7      	bhi.n	80033c2 <HAL_Delay+0x26>
  {
  }
}
 80033d2:	bf00      	nop
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000008 	.word	0x20000008

080033e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	609a      	str	r2, [r3, #8]
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	609a      	str	r2, [r3, #8]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	3360      	adds	r3, #96	; 0x60
 800345a:	461a      	mov	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4b08      	ldr	r3, [pc, #32]	; (800348c <LL_ADC_SetOffset+0x44>)
 800346a:	4013      	ands	r3, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	4313      	orrs	r3, r2
 8003478:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003480:	bf00      	nop
 8003482:	371c      	adds	r7, #28
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	03fff000 	.word	0x03fff000

08003490 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3360      	adds	r3, #96	; 0x60
 800349e:	461a      	mov	r2, r3
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3360      	adds	r3, #96	; 0x60
 80034cc:	461a      	mov	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	431a      	orrs	r2, r3
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b087      	sub	sp, #28
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3360      	adds	r3, #96	; 0x60
 8003502:	461a      	mov	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	431a      	orrs	r2, r3
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800351c:	bf00      	nop
 800351e:	371c      	adds	r7, #28
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3360      	adds	r3, #96	; 0x60
 8003538:	461a      	mov	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	431a      	orrs	r2, r3
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	615a      	str	r2, [r3, #20]
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b087      	sub	sp, #28
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3330      	adds	r3, #48	; 0x30
 80035ba:	461a      	mov	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	4413      	add	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	211f      	movs	r1, #31
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	401a      	ands	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	0e9b      	lsrs	r3, r3, #26
 80035e2:	f003 011f 	and.w	r1, r3, #31
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	431a      	orrs	r2, r3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003602:	b480      	push	{r7}
 8003604:	b087      	sub	sp, #28
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	3314      	adds	r3, #20
 8003612:	461a      	mov	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	0e5b      	lsrs	r3, r3, #25
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	4413      	add	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	0d1b      	lsrs	r3, r3, #20
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	2107      	movs	r1, #7
 8003630:	fa01 f303 	lsl.w	r3, r1, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	401a      	ands	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	0d1b      	lsrs	r3, r3, #20
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	fa01 f303 	lsl.w	r3, r1, r3
 8003646:	431a      	orrs	r2, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800364c:	bf00      	nop
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a0f      	ldr	r2, [pc, #60]	; (80036a4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d10a      	bne.n	8003682 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003678:	431a      	orrs	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003680:	e00a      	b.n	8003698 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368e:	43db      	mvns	r3, r3
 8003690:	401a      	ands	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	407f0000 	.word	0x407f0000

080036a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 031f 	and.w	r3, r3, #31
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80036d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6093      	str	r3, [r2, #8]
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036fc:	d101      	bne.n	8003702 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003720:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003724:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003748:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800374c:	d101      	bne.n	8003752 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003770:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003774:	f043 0201 	orr.w	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <LL_ADC_IsEnabled+0x18>
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <LL_ADC_IsEnabled+0x1a>
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037c2:	f043 0204 	orr.w	r2, r3, #4
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d101      	bne.n	80037ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b08      	cmp	r3, #8
 800380e:	d101      	bne.n	8003814 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003824:	b590      	push	{r4, r7, lr}
 8003826:	b089      	sub	sp, #36	; 0x24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003830:	2300      	movs	r3, #0
 8003832:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e1af      	b.n	8003b9e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d109      	bne.n	8003860 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7fd f871 	bl	8000934 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff ff3f 	bl	80036e8 <LL_ADC_IsDeepPowerDownEnabled>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d004      	beq.n	800387a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff ff25 	bl	80036c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff ff5a 	bl	8003738 <LL_ADC_IsInternalRegulatorEnabled>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d115      	bne.n	80038b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff ff3e 	bl	8003710 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003894:	4b9f      	ldr	r3, [pc, #636]	; (8003b14 <HAL_ADC_Init+0x2f0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	099b      	lsrs	r3, r3, #6
 800389a:	4a9f      	ldr	r2, [pc, #636]	; (8003b18 <HAL_ADC_Init+0x2f4>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	3301      	adds	r3, #1
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038a8:	e002      	b.n	80038b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f9      	bne.n	80038aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff ff3c 	bl	8003738 <LL_ADC_IsInternalRegulatorEnabled>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10d      	bne.n	80038e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ca:	f043 0210 	orr.w	r2, r3, #16
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d6:	f043 0201 	orr.w	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff ff75 	bl	80037d6 <LL_ADC_REG_IsConversionOngoing>
 80038ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f040 8148 	bne.w	8003b8c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f040 8144 	bne.w	8003b8c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003908:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800390c:	f043 0202 	orr.w	r2, r3, #2
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff ff35 	bl	8003788 <LL_ADC_IsEnabled>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d141      	bne.n	80039a8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800392c:	d004      	beq.n	8003938 <HAL_ADC_Init+0x114>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a7a      	ldr	r2, [pc, #488]	; (8003b1c <HAL_ADC_Init+0x2f8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d10f      	bne.n	8003958 <HAL_ADC_Init+0x134>
 8003938:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800393c:	f7ff ff24 	bl	8003788 <LL_ADC_IsEnabled>
 8003940:	4604      	mov	r4, r0
 8003942:	4876      	ldr	r0, [pc, #472]	; (8003b1c <HAL_ADC_Init+0x2f8>)
 8003944:	f7ff ff20 	bl	8003788 <LL_ADC_IsEnabled>
 8003948:	4603      	mov	r3, r0
 800394a:	4323      	orrs	r3, r4
 800394c:	2b00      	cmp	r3, #0
 800394e:	bf0c      	ite	eq
 8003950:	2301      	moveq	r3, #1
 8003952:	2300      	movne	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	e012      	b.n	800397e <HAL_ADC_Init+0x15a>
 8003958:	4871      	ldr	r0, [pc, #452]	; (8003b20 <HAL_ADC_Init+0x2fc>)
 800395a:	f7ff ff15 	bl	8003788 <LL_ADC_IsEnabled>
 800395e:	4604      	mov	r4, r0
 8003960:	4870      	ldr	r0, [pc, #448]	; (8003b24 <HAL_ADC_Init+0x300>)
 8003962:	f7ff ff11 	bl	8003788 <LL_ADC_IsEnabled>
 8003966:	4603      	mov	r3, r0
 8003968:	431c      	orrs	r4, r3
 800396a:	486f      	ldr	r0, [pc, #444]	; (8003b28 <HAL_ADC_Init+0x304>)
 800396c:	f7ff ff0c 	bl	8003788 <LL_ADC_IsEnabled>
 8003970:	4603      	mov	r3, r0
 8003972:	4323      	orrs	r3, r4
 8003974:	2b00      	cmp	r3, #0
 8003976:	bf0c      	ite	eq
 8003978:	2301      	moveq	r3, #1
 800397a:	2300      	movne	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d012      	beq.n	80039a8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800398a:	d004      	beq.n	8003996 <HAL_ADC_Init+0x172>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a62      	ldr	r2, [pc, #392]	; (8003b1c <HAL_ADC_Init+0x2f8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d101      	bne.n	800399a <HAL_ADC_Init+0x176>
 8003996:	4a65      	ldr	r2, [pc, #404]	; (8003b2c <HAL_ADC_Init+0x308>)
 8003998:	e000      	b.n	800399c <HAL_ADC_Init+0x178>
 800399a:	4a65      	ldr	r2, [pc, #404]	; (8003b30 <HAL_ADC_Init+0x30c>)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4619      	mov	r1, r3
 80039a2:	4610      	mov	r0, r2
 80039a4:	f7ff fd1c 	bl	80033e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	7f5b      	ldrb	r3, [r3, #29]
 80039ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80039b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80039be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039c6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d106      	bne.n	80039e4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	3b01      	subs	r3, #1
 80039dc:	045b      	lsls	r3, r3, #17
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d009      	beq.n	8003a00 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	4b4b      	ldr	r3, [pc, #300]	; (8003b34 <HAL_ADC_Init+0x310>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	69b9      	ldr	r1, [r7, #24]
 8003a10:	430b      	orrs	r3, r1
 8003a12:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fed1 	bl	80037d6 <LL_ADC_REG_IsConversionOngoing>
 8003a34:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff fede 	bl	80037fc <LL_ADC_INJ_IsConversionOngoing>
 8003a40:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d17f      	bne.n	8003b48 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d17c      	bne.n	8003b48 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a52:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a5a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a6a:	f023 0302 	bic.w	r3, r3, #2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	69b9      	ldr	r1, [r7, #24]
 8003a74:	430b      	orrs	r3, r1
 8003a76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d017      	beq.n	8003ab0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003a98:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6911      	ldr	r1, [r2, #16]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003aae:	e013      	b.n	8003ad8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003abe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ad0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ad4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d12a      	bne.n	8003b38 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003aec:	f023 0304 	bic.w	r3, r3, #4
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003af8:	4311      	orrs	r1, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003afe:	4311      	orrs	r1, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b04:	430a      	orrs	r2, r1
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0201 	orr.w	r2, r2, #1
 8003b10:	611a      	str	r2, [r3, #16]
 8003b12:	e019      	b.n	8003b48 <HAL_ADC_Init+0x324>
 8003b14:	20000000 	.word	0x20000000
 8003b18:	053e2d63 	.word	0x053e2d63
 8003b1c:	50000100 	.word	0x50000100
 8003b20:	50000400 	.word	0x50000400
 8003b24:	50000500 	.word	0x50000500
 8003b28:	50000600 	.word	0x50000600
 8003b2c:	50000300 	.word	0x50000300
 8003b30:	50000700 	.word	0x50000700
 8003b34:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0201 	bic.w	r2, r2, #1
 8003b46:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d10c      	bne.n	8003b6a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	f023 010f 	bic.w	r1, r3, #15
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	1e5a      	subs	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
 8003b68:	e007      	b.n	8003b7a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 020f 	bic.w	r2, r2, #15
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7e:	f023 0303 	bic.w	r3, r3, #3
 8003b82:	f043 0201 	orr.w	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b8a:	e007      	b.n	8003b9c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b90:	f043 0210 	orr.w	r2, r3, #16
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3724      	adds	r7, #36	; 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd90      	pop	{r4, r7, pc}
 8003ba6:	bf00      	nop

08003ba8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bbc:	d004      	beq.n	8003bc8 <HAL_ADC_Start_DMA+0x20>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a5a      	ldr	r2, [pc, #360]	; (8003d2c <HAL_ADC_Start_DMA+0x184>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_ADC_Start_DMA+0x24>
 8003bc8:	4b59      	ldr	r3, [pc, #356]	; (8003d30 <HAL_ADC_Start_DMA+0x188>)
 8003bca:	e000      	b.n	8003bce <HAL_ADC_Start_DMA+0x26>
 8003bcc:	4b59      	ldr	r3, [pc, #356]	; (8003d34 <HAL_ADC_Start_DMA+0x18c>)
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fd6a 	bl	80036a8 <LL_ADC_GetMultimode>
 8003bd4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fdfb 	bl	80037d6 <LL_ADC_REG_IsConversionOngoing>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f040 809b 	bne.w	8003d1e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_ADC_Start_DMA+0x4e>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e096      	b.n	8003d24 <HAL_ADC_Start_DMA+0x17c>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a4d      	ldr	r2, [pc, #308]	; (8003d38 <HAL_ADC_Start_DMA+0x190>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d008      	beq.n	8003c1a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b05      	cmp	r3, #5
 8003c12:	d002      	beq.n	8003c1a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2b09      	cmp	r3, #9
 8003c18:	d17a      	bne.n	8003d10 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fcf6 	bl	800460c <ADC_Enable>
 8003c20:	4603      	mov	r3, r0
 8003c22:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003c24:	7dfb      	ldrb	r3, [r7, #23]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d16d      	bne.n	8003d06 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c32:	f023 0301 	bic.w	r3, r3, #1
 8003c36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a3a      	ldr	r2, [pc, #232]	; (8003d2c <HAL_ADC_Start_DMA+0x184>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d009      	beq.n	8003c5c <HAL_ADC_Start_DMA+0xb4>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a3b      	ldr	r2, [pc, #236]	; (8003d3c <HAL_ADC_Start_DMA+0x194>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d002      	beq.n	8003c58 <HAL_ADC_Start_DMA+0xb0>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	e003      	b.n	8003c60 <HAL_ADC_Start_DMA+0xb8>
 8003c58:	4b39      	ldr	r3, [pc, #228]	; (8003d40 <HAL_ADC_Start_DMA+0x198>)
 8003c5a:	e001      	b.n	8003c60 <HAL_ADC_Start_DMA+0xb8>
 8003c5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d002      	beq.n	8003c6e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d105      	bne.n	8003c7a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d006      	beq.n	8003c94 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8a:	f023 0206 	bic.w	r2, r3, #6
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	661a      	str	r2, [r3, #96]	; 0x60
 8003c92:	e002      	b.n	8003c9a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	4a29      	ldr	r2, [pc, #164]	; (8003d44 <HAL_ADC_Start_DMA+0x19c>)
 8003ca0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca6:	4a28      	ldr	r2, [pc, #160]	; (8003d48 <HAL_ADC_Start_DMA+0x1a0>)
 8003ca8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	4a27      	ldr	r2, [pc, #156]	; (8003d4c <HAL_ADC_Start_DMA+0x1a4>)
 8003cb0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	221c      	movs	r2, #28
 8003cb8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0210 	orr.w	r2, r2, #16
 8003cd0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0201 	orr.w	r2, r2, #1
 8003ce0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3340      	adds	r3, #64	; 0x40
 8003cec:	4619      	mov	r1, r3
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f000 ff39 	bl	8004b68 <HAL_DMA_Start_IT>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff fd55 	bl	80037ae <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003d04:	e00d      	b.n	8003d22 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003d0e:	e008      	b.n	8003d22 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003d1c:	e001      	b.n	8003d22 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d1e:	2302      	movs	r3, #2
 8003d20:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	50000100 	.word	0x50000100
 8003d30:	50000300 	.word	0x50000300
 8003d34:	50000700 	.word	0x50000700
 8003d38:	50000600 	.word	0x50000600
 8003d3c:	50000500 	.word	0x50000500
 8003d40:	50000400 	.word	0x50000400
 8003d44:	080046d1 	.word	0x080046d1
 8003d48:	080047a9 	.word	0x080047a9
 8003d4c:	080047c5 	.word	0x080047c5

08003d50 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b0b6      	sub	sp, #216	; 0xd8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d102      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x24>
 8003daa:	2302      	movs	r3, #2
 8003dac:	f000 bc13 	b.w	80045d6 <HAL_ADC_ConfigChannel+0x84a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fd0a 	bl	80037d6 <LL_ADC_REG_IsConversionOngoing>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f040 83f3 	bne.w	80045b0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6859      	ldr	r1, [r3, #4]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f7ff fbe7 	bl	80035aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff fcf8 	bl	80037d6 <LL_ADC_REG_IsConversionOngoing>
 8003de6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fd04 	bl	80037fc <LL_ADC_INJ_IsConversionOngoing>
 8003df4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003df8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f040 81d9 	bne.w	80041b4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f040 81d4 	bne.w	80041b4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e14:	d10f      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	4619      	mov	r1, r3
 8003e22:	f7ff fbee 	bl	8003602 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fb95 	bl	800355e <LL_ADC_SetSamplingTimeCommonConfig>
 8003e34:	e00e      	b.n	8003e54 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6819      	ldr	r1, [r3, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	461a      	mov	r2, r3
 8003e44:	f7ff fbdd 	bl	8003602 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff fb85 	bl	800355e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	08db      	lsrs	r3, r3, #3
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d022      	beq.n	8003ebc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6919      	ldr	r1, [r3, #16]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e86:	f7ff fadf 	bl	8003448 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6919      	ldr	r1, [r3, #16]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	461a      	mov	r2, r3
 8003e98:	f7ff fb2b 	bl	80034f2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	6919      	ldr	r1, [r3, #16]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	7f1b      	ldrb	r3, [r3, #28]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d102      	bne.n	8003eb2 <HAL_ADC_ConfigChannel+0x126>
 8003eac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eb0:	e000      	b.n	8003eb4 <HAL_ADC_ConfigChannel+0x128>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f7ff fb37 	bl	8003528 <LL_ADC_SetOffsetSaturation>
 8003eba:	e17b      	b.n	80041b4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fae4 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10a      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x15c>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff fad9 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	0e9b      	lsrs	r3, r3, #26
 8003ee2:	f003 021f 	and.w	r2, r3, #31
 8003ee6:	e01e      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x19a>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff face 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003efe:	fa93 f3a3 	rbit	r3, r3
 8003f02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003f16:	2320      	movs	r3, #32
 8003f18:	e004      	b.n	8003f24 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003f1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f1e:	fab3 f383 	clz	r3, r3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d105      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x1b2>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	0e9b      	lsrs	r3, r3, #26
 8003f38:	f003 031f 	and.w	r3, r3, #31
 8003f3c:	e018      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x1e4>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003f5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003f62:	2320      	movs	r3, #32
 8003f64:	e004      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003f66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f6a:	fab3 f383 	clz	r3, r3
 8003f6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d106      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff fa9d 	bl	80034bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2101      	movs	r1, #1
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fa81 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x222>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff fa76 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	0e9b      	lsrs	r3, r3, #26
 8003fa8:	f003 021f 	and.w	r2, r3, #31
 8003fac:	e01e      	b.n	8003fec <HAL_ADC_ConfigChannel+0x260>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fa6b 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003fc4:	fa93 f3a3 	rbit	r3, r3
 8003fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003fcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003fd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003fdc:	2320      	movs	r3, #32
 8003fde:	e004      	b.n	8003fea <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003fe0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fe4:	fab3 f383 	clz	r3, r3
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d105      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x278>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	0e9b      	lsrs	r3, r3, #26
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	e018      	b.n	8004036 <HAL_ADC_ConfigChannel+0x2aa>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004010:	fa93 f3a3 	rbit	r3, r3
 8004014:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004018:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800401c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004020:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004028:	2320      	movs	r3, #32
 800402a:	e004      	b.n	8004036 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800402c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004030:	fab3 f383 	clz	r3, r3
 8004034:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004036:	429a      	cmp	r2, r3
 8004038:	d106      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2200      	movs	r2, #0
 8004040:	2101      	movs	r1, #1
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fa3a 	bl	80034bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2102      	movs	r1, #2
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fa1e 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8004054:	4603      	mov	r3, r0
 8004056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x2e8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2102      	movs	r1, #2
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fa13 	bl	8003490 <LL_ADC_GetOffsetChannel>
 800406a:	4603      	mov	r3, r0
 800406c:	0e9b      	lsrs	r3, r3, #26
 800406e:	f003 021f 	and.w	r2, r3, #31
 8004072:	e01e      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x326>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2102      	movs	r1, #2
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fa08 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8004080:	4603      	mov	r3, r0
 8004082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800408a:	fa93 f3a3 	rbit	r3, r3
 800408e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004092:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800409a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80040a2:	2320      	movs	r3, #32
 80040a4:	e004      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80040a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040aa:	fab3 f383 	clz	r3, r3
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d105      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x33e>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	0e9b      	lsrs	r3, r3, #26
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	e016      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x36c>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040d6:	fa93 f3a3 	rbit	r3, r3
 80040da:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80040dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80040e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80040ea:	2320      	movs	r3, #32
 80040ec:	e004      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80040ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d106      	bne.n	800410a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2200      	movs	r2, #0
 8004102:	2102      	movs	r1, #2
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff f9d9 	bl	80034bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2103      	movs	r1, #3
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff f9bd 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8004116:	4603      	mov	r3, r0
 8004118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x3aa>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2103      	movs	r1, #3
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff f9b2 	bl	8003490 <LL_ADC_GetOffsetChannel>
 800412c:	4603      	mov	r3, r0
 800412e:	0e9b      	lsrs	r3, r3, #26
 8004130:	f003 021f 	and.w	r2, r3, #31
 8004134:	e017      	b.n	8004166 <HAL_ADC_ConfigChannel+0x3da>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2103      	movs	r1, #3
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff f9a7 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8004142:	4603      	mov	r3, r0
 8004144:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004148:	fa93 f3a3 	rbit	r3, r3
 800414c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800414e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004150:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004158:	2320      	movs	r3, #32
 800415a:	e003      	b.n	8004164 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800415c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800416e:	2b00      	cmp	r3, #0
 8004170:	d105      	bne.n	800417e <HAL_ADC_ConfigChannel+0x3f2>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	0e9b      	lsrs	r3, r3, #26
 8004178:	f003 031f 	and.w	r3, r3, #31
 800417c:	e011      	b.n	80041a2 <HAL_ADC_ConfigChannel+0x416>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004184:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004186:	fa93 f3a3 	rbit	r3, r3
 800418a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800418c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800418e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004196:	2320      	movs	r3, #32
 8004198:	e003      	b.n	80041a2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800419a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419c:	fab3 f383 	clz	r3, r3
 80041a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d106      	bne.n	80041b4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2200      	movs	r2, #0
 80041ac:	2103      	movs	r1, #3
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff f984 	bl	80034bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fae5 	bl	8003788 <LL_ADC_IsEnabled>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f040 813d 	bne.w	8004440 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6819      	ldr	r1, [r3, #0]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f7ff fa40 	bl	8003658 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4aa2      	ldr	r2, [pc, #648]	; (8004468 <HAL_ADC_ConfigChannel+0x6dc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	f040 812e 	bne.w	8004440 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10b      	bne.n	800420c <HAL_ADC_ConfigChannel+0x480>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	0e9b      	lsrs	r3, r3, #26
 80041fa:	3301      	adds	r3, #1
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	2b09      	cmp	r3, #9
 8004202:	bf94      	ite	ls
 8004204:	2301      	movls	r3, #1
 8004206:	2300      	movhi	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	e019      	b.n	8004240 <HAL_ADC_ConfigChannel+0x4b4>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004214:	fa93 f3a3 	rbit	r3, r3
 8004218:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800421a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800421c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800421e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004224:	2320      	movs	r3, #32
 8004226:	e003      	b.n	8004230 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800422a:	fab3 f383 	clz	r3, r3
 800422e:	b2db      	uxtb	r3, r3
 8004230:	3301      	adds	r3, #1
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	2b09      	cmp	r3, #9
 8004238:	bf94      	ite	ls
 800423a:	2301      	movls	r3, #1
 800423c:	2300      	movhi	r3, #0
 800423e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004240:	2b00      	cmp	r3, #0
 8004242:	d079      	beq.n	8004338 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800424c:	2b00      	cmp	r3, #0
 800424e:	d107      	bne.n	8004260 <HAL_ADC_ConfigChannel+0x4d4>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	0e9b      	lsrs	r3, r3, #26
 8004256:	3301      	adds	r3, #1
 8004258:	069b      	lsls	r3, r3, #26
 800425a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800425e:	e015      	b.n	800428c <HAL_ADC_ConfigChannel+0x500>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004268:	fa93 f3a3 	rbit	r3, r3
 800426c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800426e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004270:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004278:	2320      	movs	r3, #32
 800427a:	e003      	b.n	8004284 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800427c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800427e:	fab3 f383 	clz	r3, r3
 8004282:	b2db      	uxtb	r3, r3
 8004284:	3301      	adds	r3, #1
 8004286:	069b      	lsls	r3, r3, #26
 8004288:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004294:	2b00      	cmp	r3, #0
 8004296:	d109      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x520>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	0e9b      	lsrs	r3, r3, #26
 800429e:	3301      	adds	r3, #1
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	2101      	movs	r1, #1
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	e017      	b.n	80042dc <HAL_ADC_ConfigChannel+0x550>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b4:	fa93 f3a3 	rbit	r3, r3
 80042b8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80042ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80042be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80042c4:	2320      	movs	r3, #32
 80042c6:	e003      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80042c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ca:	fab3 f383 	clz	r3, r3
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	3301      	adds	r3, #1
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	2101      	movs	r1, #1
 80042d8:	fa01 f303 	lsl.w	r3, r1, r3
 80042dc:	ea42 0103 	orr.w	r1, r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10a      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x576>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	0e9b      	lsrs	r3, r3, #26
 80042f2:	3301      	adds	r3, #1
 80042f4:	f003 021f 	and.w	r2, r3, #31
 80042f8:	4613      	mov	r3, r2
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	4413      	add	r3, r2
 80042fe:	051b      	lsls	r3, r3, #20
 8004300:	e018      	b.n	8004334 <HAL_ADC_ConfigChannel+0x5a8>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430a:	fa93 f3a3 	rbit	r3, r3
 800430e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004312:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800431a:	2320      	movs	r3, #32
 800431c:	e003      	b.n	8004326 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800431e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004320:	fab3 f383 	clz	r3, r3
 8004324:	b2db      	uxtb	r3, r3
 8004326:	3301      	adds	r3, #1
 8004328:	f003 021f 	and.w	r2, r3, #31
 800432c:	4613      	mov	r3, r2
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	4413      	add	r3, r2
 8004332:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004334:	430b      	orrs	r3, r1
 8004336:	e07e      	b.n	8004436 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004340:	2b00      	cmp	r3, #0
 8004342:	d107      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x5c8>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	0e9b      	lsrs	r3, r3, #26
 800434a:	3301      	adds	r3, #1
 800434c:	069b      	lsls	r3, r3, #26
 800434e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004352:	e015      	b.n	8004380 <HAL_ADC_ConfigChannel+0x5f4>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435c:	fa93 f3a3 	rbit	r3, r3
 8004360:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800436c:	2320      	movs	r3, #32
 800436e:	e003      	b.n	8004378 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	fab3 f383 	clz	r3, r3
 8004376:	b2db      	uxtb	r3, r3
 8004378:	3301      	adds	r3, #1
 800437a:	069b      	lsls	r3, r3, #26
 800437c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004388:	2b00      	cmp	r3, #0
 800438a:	d109      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x614>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	0e9b      	lsrs	r3, r3, #26
 8004392:	3301      	adds	r3, #1
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	2101      	movs	r1, #1
 800439a:	fa01 f303 	lsl.w	r3, r1, r3
 800439e:	e017      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x644>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	fa93 f3a3 	rbit	r3, r3
 80043ac:	61fb      	str	r3, [r7, #28]
  return result;
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80043b8:	2320      	movs	r3, #32
 80043ba:	e003      	b.n	80043c4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	fab3 f383 	clz	r3, r3
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	3301      	adds	r3, #1
 80043c6:	f003 031f 	and.w	r3, r3, #31
 80043ca:	2101      	movs	r1, #1
 80043cc:	fa01 f303 	lsl.w	r3, r1, r3
 80043d0:	ea42 0103 	orr.w	r1, r2, r3
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10d      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x670>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	0e9b      	lsrs	r3, r3, #26
 80043e6:	3301      	adds	r3, #1
 80043e8:	f003 021f 	and.w	r2, r3, #31
 80043ec:	4613      	mov	r3, r2
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	4413      	add	r3, r2
 80043f2:	3b1e      	subs	r3, #30
 80043f4:	051b      	lsls	r3, r3, #20
 80043f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043fa:	e01b      	b.n	8004434 <HAL_ADC_ConfigChannel+0x6a8>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	fa93 f3a3 	rbit	r3, r3
 8004408:	613b      	str	r3, [r7, #16]
  return result;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004414:	2320      	movs	r3, #32
 8004416:	e003      	b.n	8004420 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	fab3 f383 	clz	r3, r3
 800441e:	b2db      	uxtb	r3, r3
 8004420:	3301      	adds	r3, #1
 8004422:	f003 021f 	and.w	r2, r3, #31
 8004426:	4613      	mov	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4413      	add	r3, r2
 800442c:	3b1e      	subs	r3, #30
 800442e:	051b      	lsls	r3, r3, #20
 8004430:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004434:	430b      	orrs	r3, r1
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	6892      	ldr	r2, [r2, #8]
 800443a:	4619      	mov	r1, r3
 800443c:	f7ff f8e1 	bl	8003602 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4b09      	ldr	r3, [pc, #36]	; (800446c <HAL_ADC_ConfigChannel+0x6e0>)
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80be 	beq.w	80045ca <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004456:	d004      	beq.n	8004462 <HAL_ADC_ConfigChannel+0x6d6>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a04      	ldr	r2, [pc, #16]	; (8004470 <HAL_ADC_ConfigChannel+0x6e4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d10a      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x6ec>
 8004462:	4b04      	ldr	r3, [pc, #16]	; (8004474 <HAL_ADC_ConfigChannel+0x6e8>)
 8004464:	e009      	b.n	800447a <HAL_ADC_ConfigChannel+0x6ee>
 8004466:	bf00      	nop
 8004468:	407f0000 	.word	0x407f0000
 800446c:	80080000 	.word	0x80080000
 8004470:	50000100 	.word	0x50000100
 8004474:	50000300 	.word	0x50000300
 8004478:	4b59      	ldr	r3, [pc, #356]	; (80045e0 <HAL_ADC_ConfigChannel+0x854>)
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe ffd6 	bl	800342c <LL_ADC_GetCommonPathInternalCh>
 8004480:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a56      	ldr	r2, [pc, #344]	; (80045e4 <HAL_ADC_ConfigChannel+0x858>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d004      	beq.n	8004498 <HAL_ADC_ConfigChannel+0x70c>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a55      	ldr	r2, [pc, #340]	; (80045e8 <HAL_ADC_ConfigChannel+0x85c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d13a      	bne.n	800450e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004498:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800449c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d134      	bne.n	800450e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044ac:	d005      	beq.n	80044ba <HAL_ADC_ConfigChannel+0x72e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a4e      	ldr	r2, [pc, #312]	; (80045ec <HAL_ADC_ConfigChannel+0x860>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	f040 8085 	bne.w	80045c4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044c2:	d004      	beq.n	80044ce <HAL_ADC_ConfigChannel+0x742>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a49      	ldr	r2, [pc, #292]	; (80045f0 <HAL_ADC_ConfigChannel+0x864>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d101      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x746>
 80044ce:	4a49      	ldr	r2, [pc, #292]	; (80045f4 <HAL_ADC_ConfigChannel+0x868>)
 80044d0:	e000      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x748>
 80044d2:	4a43      	ldr	r2, [pc, #268]	; (80045e0 <HAL_ADC_ConfigChannel+0x854>)
 80044d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f7fe ff91 	bl	8003406 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044e4:	4b44      	ldr	r3, [pc, #272]	; (80045f8 <HAL_ADC_ConfigChannel+0x86c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	099b      	lsrs	r3, r3, #6
 80044ea:	4a44      	ldr	r2, [pc, #272]	; (80045fc <HAL_ADC_ConfigChannel+0x870>)
 80044ec:	fba2 2303 	umull	r2, r3, r2, r3
 80044f0:	099b      	lsrs	r3, r3, #6
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	4613      	mov	r3, r2
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044fe:	e002      	b.n	8004506 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3b01      	subs	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1f9      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800450c:	e05a      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a3b      	ldr	r2, [pc, #236]	; (8004600 <HAL_ADC_ConfigChannel+0x874>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d125      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x7d8>
 8004518:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800451c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d11f      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a31      	ldr	r2, [pc, #196]	; (80045f0 <HAL_ADC_ConfigChannel+0x864>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d104      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x7ac>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a34      	ldr	r2, [pc, #208]	; (8004604 <HAL_ADC_ConfigChannel+0x878>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d047      	beq.n	80045c8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004540:	d004      	beq.n	800454c <HAL_ADC_ConfigChannel+0x7c0>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a2a      	ldr	r2, [pc, #168]	; (80045f0 <HAL_ADC_ConfigChannel+0x864>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d101      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x7c4>
 800454c:	4a29      	ldr	r2, [pc, #164]	; (80045f4 <HAL_ADC_ConfigChannel+0x868>)
 800454e:	e000      	b.n	8004552 <HAL_ADC_ConfigChannel+0x7c6>
 8004550:	4a23      	ldr	r2, [pc, #140]	; (80045e0 <HAL_ADC_ConfigChannel+0x854>)
 8004552:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800455a:	4619      	mov	r1, r3
 800455c:	4610      	mov	r0, r2
 800455e:	f7fe ff52 	bl	8003406 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004562:	e031      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a27      	ldr	r2, [pc, #156]	; (8004608 <HAL_ADC_ConfigChannel+0x87c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d12d      	bne.n	80045ca <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800456e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d127      	bne.n	80045ca <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1c      	ldr	r2, [pc, #112]	; (80045f0 <HAL_ADC_ConfigChannel+0x864>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d022      	beq.n	80045ca <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800458c:	d004      	beq.n	8004598 <HAL_ADC_ConfigChannel+0x80c>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a17      	ldr	r2, [pc, #92]	; (80045f0 <HAL_ADC_ConfigChannel+0x864>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d101      	bne.n	800459c <HAL_ADC_ConfigChannel+0x810>
 8004598:	4a16      	ldr	r2, [pc, #88]	; (80045f4 <HAL_ADC_ConfigChannel+0x868>)
 800459a:	e000      	b.n	800459e <HAL_ADC_ConfigChannel+0x812>
 800459c:	4a10      	ldr	r2, [pc, #64]	; (80045e0 <HAL_ADC_ConfigChannel+0x854>)
 800459e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045a6:	4619      	mov	r1, r3
 80045a8:	4610      	mov	r0, r2
 80045aa:	f7fe ff2c 	bl	8003406 <LL_ADC_SetCommonPathInternalCh>
 80045ae:	e00c      	b.n	80045ca <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b4:	f043 0220 	orr.w	r2, r3, #32
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80045c2:	e002      	b.n	80045ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045c4:	bf00      	nop
 80045c6:	e000      	b.n	80045ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80045d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	37d8      	adds	r7, #216	; 0xd8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	50000700 	.word	0x50000700
 80045e4:	c3210000 	.word	0xc3210000
 80045e8:	90c00010 	.word	0x90c00010
 80045ec:	50000600 	.word	0x50000600
 80045f0:	50000100 	.word	0x50000100
 80045f4:	50000300 	.word	0x50000300
 80045f8:	20000000 	.word	0x20000000
 80045fc:	053e2d63 	.word	0x053e2d63
 8004600:	c7520000 	.word	0xc7520000
 8004604:	50000500 	.word	0x50000500
 8004608:	cb840000 	.word	0xcb840000

0800460c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff f8b5 	bl	8003788 <LL_ADC_IsEnabled>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d14d      	bne.n	80046c0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	4b28      	ldr	r3, [pc, #160]	; (80046cc <ADC_Enable+0xc0>)
 800462c:	4013      	ands	r3, r2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00d      	beq.n	800464e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004636:	f043 0210 	orr.w	r2, r3, #16
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004642:	f043 0201 	orr.w	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e039      	b.n	80046c2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff f884 	bl	8003760 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004658:	f7fe fe94 	bl	8003384 <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800465e:	e028      	b.n	80046b2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff f88f 	bl	8003788 <LL_ADC_IsEnabled>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d104      	bne.n	800467a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff f873 	bl	8003760 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800467a:	f7fe fe83 	bl	8003384 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d914      	bls.n	80046b2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b01      	cmp	r3, #1
 8004694:	d00d      	beq.n	80046b2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469a:	f043 0210 	orr.w	r2, r3, #16
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a6:	f043 0201 	orr.w	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e007      	b.n	80046c2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d1cf      	bne.n	8004660 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	8000003f 	.word	0x8000003f

080046d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d14b      	bne.n	8004782 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d021      	beq.n	8004748 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f7fe ff3b 	bl	8003584 <LL_ADC_REG_IsTriggerSourceSWStart>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d032      	beq.n	800477a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d12b      	bne.n	800477a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d11f      	bne.n	800477a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473e:	f043 0201 	orr.w	r2, r3, #1
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	65da      	str	r2, [r3, #92]	; 0x5c
 8004746:	e018      	b.n	800477a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d111      	bne.n	800477a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d105      	bne.n	800477a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004772:	f043 0201 	orr.w	r2, r3, #1
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f7ff fae8 	bl	8003d50 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004780:	e00e      	b.n	80047a0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f7ff faf2 	bl	8003d78 <HAL_ADC_ErrorCallback>
}
 8004794:	e004      	b.n	80047a0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	4798      	blx	r3
}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f7ff fad4 	bl	8003d64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047bc:	bf00      	nop
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e2:	f043 0204 	orr.w	r2, r3, #4
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7ff fac4 	bl	8003d78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047f0:	bf00      	nop
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004808:	4b0c      	ldr	r3, [pc, #48]	; (800483c <__NVIC_SetPriorityGrouping+0x44>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004814:	4013      	ands	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800482a:	4a04      	ldr	r2, [pc, #16]	; (800483c <__NVIC_SetPriorityGrouping+0x44>)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	60d3      	str	r3, [r2, #12]
}
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	e000ed00 	.word	0xe000ed00

08004840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004844:	4b04      	ldr	r3, [pc, #16]	; (8004858 <__NVIC_GetPriorityGrouping+0x18>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	0a1b      	lsrs	r3, r3, #8
 800484a:	f003 0307 	and.w	r3, r3, #7
}
 800484e:	4618      	mov	r0, r3
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	e000ed00 	.word	0xe000ed00

0800485c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486a:	2b00      	cmp	r3, #0
 800486c:	db0b      	blt.n	8004886 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800486e:	79fb      	ldrb	r3, [r7, #7]
 8004870:	f003 021f 	and.w	r2, r3, #31
 8004874:	4907      	ldr	r1, [pc, #28]	; (8004894 <__NVIC_EnableIRQ+0x38>)
 8004876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	2001      	movs	r0, #1
 800487e:	fa00 f202 	lsl.w	r2, r0, r2
 8004882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	e000e100 	.word	0xe000e100

08004898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	6039      	str	r1, [r7, #0]
 80048a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	db0a      	blt.n	80048c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	490c      	ldr	r1, [pc, #48]	; (80048e4 <__NVIC_SetPriority+0x4c>)
 80048b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b6:	0112      	lsls	r2, r2, #4
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	440b      	add	r3, r1
 80048bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048c0:	e00a      	b.n	80048d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	4908      	ldr	r1, [pc, #32]	; (80048e8 <__NVIC_SetPriority+0x50>)
 80048c8:	79fb      	ldrb	r3, [r7, #7]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	3b04      	subs	r3, #4
 80048d0:	0112      	lsls	r2, r2, #4
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	440b      	add	r3, r1
 80048d6:	761a      	strb	r2, [r3, #24]
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	e000e100 	.word	0xe000e100
 80048e8:	e000ed00 	.word	0xe000ed00

080048ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b089      	sub	sp, #36	; 0x24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f1c3 0307 	rsb	r3, r3, #7
 8004906:	2b04      	cmp	r3, #4
 8004908:	bf28      	it	cs
 800490a:	2304      	movcs	r3, #4
 800490c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	3304      	adds	r3, #4
 8004912:	2b06      	cmp	r3, #6
 8004914:	d902      	bls.n	800491c <NVIC_EncodePriority+0x30>
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	3b03      	subs	r3, #3
 800491a:	e000      	b.n	800491e <NVIC_EncodePriority+0x32>
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43da      	mvns	r2, r3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	401a      	ands	r2, r3
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004934:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	fa01 f303 	lsl.w	r3, r1, r3
 800493e:	43d9      	mvns	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004944:	4313      	orrs	r3, r2
         );
}
 8004946:	4618      	mov	r0, r3
 8004948:	3724      	adds	r7, #36	; 0x24
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3b01      	subs	r3, #1
 8004960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004964:	d301      	bcc.n	800496a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004966:	2301      	movs	r3, #1
 8004968:	e00f      	b.n	800498a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800496a:	4a0a      	ldr	r2, [pc, #40]	; (8004994 <SysTick_Config+0x40>)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3b01      	subs	r3, #1
 8004970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004972:	210f      	movs	r1, #15
 8004974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004978:	f7ff ff8e 	bl	8004898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800497c:	4b05      	ldr	r3, [pc, #20]	; (8004994 <SysTick_Config+0x40>)
 800497e:	2200      	movs	r2, #0
 8004980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004982:	4b04      	ldr	r3, [pc, #16]	; (8004994 <SysTick_Config+0x40>)
 8004984:	2207      	movs	r2, #7
 8004986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	e000e010 	.word	0xe000e010

08004998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff ff29 	bl	80047f8 <__NVIC_SetPriorityGrouping>
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b086      	sub	sp, #24
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	4603      	mov	r3, r0
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
 80049ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049bc:	f7ff ff40 	bl	8004840 <__NVIC_GetPriorityGrouping>
 80049c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	6978      	ldr	r0, [r7, #20]
 80049c8:	f7ff ff90 	bl	80048ec <NVIC_EncodePriority>
 80049cc:	4602      	mov	r2, r0
 80049ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d2:	4611      	mov	r1, r2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff ff5f 	bl	8004898 <__NVIC_SetPriority>
}
 80049da:	bf00      	nop
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	4603      	mov	r3, r0
 80049ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff ff33 	bl	800485c <__NVIC_EnableIRQ>
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff ffa4 	bl	8004954 <SysTick_Config>
 8004a0c:	4603      	mov	r3, r0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e08d      	b.n	8004b46 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4b47      	ldr	r3, [pc, #284]	; (8004b50 <HAL_DMA_Init+0x138>)
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d80f      	bhi.n	8004a56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	4b45      	ldr	r3, [pc, #276]	; (8004b54 <HAL_DMA_Init+0x13c>)
 8004a3e:	4413      	add	r3, r2
 8004a40:	4a45      	ldr	r2, [pc, #276]	; (8004b58 <HAL_DMA_Init+0x140>)
 8004a42:	fba2 2303 	umull	r2, r3, r2, r3
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a42      	ldr	r2, [pc, #264]	; (8004b5c <HAL_DMA_Init+0x144>)
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40
 8004a54:	e00e      	b.n	8004a74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	4b40      	ldr	r3, [pc, #256]	; (8004b60 <HAL_DMA_Init+0x148>)
 8004a5e:	4413      	add	r3, r2
 8004a60:	4a3d      	ldr	r2, [pc, #244]	; (8004b58 <HAL_DMA_Init+0x140>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	091b      	lsrs	r3, r3, #4
 8004a68:	009a      	lsls	r2, r3, #2
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a3c      	ldr	r2, [pc, #240]	; (8004b64 <HAL_DMA_Init+0x14c>)
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ab0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f9b6 	bl	8004e38 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ad4:	d102      	bne.n	8004adc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004af0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d010      	beq.n	8004b1c <HAL_DMA_Init+0x104>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d80c      	bhi.n	8004b1c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f9d6 	bl	8004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b18:	605a      	str	r2, [r3, #4]
 8004b1a:	e008      	b.n	8004b2e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40020407 	.word	0x40020407
 8004b54:	bffdfff8 	.word	0xbffdfff8
 8004b58:	cccccccd 	.word	0xcccccccd
 8004b5c:	40020000 	.word	0x40020000
 8004b60:	bffdfbf8 	.word	0xbffdfbf8
 8004b64:	40020400 	.word	0x40020400

08004b68 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_DMA_Start_IT+0x20>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e066      	b.n	8004c56 <HAL_DMA_Start_IT+0xee>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d155      	bne.n	8004c48 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0201 	bic.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f8fb 	bl	8004dbc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d008      	beq.n	8004be0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 020e 	orr.w	r2, r2, #14
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	e00f      	b.n	8004c00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0204 	bic.w	r2, r2, #4
 8004bee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 020a 	orr.w	r2, r2, #10
 8004bfe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d007      	beq.n	8004c1e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c1c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c34:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0201 	orr.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	e005      	b.n	8004c54 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c50:	2302      	movs	r3, #2
 8004c52:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b084      	sub	sp, #16
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7a:	f003 031f 	and.w	r3, r3, #31
 8004c7e:	2204      	movs	r2, #4
 8004c80:	409a      	lsls	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d026      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x7a>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d021      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d107      	bne.n	8004cb2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0204 	bic.w	r2, r2, #4
 8004cb0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb6:	f003 021f 	and.w	r2, r3, #31
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	2104      	movs	r1, #4
 8004cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d071      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004cd6:	e06c      	b.n	8004db2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cdc:	f003 031f 	and.w	r3, r3, #31
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	409a      	lsls	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d02e      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d029      	beq.n	8004d4a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10b      	bne.n	8004d1c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 020a 	bic.w	r2, r2, #10
 8004d12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d20:	f003 021f 	and.w	r2, r3, #31
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	2102      	movs	r1, #2
 8004d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d038      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004d48:	e033      	b.n	8004db2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	2208      	movs	r2, #8
 8004d54:	409a      	lsls	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d02a      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d025      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 020e 	bic.w	r2, r2, #14
 8004d76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7c:	f003 021f 	and.w	r2, r3, #31
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	2101      	movs	r1, #1
 8004d86:	fa01 f202 	lsl.w	r2, r1, r2
 8004d8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d004      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004db2:	bf00      	nop
 8004db4:	bf00      	nop
}
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004dd2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d004      	beq.n	8004de6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004de4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	f003 021f 	and.w	r2, r3, #31
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	2101      	movs	r1, #1
 8004df4:	fa01 f202 	lsl.w	r2, r1, r2
 8004df8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b10      	cmp	r3, #16
 8004e08:	d108      	bne.n	8004e1c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004e1a:	e007      	b.n	8004e2c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	4b16      	ldr	r3, [pc, #88]	; (8004ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d802      	bhi.n	8004e52 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004e4c:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e001      	b.n	8004e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004e52:	4b15      	ldr	r3, [pc, #84]	; (8004ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004e54:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	3b08      	subs	r3, #8
 8004e62:	4a12      	ldr	r2, [pc, #72]	; (8004eac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004e64:	fba2 2303 	umull	r2, r3, r2, r3
 8004e68:	091b      	lsrs	r3, r3, #4
 8004e6a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e70:	089b      	lsrs	r3, r3, #2
 8004e72:	009a      	lsls	r2, r3, #2
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4413      	add	r3, r2
 8004e78:	461a      	mov	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a0b      	ldr	r2, [pc, #44]	; (8004eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004e82:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 031f 	and.w	r3, r3, #31
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	409a      	lsls	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e92:	bf00      	nop
 8004e94:	371c      	adds	r7, #28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40020407 	.word	0x40020407
 8004ea4:	40020800 	.word	0x40020800
 8004ea8:	40020820 	.word	0x40020820
 8004eac:	cccccccd 	.word	0xcccccccd
 8004eb0:	40020880 	.word	0x40020880

08004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ec8:	4413      	add	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	461a      	mov	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ed6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	f003 031f 	and.w	r3, r3, #31
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	409a      	lsls	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	1000823f 	.word	0x1000823f
 8004ef8:	40020940 	.word	0x40020940

08004efc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e147      	b.n	800519e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fd fd42 	bl	80029ac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0210 	bic.w	r2, r2, #16
 8004f36:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f38:	f7fe fa24 	bl	8003384 <HAL_GetTick>
 8004f3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004f3e:	e012      	b.n	8004f66 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004f40:	f7fe fa20 	bl	8003384 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b0a      	cmp	r3, #10
 8004f4c:	d90b      	bls.n	8004f66 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f52:	f043 0201 	orr.w	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2203      	movs	r2, #3
 8004f5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e11b      	b.n	800519e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d0e5      	beq.n	8004f40 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0201 	orr.w	r2, r2, #1
 8004f82:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f84:	f7fe f9fe 	bl	8003384 <HAL_GetTick>
 8004f88:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004f8a:	e012      	b.n	8004fb2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004f8c:	f7fe f9fa 	bl	8003384 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b0a      	cmp	r3, #10
 8004f98:	d90b      	bls.n	8004fb2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f9e:	f043 0201 	orr.w	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2203      	movs	r2, #3
 8004faa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e0f5      	b.n	800519e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0e5      	beq.n	8004f8c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0202 	orr.w	r2, r2, #2
 8004fce:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a74      	ldr	r2, [pc, #464]	; (80051a8 <HAL_FDCAN_Init+0x2ac>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d103      	bne.n	8004fe2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004fda:	4a74      	ldr	r2, [pc, #464]	; (80051ac <HAL_FDCAN_Init+0x2b0>)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	7c1b      	ldrb	r3, [r3, #16]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d108      	bne.n	8004ffc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699a      	ldr	r2, [r3, #24]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff8:	619a      	str	r2, [r3, #24]
 8004ffa:	e007      	b.n	800500c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800500a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	7c5b      	ldrb	r3, [r3, #17]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d108      	bne.n	8005026 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699a      	ldr	r2, [r3, #24]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005022:	619a      	str	r2, [r3, #24]
 8005024:	e007      	b.n	8005036 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699a      	ldr	r2, [r3, #24]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005034:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	7c9b      	ldrb	r3, [r3, #18]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d108      	bne.n	8005050 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699a      	ldr	r2, [r3, #24]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800504c:	619a      	str	r2, [r3, #24]
 800504e:	e007      	b.n	8005060 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800505e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699a      	ldr	r2, [r3, #24]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005084:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0210 	bic.w	r2, r2, #16
 8005094:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d108      	bne.n	80050b0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	699a      	ldr	r2, [r3, #24]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f042 0204 	orr.w	r2, r2, #4
 80050ac:	619a      	str	r2, [r3, #24]
 80050ae:	e02c      	b.n	800510a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d028      	beq.n	800510a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d01c      	beq.n	80050fa <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050ce:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0210 	orr.w	r2, r2, #16
 80050de:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d110      	bne.n	800510a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0220 	orr.w	r2, r2, #32
 80050f6:	619a      	str	r2, [r3, #24]
 80050f8:	e007      	b.n	800510a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	699a      	ldr	r2, [r3, #24]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0220 	orr.w	r2, r2, #32
 8005108:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	3b01      	subs	r3, #1
 8005110:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	3b01      	subs	r3, #1
 8005118:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800511a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005122:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	3b01      	subs	r3, #1
 800512c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005132:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005134:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800513e:	d115      	bne.n	800516c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	3b01      	subs	r3, #1
 800514c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800514e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005154:	3b01      	subs	r3, #1
 8005156:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005158:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	3b01      	subs	r3, #1
 8005162:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005168:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800516a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fc6e 	bl	8005a64 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40006400 	.word	0x40006400
 80051ac:	40006500 	.word	0x40006500

080051b0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051c0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80051c2:	7dfb      	ldrb	r3, [r7, #23]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d002      	beq.n	80051ce <HAL_FDCAN_ConfigFilter+0x1e>
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d13d      	bne.n	800524a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d119      	bne.n	800520a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80051e2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80051ea:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	e01d      	b.n	8005246 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	075a      	lsls	r2, r3, #29
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	079a      	lsls	r2, r3, #30
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	4413      	add	r3, r2
 8005232:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	3304      	adds	r3, #4
 800523e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	e006      	b.n	8005258 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800524e:	f043 0202 	orr.w	r2, r3, #2
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
  }
}
 8005258:	4618      	mov	r0, r3
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b01      	cmp	r3, #1
 800527c:	d116      	bne.n	80052ac <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005286:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	011a      	lsls	r2, r3, #4
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	431a      	orrs	r2, r3
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	431a      	orrs	r2, r3
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	431a      	orrs	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	e006      	b.n	80052ba <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b0:	f043 0204 	orr.w	r2, r3, #4
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
  }
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d110      	bne.n	80052fc <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2202      	movs	r2, #2
 80052de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0201 	bic.w	r2, r2, #1
 80052f0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	e006      	b.n	800530a <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005300:	f043 0204 	orr.w	r2, r3, #4
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
  }
}
 800530a:	4618      	mov	r0, r3
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b086      	sub	sp, #24
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d12c      	bne.n	8005388 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d007      	beq.n	800534e <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005342:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e023      	b.n	8005396 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005356:	0c1b      	lsrs	r3, r3, #16
 8005358:	f003 0303 	and.w	r3, r3, #3
 800535c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	68b9      	ldr	r1, [r7, #8]
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 fbe9 	bl	8005b3c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2101      	movs	r1, #1
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	fa01 f202 	lsl.w	r2, r1, r2
 8005376:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800537a:	2201      	movs	r2, #1
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	409a      	lsls	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	e006      	b.n	8005396 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800538c:	f043 0208 	orr.w	r2, r3, #8
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
  }
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b08b      	sub	sp, #44	; 0x2c
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80053b4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80053b6:	7efb      	ldrb	r3, [r7, #27]
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	f040 80bc 	bne.w	8005536 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b40      	cmp	r3, #64	; 0x40
 80053c2:	d121      	bne.n	8005408 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053cc:	f003 030f 	and.w	r3, r3, #15
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d107      	bne.n	80053e4 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e0af      	b.n	8005544 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ec:	0a1b      	lsrs	r3, r3, #8
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	4613      	mov	r3, r2
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	4413      	add	r3, r2
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	440b      	add	r3, r1
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
 8005406:	e020      	b.n	800544a <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005410:	f003 030f 	and.w	r3, r3, #15
 8005414:	2b00      	cmp	r3, #0
 8005416:	d107      	bne.n	8005428 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800541c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e08d      	b.n	8005544 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005430:	0a1b      	lsrs	r3, r3, #8
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800543c:	69fa      	ldr	r2, [r7, #28]
 800543e:	4613      	mov	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	4413      	add	r3, r2
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	440b      	add	r3, r1
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d107      	bne.n	800546e <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	0c9b      	lsrs	r3, r3, #18
 8005464:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	e005      	b.n	800547a <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	3304      	adds	r3, #4
 8005496:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	b29a      	uxth	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	0e1b      	lsrs	r3, r3, #24
 80054cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	0fda      	lsrs	r2, r3, #31
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	3304      	adds	r3, #4
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80054e8:	2300      	movs	r3, #0
 80054ea:	623b      	str	r3, [r7, #32]
 80054ec:	e00a      	b.n	8005504 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	441a      	add	r2, r3
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	440b      	add	r3, r1
 80054fa:	7812      	ldrb	r2, [r2, #0]
 80054fc:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	3301      	adds	r3, #1
 8005502:	623b      	str	r3, [r7, #32]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	0c1b      	lsrs	r3, r3, #16
 800550a:	4a11      	ldr	r2, [pc, #68]	; (8005550 <HAL_FDCAN_GetRxMessage+0x1b0>)
 800550c:	5cd3      	ldrb	r3, [r2, r3]
 800550e:	461a      	mov	r2, r3
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	4293      	cmp	r3, r2
 8005514:	d3eb      	bcc.n	80054ee <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	d105      	bne.n	8005528 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005526:	e004      	b.n	8005532 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	e006      	b.n	8005544 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553a:	f043 0208 	orr.w	r2, r3, #8
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
  }
}
 8005544:	4618      	mov	r0, r3
 8005546:	372c      	adds	r7, #44	; 0x2c
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	08009768 	.word	0x08009768

08005554 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005566:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005568:	7dfb      	ldrb	r3, [r7, #23]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d003      	beq.n	8005576 <HAL_FDCAN_ActivateNotification+0x22>
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	2b02      	cmp	r3, #2
 8005572:	f040 80c8 	bne.w	8005706 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	2b00      	cmp	r3, #0
 8005586:	d004      	beq.n	8005592 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d03b      	beq.n	800560a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005598:	2b00      	cmp	r3, #0
 800559a:	d004      	beq.n	80055a6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d031      	beq.n	800560a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d004      	beq.n	80055ba <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d027      	beq.n	800560a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01d      	beq.n	800560a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d004      	beq.n	80055e2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f003 0310 	and.w	r3, r3, #16
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d013      	beq.n	800560a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d004      	beq.n	80055f6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d009      	beq.n	800560a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00c      	beq.n	800561a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d107      	bne.n	800561a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0201 	orr.w	r2, r2, #1
 8005618:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d13b      	bne.n	80056a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005634:	2b00      	cmp	r3, #0
 8005636:	d004      	beq.n	8005642 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d131      	bne.n	80056a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005648:	2b00      	cmp	r3, #0
 800564a:	d004      	beq.n	8005656 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d127      	bne.n	80056a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800565c:	2b00      	cmp	r3, #0
 800565e:	d004      	beq.n	800566a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d11d      	bne.n	80056a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	2b00      	cmp	r3, #0
 800567c:	d113      	bne.n	80056a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005684:	2b00      	cmp	r3, #0
 8005686:	d004      	beq.n	8005692 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	d109      	bne.n	80056a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00c      	beq.n	80056b6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0202 	orr.w	r2, r2, #2
 80056b4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	430a      	orrs	r2, r1
 8005700:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	e006      	b.n	8005714 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570a:	f043 0202 	orr.w	r2, r3, #2
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
  }
}
 8005714:	4618      	mov	r0, r3
 8005716:	371c      	adds	r7, #28
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	; 0x28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800572e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573c:	4013      	ands	r3, r2
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005752:	6a3a      	ldr	r2, [r7, #32]
 8005754:	4013      	ands	r3, r2
 8005756:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800575e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005762:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	4013      	ands	r3, r2
 800576e:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005776:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800577a:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	4013      	ands	r3, r2
 8005786:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005792:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4013      	ands	r3, r2
 800579e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00d      	beq.n	80057ca <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d006      	beq.n	80057ca <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2240      	movs	r2, #64	; 0x40
 80057c2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f92e 	bl	8005a26 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01b      	beq.n	8005810 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d014      	beq.n	8005810 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057ee:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4013      	ands	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005806:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005808:	6939      	ldr	r1, [r7, #16]
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f8ec 	bl	80059e8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	2b00      	cmp	r3, #0
 8005814:	d007      	beq.n	8005826 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800581e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f8b6 	bl	8005992 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d007      	beq.n	800583c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6a3a      	ldr	r2, [r7, #32]
 8005832:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005834:	6a39      	ldr	r1, [r7, #32]
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fd fae8 	bl	8002e0c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d007      	beq.n	8005852 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800584a:	69f9      	ldr	r1, [r7, #28]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f8ab 	bl	80059a8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00e      	beq.n	800587e <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800586a:	2b00      	cmp	r3, #0
 800586c:	d007      	beq.n	800587e <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005876:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f8a0 	bl	80059be <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01a      	beq.n	80058c2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005896:	2b00      	cmp	r3, #0
 8005898:	d013      	beq.n	80058c2 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80058a2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4013      	ands	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2280      	movs	r2, #128	; 0x80
 80058b8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80058ba:	68f9      	ldr	r1, [r7, #12]
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f888 	bl	80059d2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00e      	beq.n	80058ee <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d007      	beq.n	80058ee <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058e6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f888 	bl	80059fe <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00e      	beq.n	800591a <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d007      	beq.n	800591a <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005912:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f87c 	bl	8005a12 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d011      	beq.n	800594c <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800593e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005944:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800595a:	6979      	ldr	r1, [r7, #20]
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f876 	bl	8005a4e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d009      	beq.n	800597c <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f858 	bl	8005a3a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800598a:	bf00      	nop
 800598c:	3728      	adds	r7, #40	; 0x28
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005a6c:	4b30      	ldr	r3, [pc, #192]	; (8005b30 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005a6e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a2f      	ldr	r2, [pc, #188]	; (8005b34 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d103      	bne.n	8005a82 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005a80:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2c      	ldr	r2, [pc, #176]	; (8005b38 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d103      	bne.n	8005a94 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005a92:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aa2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aaa:	041a      	lsls	r2, r3, #16
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ac8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	061a      	lsls	r2, r3, #24
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	e005      	b.n	8005b16 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3304      	adds	r3, #4
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d3f3      	bcc.n	8005b0a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005b22:	bf00      	nop
 8005b24:	bf00      	nop
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	4000a400 	.word	0x4000a400
 8005b34:	40006800 	.word	0x40006800
 8005b38:	40006c00 	.word	0x40006c00

08005b3c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b089      	sub	sp, #36	; 0x24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10a      	bne.n	8005b68 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005b5a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005b62:	4313      	orrs	r3, r2
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	e00a      	b.n	8005b7e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005b70:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005b76:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005b78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b7c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005b88:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005b8e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005b94:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	4413      	add	r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	440b      	add	r3, r1
 8005bae:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	e020      	b.n	8005c10 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	3303      	adds	r3, #3
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	3302      	adds	r3, #2
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	440b      	add	r3, r1
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005be6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	3301      	adds	r3, #1
 8005bec:	6879      	ldr	r1, [r7, #4]
 8005bee:	440b      	add	r3, r1
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005bf4:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	440a      	add	r2, r1
 8005bfc:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005bfe:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	3304      	adds	r3, #4
 8005c08:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	0c1b      	lsrs	r3, r3, #16
 8005c16:	4a06      	ldr	r2, [pc, #24]	; (8005c30 <FDCAN_CopyMessageToRAM+0xf4>)
 8005c18:	5cd3      	ldrb	r3, [r2, r3]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d3d5      	bcc.n	8005bce <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8005c22:	bf00      	nop
 8005c24:	bf00      	nop
 8005c26:	3724      	adds	r7, #36	; 0x24
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	08009768 	.word	0x08009768

08005c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c42:	e15a      	b.n	8005efa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	2101      	movs	r1, #1
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c50:	4013      	ands	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 814c 	beq.w	8005ef4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f003 0303 	and.w	r3, r3, #3
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d005      	beq.n	8005c74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d130      	bne.n	8005cd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	2203      	movs	r2, #3
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	43db      	mvns	r3, r3
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	fa02 f303 	lsl.w	r3, r2, r3
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005caa:	2201      	movs	r2, #1
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	43db      	mvns	r3, r3
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	091b      	lsrs	r3, r3, #4
 8005cc0:	f003 0201 	and.w	r2, r3, #1
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d017      	beq.n	8005d12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	2203      	movs	r2, #3
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	fa02 f303 	lsl.w	r3, r2, r3
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d123      	bne.n	8005d66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	08da      	lsrs	r2, r3, #3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3208      	adds	r2, #8
 8005d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	220f      	movs	r2, #15
 8005d36:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3a:	43db      	mvns	r3, r3
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	08da      	lsrs	r2, r3, #3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3208      	adds	r2, #8
 8005d60:	6939      	ldr	r1, [r7, #16]
 8005d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	2203      	movs	r2, #3
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	43db      	mvns	r3, r3
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f003 0203 	and.w	r2, r3, #3
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 80a6 	beq.w	8005ef4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005da8:	4b5b      	ldr	r3, [pc, #364]	; (8005f18 <HAL_GPIO_Init+0x2e4>)
 8005daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dac:	4a5a      	ldr	r2, [pc, #360]	; (8005f18 <HAL_GPIO_Init+0x2e4>)
 8005dae:	f043 0301 	orr.w	r3, r3, #1
 8005db2:	6613      	str	r3, [r2, #96]	; 0x60
 8005db4:	4b58      	ldr	r3, [pc, #352]	; (8005f18 <HAL_GPIO_Init+0x2e4>)
 8005db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	60bb      	str	r3, [r7, #8]
 8005dbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dc0:	4a56      	ldr	r2, [pc, #344]	; (8005f1c <HAL_GPIO_Init+0x2e8>)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	089b      	lsrs	r3, r3, #2
 8005dc6:	3302      	adds	r3, #2
 8005dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f003 0303 	and.w	r3, r3, #3
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	220f      	movs	r2, #15
 8005dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ddc:	43db      	mvns	r3, r3
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4013      	ands	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005dea:	d01f      	beq.n	8005e2c <HAL_GPIO_Init+0x1f8>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a4c      	ldr	r2, [pc, #304]	; (8005f20 <HAL_GPIO_Init+0x2ec>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d019      	beq.n	8005e28 <HAL_GPIO_Init+0x1f4>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a4b      	ldr	r2, [pc, #300]	; (8005f24 <HAL_GPIO_Init+0x2f0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d013      	beq.n	8005e24 <HAL_GPIO_Init+0x1f0>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a4a      	ldr	r2, [pc, #296]	; (8005f28 <HAL_GPIO_Init+0x2f4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00d      	beq.n	8005e20 <HAL_GPIO_Init+0x1ec>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a49      	ldr	r2, [pc, #292]	; (8005f2c <HAL_GPIO_Init+0x2f8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <HAL_GPIO_Init+0x1e8>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a48      	ldr	r2, [pc, #288]	; (8005f30 <HAL_GPIO_Init+0x2fc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d101      	bne.n	8005e18 <HAL_GPIO_Init+0x1e4>
 8005e14:	2305      	movs	r3, #5
 8005e16:	e00a      	b.n	8005e2e <HAL_GPIO_Init+0x1fa>
 8005e18:	2306      	movs	r3, #6
 8005e1a:	e008      	b.n	8005e2e <HAL_GPIO_Init+0x1fa>
 8005e1c:	2304      	movs	r3, #4
 8005e1e:	e006      	b.n	8005e2e <HAL_GPIO_Init+0x1fa>
 8005e20:	2303      	movs	r3, #3
 8005e22:	e004      	b.n	8005e2e <HAL_GPIO_Init+0x1fa>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e002      	b.n	8005e2e <HAL_GPIO_Init+0x1fa>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e000      	b.n	8005e2e <HAL_GPIO_Init+0x1fa>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	f002 0203 	and.w	r2, r2, #3
 8005e34:	0092      	lsls	r2, r2, #2
 8005e36:	4093      	lsls	r3, r2
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e3e:	4937      	ldr	r1, [pc, #220]	; (8005f1c <HAL_GPIO_Init+0x2e8>)
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	089b      	lsrs	r3, r3, #2
 8005e44:	3302      	adds	r3, #2
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e4c:	4b39      	ldr	r3, [pc, #228]	; (8005f34 <HAL_GPIO_Init+0x300>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	43db      	mvns	r3, r3
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005e70:	4a30      	ldr	r2, [pc, #192]	; (8005f34 <HAL_GPIO_Init+0x300>)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005e76:	4b2f      	ldr	r3, [pc, #188]	; (8005f34 <HAL_GPIO_Init+0x300>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4013      	ands	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005e9a:	4a26      	ldr	r2, [pc, #152]	; (8005f34 <HAL_GPIO_Init+0x300>)
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005ea0:	4b24      	ldr	r3, [pc, #144]	; (8005f34 <HAL_GPIO_Init+0x300>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4013      	ands	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ec4:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <HAL_GPIO_Init+0x300>)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005eca:	4b1a      	ldr	r3, [pc, #104]	; (8005f34 <HAL_GPIO_Init+0x300>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005eee:	4a11      	ldr	r2, [pc, #68]	; (8005f34 <HAL_GPIO_Init+0x300>)
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	fa22 f303 	lsr.w	r3, r2, r3
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f47f ae9d 	bne.w	8005c44 <HAL_GPIO_Init+0x10>
  }
}
 8005f0a:	bf00      	nop
 8005f0c:	bf00      	nop
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	40010000 	.word	0x40010000
 8005f20:	48000400 	.word	0x48000400
 8005f24:	48000800 	.word	0x48000800
 8005f28:	48000c00 	.word	0x48000c00
 8005f2c:	48001000 	.word	0x48001000
 8005f30:	48001400 	.word	0x48001400
 8005f34:	40010400 	.word	0x40010400

08005f38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	460b      	mov	r3, r1
 8005f42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	887b      	ldrh	r3, [r7, #2]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f50:	2301      	movs	r3, #1
 8005f52:	73fb      	strb	r3, [r7, #15]
 8005f54:	e001      	b.n	8005f5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	807b      	strh	r3, [r7, #2]
 8005f74:	4613      	mov	r3, r2
 8005f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f78:	787b      	ldrb	r3, [r7, #1]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f7e:	887a      	ldrh	r2, [r7, #2]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f84:	e002      	b.n	8005f8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f86:	887a      	ldrh	r2, [r7, #2]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e081      	b.n	80060ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d106      	bne.n	8005fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fc fdf0 	bl	8002ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2224      	movs	r2, #36	; 0x24
 8005fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0201 	bic.w	r2, r2, #1
 8005fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fe8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ff8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d107      	bne.n	8006012 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800600e:	609a      	str	r2, [r3, #8]
 8006010:	e006      	b.n	8006020 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800601e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	2b02      	cmp	r3, #2
 8006026:	d104      	bne.n	8006032 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006030:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6812      	ldr	r2, [r2, #0]
 800603c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006044:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006054:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	69d9      	ldr	r1, [r3, #28]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1a      	ldr	r2, [r3, #32]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
	...

080060b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af02      	add	r7, sp, #8
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	607a      	str	r2, [r7, #4]
 80060c2:	461a      	mov	r2, r3
 80060c4:	460b      	mov	r3, r1
 80060c6:	817b      	strh	r3, [r7, #10]
 80060c8:	4613      	mov	r3, r2
 80060ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	f040 80da 	bne.w	800628e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_I2C_Master_Transmit+0x30>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e0d3      	b.n	8006290 <HAL_I2C_Master_Transmit+0x1d8>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060f0:	f7fd f948 	bl	8003384 <HAL_GetTick>
 80060f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	2319      	movs	r3, #25
 80060fc:	2201      	movs	r2, #1
 80060fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 fb4e 	bl	80067a4 <I2C_WaitOnFlagUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e0be      	b.n	8006290 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2221      	movs	r2, #33	; 0x21
 8006116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2210      	movs	r2, #16
 800611e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	893a      	ldrh	r2, [r7, #8]
 8006132:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613e:	b29b      	uxth	r3, r3
 8006140:	2bff      	cmp	r3, #255	; 0xff
 8006142:	d90e      	bls.n	8006162 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	22ff      	movs	r2, #255	; 0xff
 8006148:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614e:	b2da      	uxtb	r2, r3
 8006150:	8979      	ldrh	r1, [r7, #10]
 8006152:	4b51      	ldr	r3, [pc, #324]	; (8006298 <HAL_I2C_Master_Transmit+0x1e0>)
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 fd44 	bl	8006be8 <I2C_TransferConfig>
 8006160:	e06c      	b.n	800623c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006166:	b29a      	uxth	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006170:	b2da      	uxtb	r2, r3
 8006172:	8979      	ldrh	r1, [r7, #10]
 8006174:	4b48      	ldr	r3, [pc, #288]	; (8006298 <HAL_I2C_Master_Transmit+0x1e0>)
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 fd33 	bl	8006be8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006182:	e05b      	b.n	800623c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	6a39      	ldr	r1, [r7, #32]
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 fb4b 	bl	8006824 <I2C_WaitOnTXISFlagUntilTimeout>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e07b      	b.n	8006290 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	781a      	ldrb	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d034      	beq.n	800623c <HAL_I2C_Master_Transmit+0x184>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d130      	bne.n	800623c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	2200      	movs	r2, #0
 80061e2:	2180      	movs	r1, #128	; 0x80
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fadd 	bl	80067a4 <I2C_WaitOnFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e04d      	b.n	8006290 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2bff      	cmp	r3, #255	; 0xff
 80061fc:	d90e      	bls.n	800621c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	22ff      	movs	r2, #255	; 0xff
 8006202:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006208:	b2da      	uxtb	r2, r3
 800620a:	8979      	ldrh	r1, [r7, #10]
 800620c:	2300      	movs	r3, #0
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 fce7 	bl	8006be8 <I2C_TransferConfig>
 800621a:	e00f      	b.n	800623c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006220:	b29a      	uxth	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800622a:	b2da      	uxtb	r2, r3
 800622c:	8979      	ldrh	r1, [r7, #10]
 800622e:	2300      	movs	r3, #0
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 fcd6 	bl	8006be8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006240:	b29b      	uxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d19e      	bne.n	8006184 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	6a39      	ldr	r1, [r7, #32]
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 fb2a 	bl	80068a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e01a      	b.n	8006290 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2220      	movs	r2, #32
 8006260:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6859      	ldr	r1, [r3, #4]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	4b0b      	ldr	r3, [pc, #44]	; (800629c <HAL_I2C_Master_Transmit+0x1e4>)
 800626e:	400b      	ands	r3, r1
 8006270:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	e000      	b.n	8006290 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800628e:	2302      	movs	r3, #2
  }
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	80002000 	.word	0x80002000
 800629c:	fe00e800 	.word	0xfe00e800

080062a0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	607a      	str	r2, [r7, #4]
 80062aa:	461a      	mov	r2, r3
 80062ac:	460b      	mov	r3, r1
 80062ae:	817b      	strh	r3, [r7, #10]
 80062b0:	4613      	mov	r3, r2
 80062b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b20      	cmp	r3, #32
 80062be:	f040 80db 	bne.w	8006478 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <HAL_I2C_Master_Receive+0x30>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e0d4      	b.n	800647a <HAL_I2C_Master_Receive+0x1da>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062d8:	f7fd f854 	bl	8003384 <HAL_GetTick>
 80062dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	2319      	movs	r3, #25
 80062e4:	2201      	movs	r2, #1
 80062e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 fa5a 	bl	80067a4 <I2C_WaitOnFlagUntilTimeout>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e0bf      	b.n	800647a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2222      	movs	r2, #34	; 0x22
 80062fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2210      	movs	r2, #16
 8006306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	893a      	ldrh	r2, [r7, #8]
 800631a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006326:	b29b      	uxth	r3, r3
 8006328:	2bff      	cmp	r3, #255	; 0xff
 800632a:	d90e      	bls.n	800634a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	22ff      	movs	r2, #255	; 0xff
 8006330:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006336:	b2da      	uxtb	r2, r3
 8006338:	8979      	ldrh	r1, [r7, #10]
 800633a:	4b52      	ldr	r3, [pc, #328]	; (8006484 <HAL_I2C_Master_Receive+0x1e4>)
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 fc50 	bl	8006be8 <I2C_TransferConfig>
 8006348:	e06d      	b.n	8006426 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634e:	b29a      	uxth	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006358:	b2da      	uxtb	r2, r3
 800635a:	8979      	ldrh	r1, [r7, #10]
 800635c:	4b49      	ldr	r3, [pc, #292]	; (8006484 <HAL_I2C_Master_Receive+0x1e4>)
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 fc3f 	bl	8006be8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800636a:	e05c      	b.n	8006426 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	6a39      	ldr	r1, [r7, #32]
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 fad3 	bl	800691c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e07c      	b.n	800647a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	1c5a      	adds	r2, r3, #1
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d034      	beq.n	8006426 <HAL_I2C_Master_Receive+0x186>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d130      	bne.n	8006426 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	2200      	movs	r2, #0
 80063cc:	2180      	movs	r1, #128	; 0x80
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 f9e8 	bl	80067a4 <I2C_WaitOnFlagUntilTimeout>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e04d      	b.n	800647a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	2bff      	cmp	r3, #255	; 0xff
 80063e6:	d90e      	bls.n	8006406 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	22ff      	movs	r2, #255	; 0xff
 80063ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	8979      	ldrh	r1, [r7, #10]
 80063f6:	2300      	movs	r3, #0
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 fbf2 	bl	8006be8 <I2C_TransferConfig>
 8006404:	e00f      	b.n	8006426 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006414:	b2da      	uxtb	r2, r3
 8006416:	8979      	ldrh	r1, [r7, #10]
 8006418:	2300      	movs	r3, #0
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fbe1 	bl	8006be8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642a:	b29b      	uxth	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d19d      	bne.n	800636c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	6a39      	ldr	r1, [r7, #32]
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 fa35 	bl	80068a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e01a      	b.n	800647a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2220      	movs	r2, #32
 800644a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6859      	ldr	r1, [r3, #4]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <HAL_I2C_Master_Receive+0x1e8>)
 8006458:	400b      	ands	r3, r1
 800645a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	e000      	b.n	800647a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006478:	2302      	movs	r3, #2
  }
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	80002400 	.word	0x80002400
 8006488:	fe00e800 	.word	0xfe00e800

0800648c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af02      	add	r7, sp, #8
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	4608      	mov	r0, r1
 8006496:	4611      	mov	r1, r2
 8006498:	461a      	mov	r2, r3
 800649a:	4603      	mov	r3, r0
 800649c:	817b      	strh	r3, [r7, #10]
 800649e:	460b      	mov	r3, r1
 80064a0:	813b      	strh	r3, [r7, #8]
 80064a2:	4613      	mov	r3, r2
 80064a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	f040 80f9 	bne.w	80066a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_I2C_Mem_Write+0x34>
 80064ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d105      	bne.n	80064cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e0ed      	b.n	80066a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <HAL_I2C_Mem_Write+0x4e>
 80064d6:	2302      	movs	r3, #2
 80064d8:	e0e6      	b.n	80066a8 <HAL_I2C_Mem_Write+0x21c>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064e2:	f7fc ff4f 	bl	8003384 <HAL_GetTick>
 80064e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	2319      	movs	r3, #25
 80064ee:	2201      	movs	r2, #1
 80064f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f955 	bl	80067a4 <I2C_WaitOnFlagUntilTimeout>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e0d1      	b.n	80066a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2221      	movs	r2, #33	; 0x21
 8006508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2240      	movs	r2, #64	; 0x40
 8006510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a3a      	ldr	r2, [r7, #32]
 800651e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006524:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800652c:	88f8      	ldrh	r0, [r7, #6]
 800652e:	893a      	ldrh	r2, [r7, #8]
 8006530:	8979      	ldrh	r1, [r7, #10]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	9301      	str	r3, [sp, #4]
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	4603      	mov	r3, r0
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f8b9 	bl	80066b4 <I2C_RequestMemoryWrite>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e0a9      	b.n	80066a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	2bff      	cmp	r3, #255	; 0xff
 800655c:	d90e      	bls.n	800657c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	22ff      	movs	r2, #255	; 0xff
 8006562:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006568:	b2da      	uxtb	r2, r3
 800656a:	8979      	ldrh	r1, [r7, #10]
 800656c:	2300      	movs	r3, #0
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 fb37 	bl	8006be8 <I2C_TransferConfig>
 800657a:	e00f      	b.n	800659c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658a:	b2da      	uxtb	r2, r3
 800658c:	8979      	ldrh	r1, [r7, #10]
 800658e:	2300      	movs	r3, #0
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fb26 	bl	8006be8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f93f 	bl	8006824 <I2C_WaitOnTXISFlagUntilTimeout>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e07b      	b.n	80066a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	781a      	ldrb	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d8:	3b01      	subs	r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d034      	beq.n	8006654 <HAL_I2C_Mem_Write+0x1c8>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d130      	bne.n	8006654 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	2200      	movs	r2, #0
 80065fa:	2180      	movs	r1, #128	; 0x80
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 f8d1 	bl	80067a4 <I2C_WaitOnFlagUntilTimeout>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e04d      	b.n	80066a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006610:	b29b      	uxth	r3, r3
 8006612:	2bff      	cmp	r3, #255	; 0xff
 8006614:	d90e      	bls.n	8006634 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	22ff      	movs	r2, #255	; 0xff
 800661a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006620:	b2da      	uxtb	r2, r3
 8006622:	8979      	ldrh	r1, [r7, #10]
 8006624:	2300      	movs	r3, #0
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 fadb 	bl	8006be8 <I2C_TransferConfig>
 8006632:	e00f      	b.n	8006654 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006642:	b2da      	uxtb	r2, r3
 8006644:	8979      	ldrh	r1, [r7, #10]
 8006646:	2300      	movs	r3, #0
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 faca 	bl	8006be8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006658:	b29b      	uxth	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d19e      	bne.n	800659c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 f91e 	bl	80068a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e01a      	b.n	80066a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2220      	movs	r2, #32
 8006678:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6859      	ldr	r1, [r3, #4]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	4b0a      	ldr	r3, [pc, #40]	; (80066b0 <HAL_I2C_Mem_Write+0x224>)
 8006686:	400b      	ands	r3, r1
 8006688:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2220      	movs	r2, #32
 800668e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e000      	b.n	80066a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80066a6:	2302      	movs	r3, #2
  }
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	fe00e800 	.word	0xfe00e800

080066b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af02      	add	r7, sp, #8
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	4608      	mov	r0, r1
 80066be:	4611      	mov	r1, r2
 80066c0:	461a      	mov	r2, r3
 80066c2:	4603      	mov	r3, r0
 80066c4:	817b      	strh	r3, [r7, #10]
 80066c6:	460b      	mov	r3, r1
 80066c8:	813b      	strh	r3, [r7, #8]
 80066ca:	4613      	mov	r3, r2
 80066cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066ce:	88fb      	ldrh	r3, [r7, #6]
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	8979      	ldrh	r1, [r7, #10]
 80066d4:	4b20      	ldr	r3, [pc, #128]	; (8006758 <I2C_RequestMemoryWrite+0xa4>)
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 fa83 	bl	8006be8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	69b9      	ldr	r1, [r7, #24]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 f89c 	bl	8006824 <I2C_WaitOnTXISFlagUntilTimeout>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e02c      	b.n	8006750 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066f6:	88fb      	ldrh	r3, [r7, #6]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d105      	bne.n	8006708 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066fc:	893b      	ldrh	r3, [r7, #8]
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	629a      	str	r2, [r3, #40]	; 0x28
 8006706:	e015      	b.n	8006734 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006708:	893b      	ldrh	r3, [r7, #8]
 800670a:	0a1b      	lsrs	r3, r3, #8
 800670c:	b29b      	uxth	r3, r3
 800670e:	b2da      	uxtb	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	69b9      	ldr	r1, [r7, #24]
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 f882 	bl	8006824 <I2C_WaitOnTXISFlagUntilTimeout>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e012      	b.n	8006750 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800672a:	893b      	ldrh	r3, [r7, #8]
 800672c:	b2da      	uxtb	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	2200      	movs	r2, #0
 800673c:	2180      	movs	r1, #128	; 0x80
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 f830 	bl	80067a4 <I2C_WaitOnFlagUntilTimeout>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e000      	b.n	8006750 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	80002000 	.word	0x80002000

0800675c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b02      	cmp	r3, #2
 8006770:	d103      	bne.n	800677a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2200      	movs	r2, #0
 8006778:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b01      	cmp	r3, #1
 8006786:	d007      	beq.n	8006798 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0201 	orr.w	r2, r2, #1
 8006796:	619a      	str	r2, [r3, #24]
  }
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	603b      	str	r3, [r7, #0]
 80067b0:	4613      	mov	r3, r2
 80067b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067b4:	e022      	b.n	80067fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067bc:	d01e      	beq.n	80067fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067be:	f7fc fde1 	bl	8003384 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d302      	bcc.n	80067d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d113      	bne.n	80067fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d8:	f043 0220 	orr.w	r2, r3, #32
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e00f      	b.n	800681c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	699a      	ldr	r2, [r3, #24]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	4013      	ands	r3, r2
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	429a      	cmp	r2, r3
 800680a:	bf0c      	ite	eq
 800680c:	2301      	moveq	r3, #1
 800680e:	2300      	movne	r3, #0
 8006810:	b2db      	uxtb	r3, r3
 8006812:	461a      	mov	r2, r3
 8006814:	79fb      	ldrb	r3, [r7, #7]
 8006816:	429a      	cmp	r2, r3
 8006818:	d0cd      	beq.n	80067b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006830:	e02c      	b.n	800688c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 f8ea 	bl	8006a10 <I2C_IsErrorOccurred>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e02a      	b.n	800689c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800684c:	d01e      	beq.n	800688c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800684e:	f7fc fd99 	bl	8003384 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	429a      	cmp	r2, r3
 800685c:	d302      	bcc.n	8006864 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d113      	bne.n	800688c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006868:	f043 0220 	orr.w	r2, r3, #32
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2220      	movs	r2, #32
 8006874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e007      	b.n	800689c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b02      	cmp	r3, #2
 8006898:	d1cb      	bne.n	8006832 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068b0:	e028      	b.n	8006904 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f8aa 	bl	8006a10 <I2C_IsErrorOccurred>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e026      	b.n	8006914 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c6:	f7fc fd5d 	bl	8003384 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d302      	bcc.n	80068dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d113      	bne.n	8006904 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e0:	f043 0220 	orr.w	r2, r3, #32
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e007      	b.n	8006914 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b20      	cmp	r3, #32
 8006910:	d1cf      	bne.n	80068b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006928:	e064      	b.n	80069f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 f86e 	bl	8006a10 <I2C_IsErrorOccurred>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e062      	b.n	8006a04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	f003 0320 	and.w	r3, r3, #32
 8006948:	2b20      	cmp	r3, #32
 800694a:	d138      	bne.n	80069be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	f003 0304 	and.w	r3, r3, #4
 8006956:	2b04      	cmp	r3, #4
 8006958:	d105      	bne.n	8006966 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	e04e      	b.n	8006a04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	f003 0310 	and.w	r3, r3, #16
 8006970:	2b10      	cmp	r3, #16
 8006972:	d107      	bne.n	8006984 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2210      	movs	r2, #16
 800697a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2204      	movs	r2, #4
 8006980:	645a      	str	r2, [r3, #68]	; 0x44
 8006982:	e002      	b.n	800698a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2220      	movs	r2, #32
 8006990:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6859      	ldr	r1, [r3, #4]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	4b1b      	ldr	r3, [pc, #108]	; (8006a0c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800699e:	400b      	ands	r3, r1
 80069a0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e022      	b.n	8006a04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069be:	f7fc fce1 	bl	8003384 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d302      	bcc.n	80069d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10f      	bne.n	80069f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d8:	f043 0220 	orr.w	r2, r3, #32
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e007      	b.n	8006a04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f003 0304 	and.w	r3, r3, #4
 80069fe:	2b04      	cmp	r3, #4
 8006a00:	d193      	bne.n	800692a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	fe00e800 	.word	0xfe00e800

08006a10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08a      	sub	sp, #40	; 0x28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	f003 0310 	and.w	r3, r3, #16
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d075      	beq.n	8006b28 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2210      	movs	r2, #16
 8006a42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a44:	e056      	b.n	8006af4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a4c:	d052      	beq.n	8006af4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a4e:	f7fc fc99 	bl	8003384 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d302      	bcc.n	8006a64 <I2C_IsErrorOccurred+0x54>
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d147      	bne.n	8006af4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a86:	d12e      	bne.n	8006ae6 <I2C_IsErrorOccurred+0xd6>
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a8e:	d02a      	beq.n	8006ae6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006a90:	7cfb      	ldrb	r3, [r7, #19]
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	d027      	beq.n	8006ae6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006aa4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006aa6:	f7fc fc6d 	bl	8003384 <HAL_GetTick>
 8006aaa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006aac:	e01b      	b.n	8006ae6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006aae:	f7fc fc69 	bl	8003384 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b19      	cmp	r3, #25
 8006aba:	d914      	bls.n	8006ae6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac0:	f043 0220 	orr.w	r2, r3, #32
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	d1dc      	bne.n	8006aae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d003      	beq.n	8006b0a <I2C_IsErrorOccurred+0xfa>
 8006b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d09d      	beq.n	8006a46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d103      	bne.n	8006b1a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2220      	movs	r2, #32
 8006b18:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	f043 0304 	orr.w	r3, r3, #4
 8006b20:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00b      	beq.n	8006b52 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	f043 0301 	orr.w	r3, r3, #1
 8006b40:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00b      	beq.n	8006b74 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	f043 0308 	orr.w	r3, r3, #8
 8006b62:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00b      	beq.n	8006b96 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	f043 0302 	orr.w	r3, r3, #2
 8006b84:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d01c      	beq.n	8006bd8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f7ff fddc 	bl	800675c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6859      	ldr	r1, [r3, #4]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	4b0d      	ldr	r3, [pc, #52]	; (8006be4 <I2C_IsErrorOccurred+0x1d4>)
 8006bb0:	400b      	ands	r3, r1
 8006bb2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3728      	adds	r7, #40	; 0x28
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	fe00e800 	.word	0xfe00e800

08006be8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	607b      	str	r3, [r7, #4]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	817b      	strh	r3, [r7, #10]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bfa:	897b      	ldrh	r3, [r7, #10]
 8006bfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c00:	7a7b      	ldrb	r3, [r7, #9]
 8006c02:	041b      	lsls	r3, r3, #16
 8006c04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c08:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c16:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	0d5b      	lsrs	r3, r3, #21
 8006c22:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006c26:	4b08      	ldr	r3, [pc, #32]	; (8006c48 <I2C_TransferConfig+0x60>)
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	43db      	mvns	r3, r3
 8006c2c:	ea02 0103 	and.w	r1, r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c3a:	bf00      	nop
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	03ff63ff 	.word	0x03ff63ff

08006c4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	d138      	bne.n	8006cd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e032      	b.n	8006cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2224      	movs	r2, #36	; 0x24
 8006c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0201 	bic.w	r2, r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6819      	ldr	r1, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	e000      	b.n	8006cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006cd4:	2302      	movs	r3, #2
  }
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b085      	sub	sp, #20
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b20      	cmp	r3, #32
 8006cf6:	d139      	bne.n	8006d6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d101      	bne.n	8006d06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d02:	2302      	movs	r3, #2
 8006d04:	e033      	b.n	8006d6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2224      	movs	r2, #36	; 0x24
 8006d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0201 	bic.w	r2, r2, #1
 8006d24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	021b      	lsls	r3, r3, #8
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0201 	orr.w	r2, r2, #1
 8006d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e000      	b.n	8006d6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d6c:	2302      	movs	r3, #2
  }
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
	...

08006d7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d141      	bne.n	8006e0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d8a:	4b4b      	ldr	r3, [pc, #300]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d96:	d131      	bne.n	8006dfc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d98:	4b47      	ldr	r3, [pc, #284]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d9e:	4a46      	ldr	r2, [pc, #280]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006da4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006da8:	4b43      	ldr	r3, [pc, #268]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006db0:	4a41      	ldr	r2, [pc, #260]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006db6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006db8:	4b40      	ldr	r3, [pc, #256]	; (8006ebc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2232      	movs	r2, #50	; 0x32
 8006dbe:	fb02 f303 	mul.w	r3, r2, r3
 8006dc2:	4a3f      	ldr	r2, [pc, #252]	; (8006ec0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc8:	0c9b      	lsrs	r3, r3, #18
 8006dca:	3301      	adds	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dce:	e002      	b.n	8006dd6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dd6:	4b38      	ldr	r3, [pc, #224]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de2:	d102      	bne.n	8006dea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1f2      	bne.n	8006dd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006dea:	4b33      	ldr	r3, [pc, #204]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df6:	d158      	bne.n	8006eaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e057      	b.n	8006eac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006dfc:	4b2e      	ldr	r3, [pc, #184]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e02:	4a2d      	ldr	r2, [pc, #180]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006e0c:	e04d      	b.n	8006eaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e14:	d141      	bne.n	8006e9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e16:	4b28      	ldr	r3, [pc, #160]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e22:	d131      	bne.n	8006e88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e24:	4b24      	ldr	r3, [pc, #144]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e2a:	4a23      	ldr	r2, [pc, #140]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e34:	4b20      	ldr	r3, [pc, #128]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e3c:	4a1e      	ldr	r2, [pc, #120]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e44:	4b1d      	ldr	r3, [pc, #116]	; (8006ebc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2232      	movs	r2, #50	; 0x32
 8006e4a:	fb02 f303 	mul.w	r3, r2, r3
 8006e4e:	4a1c      	ldr	r2, [pc, #112]	; (8006ec0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e50:	fba2 2303 	umull	r2, r3, r2, r3
 8006e54:	0c9b      	lsrs	r3, r3, #18
 8006e56:	3301      	adds	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e5a:	e002      	b.n	8006e62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e62:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e6e:	d102      	bne.n	8006e76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1f2      	bne.n	8006e5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e76:	4b10      	ldr	r3, [pc, #64]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e82:	d112      	bne.n	8006eaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e011      	b.n	8006eac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e88:	4b0b      	ldr	r3, [pc, #44]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e8e:	4a0a      	ldr	r2, [pc, #40]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006e98:	e007      	b.n	8006eaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e9a:	4b07      	ldr	r3, [pc, #28]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ea2:	4a05      	ldr	r2, [pc, #20]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ea8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	40007000 	.word	0x40007000
 8006ebc:	20000000 	.word	0x20000000
 8006ec0:	431bde83 	.word	0x431bde83

08006ec4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e306      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d075      	beq.n	8006fce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ee2:	4b97      	ldr	r3, [pc, #604]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f003 030c 	and.w	r3, r3, #12
 8006eea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006eec:	4b94      	ldr	r3, [pc, #592]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	f003 0303 	and.w	r3, r3, #3
 8006ef4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	2b0c      	cmp	r3, #12
 8006efa:	d102      	bne.n	8006f02 <HAL_RCC_OscConfig+0x3e>
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d002      	beq.n	8006f08 <HAL_RCC_OscConfig+0x44>
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d10b      	bne.n	8006f20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f08:	4b8d      	ldr	r3, [pc, #564]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d05b      	beq.n	8006fcc <HAL_RCC_OscConfig+0x108>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d157      	bne.n	8006fcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e2e1      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f28:	d106      	bne.n	8006f38 <HAL_RCC_OscConfig+0x74>
 8006f2a:	4b85      	ldr	r3, [pc, #532]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a84      	ldr	r2, [pc, #528]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8006f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f34:	6013      	str	r3, [r2, #0]
 8006f36:	e01d      	b.n	8006f74 <HAL_RCC_OscConfig+0xb0>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f40:	d10c      	bne.n	8006f5c <HAL_RCC_OscConfig+0x98>
 8006f42:	4b7f      	ldr	r3, [pc, #508]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a7e      	ldr	r2, [pc, #504]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8006f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	4b7c      	ldr	r3, [pc, #496]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a7b      	ldr	r2, [pc, #492]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8006f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	e00b      	b.n	8006f74 <HAL_RCC_OscConfig+0xb0>
 8006f5c:	4b78      	ldr	r3, [pc, #480]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a77      	ldr	r2, [pc, #476]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8006f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	4b75      	ldr	r3, [pc, #468]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a74      	ldr	r2, [pc, #464]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8006f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d013      	beq.n	8006fa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7c:	f7fc fa02 	bl	8003384 <HAL_GetTick>
 8006f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f82:	e008      	b.n	8006f96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f84:	f7fc f9fe 	bl	8003384 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b64      	cmp	r3, #100	; 0x64
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e2a6      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f96:	4b6a      	ldr	r3, [pc, #424]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d0f0      	beq.n	8006f84 <HAL_RCC_OscConfig+0xc0>
 8006fa2:	e014      	b.n	8006fce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa4:	f7fc f9ee 	bl	8003384 <HAL_GetTick>
 8006fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006faa:	e008      	b.n	8006fbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fac:	f7fc f9ea 	bl	8003384 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b64      	cmp	r3, #100	; 0x64
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e292      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fbe:	4b60      	ldr	r3, [pc, #384]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1f0      	bne.n	8006fac <HAL_RCC_OscConfig+0xe8>
 8006fca:	e000      	b.n	8006fce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d075      	beq.n	80070c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fda:	4b59      	ldr	r3, [pc, #356]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 030c 	and.w	r3, r3, #12
 8006fe2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fe4:	4b56      	ldr	r3, [pc, #344]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	f003 0303 	and.w	r3, r3, #3
 8006fec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	2b0c      	cmp	r3, #12
 8006ff2:	d102      	bne.n	8006ffa <HAL_RCC_OscConfig+0x136>
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d002      	beq.n	8007000 <HAL_RCC_OscConfig+0x13c>
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d11f      	bne.n	8007040 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007000:	4b4f      	ldr	r3, [pc, #316]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007008:	2b00      	cmp	r3, #0
 800700a:	d005      	beq.n	8007018 <HAL_RCC_OscConfig+0x154>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e265      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007018:	4b49      	ldr	r3, [pc, #292]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	061b      	lsls	r3, r3, #24
 8007026:	4946      	ldr	r1, [pc, #280]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8007028:	4313      	orrs	r3, r2
 800702a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800702c:	4b45      	ldr	r3, [pc, #276]	; (8007144 <HAL_RCC_OscConfig+0x280>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4618      	mov	r0, r3
 8007032:	f7fc f95b 	bl	80032ec <HAL_InitTick>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d043      	beq.n	80070c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e251      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d023      	beq.n	8007090 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007048:	4b3d      	ldr	r3, [pc, #244]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a3c      	ldr	r2, [pc, #240]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 800704e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007054:	f7fc f996 	bl	8003384 <HAL_GetTick>
 8007058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800705c:	f7fc f992 	bl	8003384 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b02      	cmp	r3, #2
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e23a      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800706e:	4b34      	ldr	r3, [pc, #208]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0f0      	beq.n	800705c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800707a:	4b31      	ldr	r3, [pc, #196]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	061b      	lsls	r3, r3, #24
 8007088:	492d      	ldr	r1, [pc, #180]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 800708a:	4313      	orrs	r3, r2
 800708c:	604b      	str	r3, [r1, #4]
 800708e:	e01a      	b.n	80070c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007090:	4b2b      	ldr	r3, [pc, #172]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a2a      	ldr	r2, [pc, #168]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8007096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800709a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800709c:	f7fc f972 	bl	8003384 <HAL_GetTick>
 80070a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070a2:	e008      	b.n	80070b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070a4:	f7fc f96e 	bl	8003384 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e216      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070b6:	4b22      	ldr	r3, [pc, #136]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1f0      	bne.n	80070a4 <HAL_RCC_OscConfig+0x1e0>
 80070c2:	e000      	b.n	80070c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0308 	and.w	r3, r3, #8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d041      	beq.n	8007156 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d01c      	beq.n	8007114 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070da:	4b19      	ldr	r3, [pc, #100]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 80070dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070e0:	4a17      	ldr	r2, [pc, #92]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 80070e2:	f043 0301 	orr.w	r3, r3, #1
 80070e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ea:	f7fc f94b 	bl	8003384 <HAL_GetTick>
 80070ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070f0:	e008      	b.n	8007104 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070f2:	f7fc f947 	bl	8003384 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d901      	bls.n	8007104 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e1ef      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007104:	4b0e      	ldr	r3, [pc, #56]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8007106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d0ef      	beq.n	80070f2 <HAL_RCC_OscConfig+0x22e>
 8007112:	e020      	b.n	8007156 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007114:	4b0a      	ldr	r3, [pc, #40]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 8007116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800711a:	4a09      	ldr	r2, [pc, #36]	; (8007140 <HAL_RCC_OscConfig+0x27c>)
 800711c:	f023 0301 	bic.w	r3, r3, #1
 8007120:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007124:	f7fc f92e 	bl	8003384 <HAL_GetTick>
 8007128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800712a:	e00d      	b.n	8007148 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800712c:	f7fc f92a 	bl	8003384 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d906      	bls.n	8007148 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e1d2      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
 800713e:	bf00      	nop
 8007140:	40021000 	.word	0x40021000
 8007144:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007148:	4b8c      	ldr	r3, [pc, #560]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 800714a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1ea      	bne.n	800712c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0304 	and.w	r3, r3, #4
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 80a6 	beq.w	80072b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007164:	2300      	movs	r3, #0
 8007166:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007168:	4b84      	ldr	r3, [pc, #528]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 800716a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800716c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_RCC_OscConfig+0x2b4>
 8007174:	2301      	movs	r3, #1
 8007176:	e000      	b.n	800717a <HAL_RCC_OscConfig+0x2b6>
 8007178:	2300      	movs	r3, #0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00d      	beq.n	800719a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800717e:	4b7f      	ldr	r3, [pc, #508]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 8007180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007182:	4a7e      	ldr	r2, [pc, #504]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 8007184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007188:	6593      	str	r3, [r2, #88]	; 0x58
 800718a:	4b7c      	ldr	r3, [pc, #496]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 800718c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007196:	2301      	movs	r3, #1
 8007198:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800719a:	4b79      	ldr	r3, [pc, #484]	; (8007380 <HAL_RCC_OscConfig+0x4bc>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d118      	bne.n	80071d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071a6:	4b76      	ldr	r3, [pc, #472]	; (8007380 <HAL_RCC_OscConfig+0x4bc>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a75      	ldr	r2, [pc, #468]	; (8007380 <HAL_RCC_OscConfig+0x4bc>)
 80071ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071b2:	f7fc f8e7 	bl	8003384 <HAL_GetTick>
 80071b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071b8:	e008      	b.n	80071cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071ba:	f7fc f8e3 	bl	8003384 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d901      	bls.n	80071cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e18b      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071cc:	4b6c      	ldr	r3, [pc, #432]	; (8007380 <HAL_RCC_OscConfig+0x4bc>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d0f0      	beq.n	80071ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d108      	bne.n	80071f2 <HAL_RCC_OscConfig+0x32e>
 80071e0:	4b66      	ldr	r3, [pc, #408]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 80071e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e6:	4a65      	ldr	r2, [pc, #404]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 80071e8:	f043 0301 	orr.w	r3, r3, #1
 80071ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071f0:	e024      	b.n	800723c <HAL_RCC_OscConfig+0x378>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	2b05      	cmp	r3, #5
 80071f8:	d110      	bne.n	800721c <HAL_RCC_OscConfig+0x358>
 80071fa:	4b60      	ldr	r3, [pc, #384]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 80071fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007200:	4a5e      	ldr	r2, [pc, #376]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 8007202:	f043 0304 	orr.w	r3, r3, #4
 8007206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800720a:	4b5c      	ldr	r3, [pc, #368]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 800720c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007210:	4a5a      	ldr	r2, [pc, #360]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 8007212:	f043 0301 	orr.w	r3, r3, #1
 8007216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800721a:	e00f      	b.n	800723c <HAL_RCC_OscConfig+0x378>
 800721c:	4b57      	ldr	r3, [pc, #348]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 800721e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007222:	4a56      	ldr	r2, [pc, #344]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 8007224:	f023 0301 	bic.w	r3, r3, #1
 8007228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800722c:	4b53      	ldr	r3, [pc, #332]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 800722e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007232:	4a52      	ldr	r2, [pc, #328]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 8007234:	f023 0304 	bic.w	r3, r3, #4
 8007238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d016      	beq.n	8007272 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007244:	f7fc f89e 	bl	8003384 <HAL_GetTick>
 8007248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800724a:	e00a      	b.n	8007262 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800724c:	f7fc f89a 	bl	8003384 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	f241 3288 	movw	r2, #5000	; 0x1388
 800725a:	4293      	cmp	r3, r2
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e140      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007262:	4b46      	ldr	r3, [pc, #280]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 8007264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0ed      	beq.n	800724c <HAL_RCC_OscConfig+0x388>
 8007270:	e015      	b.n	800729e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007272:	f7fc f887 	bl	8003384 <HAL_GetTick>
 8007276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007278:	e00a      	b.n	8007290 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800727a:	f7fc f883 	bl	8003384 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	f241 3288 	movw	r2, #5000	; 0x1388
 8007288:	4293      	cmp	r3, r2
 800728a:	d901      	bls.n	8007290 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e129      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007290:	4b3a      	ldr	r3, [pc, #232]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 8007292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1ed      	bne.n	800727a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800729e:	7ffb      	ldrb	r3, [r7, #31]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d105      	bne.n	80072b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072a4:	4b35      	ldr	r3, [pc, #212]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 80072a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a8:	4a34      	ldr	r2, [pc, #208]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 80072aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0320 	and.w	r3, r3, #32
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d03c      	beq.n	8007336 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d01c      	beq.n	80072fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80072c4:	4b2d      	ldr	r3, [pc, #180]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 80072c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072ca:	4a2c      	ldr	r2, [pc, #176]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 80072cc:	f043 0301 	orr.w	r3, r3, #1
 80072d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d4:	f7fc f856 	bl	8003384 <HAL_GetTick>
 80072d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80072da:	e008      	b.n	80072ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072dc:	f7fc f852 	bl	8003384 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d901      	bls.n	80072ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e0fa      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80072ee:	4b23      	ldr	r3, [pc, #140]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 80072f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d0ef      	beq.n	80072dc <HAL_RCC_OscConfig+0x418>
 80072fc:	e01b      	b.n	8007336 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072fe:	4b1f      	ldr	r3, [pc, #124]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 8007300:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007304:	4a1d      	ldr	r2, [pc, #116]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 8007306:	f023 0301 	bic.w	r3, r3, #1
 800730a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800730e:	f7fc f839 	bl	8003384 <HAL_GetTick>
 8007312:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007314:	e008      	b.n	8007328 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007316:	f7fc f835 	bl	8003384 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	2b02      	cmp	r3, #2
 8007322:	d901      	bls.n	8007328 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e0dd      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007328:	4b14      	ldr	r3, [pc, #80]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 800732a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1ef      	bne.n	8007316 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 80d1 	beq.w	80074e2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007340:	4b0e      	ldr	r3, [pc, #56]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f003 030c 	and.w	r3, r3, #12
 8007348:	2b0c      	cmp	r3, #12
 800734a:	f000 808b 	beq.w	8007464 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	2b02      	cmp	r3, #2
 8007354:	d15e      	bne.n	8007414 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007356:	4b09      	ldr	r3, [pc, #36]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a08      	ldr	r2, [pc, #32]	; (800737c <HAL_RCC_OscConfig+0x4b8>)
 800735c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007362:	f7fc f80f 	bl	8003384 <HAL_GetTick>
 8007366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007368:	e00c      	b.n	8007384 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800736a:	f7fc f80b 	bl	8003384 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	2b02      	cmp	r3, #2
 8007376:	d905      	bls.n	8007384 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e0b3      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
 800737c:	40021000 	.word	0x40021000
 8007380:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007384:	4b59      	ldr	r3, [pc, #356]	; (80074ec <HAL_RCC_OscConfig+0x628>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1ec      	bne.n	800736a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007390:	4b56      	ldr	r3, [pc, #344]	; (80074ec <HAL_RCC_OscConfig+0x628>)
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	4b56      	ldr	r3, [pc, #344]	; (80074f0 <HAL_RCC_OscConfig+0x62c>)
 8007396:	4013      	ands	r3, r2
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	6a11      	ldr	r1, [r2, #32]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073a0:	3a01      	subs	r2, #1
 80073a2:	0112      	lsls	r2, r2, #4
 80073a4:	4311      	orrs	r1, r2
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80073aa:	0212      	lsls	r2, r2, #8
 80073ac:	4311      	orrs	r1, r2
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80073b2:	0852      	lsrs	r2, r2, #1
 80073b4:	3a01      	subs	r2, #1
 80073b6:	0552      	lsls	r2, r2, #21
 80073b8:	4311      	orrs	r1, r2
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80073be:	0852      	lsrs	r2, r2, #1
 80073c0:	3a01      	subs	r2, #1
 80073c2:	0652      	lsls	r2, r2, #25
 80073c4:	4311      	orrs	r1, r2
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80073ca:	06d2      	lsls	r2, r2, #27
 80073cc:	430a      	orrs	r2, r1
 80073ce:	4947      	ldr	r1, [pc, #284]	; (80074ec <HAL_RCC_OscConfig+0x628>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073d4:	4b45      	ldr	r3, [pc, #276]	; (80074ec <HAL_RCC_OscConfig+0x628>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a44      	ldr	r2, [pc, #272]	; (80074ec <HAL_RCC_OscConfig+0x628>)
 80073da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073e0:	4b42      	ldr	r3, [pc, #264]	; (80074ec <HAL_RCC_OscConfig+0x628>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	4a41      	ldr	r2, [pc, #260]	; (80074ec <HAL_RCC_OscConfig+0x628>)
 80073e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ec:	f7fb ffca 	bl	8003384 <HAL_GetTick>
 80073f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073f2:	e008      	b.n	8007406 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073f4:	f7fb ffc6 	bl	8003384 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e06e      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007406:	4b39      	ldr	r3, [pc, #228]	; (80074ec <HAL_RCC_OscConfig+0x628>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0f0      	beq.n	80073f4 <HAL_RCC_OscConfig+0x530>
 8007412:	e066      	b.n	80074e2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007414:	4b35      	ldr	r3, [pc, #212]	; (80074ec <HAL_RCC_OscConfig+0x628>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a34      	ldr	r2, [pc, #208]	; (80074ec <HAL_RCC_OscConfig+0x628>)
 800741a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800741e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007420:	4b32      	ldr	r3, [pc, #200]	; (80074ec <HAL_RCC_OscConfig+0x628>)
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	4a31      	ldr	r2, [pc, #196]	; (80074ec <HAL_RCC_OscConfig+0x628>)
 8007426:	f023 0303 	bic.w	r3, r3, #3
 800742a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800742c:	4b2f      	ldr	r3, [pc, #188]	; (80074ec <HAL_RCC_OscConfig+0x628>)
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	4a2e      	ldr	r2, [pc, #184]	; (80074ec <HAL_RCC_OscConfig+0x628>)
 8007432:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800743a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800743c:	f7fb ffa2 	bl	8003384 <HAL_GetTick>
 8007440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007442:	e008      	b.n	8007456 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007444:	f7fb ff9e 	bl	8003384 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b02      	cmp	r3, #2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e046      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007456:	4b25      	ldr	r3, [pc, #148]	; (80074ec <HAL_RCC_OscConfig+0x628>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1f0      	bne.n	8007444 <HAL_RCC_OscConfig+0x580>
 8007462:	e03e      	b.n	80074e2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e039      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007470:	4b1e      	ldr	r3, [pc, #120]	; (80074ec <HAL_RCC_OscConfig+0x628>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f003 0203 	and.w	r2, r3, #3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	429a      	cmp	r2, r3
 8007482:	d12c      	bne.n	80074de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	3b01      	subs	r3, #1
 8007490:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007492:	429a      	cmp	r2, r3
 8007494:	d123      	bne.n	80074de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d11b      	bne.n	80074de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d113      	bne.n	80074de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c0:	085b      	lsrs	r3, r3, #1
 80074c2:	3b01      	subs	r3, #1
 80074c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d109      	bne.n	80074de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d4:	085b      	lsrs	r3, r3, #1
 80074d6:	3b01      	subs	r3, #1
 80074d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074da:	429a      	cmp	r2, r3
 80074dc:	d001      	beq.n	80074e2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e000      	b.n	80074e4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3720      	adds	r7, #32
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	40021000 	.word	0x40021000
 80074f0:	019f800c 	.word	0x019f800c

080074f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80074fe:	2300      	movs	r3, #0
 8007500:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e11e      	b.n	800774a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800750c:	4b91      	ldr	r3, [pc, #580]	; (8007754 <HAL_RCC_ClockConfig+0x260>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 030f 	and.w	r3, r3, #15
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	429a      	cmp	r2, r3
 8007518:	d910      	bls.n	800753c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800751a:	4b8e      	ldr	r3, [pc, #568]	; (8007754 <HAL_RCC_ClockConfig+0x260>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f023 020f 	bic.w	r2, r3, #15
 8007522:	498c      	ldr	r1, [pc, #560]	; (8007754 <HAL_RCC_ClockConfig+0x260>)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	4313      	orrs	r3, r2
 8007528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800752a:	4b8a      	ldr	r3, [pc, #552]	; (8007754 <HAL_RCC_ClockConfig+0x260>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 030f 	and.w	r3, r3, #15
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d001      	beq.n	800753c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e106      	b.n	800774a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b00      	cmp	r3, #0
 8007546:	d073      	beq.n	8007630 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	2b03      	cmp	r3, #3
 800754e:	d129      	bne.n	80075a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007550:	4b81      	ldr	r3, [pc, #516]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e0f4      	b.n	800774a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007560:	f000 f99e 	bl	80078a0 <RCC_GetSysClockFreqFromPLLSource>
 8007564:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	4a7c      	ldr	r2, [pc, #496]	; (800775c <HAL_RCC_ClockConfig+0x268>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d93f      	bls.n	80075ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800756e:	4b7a      	ldr	r3, [pc, #488]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d009      	beq.n	800758e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007582:	2b00      	cmp	r3, #0
 8007584:	d033      	beq.n	80075ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800758a:	2b00      	cmp	r3, #0
 800758c:	d12f      	bne.n	80075ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800758e:	4b72      	ldr	r3, [pc, #456]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007596:	4a70      	ldr	r2, [pc, #448]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 8007598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800759e:	2380      	movs	r3, #128	; 0x80
 80075a0:	617b      	str	r3, [r7, #20]
 80075a2:	e024      	b.n	80075ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d107      	bne.n	80075bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075ac:	4b6a      	ldr	r3, [pc, #424]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d109      	bne.n	80075cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e0c6      	b.n	800774a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075bc:	4b66      	ldr	r3, [pc, #408]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e0be      	b.n	800774a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80075cc:	f000 f8ce 	bl	800776c <HAL_RCC_GetSysClockFreq>
 80075d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	4a61      	ldr	r2, [pc, #388]	; (800775c <HAL_RCC_ClockConfig+0x268>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d909      	bls.n	80075ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80075da:	4b5f      	ldr	r3, [pc, #380]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075e2:	4a5d      	ldr	r2, [pc, #372]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 80075e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80075ea:	2380      	movs	r3, #128	; 0x80
 80075ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075ee:	4b5a      	ldr	r3, [pc, #360]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f023 0203 	bic.w	r2, r3, #3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	4957      	ldr	r1, [pc, #348]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007600:	f7fb fec0 	bl	8003384 <HAL_GetTick>
 8007604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007606:	e00a      	b.n	800761e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007608:	f7fb febc 	bl	8003384 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	f241 3288 	movw	r2, #5000	; 0x1388
 8007616:	4293      	cmp	r3, r2
 8007618:	d901      	bls.n	800761e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e095      	b.n	800774a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800761e:	4b4e      	ldr	r3, [pc, #312]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f003 020c 	and.w	r2, r3, #12
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	429a      	cmp	r2, r3
 800762e:	d1eb      	bne.n	8007608 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b00      	cmp	r3, #0
 800763a:	d023      	beq.n	8007684 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b00      	cmp	r3, #0
 8007646:	d005      	beq.n	8007654 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007648:	4b43      	ldr	r3, [pc, #268]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	4a42      	ldr	r2, [pc, #264]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 800764e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007652:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0308 	and.w	r3, r3, #8
 800765c:	2b00      	cmp	r3, #0
 800765e:	d007      	beq.n	8007670 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007660:	4b3d      	ldr	r3, [pc, #244]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007668:	4a3b      	ldr	r2, [pc, #236]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 800766a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800766e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007670:	4b39      	ldr	r3, [pc, #228]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	4936      	ldr	r1, [pc, #216]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 800767e:	4313      	orrs	r3, r2
 8007680:	608b      	str	r3, [r1, #8]
 8007682:	e008      	b.n	8007696 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2b80      	cmp	r3, #128	; 0x80
 8007688:	d105      	bne.n	8007696 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800768a:	4b33      	ldr	r3, [pc, #204]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	4a32      	ldr	r2, [pc, #200]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 8007690:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007694:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007696:	4b2f      	ldr	r3, [pc, #188]	; (8007754 <HAL_RCC_ClockConfig+0x260>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 030f 	and.w	r3, r3, #15
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d21d      	bcs.n	80076e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076a4:	4b2b      	ldr	r3, [pc, #172]	; (8007754 <HAL_RCC_ClockConfig+0x260>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f023 020f 	bic.w	r2, r3, #15
 80076ac:	4929      	ldr	r1, [pc, #164]	; (8007754 <HAL_RCC_ClockConfig+0x260>)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80076b4:	f7fb fe66 	bl	8003384 <HAL_GetTick>
 80076b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ba:	e00a      	b.n	80076d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076bc:	f7fb fe62 	bl	8003384 <HAL_GetTick>
 80076c0:	4602      	mov	r2, r0
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d901      	bls.n	80076d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e03b      	b.n	800774a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d2:	4b20      	ldr	r3, [pc, #128]	; (8007754 <HAL_RCC_ClockConfig+0x260>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 030f 	and.w	r3, r3, #15
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d1ed      	bne.n	80076bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0304 	and.w	r3, r3, #4
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d008      	beq.n	80076fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076ec:	4b1a      	ldr	r3, [pc, #104]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	4917      	ldr	r1, [pc, #92]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0308 	and.w	r3, r3, #8
 8007706:	2b00      	cmp	r3, #0
 8007708:	d009      	beq.n	800771e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800770a:	4b13      	ldr	r3, [pc, #76]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	490f      	ldr	r1, [pc, #60]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 800771a:	4313      	orrs	r3, r2
 800771c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800771e:	f000 f825 	bl	800776c <HAL_RCC_GetSysClockFreq>
 8007722:	4602      	mov	r2, r0
 8007724:	4b0c      	ldr	r3, [pc, #48]	; (8007758 <HAL_RCC_ClockConfig+0x264>)
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	091b      	lsrs	r3, r3, #4
 800772a:	f003 030f 	and.w	r3, r3, #15
 800772e:	490c      	ldr	r1, [pc, #48]	; (8007760 <HAL_RCC_ClockConfig+0x26c>)
 8007730:	5ccb      	ldrb	r3, [r1, r3]
 8007732:	f003 031f 	and.w	r3, r3, #31
 8007736:	fa22 f303 	lsr.w	r3, r2, r3
 800773a:	4a0a      	ldr	r2, [pc, #40]	; (8007764 <HAL_RCC_ClockConfig+0x270>)
 800773c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800773e:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <HAL_RCC_ClockConfig+0x274>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4618      	mov	r0, r3
 8007744:	f7fb fdd2 	bl	80032ec <HAL_InitTick>
 8007748:	4603      	mov	r3, r0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	40022000 	.word	0x40022000
 8007758:	40021000 	.word	0x40021000
 800775c:	04c4b400 	.word	0x04c4b400
 8007760:	08009750 	.word	0x08009750
 8007764:	20000000 	.word	0x20000000
 8007768:	20000004 	.word	0x20000004

0800776c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007772:	4b2c      	ldr	r3, [pc, #176]	; (8007824 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f003 030c 	and.w	r3, r3, #12
 800777a:	2b04      	cmp	r3, #4
 800777c:	d102      	bne.n	8007784 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800777e:	4b2a      	ldr	r3, [pc, #168]	; (8007828 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007780:	613b      	str	r3, [r7, #16]
 8007782:	e047      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007784:	4b27      	ldr	r3, [pc, #156]	; (8007824 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f003 030c 	and.w	r3, r3, #12
 800778c:	2b08      	cmp	r3, #8
 800778e:	d102      	bne.n	8007796 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007790:	4b26      	ldr	r3, [pc, #152]	; (800782c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007792:	613b      	str	r3, [r7, #16]
 8007794:	e03e      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007796:	4b23      	ldr	r3, [pc, #140]	; (8007824 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f003 030c 	and.w	r3, r3, #12
 800779e:	2b0c      	cmp	r3, #12
 80077a0:	d136      	bne.n	8007810 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80077a2:	4b20      	ldr	r3, [pc, #128]	; (8007824 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f003 0303 	and.w	r3, r3, #3
 80077aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077ac:	4b1d      	ldr	r3, [pc, #116]	; (8007824 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	091b      	lsrs	r3, r3, #4
 80077b2:	f003 030f 	and.w	r3, r3, #15
 80077b6:	3301      	adds	r3, #1
 80077b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d10c      	bne.n	80077da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077c0:	4a1a      	ldr	r2, [pc, #104]	; (800782c <HAL_RCC_GetSysClockFreq+0xc0>)
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c8:	4a16      	ldr	r2, [pc, #88]	; (8007824 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077ca:	68d2      	ldr	r2, [r2, #12]
 80077cc:	0a12      	lsrs	r2, r2, #8
 80077ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80077d2:	fb02 f303 	mul.w	r3, r2, r3
 80077d6:	617b      	str	r3, [r7, #20]
      break;
 80077d8:	e00c      	b.n	80077f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077da:	4a13      	ldr	r2, [pc, #76]	; (8007828 <HAL_RCC_GetSysClockFreq+0xbc>)
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e2:	4a10      	ldr	r2, [pc, #64]	; (8007824 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077e4:	68d2      	ldr	r2, [r2, #12]
 80077e6:	0a12      	lsrs	r2, r2, #8
 80077e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80077ec:	fb02 f303 	mul.w	r3, r2, r3
 80077f0:	617b      	str	r3, [r7, #20]
      break;
 80077f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077f4:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	0e5b      	lsrs	r3, r3, #25
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	3301      	adds	r3, #1
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	fbb2 f3f3 	udiv	r3, r2, r3
 800780c:	613b      	str	r3, [r7, #16]
 800780e:	e001      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007814:	693b      	ldr	r3, [r7, #16]
}
 8007816:	4618      	mov	r0, r3
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	40021000 	.word	0x40021000
 8007828:	00f42400 	.word	0x00f42400
 800782c:	007a1200 	.word	0x007a1200

08007830 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007830:	b480      	push	{r7}
 8007832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007834:	4b03      	ldr	r3, [pc, #12]	; (8007844 <HAL_RCC_GetHCLKFreq+0x14>)
 8007836:	681b      	ldr	r3, [r3, #0]
}
 8007838:	4618      	mov	r0, r3
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	20000000 	.word	0x20000000

08007848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800784c:	f7ff fff0 	bl	8007830 <HAL_RCC_GetHCLKFreq>
 8007850:	4602      	mov	r2, r0
 8007852:	4b06      	ldr	r3, [pc, #24]	; (800786c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	0a1b      	lsrs	r3, r3, #8
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	4904      	ldr	r1, [pc, #16]	; (8007870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800785e:	5ccb      	ldrb	r3, [r1, r3]
 8007860:	f003 031f 	and.w	r3, r3, #31
 8007864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007868:	4618      	mov	r0, r3
 800786a:	bd80      	pop	{r7, pc}
 800786c:	40021000 	.word	0x40021000
 8007870:	08009760 	.word	0x08009760

08007874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007878:	f7ff ffda 	bl	8007830 <HAL_RCC_GetHCLKFreq>
 800787c:	4602      	mov	r2, r0
 800787e:	4b06      	ldr	r3, [pc, #24]	; (8007898 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	0adb      	lsrs	r3, r3, #11
 8007884:	f003 0307 	and.w	r3, r3, #7
 8007888:	4904      	ldr	r1, [pc, #16]	; (800789c <HAL_RCC_GetPCLK2Freq+0x28>)
 800788a:	5ccb      	ldrb	r3, [r1, r3]
 800788c:	f003 031f 	and.w	r3, r3, #31
 8007890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007894:	4618      	mov	r0, r3
 8007896:	bd80      	pop	{r7, pc}
 8007898:	40021000 	.word	0x40021000
 800789c:	08009760 	.word	0x08009760

080078a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078a6:	4b1e      	ldr	r3, [pc, #120]	; (8007920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078b0:	4b1b      	ldr	r3, [pc, #108]	; (8007920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	091b      	lsrs	r3, r3, #4
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	3301      	adds	r3, #1
 80078bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	2b03      	cmp	r3, #3
 80078c2:	d10c      	bne.n	80078de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078c4:	4a17      	ldr	r2, [pc, #92]	; (8007924 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078cc:	4a14      	ldr	r2, [pc, #80]	; (8007920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078ce:	68d2      	ldr	r2, [r2, #12]
 80078d0:	0a12      	lsrs	r2, r2, #8
 80078d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078d6:	fb02 f303 	mul.w	r3, r2, r3
 80078da:	617b      	str	r3, [r7, #20]
    break;
 80078dc:	e00c      	b.n	80078f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078de:	4a12      	ldr	r2, [pc, #72]	; (8007928 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e6:	4a0e      	ldr	r2, [pc, #56]	; (8007920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078e8:	68d2      	ldr	r2, [r2, #12]
 80078ea:	0a12      	lsrs	r2, r2, #8
 80078ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078f0:	fb02 f303 	mul.w	r3, r2, r3
 80078f4:	617b      	str	r3, [r7, #20]
    break;
 80078f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078f8:	4b09      	ldr	r3, [pc, #36]	; (8007920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	0e5b      	lsrs	r3, r3, #25
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	3301      	adds	r3, #1
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007910:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007912:	687b      	ldr	r3, [r7, #4]
}
 8007914:	4618      	mov	r0, r3
 8007916:	371c      	adds	r7, #28
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	40021000 	.word	0x40021000
 8007924:	007a1200 	.word	0x007a1200
 8007928:	00f42400 	.word	0x00f42400

0800792c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007934:	2300      	movs	r3, #0
 8007936:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007938:	2300      	movs	r3, #0
 800793a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 8098 	beq.w	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800794a:	2300      	movs	r3, #0
 800794c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800794e:	4b43      	ldr	r3, [pc, #268]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10d      	bne.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800795a:	4b40      	ldr	r3, [pc, #256]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800795c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795e:	4a3f      	ldr	r2, [pc, #252]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007964:	6593      	str	r3, [r2, #88]	; 0x58
 8007966:	4b3d      	ldr	r3, [pc, #244]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800796e:	60bb      	str	r3, [r7, #8]
 8007970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007972:	2301      	movs	r3, #1
 8007974:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007976:	4b3a      	ldr	r3, [pc, #232]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a39      	ldr	r2, [pc, #228]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800797c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007980:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007982:	f7fb fcff 	bl	8003384 <HAL_GetTick>
 8007986:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007988:	e009      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800798a:	f7fb fcfb 	bl	8003384 <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	2b02      	cmp	r3, #2
 8007996:	d902      	bls.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	74fb      	strb	r3, [r7, #19]
        break;
 800799c:	e005      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800799e:	4b30      	ldr	r3, [pc, #192]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d0ef      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80079aa:	7cfb      	ldrb	r3, [r7, #19]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d159      	bne.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80079b0:	4b2a      	ldr	r3, [pc, #168]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d01e      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d019      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079cc:	4b23      	ldr	r3, [pc, #140]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079d8:	4b20      	ldr	r3, [pc, #128]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079de:	4a1f      	ldr	r2, [pc, #124]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079e8:	4b1c      	ldr	r3, [pc, #112]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ee:	4a1b      	ldr	r2, [pc, #108]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80079f8:	4a18      	ldr	r2, [pc, #96]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d016      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a0a:	f7fb fcbb 	bl	8003384 <HAL_GetTick>
 8007a0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a10:	e00b      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a12:	f7fb fcb7 	bl	8003384 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d902      	bls.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	74fb      	strb	r3, [r7, #19]
            break;
 8007a28:	e006      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a2a:	4b0c      	ldr	r3, [pc, #48]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d0ec      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007a38:	7cfb      	ldrb	r3, [r7, #19]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10b      	bne.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a3e:	4b07      	ldr	r3, [pc, #28]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4c:	4903      	ldr	r1, [pc, #12]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007a54:	e008      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a56:	7cfb      	ldrb	r3, [r7, #19]
 8007a58:	74bb      	strb	r3, [r7, #18]
 8007a5a:	e005      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007a5c:	40021000 	.word	0x40021000
 8007a60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a64:	7cfb      	ldrb	r3, [r7, #19]
 8007a66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a68:	7c7b      	ldrb	r3, [r7, #17]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d105      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a6e:	4ba7      	ldr	r3, [pc, #668]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a72:	4aa6      	ldr	r2, [pc, #664]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a86:	4ba1      	ldr	r3, [pc, #644]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a8c:	f023 0203 	bic.w	r2, r3, #3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	499d      	ldr	r1, [pc, #628]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00a      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007aa8:	4b98      	ldr	r3, [pc, #608]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aae:	f023 020c 	bic.w	r2, r3, #12
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	4995      	ldr	r1, [pc, #596]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0304 	and.w	r3, r3, #4
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00a      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007aca:	4b90      	ldr	r3, [pc, #576]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	498c      	ldr	r1, [pc, #560]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0308 	and.w	r3, r3, #8
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00a      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007aec:	4b87      	ldr	r3, [pc, #540]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007af2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	4984      	ldr	r1, [pc, #528]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007afc:	4313      	orrs	r3, r2
 8007afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0310 	and.w	r3, r3, #16
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b0e:	4b7f      	ldr	r3, [pc, #508]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	497b      	ldr	r1, [pc, #492]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0320 	and.w	r3, r3, #32
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00a      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b30:	4b76      	ldr	r3, [pc, #472]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	4973      	ldr	r1, [pc, #460]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b52:	4b6e      	ldr	r3, [pc, #440]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	496a      	ldr	r1, [pc, #424]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00a      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b74:	4b65      	ldr	r3, [pc, #404]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	4962      	ldr	r1, [pc, #392]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00a      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b96:	4b5d      	ldr	r3, [pc, #372]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	4959      	ldr	r1, [pc, #356]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bb8:	4b54      	ldr	r3, [pc, #336]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bbe:	f023 0203 	bic.w	r2, r3, #3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc6:	4951      	ldr	r1, [pc, #324]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007bda:	4b4c      	ldr	r3, [pc, #304]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be8:	4948      	ldr	r1, [pc, #288]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d015      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bfc:	4b43      	ldr	r3, [pc, #268]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0a:	4940      	ldr	r1, [pc, #256]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c1a:	d105      	bne.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c1c:	4b3b      	ldr	r3, [pc, #236]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	4a3a      	ldr	r2, [pc, #232]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d015      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c34:	4b35      	ldr	r3, [pc, #212]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c42:	4932      	ldr	r1, [pc, #200]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c52:	d105      	bne.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c54:	4b2d      	ldr	r3, [pc, #180]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	4a2c      	ldr	r2, [pc, #176]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c5e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d015      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c6c:	4b27      	ldr	r3, [pc, #156]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7a:	4924      	ldr	r1, [pc, #144]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c8a:	d105      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c8c:	4b1f      	ldr	r3, [pc, #124]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	4a1e      	ldr	r2, [pc, #120]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c96:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d015      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ca4:	4b19      	ldr	r3, [pc, #100]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007caa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb2:	4916      	ldr	r1, [pc, #88]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cc2:	d105      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cc4:	4b11      	ldr	r3, [pc, #68]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	4a10      	ldr	r2, [pc, #64]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d019      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007cdc:	4b0b      	ldr	r3, [pc, #44]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ce2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	4908      	ldr	r1, [pc, #32]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cfa:	d109      	bne.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cfc:	4b03      	ldr	r3, [pc, #12]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	4a02      	ldr	r2, [pc, #8]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d06:	60d3      	str	r3, [r2, #12]
 8007d08:	e002      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007d0a:	bf00      	nop
 8007d0c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d015      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007d1c:	4b29      	ldr	r3, [pc, #164]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2a:	4926      	ldr	r1, [pc, #152]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d3a:	d105      	bne.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007d3c:	4b21      	ldr	r3, [pc, #132]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	4a20      	ldr	r2, [pc, #128]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d46:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d015      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007d54:	4b1b      	ldr	r3, [pc, #108]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d5a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d62:	4918      	ldr	r1, [pc, #96]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d72:	d105      	bne.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007d74:	4b13      	ldr	r3, [pc, #76]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	4a12      	ldr	r2, [pc, #72]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d7e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d015      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d8c:	4b0d      	ldr	r3, [pc, #52]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d9a:	490a      	ldr	r1, [pc, #40]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007da6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007daa:	d105      	bne.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dac:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	4a04      	ldr	r2, [pc, #16]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007db6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007db8:	7cbb      	ldrb	r3, [r7, #18]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	40021000 	.word	0x40021000

08007dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e049      	b.n	8007e6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d106      	bne.n	8007df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7fb f95a 	bl	80030a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3304      	adds	r3, #4
 8007e04:	4619      	mov	r1, r3
 8007e06:	4610      	mov	r0, r2
 8007e08:	f000 fb6c 	bl	80084e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
	...

08007e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d001      	beq.n	8007e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e054      	b.n	8007f3a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0201 	orr.w	r2, r2, #1
 8007ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a26      	ldr	r2, [pc, #152]	; (8007f48 <HAL_TIM_Base_Start_IT+0xd0>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d022      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eba:	d01d      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a22      	ldr	r2, [pc, #136]	; (8007f4c <HAL_TIM_Base_Start_IT+0xd4>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d018      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a21      	ldr	r2, [pc, #132]	; (8007f50 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d013      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a1f      	ldr	r2, [pc, #124]	; (8007f54 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d00e      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a1e      	ldr	r2, [pc, #120]	; (8007f58 <HAL_TIM_Base_Start_IT+0xe0>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d009      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a1c      	ldr	r2, [pc, #112]	; (8007f5c <HAL_TIM_Base_Start_IT+0xe4>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d004      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a1b      	ldr	r2, [pc, #108]	; (8007f60 <HAL_TIM_Base_Start_IT+0xe8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d115      	bne.n	8007f24 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689a      	ldr	r2, [r3, #8]
 8007efe:	4b19      	ldr	r3, [pc, #100]	; (8007f64 <HAL_TIM_Base_Start_IT+0xec>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b06      	cmp	r3, #6
 8007f08:	d015      	beq.n	8007f36 <HAL_TIM_Base_Start_IT+0xbe>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f10:	d011      	beq.n	8007f36 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f042 0201 	orr.w	r2, r2, #1
 8007f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f22:	e008      	b.n	8007f36 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0201 	orr.w	r2, r2, #1
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	e000      	b.n	8007f38 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	40012c00 	.word	0x40012c00
 8007f4c:	40000400 	.word	0x40000400
 8007f50:	40000800 	.word	0x40000800
 8007f54:	40000c00 	.word	0x40000c00
 8007f58:	40013400 	.word	0x40013400
 8007f5c:	40014000 	.word	0x40014000
 8007f60:	40015000 	.word	0x40015000
 8007f64:	00010007 	.word	0x00010007

08007f68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d122      	bne.n	8007fc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f003 0302 	and.w	r3, r3, #2
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d11b      	bne.n	8007fc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f06f 0202 	mvn.w	r2, #2
 8007f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	f003 0303 	and.w	r3, r3, #3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fa7c 	bl	80084a8 <HAL_TIM_IC_CaptureCallback>
 8007fb0:	e005      	b.n	8007fbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fa6e 	bl	8008494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fa7f 	bl	80084bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	f003 0304 	and.w	r3, r3, #4
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d122      	bne.n	8008018 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f003 0304 	and.w	r3, r3, #4
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d11b      	bne.n	8008018 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f06f 0204 	mvn.w	r2, #4
 8007fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2202      	movs	r2, #2
 8007fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fa52 	bl	80084a8 <HAL_TIM_IC_CaptureCallback>
 8008004:	e005      	b.n	8008012 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fa44 	bl	8008494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fa55 	bl	80084bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	f003 0308 	and.w	r3, r3, #8
 8008022:	2b08      	cmp	r3, #8
 8008024:	d122      	bne.n	800806c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b08      	cmp	r3, #8
 8008032:	d11b      	bne.n	800806c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f06f 0208 	mvn.w	r2, #8
 800803c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2204      	movs	r2, #4
 8008042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	f003 0303 	and.w	r3, r3, #3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fa28 	bl	80084a8 <HAL_TIM_IC_CaptureCallback>
 8008058:	e005      	b.n	8008066 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fa1a 	bl	8008494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fa2b 	bl	80084bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	f003 0310 	and.w	r3, r3, #16
 8008076:	2b10      	cmp	r3, #16
 8008078:	d122      	bne.n	80080c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	f003 0310 	and.w	r3, r3, #16
 8008084:	2b10      	cmp	r3, #16
 8008086:	d11b      	bne.n	80080c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f06f 0210 	mvn.w	r2, #16
 8008090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2208      	movs	r2, #8
 8008096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f9fe 	bl	80084a8 <HAL_TIM_IC_CaptureCallback>
 80080ac:	e005      	b.n	80080ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f9f0 	bl	8008494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fa01 	bl	80084bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d10e      	bne.n	80080ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d107      	bne.n	80080ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f06f 0201 	mvn.w	r2, #1
 80080e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7fa febe 	bl	8002e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080f6:	2b80      	cmp	r3, #128	; 0x80
 80080f8:	d10e      	bne.n	8008118 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008104:	2b80      	cmp	r3, #128	; 0x80
 8008106:	d107      	bne.n	8008118 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fbca 	bl	80088ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008126:	d10e      	bne.n	8008146 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008132:	2b80      	cmp	r3, #128	; 0x80
 8008134:	d107      	bne.n	8008146 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800813e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fbbd 	bl	80088c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008150:	2b40      	cmp	r3, #64	; 0x40
 8008152:	d10e      	bne.n	8008172 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815e:	2b40      	cmp	r3, #64	; 0x40
 8008160:	d107      	bne.n	8008172 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800816a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f9af 	bl	80084d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	f003 0320 	and.w	r3, r3, #32
 800817c:	2b20      	cmp	r3, #32
 800817e:	d10e      	bne.n	800819e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b20      	cmp	r3, #32
 800818c:	d107      	bne.n	800819e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f06f 0220 	mvn.w	r2, #32
 8008196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fb7d 	bl	8008898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081ac:	d10f      	bne.n	80081ce <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081bc:	d107      	bne.n	80081ce <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80081c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fb83 	bl	80088d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081dc:	d10f      	bne.n	80081fe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081ec:	d107      	bne.n	80081fe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80081f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fb75 	bl	80088e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008208:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800820c:	d10f      	bne.n	800822e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800821c:	d107      	bne.n	800822e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fb67 	bl	80088fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008238:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800823c:	d10f      	bne.n	800825e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008248:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800824c:	d107      	bne.n	800825e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fb59 	bl	8008910 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800825e:	bf00      	nop
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
	...

08008268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_TIM_ConfigClockSource+0x1c>
 8008280:	2302      	movs	r3, #2
 8008282:	e0f6      	b.n	8008472 <HAL_TIM_ConfigClockSource+0x20a>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80082a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a6f      	ldr	r2, [pc, #444]	; (800847c <HAL_TIM_ConfigClockSource+0x214>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	f000 80c1 	beq.w	8008446 <HAL_TIM_ConfigClockSource+0x1de>
 80082c4:	4a6d      	ldr	r2, [pc, #436]	; (800847c <HAL_TIM_ConfigClockSource+0x214>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	f200 80c6 	bhi.w	8008458 <HAL_TIM_ConfigClockSource+0x1f0>
 80082cc:	4a6c      	ldr	r2, [pc, #432]	; (8008480 <HAL_TIM_ConfigClockSource+0x218>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	f000 80b9 	beq.w	8008446 <HAL_TIM_ConfigClockSource+0x1de>
 80082d4:	4a6a      	ldr	r2, [pc, #424]	; (8008480 <HAL_TIM_ConfigClockSource+0x218>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	f200 80be 	bhi.w	8008458 <HAL_TIM_ConfigClockSource+0x1f0>
 80082dc:	4a69      	ldr	r2, [pc, #420]	; (8008484 <HAL_TIM_ConfigClockSource+0x21c>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	f000 80b1 	beq.w	8008446 <HAL_TIM_ConfigClockSource+0x1de>
 80082e4:	4a67      	ldr	r2, [pc, #412]	; (8008484 <HAL_TIM_ConfigClockSource+0x21c>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	f200 80b6 	bhi.w	8008458 <HAL_TIM_ConfigClockSource+0x1f0>
 80082ec:	4a66      	ldr	r2, [pc, #408]	; (8008488 <HAL_TIM_ConfigClockSource+0x220>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	f000 80a9 	beq.w	8008446 <HAL_TIM_ConfigClockSource+0x1de>
 80082f4:	4a64      	ldr	r2, [pc, #400]	; (8008488 <HAL_TIM_ConfigClockSource+0x220>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	f200 80ae 	bhi.w	8008458 <HAL_TIM_ConfigClockSource+0x1f0>
 80082fc:	4a63      	ldr	r2, [pc, #396]	; (800848c <HAL_TIM_ConfigClockSource+0x224>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	f000 80a1 	beq.w	8008446 <HAL_TIM_ConfigClockSource+0x1de>
 8008304:	4a61      	ldr	r2, [pc, #388]	; (800848c <HAL_TIM_ConfigClockSource+0x224>)
 8008306:	4293      	cmp	r3, r2
 8008308:	f200 80a6 	bhi.w	8008458 <HAL_TIM_ConfigClockSource+0x1f0>
 800830c:	4a60      	ldr	r2, [pc, #384]	; (8008490 <HAL_TIM_ConfigClockSource+0x228>)
 800830e:	4293      	cmp	r3, r2
 8008310:	f000 8099 	beq.w	8008446 <HAL_TIM_ConfigClockSource+0x1de>
 8008314:	4a5e      	ldr	r2, [pc, #376]	; (8008490 <HAL_TIM_ConfigClockSource+0x228>)
 8008316:	4293      	cmp	r3, r2
 8008318:	f200 809e 	bhi.w	8008458 <HAL_TIM_ConfigClockSource+0x1f0>
 800831c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008320:	f000 8091 	beq.w	8008446 <HAL_TIM_ConfigClockSource+0x1de>
 8008324:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008328:	f200 8096 	bhi.w	8008458 <HAL_TIM_ConfigClockSource+0x1f0>
 800832c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008330:	f000 8089 	beq.w	8008446 <HAL_TIM_ConfigClockSource+0x1de>
 8008334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008338:	f200 808e 	bhi.w	8008458 <HAL_TIM_ConfigClockSource+0x1f0>
 800833c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008340:	d03e      	beq.n	80083c0 <HAL_TIM_ConfigClockSource+0x158>
 8008342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008346:	f200 8087 	bhi.w	8008458 <HAL_TIM_ConfigClockSource+0x1f0>
 800834a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834e:	f000 8086 	beq.w	800845e <HAL_TIM_ConfigClockSource+0x1f6>
 8008352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008356:	d87f      	bhi.n	8008458 <HAL_TIM_ConfigClockSource+0x1f0>
 8008358:	2b70      	cmp	r3, #112	; 0x70
 800835a:	d01a      	beq.n	8008392 <HAL_TIM_ConfigClockSource+0x12a>
 800835c:	2b70      	cmp	r3, #112	; 0x70
 800835e:	d87b      	bhi.n	8008458 <HAL_TIM_ConfigClockSource+0x1f0>
 8008360:	2b60      	cmp	r3, #96	; 0x60
 8008362:	d050      	beq.n	8008406 <HAL_TIM_ConfigClockSource+0x19e>
 8008364:	2b60      	cmp	r3, #96	; 0x60
 8008366:	d877      	bhi.n	8008458 <HAL_TIM_ConfigClockSource+0x1f0>
 8008368:	2b50      	cmp	r3, #80	; 0x50
 800836a:	d03c      	beq.n	80083e6 <HAL_TIM_ConfigClockSource+0x17e>
 800836c:	2b50      	cmp	r3, #80	; 0x50
 800836e:	d873      	bhi.n	8008458 <HAL_TIM_ConfigClockSource+0x1f0>
 8008370:	2b40      	cmp	r3, #64	; 0x40
 8008372:	d058      	beq.n	8008426 <HAL_TIM_ConfigClockSource+0x1be>
 8008374:	2b40      	cmp	r3, #64	; 0x40
 8008376:	d86f      	bhi.n	8008458 <HAL_TIM_ConfigClockSource+0x1f0>
 8008378:	2b30      	cmp	r3, #48	; 0x30
 800837a:	d064      	beq.n	8008446 <HAL_TIM_ConfigClockSource+0x1de>
 800837c:	2b30      	cmp	r3, #48	; 0x30
 800837e:	d86b      	bhi.n	8008458 <HAL_TIM_ConfigClockSource+0x1f0>
 8008380:	2b20      	cmp	r3, #32
 8008382:	d060      	beq.n	8008446 <HAL_TIM_ConfigClockSource+0x1de>
 8008384:	2b20      	cmp	r3, #32
 8008386:	d867      	bhi.n	8008458 <HAL_TIM_ConfigClockSource+0x1f0>
 8008388:	2b00      	cmp	r3, #0
 800838a:	d05c      	beq.n	8008446 <HAL_TIM_ConfigClockSource+0x1de>
 800838c:	2b10      	cmp	r3, #16
 800838e:	d05a      	beq.n	8008446 <HAL_TIM_ConfigClockSource+0x1de>
 8008390:	e062      	b.n	8008458 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6818      	ldr	r0, [r3, #0]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	6899      	ldr	r1, [r3, #8]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	f000 f9c3 	bl	800872c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	609a      	str	r2, [r3, #8]
      break;
 80083be:	e04f      	b.n	8008460 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6818      	ldr	r0, [r3, #0]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	6899      	ldr	r1, [r3, #8]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	f000 f9ac 	bl	800872c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	689a      	ldr	r2, [r3, #8]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083e2:	609a      	str	r2, [r3, #8]
      break;
 80083e4:	e03c      	b.n	8008460 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	6859      	ldr	r1, [r3, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	461a      	mov	r2, r3
 80083f4:	f000 f91e 	bl	8008634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2150      	movs	r1, #80	; 0x50
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 f977 	bl	80086f2 <TIM_ITRx_SetConfig>
      break;
 8008404:	e02c      	b.n	8008460 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6818      	ldr	r0, [r3, #0]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	6859      	ldr	r1, [r3, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	461a      	mov	r2, r3
 8008414:	f000 f93d 	bl	8008692 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2160      	movs	r1, #96	; 0x60
 800841e:	4618      	mov	r0, r3
 8008420:	f000 f967 	bl	80086f2 <TIM_ITRx_SetConfig>
      break;
 8008424:	e01c      	b.n	8008460 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6818      	ldr	r0, [r3, #0]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	6859      	ldr	r1, [r3, #4]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	461a      	mov	r2, r3
 8008434:	f000 f8fe 	bl	8008634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2140      	movs	r1, #64	; 0x40
 800843e:	4618      	mov	r0, r3
 8008440:	f000 f957 	bl	80086f2 <TIM_ITRx_SetConfig>
      break;
 8008444:	e00c      	b.n	8008460 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4619      	mov	r1, r3
 8008450:	4610      	mov	r0, r2
 8008452:	f000 f94e 	bl	80086f2 <TIM_ITRx_SetConfig>
      break;
 8008456:	e003      	b.n	8008460 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	73fb      	strb	r3, [r7, #15]
      break;
 800845c:	e000      	b.n	8008460 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800845e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008470:	7bfb      	ldrb	r3, [r7, #15]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	00100070 	.word	0x00100070
 8008480:	00100060 	.word	0x00100060
 8008484:	00100050 	.word	0x00100050
 8008488:	00100040 	.word	0x00100040
 800848c:	00100030 	.word	0x00100030
 8008490:	00100020 	.word	0x00100020

08008494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a46      	ldr	r2, [pc, #280]	; (8008610 <TIM_Base_SetConfig+0x12c>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d017      	beq.n	800852c <TIM_Base_SetConfig+0x48>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008502:	d013      	beq.n	800852c <TIM_Base_SetConfig+0x48>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a43      	ldr	r2, [pc, #268]	; (8008614 <TIM_Base_SetConfig+0x130>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d00f      	beq.n	800852c <TIM_Base_SetConfig+0x48>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a42      	ldr	r2, [pc, #264]	; (8008618 <TIM_Base_SetConfig+0x134>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d00b      	beq.n	800852c <TIM_Base_SetConfig+0x48>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a41      	ldr	r2, [pc, #260]	; (800861c <TIM_Base_SetConfig+0x138>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d007      	beq.n	800852c <TIM_Base_SetConfig+0x48>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a40      	ldr	r2, [pc, #256]	; (8008620 <TIM_Base_SetConfig+0x13c>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d003      	beq.n	800852c <TIM_Base_SetConfig+0x48>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a3f      	ldr	r2, [pc, #252]	; (8008624 <TIM_Base_SetConfig+0x140>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d108      	bne.n	800853e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4313      	orrs	r3, r2
 800853c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a33      	ldr	r2, [pc, #204]	; (8008610 <TIM_Base_SetConfig+0x12c>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d023      	beq.n	800858e <TIM_Base_SetConfig+0xaa>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800854c:	d01f      	beq.n	800858e <TIM_Base_SetConfig+0xaa>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a30      	ldr	r2, [pc, #192]	; (8008614 <TIM_Base_SetConfig+0x130>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d01b      	beq.n	800858e <TIM_Base_SetConfig+0xaa>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a2f      	ldr	r2, [pc, #188]	; (8008618 <TIM_Base_SetConfig+0x134>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d017      	beq.n	800858e <TIM_Base_SetConfig+0xaa>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a2e      	ldr	r2, [pc, #184]	; (800861c <TIM_Base_SetConfig+0x138>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d013      	beq.n	800858e <TIM_Base_SetConfig+0xaa>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a2d      	ldr	r2, [pc, #180]	; (8008620 <TIM_Base_SetConfig+0x13c>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d00f      	beq.n	800858e <TIM_Base_SetConfig+0xaa>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a2d      	ldr	r2, [pc, #180]	; (8008628 <TIM_Base_SetConfig+0x144>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d00b      	beq.n	800858e <TIM_Base_SetConfig+0xaa>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a2c      	ldr	r2, [pc, #176]	; (800862c <TIM_Base_SetConfig+0x148>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d007      	beq.n	800858e <TIM_Base_SetConfig+0xaa>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a2b      	ldr	r2, [pc, #172]	; (8008630 <TIM_Base_SetConfig+0x14c>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d003      	beq.n	800858e <TIM_Base_SetConfig+0xaa>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a26      	ldr	r2, [pc, #152]	; (8008624 <TIM_Base_SetConfig+0x140>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d108      	bne.n	80085a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	4313      	orrs	r3, r2
 800859e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	689a      	ldr	r2, [r3, #8]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a12      	ldr	r2, [pc, #72]	; (8008610 <TIM_Base_SetConfig+0x12c>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d013      	beq.n	80085f4 <TIM_Base_SetConfig+0x110>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a14      	ldr	r2, [pc, #80]	; (8008620 <TIM_Base_SetConfig+0x13c>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d00f      	beq.n	80085f4 <TIM_Base_SetConfig+0x110>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a14      	ldr	r2, [pc, #80]	; (8008628 <TIM_Base_SetConfig+0x144>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d00b      	beq.n	80085f4 <TIM_Base_SetConfig+0x110>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a13      	ldr	r2, [pc, #76]	; (800862c <TIM_Base_SetConfig+0x148>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d007      	beq.n	80085f4 <TIM_Base_SetConfig+0x110>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a12      	ldr	r2, [pc, #72]	; (8008630 <TIM_Base_SetConfig+0x14c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d003      	beq.n	80085f4 <TIM_Base_SetConfig+0x110>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a0d      	ldr	r2, [pc, #52]	; (8008624 <TIM_Base_SetConfig+0x140>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d103      	bne.n	80085fc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	691a      	ldr	r2, [r3, #16]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	615a      	str	r2, [r3, #20]
}
 8008602:	bf00      	nop
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	40012c00 	.word	0x40012c00
 8008614:	40000400 	.word	0x40000400
 8008618:	40000800 	.word	0x40000800
 800861c:	40000c00 	.word	0x40000c00
 8008620:	40013400 	.word	0x40013400
 8008624:	40015000 	.word	0x40015000
 8008628:	40014000 	.word	0x40014000
 800862c:	40014400 	.word	0x40014400
 8008630:	40014800 	.word	0x40014800

08008634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	f023 0201 	bic.w	r2, r3, #1
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800865e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	011b      	lsls	r3, r3, #4
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	4313      	orrs	r3, r2
 8008668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f023 030a 	bic.w	r3, r3, #10
 8008670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	4313      	orrs	r3, r2
 8008678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	621a      	str	r2, [r3, #32]
}
 8008686:	bf00      	nop
 8008688:	371c      	adds	r7, #28
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008692:	b480      	push	{r7}
 8008694:	b087      	sub	sp, #28
 8008696:	af00      	add	r7, sp, #0
 8008698:	60f8      	str	r0, [r7, #12]
 800869a:	60b9      	str	r1, [r7, #8]
 800869c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	f023 0210 	bic.w	r2, r3, #16
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	031b      	lsls	r3, r3, #12
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	011b      	lsls	r3, r3, #4
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	621a      	str	r2, [r3, #32]
}
 80086e6:	bf00      	nop
 80086e8:	371c      	adds	r7, #28
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b085      	sub	sp, #20
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	4313      	orrs	r3, r2
 8008714:	f043 0307 	orr.w	r3, r3, #7
 8008718:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	609a      	str	r2, [r3, #8]
}
 8008720:	bf00      	nop
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008746:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	021a      	lsls	r2, r3, #8
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	431a      	orrs	r2, r3
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	4313      	orrs	r3, r2
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	4313      	orrs	r3, r2
 8008758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	609a      	str	r2, [r3, #8]
}
 8008760:	bf00      	nop
 8008762:	371c      	adds	r7, #28
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800877c:	2b01      	cmp	r3, #1
 800877e:	d101      	bne.n	8008784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008780:	2302      	movs	r3, #2
 8008782:	e074      	b.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2202      	movs	r2, #2
 8008790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a34      	ldr	r2, [pc, #208]	; (800887c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d009      	beq.n	80087c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a33      	ldr	r2, [pc, #204]	; (8008880 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d004      	beq.n	80087c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a31      	ldr	r2, [pc, #196]	; (8008884 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d108      	bne.n	80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80087c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80087da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a21      	ldr	r2, [pc, #132]	; (800887c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d022      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008804:	d01d      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a1f      	ldr	r2, [pc, #124]	; (8008888 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d018      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a1d      	ldr	r2, [pc, #116]	; (800888c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d013      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a1c      	ldr	r2, [pc, #112]	; (8008890 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d00e      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a15      	ldr	r2, [pc, #84]	; (8008880 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d009      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a18      	ldr	r2, [pc, #96]	; (8008894 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d004      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a11      	ldr	r2, [pc, #68]	; (8008884 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d10c      	bne.n	800885c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	4313      	orrs	r3, r2
 8008852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	40012c00 	.word	0x40012c00
 8008880:	40013400 	.word	0x40013400
 8008884:	40015000 	.word	0x40015000
 8008888:	40000400 	.word	0x40000400
 800888c:	40000800 	.word	0x40000800
 8008890:	40000c00 	.word	0x40000c00
 8008894:	40014000 	.word	0x40014000

08008898 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d101      	bne.n	8008936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e042      	b.n	80089bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800893c:	2b00      	cmp	r3, #0
 800893e:	d106      	bne.n	800894e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7fa fc1f 	bl	800318c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2224      	movs	r2, #36	; 0x24
 8008952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 0201 	bic.w	r2, r2, #1
 8008964:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f82c 	bl	80089c4 <UART_SetConfig>
 800896c:	4603      	mov	r3, r0
 800896e:	2b01      	cmp	r3, #1
 8008970:	d101      	bne.n	8008976 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e022      	b.n	80089bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897a:	2b00      	cmp	r3, #0
 800897c:	d002      	beq.n	8008984 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fb1c 	bl	8008fbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689a      	ldr	r2, [r3, #8]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f042 0201 	orr.w	r2, r2, #1
 80089b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fba3 	bl	8009100 <UART_CheckIdleState>
 80089ba:	4603      	mov	r3, r0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089c8:	b08c      	sub	sp, #48	; 0x30
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	689a      	ldr	r2, [r3, #8]
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	431a      	orrs	r2, r3
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	431a      	orrs	r2, r3
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	69db      	ldr	r3, [r3, #28]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	4baa      	ldr	r3, [pc, #680]	; (8008c9c <UART_SetConfig+0x2d8>)
 80089f4:	4013      	ands	r3, r2
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	6812      	ldr	r2, [r2, #0]
 80089fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089fc:	430b      	orrs	r3, r1
 80089fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	68da      	ldr	r2, [r3, #12]
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a9f      	ldr	r2, [pc, #636]	; (8008ca0 <UART_SetConfig+0x2dc>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d004      	beq.n	8008a30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008a3a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	6812      	ldr	r2, [r2, #0]
 8008a42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a44:	430b      	orrs	r3, r1
 8008a46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4e:	f023 010f 	bic.w	r1, r3, #15
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a90      	ldr	r2, [pc, #576]	; (8008ca4 <UART_SetConfig+0x2e0>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d125      	bne.n	8008ab4 <UART_SetConfig+0xf0>
 8008a68:	4b8f      	ldr	r3, [pc, #572]	; (8008ca8 <UART_SetConfig+0x2e4>)
 8008a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a6e:	f003 0303 	and.w	r3, r3, #3
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d81a      	bhi.n	8008aac <UART_SetConfig+0xe8>
 8008a76:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <UART_SetConfig+0xb8>)
 8008a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7c:	08008a8d 	.word	0x08008a8d
 8008a80:	08008a9d 	.word	0x08008a9d
 8008a84:	08008a95 	.word	0x08008a95
 8008a88:	08008aa5 	.word	0x08008aa5
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a92:	e116      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008a94:	2302      	movs	r3, #2
 8008a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a9a:	e112      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008a9c:	2304      	movs	r3, #4
 8008a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aa2:	e10e      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008aa4:	2308      	movs	r3, #8
 8008aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aaa:	e10a      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008aac:	2310      	movs	r3, #16
 8008aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ab2:	e106      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a7c      	ldr	r2, [pc, #496]	; (8008cac <UART_SetConfig+0x2e8>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d138      	bne.n	8008b30 <UART_SetConfig+0x16c>
 8008abe:	4b7a      	ldr	r3, [pc, #488]	; (8008ca8 <UART_SetConfig+0x2e4>)
 8008ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ac4:	f003 030c 	and.w	r3, r3, #12
 8008ac8:	2b0c      	cmp	r3, #12
 8008aca:	d82d      	bhi.n	8008b28 <UART_SetConfig+0x164>
 8008acc:	a201      	add	r2, pc, #4	; (adr r2, 8008ad4 <UART_SetConfig+0x110>)
 8008ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad2:	bf00      	nop
 8008ad4:	08008b09 	.word	0x08008b09
 8008ad8:	08008b29 	.word	0x08008b29
 8008adc:	08008b29 	.word	0x08008b29
 8008ae0:	08008b29 	.word	0x08008b29
 8008ae4:	08008b19 	.word	0x08008b19
 8008ae8:	08008b29 	.word	0x08008b29
 8008aec:	08008b29 	.word	0x08008b29
 8008af0:	08008b29 	.word	0x08008b29
 8008af4:	08008b11 	.word	0x08008b11
 8008af8:	08008b29 	.word	0x08008b29
 8008afc:	08008b29 	.word	0x08008b29
 8008b00:	08008b29 	.word	0x08008b29
 8008b04:	08008b21 	.word	0x08008b21
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b0e:	e0d8      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008b10:	2302      	movs	r3, #2
 8008b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b16:	e0d4      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008b18:	2304      	movs	r3, #4
 8008b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b1e:	e0d0      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008b20:	2308      	movs	r3, #8
 8008b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b26:	e0cc      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008b28:	2310      	movs	r3, #16
 8008b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b2e:	e0c8      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a5e      	ldr	r2, [pc, #376]	; (8008cb0 <UART_SetConfig+0x2ec>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d125      	bne.n	8008b86 <UART_SetConfig+0x1c2>
 8008b3a:	4b5b      	ldr	r3, [pc, #364]	; (8008ca8 <UART_SetConfig+0x2e4>)
 8008b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008b44:	2b30      	cmp	r3, #48	; 0x30
 8008b46:	d016      	beq.n	8008b76 <UART_SetConfig+0x1b2>
 8008b48:	2b30      	cmp	r3, #48	; 0x30
 8008b4a:	d818      	bhi.n	8008b7e <UART_SetConfig+0x1ba>
 8008b4c:	2b20      	cmp	r3, #32
 8008b4e:	d00a      	beq.n	8008b66 <UART_SetConfig+0x1a2>
 8008b50:	2b20      	cmp	r3, #32
 8008b52:	d814      	bhi.n	8008b7e <UART_SetConfig+0x1ba>
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d002      	beq.n	8008b5e <UART_SetConfig+0x19a>
 8008b58:	2b10      	cmp	r3, #16
 8008b5a:	d008      	beq.n	8008b6e <UART_SetConfig+0x1aa>
 8008b5c:	e00f      	b.n	8008b7e <UART_SetConfig+0x1ba>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b64:	e0ad      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008b66:	2302      	movs	r3, #2
 8008b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b6c:	e0a9      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008b6e:	2304      	movs	r3, #4
 8008b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b74:	e0a5      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008b76:	2308      	movs	r3, #8
 8008b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b7c:	e0a1      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008b7e:	2310      	movs	r3, #16
 8008b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b84:	e09d      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a4a      	ldr	r2, [pc, #296]	; (8008cb4 <UART_SetConfig+0x2f0>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d125      	bne.n	8008bdc <UART_SetConfig+0x218>
 8008b90:	4b45      	ldr	r3, [pc, #276]	; (8008ca8 <UART_SetConfig+0x2e4>)
 8008b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b9a:	2bc0      	cmp	r3, #192	; 0xc0
 8008b9c:	d016      	beq.n	8008bcc <UART_SetConfig+0x208>
 8008b9e:	2bc0      	cmp	r3, #192	; 0xc0
 8008ba0:	d818      	bhi.n	8008bd4 <UART_SetConfig+0x210>
 8008ba2:	2b80      	cmp	r3, #128	; 0x80
 8008ba4:	d00a      	beq.n	8008bbc <UART_SetConfig+0x1f8>
 8008ba6:	2b80      	cmp	r3, #128	; 0x80
 8008ba8:	d814      	bhi.n	8008bd4 <UART_SetConfig+0x210>
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d002      	beq.n	8008bb4 <UART_SetConfig+0x1f0>
 8008bae:	2b40      	cmp	r3, #64	; 0x40
 8008bb0:	d008      	beq.n	8008bc4 <UART_SetConfig+0x200>
 8008bb2:	e00f      	b.n	8008bd4 <UART_SetConfig+0x210>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bba:	e082      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bc2:	e07e      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008bc4:	2304      	movs	r3, #4
 8008bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bca:	e07a      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008bcc:	2308      	movs	r3, #8
 8008bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bd2:	e076      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008bd4:	2310      	movs	r3, #16
 8008bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bda:	e072      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a35      	ldr	r2, [pc, #212]	; (8008cb8 <UART_SetConfig+0x2f4>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d12a      	bne.n	8008c3c <UART_SetConfig+0x278>
 8008be6:	4b30      	ldr	r3, [pc, #192]	; (8008ca8 <UART_SetConfig+0x2e4>)
 8008be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bf4:	d01a      	beq.n	8008c2c <UART_SetConfig+0x268>
 8008bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bfa:	d81b      	bhi.n	8008c34 <UART_SetConfig+0x270>
 8008bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c00:	d00c      	beq.n	8008c1c <UART_SetConfig+0x258>
 8008c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c06:	d815      	bhi.n	8008c34 <UART_SetConfig+0x270>
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d003      	beq.n	8008c14 <UART_SetConfig+0x250>
 8008c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c10:	d008      	beq.n	8008c24 <UART_SetConfig+0x260>
 8008c12:	e00f      	b.n	8008c34 <UART_SetConfig+0x270>
 8008c14:	2300      	movs	r3, #0
 8008c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c1a:	e052      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c22:	e04e      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008c24:	2304      	movs	r3, #4
 8008c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c2a:	e04a      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008c2c:	2308      	movs	r3, #8
 8008c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c32:	e046      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008c34:	2310      	movs	r3, #16
 8008c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c3a:	e042      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a17      	ldr	r2, [pc, #92]	; (8008ca0 <UART_SetConfig+0x2dc>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d13a      	bne.n	8008cbc <UART_SetConfig+0x2f8>
 8008c46:	4b18      	ldr	r3, [pc, #96]	; (8008ca8 <UART_SetConfig+0x2e4>)
 8008c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c54:	d01a      	beq.n	8008c8c <UART_SetConfig+0x2c8>
 8008c56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c5a:	d81b      	bhi.n	8008c94 <UART_SetConfig+0x2d0>
 8008c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c60:	d00c      	beq.n	8008c7c <UART_SetConfig+0x2b8>
 8008c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c66:	d815      	bhi.n	8008c94 <UART_SetConfig+0x2d0>
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <UART_SetConfig+0x2b0>
 8008c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c70:	d008      	beq.n	8008c84 <UART_SetConfig+0x2c0>
 8008c72:	e00f      	b.n	8008c94 <UART_SetConfig+0x2d0>
 8008c74:	2300      	movs	r3, #0
 8008c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c7a:	e022      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c82:	e01e      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008c84:	2304      	movs	r3, #4
 8008c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c8a:	e01a      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008c8c:	2308      	movs	r3, #8
 8008c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c92:	e016      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008c94:	2310      	movs	r3, #16
 8008c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c9a:	e012      	b.n	8008cc2 <UART_SetConfig+0x2fe>
 8008c9c:	cfff69f3 	.word	0xcfff69f3
 8008ca0:	40008000 	.word	0x40008000
 8008ca4:	40013800 	.word	0x40013800
 8008ca8:	40021000 	.word	0x40021000
 8008cac:	40004400 	.word	0x40004400
 8008cb0:	40004800 	.word	0x40004800
 8008cb4:	40004c00 	.word	0x40004c00
 8008cb8:	40005000 	.word	0x40005000
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4aae      	ldr	r2, [pc, #696]	; (8008f80 <UART_SetConfig+0x5bc>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	f040 8097 	bne.w	8008dfc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008cce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008cd2:	2b08      	cmp	r3, #8
 8008cd4:	d823      	bhi.n	8008d1e <UART_SetConfig+0x35a>
 8008cd6:	a201      	add	r2, pc, #4	; (adr r2, 8008cdc <UART_SetConfig+0x318>)
 8008cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cdc:	08008d01 	.word	0x08008d01
 8008ce0:	08008d1f 	.word	0x08008d1f
 8008ce4:	08008d09 	.word	0x08008d09
 8008ce8:	08008d1f 	.word	0x08008d1f
 8008cec:	08008d0f 	.word	0x08008d0f
 8008cf0:	08008d1f 	.word	0x08008d1f
 8008cf4:	08008d1f 	.word	0x08008d1f
 8008cf8:	08008d1f 	.word	0x08008d1f
 8008cfc:	08008d17 	.word	0x08008d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d00:	f7fe fda2 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 8008d04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d06:	e010      	b.n	8008d2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d08:	4b9e      	ldr	r3, [pc, #632]	; (8008f84 <UART_SetConfig+0x5c0>)
 8008d0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d0c:	e00d      	b.n	8008d2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d0e:	f7fe fd2d 	bl	800776c <HAL_RCC_GetSysClockFreq>
 8008d12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d14:	e009      	b.n	8008d2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d1c:	e005      	b.n	8008d2a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008d28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 8130 	beq.w	8008f92 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	4a94      	ldr	r2, [pc, #592]	; (8008f88 <UART_SetConfig+0x5c4>)
 8008d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	005b      	lsls	r3, r3, #1
 8008d4e:	4413      	add	r3, r2
 8008d50:	69ba      	ldr	r2, [r7, #24]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d305      	bcc.n	8008d62 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d903      	bls.n	8008d6a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008d68:	e113      	b.n	8008f92 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	60bb      	str	r3, [r7, #8]
 8008d70:	60fa      	str	r2, [r7, #12]
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	4a84      	ldr	r2, [pc, #528]	; (8008f88 <UART_SetConfig+0x5c4>)
 8008d78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	2200      	movs	r2, #0
 8008d80:	603b      	str	r3, [r7, #0]
 8008d82:	607a      	str	r2, [r7, #4]
 8008d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d8c:	f7f7 fa44 	bl	8000218 <__aeabi_uldivmod>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4610      	mov	r0, r2
 8008d96:	4619      	mov	r1, r3
 8008d98:	f04f 0200 	mov.w	r2, #0
 8008d9c:	f04f 0300 	mov.w	r3, #0
 8008da0:	020b      	lsls	r3, r1, #8
 8008da2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008da6:	0202      	lsls	r2, r0, #8
 8008da8:	6979      	ldr	r1, [r7, #20]
 8008daa:	6849      	ldr	r1, [r1, #4]
 8008dac:	0849      	lsrs	r1, r1, #1
 8008dae:	2000      	movs	r0, #0
 8008db0:	460c      	mov	r4, r1
 8008db2:	4605      	mov	r5, r0
 8008db4:	eb12 0804 	adds.w	r8, r2, r4
 8008db8:	eb43 0905 	adc.w	r9, r3, r5
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	469a      	mov	sl, r3
 8008dc4:	4693      	mov	fp, r2
 8008dc6:	4652      	mov	r2, sl
 8008dc8:	465b      	mov	r3, fp
 8008dca:	4640      	mov	r0, r8
 8008dcc:	4649      	mov	r1, r9
 8008dce:	f7f7 fa23 	bl	8000218 <__aeabi_uldivmod>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008de0:	d308      	bcc.n	8008df4 <UART_SetConfig+0x430>
 8008de2:	6a3b      	ldr	r3, [r7, #32]
 8008de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008de8:	d204      	bcs.n	8008df4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6a3a      	ldr	r2, [r7, #32]
 8008df0:	60da      	str	r2, [r3, #12]
 8008df2:	e0ce      	b.n	8008f92 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008dfa:	e0ca      	b.n	8008f92 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e04:	d166      	bne.n	8008ed4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008e06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e0a:	2b08      	cmp	r3, #8
 8008e0c:	d827      	bhi.n	8008e5e <UART_SetConfig+0x49a>
 8008e0e:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <UART_SetConfig+0x450>)
 8008e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e14:	08008e39 	.word	0x08008e39
 8008e18:	08008e41 	.word	0x08008e41
 8008e1c:	08008e49 	.word	0x08008e49
 8008e20:	08008e5f 	.word	0x08008e5f
 8008e24:	08008e4f 	.word	0x08008e4f
 8008e28:	08008e5f 	.word	0x08008e5f
 8008e2c:	08008e5f 	.word	0x08008e5f
 8008e30:	08008e5f 	.word	0x08008e5f
 8008e34:	08008e57 	.word	0x08008e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e38:	f7fe fd06 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 8008e3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e3e:	e014      	b.n	8008e6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e40:	f7fe fd18 	bl	8007874 <HAL_RCC_GetPCLK2Freq>
 8008e44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e46:	e010      	b.n	8008e6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e48:	4b4e      	ldr	r3, [pc, #312]	; (8008f84 <UART_SetConfig+0x5c0>)
 8008e4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e4c:	e00d      	b.n	8008e6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e4e:	f7fe fc8d 	bl	800776c <HAL_RCC_GetSysClockFreq>
 8008e52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e54:	e009      	b.n	8008e6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e5c:	e005      	b.n	8008e6a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008e68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f000 8090 	beq.w	8008f92 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e76:	4a44      	ldr	r2, [pc, #272]	; (8008f88 <UART_SetConfig+0x5c4>)
 8008e78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e84:	005a      	lsls	r2, r3, #1
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	085b      	lsrs	r3, r3, #1
 8008e8c:	441a      	add	r2, r3
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e98:	6a3b      	ldr	r3, [r7, #32]
 8008e9a:	2b0f      	cmp	r3, #15
 8008e9c:	d916      	bls.n	8008ecc <UART_SetConfig+0x508>
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ea4:	d212      	bcs.n	8008ecc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	f023 030f 	bic.w	r3, r3, #15
 8008eae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	085b      	lsrs	r3, r3, #1
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	f003 0307 	and.w	r3, r3, #7
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	8bfb      	ldrh	r3, [r7, #30]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	8bfa      	ldrh	r2, [r7, #30]
 8008ec8:	60da      	str	r2, [r3, #12]
 8008eca:	e062      	b.n	8008f92 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ed2:	e05e      	b.n	8008f92 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ed4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ed8:	2b08      	cmp	r3, #8
 8008eda:	d828      	bhi.n	8008f2e <UART_SetConfig+0x56a>
 8008edc:	a201      	add	r2, pc, #4	; (adr r2, 8008ee4 <UART_SetConfig+0x520>)
 8008ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee2:	bf00      	nop
 8008ee4:	08008f09 	.word	0x08008f09
 8008ee8:	08008f11 	.word	0x08008f11
 8008eec:	08008f19 	.word	0x08008f19
 8008ef0:	08008f2f 	.word	0x08008f2f
 8008ef4:	08008f1f 	.word	0x08008f1f
 8008ef8:	08008f2f 	.word	0x08008f2f
 8008efc:	08008f2f 	.word	0x08008f2f
 8008f00:	08008f2f 	.word	0x08008f2f
 8008f04:	08008f27 	.word	0x08008f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f08:	f7fe fc9e 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 8008f0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f0e:	e014      	b.n	8008f3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f10:	f7fe fcb0 	bl	8007874 <HAL_RCC_GetPCLK2Freq>
 8008f14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f16:	e010      	b.n	8008f3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f18:	4b1a      	ldr	r3, [pc, #104]	; (8008f84 <UART_SetConfig+0x5c0>)
 8008f1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f1c:	e00d      	b.n	8008f3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f1e:	f7fe fc25 	bl	800776c <HAL_RCC_GetSysClockFreq>
 8008f22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f24:	e009      	b.n	8008f3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f2c:	e005      	b.n	8008f3a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f38:	bf00      	nop
    }

    if (pclk != 0U)
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d028      	beq.n	8008f92 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f44:	4a10      	ldr	r2, [pc, #64]	; (8008f88 <UART_SetConfig+0x5c4>)
 8008f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	085b      	lsrs	r3, r3, #1
 8008f58:	441a      	add	r2, r3
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	2b0f      	cmp	r3, #15
 8008f68:	d910      	bls.n	8008f8c <UART_SetConfig+0x5c8>
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f70:	d20c      	bcs.n	8008f8c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f72:	6a3b      	ldr	r3, [r7, #32]
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	60da      	str	r2, [r3, #12]
 8008f7c:	e009      	b.n	8008f92 <UART_SetConfig+0x5ce>
 8008f7e:	bf00      	nop
 8008f80:	40008000 	.word	0x40008000
 8008f84:	00f42400 	.word	0x00f42400
 8008f88:	08009778 	.word	0x08009778
      }
      else
      {
        ret = HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	2200      	movs	r2, #0
 8008fac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008fae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3730      	adds	r7, #48	; 0x30
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008fbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00a      	beq.n	8008fe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fea:	f003 0302 	and.w	r3, r3, #2
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00a      	beq.n	8009008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	430a      	orrs	r2, r1
 8009006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900c:	f003 0304 	and.w	r3, r3, #4
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00a      	beq.n	800902a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	430a      	orrs	r2, r1
 8009028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902e:	f003 0308 	and.w	r3, r3, #8
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00a      	beq.n	800904c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	430a      	orrs	r2, r1
 800904a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009050:	f003 0310 	and.w	r3, r3, #16
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00a      	beq.n	800906e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	430a      	orrs	r2, r1
 800906c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009072:	f003 0320 	and.w	r3, r3, #32
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	430a      	orrs	r2, r1
 800908e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009098:	2b00      	cmp	r3, #0
 800909a:	d01a      	beq.n	80090d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	430a      	orrs	r2, r1
 80090b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090ba:	d10a      	bne.n	80090d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	430a      	orrs	r2, r1
 80090d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00a      	beq.n	80090f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	430a      	orrs	r2, r1
 80090f2:	605a      	str	r2, [r3, #4]
  }
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af02      	add	r7, sp, #8
 8009106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009110:	f7fa f938 	bl	8003384 <HAL_GetTick>
 8009114:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0308 	and.w	r3, r3, #8
 8009120:	2b08      	cmp	r3, #8
 8009122:	d10e      	bne.n	8009142 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009124:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f82f 	bl	8009196 <UART_WaitOnFlagUntilTimeout>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e025      	b.n	800918e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0304 	and.w	r3, r3, #4
 800914c:	2b04      	cmp	r3, #4
 800914e:	d10e      	bne.n	800916e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009150:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f819 	bl	8009196 <UART_WaitOnFlagUntilTimeout>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d001      	beq.n	800916e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800916a:	2303      	movs	r3, #3
 800916c:	e00f      	b.n	800918e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2220      	movs	r2, #32
 8009172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2220      	movs	r2, #32
 800917a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b09c      	sub	sp, #112	; 0x70
 800919a:	af00      	add	r7, sp, #0
 800919c:	60f8      	str	r0, [r7, #12]
 800919e:	60b9      	str	r1, [r7, #8]
 80091a0:	603b      	str	r3, [r7, #0]
 80091a2:	4613      	mov	r3, r2
 80091a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091a6:	e0a9      	b.n	80092fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091ae:	f000 80a5 	beq.w	80092fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091b2:	f7fa f8e7 	bl	8003384 <HAL_GetTick>
 80091b6:	4602      	mov	r2, r0
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80091be:	429a      	cmp	r2, r3
 80091c0:	d302      	bcc.n	80091c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80091c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d140      	bne.n	800924a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091d0:	e853 3f00 	ldrex	r3, [r3]
 80091d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80091d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091dc:	667b      	str	r3, [r7, #100]	; 0x64
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091ee:	e841 2300 	strex	r3, r2, [r1]
 80091f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80091f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e6      	bne.n	80091c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	3308      	adds	r3, #8
 8009200:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009204:	e853 3f00 	ldrex	r3, [r3]
 8009208:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800920a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920c:	f023 0301 	bic.w	r3, r3, #1
 8009210:	663b      	str	r3, [r7, #96]	; 0x60
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3308      	adds	r3, #8
 8009218:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800921a:	64ba      	str	r2, [r7, #72]	; 0x48
 800921c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009222:	e841 2300 	strex	r3, r2, [r1]
 8009226:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1e5      	bne.n	80091fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2220      	movs	r2, #32
 8009232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2220      	movs	r2, #32
 800923a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e069      	b.n	800931e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b00      	cmp	r3, #0
 8009256:	d051      	beq.n	80092fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	69db      	ldr	r3, [r3, #28]
 800925e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009266:	d149      	bne.n	80092fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009270:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927a:	e853 3f00 	ldrex	r3, [r3]
 800927e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009282:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009286:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	461a      	mov	r2, r3
 800928e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009290:	637b      	str	r3, [r7, #52]	; 0x34
 8009292:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009298:	e841 2300 	strex	r3, r2, [r1]
 800929c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800929e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1e6      	bne.n	8009272 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	3308      	adds	r3, #8
 80092aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	e853 3f00 	ldrex	r3, [r3]
 80092b2:	613b      	str	r3, [r7, #16]
   return(result);
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	f023 0301 	bic.w	r3, r3, #1
 80092ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3308      	adds	r3, #8
 80092c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092c4:	623a      	str	r2, [r7, #32]
 80092c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c8:	69f9      	ldr	r1, [r7, #28]
 80092ca:	6a3a      	ldr	r2, [r7, #32]
 80092cc:	e841 2300 	strex	r3, r2, [r1]
 80092d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e5      	bne.n	80092a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2220      	movs	r2, #32
 80092dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2220      	movs	r2, #32
 80092e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2220      	movs	r2, #32
 80092ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e010      	b.n	800931e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	69da      	ldr	r2, [r3, #28]
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	4013      	ands	r3, r2
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	429a      	cmp	r2, r3
 800930a:	bf0c      	ite	eq
 800930c:	2301      	moveq	r3, #1
 800930e:	2300      	movne	r3, #0
 8009310:	b2db      	uxtb	r3, r3
 8009312:	461a      	mov	r2, r3
 8009314:	79fb      	ldrb	r3, [r7, #7]
 8009316:	429a      	cmp	r2, r3
 8009318:	f43f af46 	beq.w	80091a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3770      	adds	r7, #112	; 0x70
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009326:	b480      	push	{r7}
 8009328:	b085      	sub	sp, #20
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009334:	2b01      	cmp	r3, #1
 8009336:	d101      	bne.n	800933c <HAL_UARTEx_DisableFifoMode+0x16>
 8009338:	2302      	movs	r3, #2
 800933a:	e027      	b.n	800938c <HAL_UARTEx_DisableFifoMode+0x66>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2224      	movs	r2, #36	; 0x24
 8009348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f022 0201 	bic.w	r2, r2, #1
 8009362:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800936a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2220      	movs	r2, #32
 800937e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3714      	adds	r7, #20
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d101      	bne.n	80093b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80093ac:	2302      	movs	r3, #2
 80093ae:	e02d      	b.n	800940c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2224      	movs	r2, #36	; 0x24
 80093bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f022 0201 	bic.w	r2, r2, #1
 80093d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	430a      	orrs	r2, r1
 80093ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f84f 	bl	8009490 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2220      	movs	r2, #32
 80093fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009424:	2b01      	cmp	r3, #1
 8009426:	d101      	bne.n	800942c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009428:	2302      	movs	r3, #2
 800942a:	e02d      	b.n	8009488 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2224      	movs	r2, #36	; 0x24
 8009438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f022 0201 	bic.w	r2, r2, #1
 8009452:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	430a      	orrs	r2, r1
 8009466:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f811 	bl	8009490 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2220      	movs	r2, #32
 800947a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800949c:	2b00      	cmp	r3, #0
 800949e:	d108      	bne.n	80094b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80094b0:	e031      	b.n	8009516 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80094b2:	2308      	movs	r3, #8
 80094b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80094b6:	2308      	movs	r3, #8
 80094b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	0e5b      	lsrs	r3, r3, #25
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	f003 0307 	and.w	r3, r3, #7
 80094c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	0f5b      	lsrs	r3, r3, #29
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	f003 0307 	and.w	r3, r3, #7
 80094d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094da:	7bbb      	ldrb	r3, [r7, #14]
 80094dc:	7b3a      	ldrb	r2, [r7, #12]
 80094de:	4911      	ldr	r1, [pc, #68]	; (8009524 <UARTEx_SetNbDataToProcess+0x94>)
 80094e0:	5c8a      	ldrb	r2, [r1, r2]
 80094e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80094e6:	7b3a      	ldrb	r2, [r7, #12]
 80094e8:	490f      	ldr	r1, [pc, #60]	; (8009528 <UARTEx_SetNbDataToProcess+0x98>)
 80094ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	7b7a      	ldrb	r2, [r7, #13]
 80094fc:	4909      	ldr	r1, [pc, #36]	; (8009524 <UARTEx_SetNbDataToProcess+0x94>)
 80094fe:	5c8a      	ldrb	r2, [r1, r2]
 8009500:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009504:	7b7a      	ldrb	r2, [r7, #13]
 8009506:	4908      	ldr	r1, [pc, #32]	; (8009528 <UARTEx_SetNbDataToProcess+0x98>)
 8009508:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800950a:	fb93 f3f2 	sdiv	r3, r3, r2
 800950e:	b29a      	uxth	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009516:	bf00      	nop
 8009518:	3714      	adds	r7, #20
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	08009790 	.word	0x08009790
 8009528:	08009798 	.word	0x08009798

0800952c <malloc>:
 800952c:	4b02      	ldr	r3, [pc, #8]	; (8009538 <malloc+0xc>)
 800952e:	4601      	mov	r1, r0
 8009530:	6818      	ldr	r0, [r3, #0]
 8009532:	f000 b823 	b.w	800957c <_malloc_r>
 8009536:	bf00      	nop
 8009538:	20000058 	.word	0x20000058

0800953c <sbrk_aligned>:
 800953c:	b570      	push	{r4, r5, r6, lr}
 800953e:	4e0e      	ldr	r6, [pc, #56]	; (8009578 <sbrk_aligned+0x3c>)
 8009540:	460c      	mov	r4, r1
 8009542:	6831      	ldr	r1, [r6, #0]
 8009544:	4605      	mov	r5, r0
 8009546:	b911      	cbnz	r1, 800954e <sbrk_aligned+0x12>
 8009548:	f000 f8ac 	bl	80096a4 <_sbrk_r>
 800954c:	6030      	str	r0, [r6, #0]
 800954e:	4621      	mov	r1, r4
 8009550:	4628      	mov	r0, r5
 8009552:	f000 f8a7 	bl	80096a4 <_sbrk_r>
 8009556:	1c43      	adds	r3, r0, #1
 8009558:	d00a      	beq.n	8009570 <sbrk_aligned+0x34>
 800955a:	1cc4      	adds	r4, r0, #3
 800955c:	f024 0403 	bic.w	r4, r4, #3
 8009560:	42a0      	cmp	r0, r4
 8009562:	d007      	beq.n	8009574 <sbrk_aligned+0x38>
 8009564:	1a21      	subs	r1, r4, r0
 8009566:	4628      	mov	r0, r5
 8009568:	f000 f89c 	bl	80096a4 <_sbrk_r>
 800956c:	3001      	adds	r0, #1
 800956e:	d101      	bne.n	8009574 <sbrk_aligned+0x38>
 8009570:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009574:	4620      	mov	r0, r4
 8009576:	bd70      	pop	{r4, r5, r6, pc}
 8009578:	200004d0 	.word	0x200004d0

0800957c <_malloc_r>:
 800957c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009580:	1ccd      	adds	r5, r1, #3
 8009582:	f025 0503 	bic.w	r5, r5, #3
 8009586:	3508      	adds	r5, #8
 8009588:	2d0c      	cmp	r5, #12
 800958a:	bf38      	it	cc
 800958c:	250c      	movcc	r5, #12
 800958e:	2d00      	cmp	r5, #0
 8009590:	4607      	mov	r7, r0
 8009592:	db01      	blt.n	8009598 <_malloc_r+0x1c>
 8009594:	42a9      	cmp	r1, r5
 8009596:	d905      	bls.n	80095a4 <_malloc_r+0x28>
 8009598:	230c      	movs	r3, #12
 800959a:	603b      	str	r3, [r7, #0]
 800959c:	2600      	movs	r6, #0
 800959e:	4630      	mov	r0, r6
 80095a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009678 <_malloc_r+0xfc>
 80095a8:	f000 f868 	bl	800967c <__malloc_lock>
 80095ac:	f8d8 3000 	ldr.w	r3, [r8]
 80095b0:	461c      	mov	r4, r3
 80095b2:	bb5c      	cbnz	r4, 800960c <_malloc_r+0x90>
 80095b4:	4629      	mov	r1, r5
 80095b6:	4638      	mov	r0, r7
 80095b8:	f7ff ffc0 	bl	800953c <sbrk_aligned>
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	4604      	mov	r4, r0
 80095c0:	d155      	bne.n	800966e <_malloc_r+0xf2>
 80095c2:	f8d8 4000 	ldr.w	r4, [r8]
 80095c6:	4626      	mov	r6, r4
 80095c8:	2e00      	cmp	r6, #0
 80095ca:	d145      	bne.n	8009658 <_malloc_r+0xdc>
 80095cc:	2c00      	cmp	r4, #0
 80095ce:	d048      	beq.n	8009662 <_malloc_r+0xe6>
 80095d0:	6823      	ldr	r3, [r4, #0]
 80095d2:	4631      	mov	r1, r6
 80095d4:	4638      	mov	r0, r7
 80095d6:	eb04 0903 	add.w	r9, r4, r3
 80095da:	f000 f863 	bl	80096a4 <_sbrk_r>
 80095de:	4581      	cmp	r9, r0
 80095e0:	d13f      	bne.n	8009662 <_malloc_r+0xe6>
 80095e2:	6821      	ldr	r1, [r4, #0]
 80095e4:	1a6d      	subs	r5, r5, r1
 80095e6:	4629      	mov	r1, r5
 80095e8:	4638      	mov	r0, r7
 80095ea:	f7ff ffa7 	bl	800953c <sbrk_aligned>
 80095ee:	3001      	adds	r0, #1
 80095f0:	d037      	beq.n	8009662 <_malloc_r+0xe6>
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	442b      	add	r3, r5
 80095f6:	6023      	str	r3, [r4, #0]
 80095f8:	f8d8 3000 	ldr.w	r3, [r8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d038      	beq.n	8009672 <_malloc_r+0xf6>
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	42a2      	cmp	r2, r4
 8009604:	d12b      	bne.n	800965e <_malloc_r+0xe2>
 8009606:	2200      	movs	r2, #0
 8009608:	605a      	str	r2, [r3, #4]
 800960a:	e00f      	b.n	800962c <_malloc_r+0xb0>
 800960c:	6822      	ldr	r2, [r4, #0]
 800960e:	1b52      	subs	r2, r2, r5
 8009610:	d41f      	bmi.n	8009652 <_malloc_r+0xd6>
 8009612:	2a0b      	cmp	r2, #11
 8009614:	d917      	bls.n	8009646 <_malloc_r+0xca>
 8009616:	1961      	adds	r1, r4, r5
 8009618:	42a3      	cmp	r3, r4
 800961a:	6025      	str	r5, [r4, #0]
 800961c:	bf18      	it	ne
 800961e:	6059      	strne	r1, [r3, #4]
 8009620:	6863      	ldr	r3, [r4, #4]
 8009622:	bf08      	it	eq
 8009624:	f8c8 1000 	streq.w	r1, [r8]
 8009628:	5162      	str	r2, [r4, r5]
 800962a:	604b      	str	r3, [r1, #4]
 800962c:	4638      	mov	r0, r7
 800962e:	f104 060b 	add.w	r6, r4, #11
 8009632:	f000 f829 	bl	8009688 <__malloc_unlock>
 8009636:	f026 0607 	bic.w	r6, r6, #7
 800963a:	1d23      	adds	r3, r4, #4
 800963c:	1af2      	subs	r2, r6, r3
 800963e:	d0ae      	beq.n	800959e <_malloc_r+0x22>
 8009640:	1b9b      	subs	r3, r3, r6
 8009642:	50a3      	str	r3, [r4, r2]
 8009644:	e7ab      	b.n	800959e <_malloc_r+0x22>
 8009646:	42a3      	cmp	r3, r4
 8009648:	6862      	ldr	r2, [r4, #4]
 800964a:	d1dd      	bne.n	8009608 <_malloc_r+0x8c>
 800964c:	f8c8 2000 	str.w	r2, [r8]
 8009650:	e7ec      	b.n	800962c <_malloc_r+0xb0>
 8009652:	4623      	mov	r3, r4
 8009654:	6864      	ldr	r4, [r4, #4]
 8009656:	e7ac      	b.n	80095b2 <_malloc_r+0x36>
 8009658:	4634      	mov	r4, r6
 800965a:	6876      	ldr	r6, [r6, #4]
 800965c:	e7b4      	b.n	80095c8 <_malloc_r+0x4c>
 800965e:	4613      	mov	r3, r2
 8009660:	e7cc      	b.n	80095fc <_malloc_r+0x80>
 8009662:	230c      	movs	r3, #12
 8009664:	603b      	str	r3, [r7, #0]
 8009666:	4638      	mov	r0, r7
 8009668:	f000 f80e 	bl	8009688 <__malloc_unlock>
 800966c:	e797      	b.n	800959e <_malloc_r+0x22>
 800966e:	6025      	str	r5, [r4, #0]
 8009670:	e7dc      	b.n	800962c <_malloc_r+0xb0>
 8009672:	605b      	str	r3, [r3, #4]
 8009674:	deff      	udf	#255	; 0xff
 8009676:	bf00      	nop
 8009678:	200004cc 	.word	0x200004cc

0800967c <__malloc_lock>:
 800967c:	4801      	ldr	r0, [pc, #4]	; (8009684 <__malloc_lock+0x8>)
 800967e:	f000 b84b 	b.w	8009718 <__retarget_lock_acquire_recursive>
 8009682:	bf00      	nop
 8009684:	20000610 	.word	0x20000610

08009688 <__malloc_unlock>:
 8009688:	4801      	ldr	r0, [pc, #4]	; (8009690 <__malloc_unlock+0x8>)
 800968a:	f000 b846 	b.w	800971a <__retarget_lock_release_recursive>
 800968e:	bf00      	nop
 8009690:	20000610 	.word	0x20000610

08009694 <memset>:
 8009694:	4402      	add	r2, r0
 8009696:	4603      	mov	r3, r0
 8009698:	4293      	cmp	r3, r2
 800969a:	d100      	bne.n	800969e <memset+0xa>
 800969c:	4770      	bx	lr
 800969e:	f803 1b01 	strb.w	r1, [r3], #1
 80096a2:	e7f9      	b.n	8009698 <memset+0x4>

080096a4 <_sbrk_r>:
 80096a4:	b538      	push	{r3, r4, r5, lr}
 80096a6:	4d06      	ldr	r5, [pc, #24]	; (80096c0 <_sbrk_r+0x1c>)
 80096a8:	2300      	movs	r3, #0
 80096aa:	4604      	mov	r4, r0
 80096ac:	4608      	mov	r0, r1
 80096ae:	602b      	str	r3, [r5, #0]
 80096b0:	f7f9 fc62 	bl	8002f78 <_sbrk>
 80096b4:	1c43      	adds	r3, r0, #1
 80096b6:	d102      	bne.n	80096be <_sbrk_r+0x1a>
 80096b8:	682b      	ldr	r3, [r5, #0]
 80096ba:	b103      	cbz	r3, 80096be <_sbrk_r+0x1a>
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	bd38      	pop	{r3, r4, r5, pc}
 80096c0:	2000060c 	.word	0x2000060c

080096c4 <__errno>:
 80096c4:	4b01      	ldr	r3, [pc, #4]	; (80096cc <__errno+0x8>)
 80096c6:	6818      	ldr	r0, [r3, #0]
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	20000058 	.word	0x20000058

080096d0 <__libc_init_array>:
 80096d0:	b570      	push	{r4, r5, r6, lr}
 80096d2:	4d0d      	ldr	r5, [pc, #52]	; (8009708 <__libc_init_array+0x38>)
 80096d4:	4c0d      	ldr	r4, [pc, #52]	; (800970c <__libc_init_array+0x3c>)
 80096d6:	1b64      	subs	r4, r4, r5
 80096d8:	10a4      	asrs	r4, r4, #2
 80096da:	2600      	movs	r6, #0
 80096dc:	42a6      	cmp	r6, r4
 80096de:	d109      	bne.n	80096f4 <__libc_init_array+0x24>
 80096e0:	4d0b      	ldr	r5, [pc, #44]	; (8009710 <__libc_init_array+0x40>)
 80096e2:	4c0c      	ldr	r4, [pc, #48]	; (8009714 <__libc_init_array+0x44>)
 80096e4:	f000 f828 	bl	8009738 <_init>
 80096e8:	1b64      	subs	r4, r4, r5
 80096ea:	10a4      	asrs	r4, r4, #2
 80096ec:	2600      	movs	r6, #0
 80096ee:	42a6      	cmp	r6, r4
 80096f0:	d105      	bne.n	80096fe <__libc_init_array+0x2e>
 80096f2:	bd70      	pop	{r4, r5, r6, pc}
 80096f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f8:	4798      	blx	r3
 80096fa:	3601      	adds	r6, #1
 80096fc:	e7ee      	b.n	80096dc <__libc_init_array+0xc>
 80096fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009702:	4798      	blx	r3
 8009704:	3601      	adds	r6, #1
 8009706:	e7f2      	b.n	80096ee <__libc_init_array+0x1e>
 8009708:	080097a8 	.word	0x080097a8
 800970c:	080097a8 	.word	0x080097a8
 8009710:	080097a8 	.word	0x080097a8
 8009714:	080097ac 	.word	0x080097ac

08009718 <__retarget_lock_acquire_recursive>:
 8009718:	4770      	bx	lr

0800971a <__retarget_lock_release_recursive>:
 800971a:	4770      	bx	lr

0800971c <memcpy>:
 800971c:	440a      	add	r2, r1
 800971e:	4291      	cmp	r1, r2
 8009720:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009724:	d100      	bne.n	8009728 <memcpy+0xc>
 8009726:	4770      	bx	lr
 8009728:	b510      	push	{r4, lr}
 800972a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800972e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009732:	4291      	cmp	r1, r2
 8009734:	d1f9      	bne.n	800972a <memcpy+0xe>
 8009736:	bd10      	pop	{r4, pc}

08009738 <_init>:
 8009738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973a:	bf00      	nop
 800973c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800973e:	bc08      	pop	{r3}
 8009740:	469e      	mov	lr, r3
 8009742:	4770      	bx	lr

08009744 <_fini>:
 8009744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009746:	bf00      	nop
 8009748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800974a:	bc08      	pop	{r3}
 800974c:	469e      	mov	lr, r3
 800974e:	4770      	bx	lr
