
SoulSense2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009600  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080097d8  080097d8  000197d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009828  08009828  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08009828  08009828  00019828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009830  08009830  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009830  08009830  00019830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009834  08009834  00019834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08009838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  2000005c  08009894  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  08009894  000206a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023c63  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000440d  00000000  00000000  00043d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab0  00000000  00000000  00048140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014b6  00000000  00000000  00049bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c01a  00000000  00000000  0004b0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022241  00000000  00000000  000770c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011bcf5  00000000  00000000  00099301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007478  00000000  00000000  001b4ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001bc470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080097c0 	.word	0x080097c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	080097c0 	.word	0x080097c0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <imu_init>:

/* Private variables ---------------------------------------------------------*/


// Initializing the IMU
void imu_init(I2C_HandleTypeDef* i2c,IMU* imu) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af02      	add	r7, sp, #8
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
    // Ensure that the BNO pointer is allocated (if using dynamic memory)
    imu->bno = (bno055_t*) malloc(sizeof(bno055_t));
 800051e:	20ac      	movs	r0, #172	; 0xac
 8000520:	f009 f848 	bl	80095b4 <malloc>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	601a      	str	r2, [r3, #0]

    if (imu->bno == NULL) {
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d01f      	beq.n	8000574 <imu_init+0x60>
        // Handle memory allocation error
        return;
    }

    imu->bno->i2c = i2c;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	601a      	str	r2, [r3, #0]
    imu->bno->addr = BNO_ADDR_ALT;
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2228      	movs	r2, #40	; 0x28
 8000542:	719a      	strb	r2, [r3, #6]
    imu->bno->mode = BNO_MODE_IMU;
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2208      	movs	r2, #8
 800054a:	711a      	strb	r2, [r3, #4]

    imu->errInit = bno055_init(imu->bno);
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f000 faaf 	bl	8000ab4 <bno055_init>
 8000556:	4603      	mov	r3, r0
 8000558:	461a      	mov	r2, r3
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    bno055_set_unit(imu->bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	6818      	ldr	r0, [r3, #0]
 8000564:	2300      	movs	r3, #0
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2300      	movs	r3, #0
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	f001 fed8 	bl	8002322 <bno055_set_unit>
 8000572:	e000      	b.n	8000576 <imu_init+0x62>
        return;
 8000574:	bf00      	nop
    	                      BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG); //set correct units!
}
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <imu_read_data>:

// Reading data
void imu_read_data(IMU* imu) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	//TODO more checking
//	if (imu->errInit == BNO_OK ) {  //checks that the imu has been properly initialized.
		if(imu->errGyr != BNO_OK || imu->errAcc != BNO_OK || imu->errQua != BNO_OK) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800058a:	2b00      	cmp	r3, #0
 800058c:	d109      	bne.n	80005a2 <imu_read_data+0x26>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000594:	2b00      	cmp	r3, #0
 8000596:	d104      	bne.n	80005a2 <imu_read_data+0x26>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d015      	beq.n	80005ce <imu_read_data+0x52>
//			imu_init(&hi2c1 , imu);
			bno055_reset(imu->bno);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 ff80 	bl	80024ac <bno055_reset>
			imu->errInit = BNO_OK;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			imu->errGyr = BNO_OK;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			imu->errAcc = BNO_OK;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			imu->errQua = BNO_OK;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80005cc:	e02b      	b.n	8000626 <imu_read_data+0xaa>
		}
		else {
			imu->errGyr = imu->bno->gyro(imu->bno, &imu->gyroscope);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	6810      	ldr	r0, [r2, #0]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	3204      	adds	r2, #4
 80005dc:	4611      	mov	r1, r2
 80005de:	4798      	blx	r3
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			imu->errAcc = imu->bno->acc(imu->bno, &imu->accelerometer);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	6810      	ldr	r0, [r2, #0]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	3210      	adds	r2, #16
 80005f8:	4611      	mov	r1, r2
 80005fa:	4798      	blx	r3
 80005fc:	4603      	mov	r3, r0
 80005fe:	461a      	mov	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		    imu->errQua = imu->bno->quaternion(imu->bno, &imu->quaternion);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	6810      	ldr	r0, [r2, #0]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	321c      	adds	r2, #28
 8000616:	4611      	mov	r1, r2
 8000618:	4798      	blx	r3
 800061a:	4603      	mov	r3, r0
 800061c:	461a      	mov	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		}

//	}
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <imu_update_payload>:
    if (imu->bno) {
        free(imu->bno);
    }
}

void imu_update_payload(IMU* imu) {
 800062e:	b480      	push	{r7}
 8000630:	b08d      	sub	sp, #52	; 0x34
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
    // Starting index for the payload
    int index = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Convert quaternion values to byte array format.
    float quaternion_values[4] = {
        imu->quaternion.x,
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	69db      	ldr	r3, [r3, #28]
    float quaternion_values[4] = {
 800063e:	617b      	str	r3, [r7, #20]
        imu->quaternion.y,
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6a1b      	ldr	r3, [r3, #32]
    float quaternion_values[4] = {
 8000644:	61bb      	str	r3, [r7, #24]
        imu->quaternion.z,
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    float quaternion_values[4] = {
 800064a:	61fb      	str	r3, [r7, #28]
        imu->quaternion.w
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    float quaternion_values[4] = {
 8000650:	623b      	str	r3, [r7, #32]
    };

    for (int i = 0; i < 4; i++) {
 8000652:	2300      	movs	r3, #0
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
 8000656:	e010      	b.n	800067a <imu_update_payload+0x4c>
        memcpy(&imu->payload[index], &quaternion_values[i], 4);
 8000658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800065a:	3330      	adds	r3, #48	; 0x30
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	f107 0114 	add.w	r1, r7, #20
 8000664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000666:	0092      	lsls	r2, r2, #2
 8000668:	440a      	add	r2, r1
 800066a:	6812      	ldr	r2, [r2, #0]
 800066c:	601a      	str	r2, [r3, #0]
        index += 4;
 800066e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000670:	3304      	adds	r3, #4
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < 4; i++) {
 8000674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000676:	3301      	adds	r3, #1
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
 800067a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067c:	2b03      	cmp	r3, #3
 800067e:	ddeb      	ble.n	8000658 <imu_update_payload+0x2a>
    }

    // Convert accelerometer values to byte array format.
    float accel_values[3] = {
        imu->accelerometer.x,
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	691b      	ldr	r3, [r3, #16]
    float accel_values[3] = {
 8000684:	60bb      	str	r3, [r7, #8]
        imu->accelerometer.y,
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	695b      	ldr	r3, [r3, #20]
    float accel_values[3] = {
 800068a:	60fb      	str	r3, [r7, #12]
        imu->accelerometer.z,
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	699b      	ldr	r3, [r3, #24]
    float accel_values[3] = {
 8000690:	613b      	str	r3, [r7, #16]
    };

    for (int i = 0; i < 3; i++) {
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
 8000696:	e010      	b.n	80006ba <imu_update_payload+0x8c>
        memcpy(&imu->payload[index], &accel_values[i], 4);
 8000698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800069a:	3330      	adds	r3, #48	; 0x30
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	f107 0108 	add.w	r1, r7, #8
 80006a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006a6:	0092      	lsls	r2, r2, #2
 80006a8:	440a      	add	r2, r1
 80006aa:	6812      	ldr	r2, [r2, #0]
 80006ac:	601a      	str	r2, [r3, #0]
        index += 4;
 80006ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b0:	3304      	adds	r3, #4
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < 3; i++) {
 80006b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b6:	3301      	adds	r3, #1
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006bc:	2b02      	cmp	r3, #2
 80006be:	ddeb      	ble.n	8000698 <imu_update_payload+0x6a>
    }
}
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	3734      	adds	r7, #52	; 0x34
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <soul_init>:
#include "Imu.h"
#include "contact_sensors.h"
#include "configuration.h"

// Adjust soul_init to use pointers for the parameters
void soul_init(SoulSense* soul_sense , I2C_HandleTypeDef* i2c , ADC_HandleTypeDef *adc){
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b084      	sub	sp, #16
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	60f8      	str	r0, [r7, #12]
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607a      	str	r2, [r7, #4]
	ADC_init(adc , soul_sense->contact_sensors);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006de:	4619      	mov	r1, r3
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f002 f869 	bl	80027b8 <ADC_init>
	imu_init(i2c , soul_sense->imu);
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	4619      	mov	r1, r3
 80006ec:	68b8      	ldr	r0, [r7, #8]
 80006ee:	f7ff ff11 	bl	8000514 <imu_init>
	version_init(soul_sense->version);
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 fdfe 	bl	80032f8 <version_init>
    memset(soul_sense->payload, 0, SIZE_OF_SOLE_DATA);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	223f      	movs	r2, #63	; 0x3f
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f009 f80a 	bl	800971c <memset>
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <soul_update_payload>:

void soul_update_payload(SoulSense* soul_sense) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	imu_update_payload(soul_sense->imu);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff86 	bl	800062e <imu_update_payload>
	ADC_update_payload(soul_sense->contact_sensors);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	4618      	mov	r0, r3
 8000728:	f002 f85f 	bl	80027ea <ADC_update_payload>
    int index = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

    // Copy ContactSensors payload
    for (int i = 0; i < NUMBER_OF_SENSORS * 4; i++) {
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	e010      	b.n	8000758 <soul_update_payload+0x48>
        soul_sense->payload[index] = soul_sense->contact_sensors->payload[i];
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	4413      	add	r3, r2
 800073e:	3324      	adds	r3, #36	; 0x24
 8000740:	7819      	ldrb	r1, [r3, #0]
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	4413      	add	r3, r2
 8000748:	460a      	mov	r2, r1
 800074a:	701a      	strb	r2, [r3, #0]
        index++;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	3301      	adds	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUMBER_OF_SENSORS * 4; i++) {
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	3301      	adds	r3, #1
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	2b1f      	cmp	r3, #31
 800075c:	ddeb      	ble.n	8000736 <soul_update_payload+0x26>
    }

    // Copy IMU payload
    for (int i = 0; i < SIZE_OF_IMU_DATA; i++) {
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	e010      	b.n	8000786 <soul_update_payload+0x76>
        soul_sense->payload[index] = soul_sense->imu->payload[i];
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4413      	add	r3, r2
 800076c:	3330      	adds	r3, #48	; 0x30
 800076e:	7819      	ldrb	r1, [r3, #0]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	4413      	add	r3, r2
 8000776:	460a      	mov	r2, r1
 8000778:	701a      	strb	r2, [r3, #0]
        index++;
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	3301      	adds	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < SIZE_OF_IMU_DATA; i++) {
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	3301      	adds	r3, #1
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	2b1b      	cmp	r3, #27
 800078a:	ddeb      	ble.n	8000764 <soul_update_payload+0x54>
    }

    // Copy FwVersion payload (version)
    for (int i = 0; i < VERSION_LEN; i++) {
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	e00f      	b.n	80007b2 <soul_update_payload+0xa2>
        soul_sense->payload[index] = soul_sense->version->version[i];
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	4413      	add	r3, r2
 800079a:	7819      	ldrb	r1, [r3, #0]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	4413      	add	r3, r2
 80007a2:	460a      	mov	r2, r1
 80007a4:	701a      	strb	r2, [r3, #0]
        index++;
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	3301      	adds	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < VERSION_LEN; i++) {
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	3301      	adds	r3, #1
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	ddec      	ble.n	8000792 <soul_update_payload+0x82>
    }
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2220      	movs	r2, #32
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f008 ffa3 	bl	800971c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007d6:	4b5e      	ldr	r3, [pc, #376]	; (8000950 <MX_ADC2_Init+0x18c>)
 80007d8:	4a5e      	ldr	r2, [pc, #376]	; (8000954 <MX_ADC2_Init+0x190>)
 80007da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007dc:	4b5c      	ldr	r3, [pc, #368]	; (8000950 <MX_ADC2_Init+0x18c>)
 80007de:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007e2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007e4:	4b5a      	ldr	r3, [pc, #360]	; (8000950 <MX_ADC2_Init+0x18c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ea:	4b59      	ldr	r3, [pc, #356]	; (8000950 <MX_ADC2_Init+0x18c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80007f0:	4b57      	ldr	r3, [pc, #348]	; (8000950 <MX_ADC2_Init+0x18c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007f6:	4b56      	ldr	r3, [pc, #344]	; (8000950 <MX_ADC2_Init+0x18c>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007fc:	4b54      	ldr	r3, [pc, #336]	; (8000950 <MX_ADC2_Init+0x18c>)
 80007fe:	2208      	movs	r2, #8
 8000800:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000802:	4b53      	ldr	r3, [pc, #332]	; (8000950 <MX_ADC2_Init+0x18c>)
 8000804:	2200      	movs	r2, #0
 8000806:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000808:	4b51      	ldr	r3, [pc, #324]	; (8000950 <MX_ADC2_Init+0x18c>)
 800080a:	2201      	movs	r2, #1
 800080c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 8;
 800080e:	4b50      	ldr	r3, [pc, #320]	; (8000950 <MX_ADC2_Init+0x18c>)
 8000810:	2208      	movs	r2, #8
 8000812:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000814:	4b4e      	ldr	r3, [pc, #312]	; (8000950 <MX_ADC2_Init+0x18c>)
 8000816:	2200      	movs	r2, #0
 8000818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800081c:	4b4c      	ldr	r3, [pc, #304]	; (8000950 <MX_ADC2_Init+0x18c>)
 800081e:	2200      	movs	r2, #0
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000822:	4b4b      	ldr	r3, [pc, #300]	; (8000950 <MX_ADC2_Init+0x18c>)
 8000824:	2200      	movs	r2, #0
 8000826:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000828:	4b49      	ldr	r3, [pc, #292]	; (8000950 <MX_ADC2_Init+0x18c>)
 800082a:	2201      	movs	r2, #1
 800082c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000830:	4b47      	ldr	r3, [pc, #284]	; (8000950 <MX_ADC2_Init+0x18c>)
 8000832:	2200      	movs	r2, #0
 8000834:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000836:	4b46      	ldr	r3, [pc, #280]	; (8000950 <MX_ADC2_Init+0x18c>)
 8000838:	2200      	movs	r2, #0
 800083a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800083e:	4844      	ldr	r0, [pc, #272]	; (8000950 <MX_ADC2_Init+0x18c>)
 8000840:	f003 f84c 	bl	80038dc <HAL_ADC_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800084a:	f002 faf3 	bl	8002e34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800084e:	4b42      	ldr	r3, [pc, #264]	; (8000958 <MX_ADC2_Init+0x194>)
 8000850:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000852:	2306      	movs	r3, #6
 8000854:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000856:	2305      	movs	r3, #5
 8000858:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085a:	237f      	movs	r3, #127	; 0x7f
 800085c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800085e:	2304      	movs	r3, #4
 8000860:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4839      	ldr	r0, [pc, #228]	; (8000950 <MX_ADC2_Init+0x18c>)
 800086c:	f003 faea 	bl	8003e44 <HAL_ADC_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000876:	f002 fadd 	bl	8002e34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800087a:	4b38      	ldr	r3, [pc, #224]	; (800095c <MX_ADC2_Init+0x198>)
 800087c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800087e:	230c      	movs	r3, #12
 8000880:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	4619      	mov	r1, r3
 8000886:	4832      	ldr	r0, [pc, #200]	; (8000950 <MX_ADC2_Init+0x18c>)
 8000888:	f003 fadc 	bl	8003e44 <HAL_ADC_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8000892:	f002 facf 	bl	8002e34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000896:	4b32      	ldr	r3, [pc, #200]	; (8000960 <MX_ADC2_Init+0x19c>)
 8000898:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800089a:	2312      	movs	r3, #18
 800089c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800089e:	463b      	mov	r3, r7
 80008a0:	4619      	mov	r1, r3
 80008a2:	482b      	ldr	r0, [pc, #172]	; (8000950 <MX_ADC2_Init+0x18c>)
 80008a4:	f003 face 	bl	8003e44 <HAL_ADC_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 80008ae:	f002 fac1 	bl	8002e34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008b2:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <MX_ADC2_Init+0x1a0>)
 80008b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80008b6:	2318      	movs	r3, #24
 80008b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ba:	463b      	mov	r3, r7
 80008bc:	4619      	mov	r1, r3
 80008be:	4824      	ldr	r0, [pc, #144]	; (8000950 <MX_ADC2_Init+0x18c>)
 80008c0:	f003 fac0 	bl	8003e44 <HAL_ADC_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 80008ca:	f002 fab3 	bl	8002e34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008ce:	4b26      	ldr	r3, [pc, #152]	; (8000968 <MX_ADC2_Init+0x1a4>)
 80008d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80008d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	481c      	ldr	r0, [pc, #112]	; (8000950 <MX_ADC2_Init+0x18c>)
 80008de:	f003 fab1 	bl	8003e44 <HAL_ADC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 80008e8:	f002 faa4 	bl	8002e34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_ADC2_Init+0x1a8>)
 80008ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80008f0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80008f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	4619      	mov	r1, r3
 80008fa:	4815      	ldr	r0, [pc, #84]	; (8000950 <MX_ADC2_Init+0x18c>)
 80008fc:	f003 faa2 	bl	8003e44 <HAL_ADC_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 8000906:	f002 fa95 	bl	8002e34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_ADC2_Init+0x1ac>)
 800090c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800090e:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000912:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	4619      	mov	r1, r3
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_ADC2_Init+0x18c>)
 800091a:	f003 fa93 	bl	8003e44 <HAL_ADC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC2_Init+0x164>
  {
    Error_Handler();
 8000924:	f002 fa86 	bl	8002e34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_ADC2_Init+0x1b0>)
 800092a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800092c:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000930:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	4619      	mov	r1, r3
 8000936:	4806      	ldr	r0, [pc, #24]	; (8000950 <MX_ADC2_Init+0x18c>)
 8000938:	f003 fa84 	bl	8003e44 <HAL_ADC_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC2_Init+0x182>
  {
    Error_Handler();
 8000942:	f002 fa77 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	3720      	adds	r7, #32
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000078 	.word	0x20000078
 8000954:	50000100 	.word	0x50000100
 8000958:	04300002 	.word	0x04300002
 800095c:	08600004 	.word	0x08600004
 8000960:	0c900008 	.word	0x0c900008
 8000964:	10c00010 	.word	0x10c00010
 8000968:	14f00020 	.word	0x14f00020
 800096c:	19200040 	.word	0x19200040
 8000970:	1d500080 	.word	0x1d500080
 8000974:	21800100 	.word	0x21800100

08000978 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b0a0      	sub	sp, #128	; 0x80
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000990:	f107 0318 	add.w	r3, r7, #24
 8000994:	2254      	movs	r2, #84	; 0x54
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f008 febf 	bl	800971c <memset>
  if(adcHandle->Instance==ADC2)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a3f      	ldr	r2, [pc, #252]	; (8000aa0 <HAL_ADC_MspInit+0x128>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d177      	bne.n	8000a98 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80009ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80009b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b4:	f107 0318 	add.w	r3, r7, #24
 80009b8:	4618      	mov	r0, r3
 80009ba:	f006 fffb 	bl	80079b4 <HAL_RCCEx_PeriphCLKConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009c4:	f002 fa36 	bl	8002e34 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009c8:	4b36      	ldr	r3, [pc, #216]	; (8000aa4 <HAL_ADC_MspInit+0x12c>)
 80009ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009cc:	4a35      	ldr	r2, [pc, #212]	; (8000aa4 <HAL_ADC_MspInit+0x12c>)
 80009ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d4:	4b33      	ldr	r3, [pc, #204]	; (8000aa4 <HAL_ADC_MspInit+0x12c>)
 80009d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e0:	4b30      	ldr	r3, [pc, #192]	; (8000aa4 <HAL_ADC_MspInit+0x12c>)
 80009e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e4:	4a2f      	ldr	r2, [pc, #188]	; (8000aa4 <HAL_ADC_MspInit+0x12c>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ec:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <HAL_ADC_MspInit+0x12c>)
 80009ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <HAL_ADC_MspInit+0x12c>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fc:	4a29      	ldr	r2, [pc, #164]	; (8000aa4 <HAL_ADC_MspInit+0x12c>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a04:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <HAL_ADC_MspInit+0x12c>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    PC4     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8000a10:	2317      	movs	r3, #23
 8000a12:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a14:	2303      	movs	r3, #3
 8000a16:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a20:	4619      	mov	r1, r3
 8000a22:	4821      	ldr	r0, [pc, #132]	; (8000aa8 <HAL_ADC_MspInit+0x130>)
 8000a24:	f005 f962 	bl	8005cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000a28:	23c3      	movs	r3, #195	; 0xc3
 8000a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3e:	f005 f955 	bl	8005cec <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <HAL_ADC_MspInit+0x134>)
 8000a44:	4a1a      	ldr	r2, [pc, #104]	; (8000ab0 <HAL_ADC_MspInit+0x138>)
 8000a46:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <HAL_ADC_MspInit+0x134>)
 8000a4a:	2224      	movs	r2, #36	; 0x24
 8000a4c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <HAL_ADC_MspInit+0x134>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_ADC_MspInit+0x134>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <HAL_ADC_MspInit+0x134>)
 8000a5c:	2280      	movs	r2, #128	; 0x80
 8000a5e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_ADC_MspInit+0x134>)
 8000a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a66:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_ADC_MspInit+0x134>)
 8000a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a6e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <HAL_ADC_MspInit+0x134>)
 8000a72:	2220      	movs	r2, #32
 8000a74:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_ADC_MspInit+0x134>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <HAL_ADC_MspInit+0x134>)
 8000a7e:	f004 f827 	bl	8004ad0 <HAL_DMA_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000a88:	f002 f9d4 	bl	8002e34 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a07      	ldr	r2, [pc, #28]	; (8000aac <HAL_ADC_MspInit+0x134>)
 8000a90:	655a      	str	r2, [r3, #84]	; 0x54
 8000a92:	4a06      	ldr	r2, [pc, #24]	; (8000aac <HAL_ADC_MspInit+0x134>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3780      	adds	r7, #128	; 0x80
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	50000100 	.word	0x50000100
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	48000800 	.word	0x48000800
 8000aac:	200000e4 	.word	0x200000e4
 8000ab0:	40020008 	.word	0x40020008

08000ab4 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b0b1      	sub	sp, #196	; 0xc4
 8000ab8:	af2a      	add	r7, sp, #168	; 0xa8
 8000aba:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]
    error_bno err;
    uint32_t timeSaver;

    imu->addr = (imu->addr << 1);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	799b      	ldrb	r3, [r3, #6]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8000acc:	687c      	ldr	r4, [r7, #4]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	9329      	str	r3, [sp, #164]	; 0xa4
 8000ad2:	f107 030f 	add.w	r3, r7, #15
 8000ad6:	9328      	str	r3, [sp, #160]	; 0xa0
 8000ad8:	2300      	movs	r3, #0
 8000ada:	9327      	str	r3, [sp, #156]	; 0x9c
 8000adc:	4668      	mov	r0, sp
 8000ade:	f104 0310 	add.w	r3, r4, #16
 8000ae2:	229c      	movs	r2, #156	; 0x9c
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f008 fe5d 	bl	80097a4 <memcpy>
 8000aea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000aee:	f001 fd23 	bl	8002538 <bno055_read_regs>
 8000af2:	4603      	mov	r3, r0
 8000af4:	75fb      	strb	r3, [r7, #23]
    if (err != BNO_OK) {
 8000af6:	7dfb      	ldrb	r3, [r7, #23]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <bno055_init+0x4c>
        return err;
 8000afc:	7dfb      	ldrb	r3, [r7, #23]
 8000afe:	e0df      	b.n	8000cc0 <bno055_init+0x20c>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	2ba0      	cmp	r3, #160	; 0xa0
 8000b04:	d001      	beq.n	8000b0a <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8000b06:	2306      	movs	r3, #6
 8000b08:	e0da      	b.n	8000cc0 <bno055_init+0x20c>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f001 fbd6 	bl	80022be <bno055_set_opmode>
 8000b12:	4603      	mov	r3, r0
 8000b14:	75fb      	strb	r3, [r7, #23]
 8000b16:	7dfb      	ldrb	r3, [r7, #23]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <bno055_init+0x6c>
        return err;
 8000b1c:	7dfb      	ldrb	r3, [r7, #23]
 8000b1e:	e0cf      	b.n	8000cc0 <bno055_init+0x20c>
    }
    timeSaver = HAL_GetTick();
 8000b20:	f002 fc8c 	bl	800343c <HAL_GetTick>
 8000b24:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < 2) {}//wait
 8000b26:	bf00      	nop
 8000b28:	f002 fc88 	bl	800343c <HAL_GetTick>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d9f8      	bls.n	8000b28 <bno055_init+0x74>
    //HAL_Delay(2);
    bno055_reset(imu);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f001 fcb8 	bl	80024ac <bno055_reset>
    timeSaver = HAL_GetTick();
 8000b3c:	f002 fc7e 	bl	800343c <HAL_GetTick>
 8000b40:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < 5000) {} //wait
 8000b42:	bf00      	nop
 8000b44:	f002 fc7a 	bl	800343c <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d9f6      	bls.n	8000b44 <bno055_init+0x90>
    //HAL_Delay(5000);
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8000b56:	2100      	movs	r1, #0
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f001 fc4a 	bl	80023f2 <bno055_set_pwr_mode>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	75fb      	strb	r3, [r7, #23]
 8000b62:	7dfb      	ldrb	r3, [r7, #23]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <bno055_init+0xb8>
        return err;
 8000b68:	7dfb      	ldrb	r3, [r7, #23]
 8000b6a:	e0a9      	b.n	8000cc0 <bno055_init+0x20c>
    }
    timeSaver = HAL_GetTick();
 8000b6c:	f002 fc66 	bl	800343c <HAL_GetTick>
 8000b70:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < 10) {}//wait
 8000b72:	bf00      	nop
 8000b74:	f002 fc62 	bl	800343c <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	2b09      	cmp	r3, #9
 8000b80:	d9f8      	bls.n	8000b74 <bno055_init+0xc0>
    //HAL_Delay(10);
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000b82:	2100      	movs	r1, #0
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f001 fd3a 	bl	80025fe <bno055_set_page>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	75fb      	strb	r3, [r7, #23]
 8000b8e:	7dfb      	ldrb	r3, [r7, #23]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <bno055_init+0xe4>
        return err;
 8000b94:	7dfb      	ldrb	r3, [r7, #23]
 8000b96:	e093      	b.n	8000cc0 <bno055_init+0x20c>
    }
    timeSaver = HAL_GetTick();
 8000b98:	f002 fc50 	bl	800343c <HAL_GetTick>
 8000b9c:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < BNO_CONFIG_TIME_DELAY + 5) {} //wait
 8000b9e:	bf00      	nop
 8000ba0:	f002 fc4c 	bl	800343c <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	2b0b      	cmp	r3, #11
 8000bac:	d9f8      	bls.n	8000ba0 <bno055_init+0xec>
    //HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
    bno055_on(imu);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f001 fc9f 	bl	80024f2 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	791b      	ldrb	r3, [r3, #4]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f001 fb7f 	bl	80022be <bno055_set_opmode>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	75fb      	strb	r3, [r7, #23]
 8000bc4:	7dfb      	ldrb	r3, [r7, #23]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <bno055_init+0x11a>
        return err;
 8000bca:	7dfb      	ldrb	r3, [r7, #23]
 8000bcc:	e078      	b.n	8000cc0 <bno055_init+0x20c>
    }
    timeSaver = HAL_GetTick();
 8000bce:	f002 fc35 	bl	800343c <HAL_GetTick>
 8000bd2:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < BNO_ANY_TIME_DELAY + 5) {}//wait
 8000bd4:	bf00      	nop
 8000bd6:	f002 fc31 	bl	800343c <HAL_GetTick>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	2b17      	cmp	r3, #23
 8000be2:	d9f8      	bls.n	8000bd6 <bno055_init+0x122>
    //HAL_Delay(BNO_ANY_TIME_DELAY + 5);

    imu->temperature = &bno055_temperature;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a38      	ldr	r2, [pc, #224]	; (8000cc8 <bno055_init+0x214>)
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
    imu->acc_x = &bno055_acc_x;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a37      	ldr	r2, [pc, #220]	; (8000ccc <bno055_init+0x218>)
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
    imu->acc_y = &bno055_acc_y;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a37      	ldr	r2, [pc, #220]	; (8000cd0 <bno055_init+0x21c>)
 8000bf4:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->acc_z = &bno055_acc_z;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a36      	ldr	r2, [pc, #216]	; (8000cd4 <bno055_init+0x220>)
 8000bfa:	631a      	str	r2, [r3, #48]	; 0x30
    imu->acc = &bno055_acc;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a36      	ldr	r2, [pc, #216]	; (8000cd8 <bno055_init+0x224>)
 8000c00:	635a      	str	r2, [r3, #52]	; 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a35      	ldr	r2, [pc, #212]	; (8000cdc <bno055_init+0x228>)
 8000c06:	639a      	str	r2, [r3, #56]	; 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a35      	ldr	r2, [pc, #212]	; (8000ce0 <bno055_init+0x22c>)
 8000c0c:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a34      	ldr	r2, [pc, #208]	; (8000ce4 <bno055_init+0x230>)
 8000c12:	641a      	str	r2, [r3, #64]	; 0x40
    imu->linear_acc = &bno055_linear_acc;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a34      	ldr	r2, [pc, #208]	; (8000ce8 <bno055_init+0x234>)
 8000c18:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyro_x = &bno055_gyro_x;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a33      	ldr	r2, [pc, #204]	; (8000cec <bno055_init+0x238>)
 8000c1e:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyro_y = &bno055_gyro_y;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a33      	ldr	r2, [pc, #204]	; (8000cf0 <bno055_init+0x23c>)
 8000c24:	64da      	str	r2, [r3, #76]	; 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a32      	ldr	r2, [pc, #200]	; (8000cf4 <bno055_init+0x240>)
 8000c2a:	651a      	str	r2, [r3, #80]	; 0x50
    imu->gyro = &bno055_gyro;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a32      	ldr	r2, [pc, #200]	; (8000cf8 <bno055_init+0x244>)
 8000c30:	655a      	str	r2, [r3, #84]	; 0x54
    imu->mag_x = &bno055_mag_x;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a31      	ldr	r2, [pc, #196]	; (8000cfc <bno055_init+0x248>)
 8000c36:	659a      	str	r2, [r3, #88]	; 0x58
    imu->mag_y = &bno055_mag_y;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a31      	ldr	r2, [pc, #196]	; (8000d00 <bno055_init+0x24c>)
 8000c3c:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->mag_z = &bno055_mag_z;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a30      	ldr	r2, [pc, #192]	; (8000d04 <bno055_init+0x250>)
 8000c42:	661a      	str	r2, [r3, #96]	; 0x60
    imu->mag = &bno055_mag;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a30      	ldr	r2, [pc, #192]	; (8000d08 <bno055_init+0x254>)
 8000c48:	665a      	str	r2, [r3, #100]	; 0x64
    imu->gravity_x = &bno055_gravity_x;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a2f      	ldr	r2, [pc, #188]	; (8000d0c <bno055_init+0x258>)
 8000c4e:	669a      	str	r2, [r3, #104]	; 0x68
    imu->gravity_y = &bno055_gravity_y;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a2f      	ldr	r2, [pc, #188]	; (8000d10 <bno055_init+0x25c>)
 8000c54:	66da      	str	r2, [r3, #108]	; 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a2e      	ldr	r2, [pc, #184]	; (8000d14 <bno055_init+0x260>)
 8000c5a:	671a      	str	r2, [r3, #112]	; 0x70
    imu->gravity = &bno055_gravity;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a2e      	ldr	r2, [pc, #184]	; (8000d18 <bno055_init+0x264>)
 8000c60:	675a      	str	r2, [r3, #116]	; 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a2d      	ldr	r2, [pc, #180]	; (8000d1c <bno055_init+0x268>)
 8000c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    imu->euler_roll = &bno055_euler_roll;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a2c      	ldr	r2, [pc, #176]	; (8000d20 <bno055_init+0x26c>)
 8000c6e:	679a      	str	r2, [r3, #120]	; 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a2c      	ldr	r2, [pc, #176]	; (8000d24 <bno055_init+0x270>)
 8000c74:	67da      	str	r2, [r3, #124]	; 0x7c
    imu->euler = &bno055_euler;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a2b      	ldr	r2, [pc, #172]	; (8000d28 <bno055_init+0x274>)
 8000c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a2a      	ldr	r2, [pc, #168]	; (8000d2c <bno055_init+0x278>)
 8000c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a29      	ldr	r2, [pc, #164]	; (8000d30 <bno055_init+0x27c>)
 8000c8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a28      	ldr	r2, [pc, #160]	; (8000d34 <bno055_init+0x280>)
 8000c92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a27      	ldr	r2, [pc, #156]	; (8000d38 <bno055_init+0x284>)
 8000c9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    imu->quaternion = &bno055_quaternion;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a26      	ldr	r2, [pc, #152]	; (8000d3c <bno055_init+0x288>)
 8000ca2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    imu->acc_config = &bno055_acc_conf;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a25      	ldr	r2, [pc, #148]	; (8000d40 <bno055_init+0x28c>)
 8000caa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a24      	ldr	r2, [pc, #144]	; (8000d44 <bno055_init+0x290>)
 8000cb2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    imu->mag_config = &bno055_mag_conf;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a23      	ldr	r2, [pc, #140]	; (8000d48 <bno055_init+0x294>)
 8000cba:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return BNO_OK;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	371c      	adds	r7, #28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	08000d4d 	.word	0x08000d4d
 8000ccc:	08000dc9 	.word	0x08000dc9
 8000cd0:	08000e5d 	.word	0x08000e5d
 8000cd4:	08000ef1 	.word	0x08000ef1
 8000cd8:	08000f85 	.word	0x08000f85
 8000cdc:	08001065 	.word	0x08001065
 8000ce0:	080010f9 	.word	0x080010f9
 8000ce4:	0800118d 	.word	0x0800118d
 8000ce8:	08001221 	.word	0x08001221
 8000cec:	08001301 	.word	0x08001301
 8000cf0:	08001395 	.word	0x08001395
 8000cf4:	08001429 	.word	0x08001429
 8000cf8:	080014bd 	.word	0x080014bd
 8000cfc:	0800159d 	.word	0x0800159d
 8000d00:	0800161f 	.word	0x0800161f
 8000d04:	080016a1 	.word	0x080016a1
 8000d08:	08001723 	.word	0x08001723
 8000d0c:	080017ed 	.word	0x080017ed
 8000d10:	08001885 	.word	0x08001885
 8000d14:	0800191d 	.word	0x0800191d
 8000d18:	080019b5 	.word	0x080019b5
 8000d1c:	08001a95 	.word	0x08001a95
 8000d20:	08001b2d 	.word	0x08001b2d
 8000d24:	08001bc5 	.word	0x08001bc5
 8000d28:	08001c5d 	.word	0x08001c5d
 8000d2c:	08001d3d 	.word	0x08001d3d
 8000d30:	08001dc5 	.word	0x08001dc5
 8000d34:	08001e4d 	.word	0x08001e4d
 8000d38:	08001ed5 	.word	0x08001ed5
 8000d3c:	08001f5d 	.word	0x08001f5d
 8000d40:	08002051 	.word	0x08002051
 8000d44:	08002121 	.word	0x08002121
 8000d48:	080021ef 	.word	0x080021ef

08000d4c <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b0af      	sub	sp, #188	; 0xbc
 8000d50:	af2a      	add	r7, sp, #168	; 0xa8
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000d56:	2100      	movs	r1, #0
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f001 fc50 	bl	80025fe <bno055_set_page>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	73fb      	strb	r3, [r7, #15]
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <bno055_temperature+0x20>
        return err;
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	e029      	b.n	8000dc0 <bno055_temperature+0x74>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 8000d70:	687c      	ldr	r4, [r7, #4]
 8000d72:	2301      	movs	r3, #1
 8000d74:	9329      	str	r3, [sp, #164]	; 0xa4
 8000d76:	f107 030e 	add.w	r3, r7, #14
 8000d7a:	9328      	str	r3, [sp, #160]	; 0xa0
 8000d7c:	2334      	movs	r3, #52	; 0x34
 8000d7e:	9327      	str	r3, [sp, #156]	; 0x9c
 8000d80:	4668      	mov	r0, sp
 8000d82:	f104 0310 	add.w	r3, r4, #16
 8000d86:	229c      	movs	r2, #156	; 0x9c
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f008 fd0b 	bl	80097a4 <memcpy>
 8000d8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d92:	f001 fbd1 	bl	8002538 <bno055_read_regs>
 8000d96:	4603      	mov	r3, r0
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <bno055_temperature+0x58>
        return err;
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	e00d      	b.n	8000dc0 <bno055_temperature+0x74>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	7bdb      	ldrb	r3, [r3, #15]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d004      	beq.n	8000db6 <bno055_temperature+0x6a>
 8000dac:	7bbb      	ldrb	r3, [r7, #14]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	e001      	b.n	8000dba <bno055_temperature+0x6e>
 8000db6:	7bbb      	ldrb	r3, [r7, #14]
 8000db8:	b25b      	sxtb	r3, r3
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd90      	pop	{r4, r7, pc}

08000dc8 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b0af      	sub	sp, #188	; 0xbc
 8000dcc:	af2a      	add	r7, sp, #168	; 0xa8
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f001 fc12 	bl	80025fe <bno055_set_page>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <bno055_acc_x+0x20>
        return err;
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	e033      	b.n	8000e50 <bno055_acc_x+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000de8:	687c      	ldr	r4, [r7, #4]
 8000dea:	2302      	movs	r3, #2
 8000dec:	9329      	str	r3, [sp, #164]	; 0xa4
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	9328      	str	r3, [sp, #160]	; 0xa0
 8000df4:	2308      	movs	r3, #8
 8000df6:	9327      	str	r3, [sp, #156]	; 0x9c
 8000df8:	4668      	mov	r0, sp
 8000dfa:	f104 0310 	add.w	r3, r4, #16
 8000dfe:	229c      	movs	r2, #156	; 0x9c
 8000e00:	4619      	mov	r1, r3
 8000e02:	f008 fccf 	bl	80097a4 <memcpy>
 8000e06:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e0a:	f001 fb95 	bl	8002538 <bno055_read_regs>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	73fb      	strb	r3, [r7, #15]
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <bno055_acc_x+0x54>
        return err;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	e019      	b.n	8000e50 <bno055_acc_x+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e1c:	7b7b      	ldrb	r3, [r7, #13]
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	7b3b      	ldrb	r3, [r7, #12]
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d102      	bne.n	8000e40 <bno055_acc_x+0x78>
 8000e3a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000e58 <bno055_acc_x+0x90>
 8000e3e:	e001      	b.n	8000e44 <bno055_acc_x+0x7c>
 8000e40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000e4e:	2300      	movs	r3, #0
};
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	42c80000 	.word	0x42c80000

08000e5c <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b0af      	sub	sp, #188	; 0xbc
 8000e60:	af2a      	add	r7, sp, #168	; 0xa8
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000e66:	2100      	movs	r1, #0
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f001 fbc8 	bl	80025fe <bno055_set_page>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	73fb      	strb	r3, [r7, #15]
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <bno055_acc_y+0x20>
        return err;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	e033      	b.n	8000ee4 <bno055_acc_y+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000e7c:	687c      	ldr	r4, [r7, #4]
 8000e7e:	2302      	movs	r3, #2
 8000e80:	9329      	str	r3, [sp, #164]	; 0xa4
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	9328      	str	r3, [sp, #160]	; 0xa0
 8000e88:	230a      	movs	r3, #10
 8000e8a:	9327      	str	r3, [sp, #156]	; 0x9c
 8000e8c:	4668      	mov	r0, sp
 8000e8e:	f104 0310 	add.w	r3, r4, #16
 8000e92:	229c      	movs	r2, #156	; 0x9c
 8000e94:	4619      	mov	r1, r3
 8000e96:	f008 fc85 	bl	80097a4 <memcpy>
 8000e9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e9e:	f001 fb4b 	bl	8002538 <bno055_read_regs>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	73fb      	strb	r3, [r7, #15]
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <bno055_acc_y+0x54>
        return err;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	e019      	b.n	8000ee4 <bno055_acc_y+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000eb0:	7b7b      	ldrb	r3, [r7, #13]
 8000eb2:	021b      	lsls	r3, r3, #8
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	7b3b      	ldrb	r3, [r7, #12]
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	b21b      	sxth	r3, r3
 8000ebe:	ee07 3a90 	vmov	s15, r3
 8000ec2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d102      	bne.n	8000ed4 <bno055_acc_y+0x78>
 8000ece:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000eec <bno055_acc_y+0x90>
 8000ed2:	e001      	b.n	8000ed8 <bno055_acc_y+0x7c>
 8000ed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000ee2:	2300      	movs	r3, #0
};
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd90      	pop	{r4, r7, pc}
 8000eec:	42c80000 	.word	0x42c80000

08000ef0 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b0af      	sub	sp, #188	; 0xbc
 8000ef4:	af2a      	add	r7, sp, #168	; 0xa8
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000efa:	2100      	movs	r1, #0
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f001 fb7e 	bl	80025fe <bno055_set_page>
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <bno055_acc_z+0x20>
        return err;
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	e033      	b.n	8000f78 <bno055_acc_z+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000f10:	687c      	ldr	r4, [r7, #4]
 8000f12:	2302      	movs	r3, #2
 8000f14:	9329      	str	r3, [sp, #164]	; 0xa4
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	9328      	str	r3, [sp, #160]	; 0xa0
 8000f1c:	230c      	movs	r3, #12
 8000f1e:	9327      	str	r3, [sp, #156]	; 0x9c
 8000f20:	4668      	mov	r0, sp
 8000f22:	f104 0310 	add.w	r3, r4, #16
 8000f26:	229c      	movs	r2, #156	; 0x9c
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f008 fc3b 	bl	80097a4 <memcpy>
 8000f2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f32:	f001 fb01 	bl	8002538 <bno055_read_regs>
 8000f36:	4603      	mov	r3, r0
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <bno055_acc_z+0x54>
        return err;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	e019      	b.n	8000f78 <bno055_acc_z+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000f44:	7b7b      	ldrb	r3, [r7, #13]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	7b3b      	ldrb	r3, [r7, #12]
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d102      	bne.n	8000f68 <bno055_acc_z+0x78>
 8000f62:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f80 <bno055_acc_z+0x90>
 8000f66:	e001      	b.n	8000f6c <bno055_acc_z+0x7c>
 8000f68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000f76:	2300      	movs	r3, #0
};
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd90      	pop	{r4, r7, pc}
 8000f80:	42c80000 	.word	0x42c80000

08000f84 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b0b1      	sub	sp, #196	; 0xc4
 8000f88:	af2a      	add	r7, sp, #168	; 0xa8
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000f8e:	2100      	movs	r1, #0
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f001 fb34 	bl	80025fe <bno055_set_page>
 8000f96:	4603      	mov	r3, r0
 8000f98:	75fb      	strb	r3, [r7, #23]
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <bno055_acc+0x20>
        return err;
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	e059      	b.n	8001058 <bno055_acc+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 8000fa4:	687c      	ldr	r4, [r7, #4]
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	9329      	str	r3, [sp, #164]	; 0xa4
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	9328      	str	r3, [sp, #160]	; 0xa0
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	9327      	str	r3, [sp, #156]	; 0x9c
 8000fb4:	4668      	mov	r0, sp
 8000fb6:	f104 0310 	add.w	r3, r4, #16
 8000fba:	229c      	movs	r2, #156	; 0x9c
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f008 fbf1 	bl	80097a4 <memcpy>
 8000fc2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fc6:	f001 fab7 	bl	8002538 <bno055_read_regs>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	75fb      	strb	r3, [r7, #23]
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <bno055_acc+0x54>
        return err;
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	e03f      	b.n	8001058 <bno055_acc+0xd4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <bno055_acc+0x60>
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <bno055_acc+0xdc>)
 8000fe2:	e001      	b.n	8000fe8 <bno055_acc+0x64>
 8000fe4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000fe8:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000fea:	7a7b      	ldrb	r3, [r7, #9]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	7a3b      	ldrb	r3, [r7, #8]
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	ee07 3a90 	vmov	s15, r3
 8000ffc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001000:	ed97 7a04 	vldr	s14, [r7, #16]
 8001004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 800100e:	7afb      	ldrb	r3, [r7, #11]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	7abb      	ldrb	r3, [r7, #10]
 8001016:	b21b      	sxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b21b      	sxth	r3, r3
 800101c:	ee07 3a90 	vmov	s15, r3
 8001020:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001024:	ed97 7a04 	vldr	s14, [r7, #16]
 8001028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001032:	7b7b      	ldrb	r3, [r7, #13]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b21a      	sxth	r2, r3
 8001038:	7b3b      	ldrb	r3, [r7, #12]
 800103a:	b21b      	sxth	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	b21b      	sxth	r3, r3
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001048:	ed97 7a04 	vldr	s14, [r7, #16]
 800104c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001056:	2300      	movs	r3, #0
};
 8001058:	4618      	mov	r0, r3
 800105a:	371c      	adds	r7, #28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd90      	pop	{r4, r7, pc}
 8001060:	42c80000 	.word	0x42c80000

08001064 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b0af      	sub	sp, #188	; 0xbc
 8001068:	af2a      	add	r7, sp, #168	; 0xa8
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800106e:	2100      	movs	r1, #0
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f001 fac4 	bl	80025fe <bno055_set_page>
 8001076:	4603      	mov	r3, r0
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <bno055_linear_acc_x+0x20>
        return err;
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	e033      	b.n	80010ec <bno055_linear_acc_x+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001084:	687c      	ldr	r4, [r7, #4]
 8001086:	2302      	movs	r3, #2
 8001088:	9329      	str	r3, [sp, #164]	; 0xa4
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	9328      	str	r3, [sp, #160]	; 0xa0
 8001090:	2328      	movs	r3, #40	; 0x28
 8001092:	9327      	str	r3, [sp, #156]	; 0x9c
 8001094:	4668      	mov	r0, sp
 8001096:	f104 0310 	add.w	r3, r4, #16
 800109a:	229c      	movs	r2, #156	; 0x9c
 800109c:	4619      	mov	r1, r3
 800109e:	f008 fb81 	bl	80097a4 <memcpy>
 80010a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010a6:	f001 fa47 	bl	8002538 <bno055_read_regs>
 80010aa:	4603      	mov	r3, r0
 80010ac:	73fb      	strb	r3, [r7, #15]
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <bno055_linear_acc_x+0x54>
        return err;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	e019      	b.n	80010ec <bno055_linear_acc_x+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80010b8:	7b7b      	ldrb	r3, [r7, #13]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	7b3b      	ldrb	r3, [r7, #12]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <bno055_linear_acc_x+0x78>
 80010d6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80010f4 <bno055_linear_acc_x+0x90>
 80010da:	e001      	b.n	80010e0 <bno055_linear_acc_x+0x7c>
 80010dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80010e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80010ea:	2300      	movs	r3, #0
};
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd90      	pop	{r4, r7, pc}
 80010f4:	42c80000 	.word	0x42c80000

080010f8 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b0af      	sub	sp, #188	; 0xbc
 80010fc:	af2a      	add	r7, sp, #168	; 0xa8
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001102:	2100      	movs	r1, #0
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f001 fa7a 	bl	80025fe <bno055_set_page>
 800110a:	4603      	mov	r3, r0
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <bno055_linear_acc_y+0x20>
        return err;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	e033      	b.n	8001180 <bno055_linear_acc_y+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001118:	687c      	ldr	r4, [r7, #4]
 800111a:	2302      	movs	r3, #2
 800111c:	9329      	str	r3, [sp, #164]	; 0xa4
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	9328      	str	r3, [sp, #160]	; 0xa0
 8001124:	232a      	movs	r3, #42	; 0x2a
 8001126:	9327      	str	r3, [sp, #156]	; 0x9c
 8001128:	4668      	mov	r0, sp
 800112a:	f104 0310 	add.w	r3, r4, #16
 800112e:	229c      	movs	r2, #156	; 0x9c
 8001130:	4619      	mov	r1, r3
 8001132:	f008 fb37 	bl	80097a4 <memcpy>
 8001136:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800113a:	f001 f9fd 	bl	8002538 <bno055_read_regs>
 800113e:	4603      	mov	r3, r0
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <bno055_linear_acc_y+0x54>
        return err;
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	e019      	b.n	8001180 <bno055_linear_acc_y+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800114c:	7b7b      	ldrb	r3, [r7, #13]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21a      	sxth	r2, r3
 8001152:	7b3b      	ldrb	r3, [r7, #12]
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b21b      	sxth	r3, r3
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <bno055_linear_acc_y+0x78>
 800116a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001188 <bno055_linear_acc_y+0x90>
 800116e:	e001      	b.n	8001174 <bno055_linear_acc_y+0x7c>
 8001170:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800117e:	2300      	movs	r3, #0
};
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bd90      	pop	{r4, r7, pc}
 8001188:	42c80000 	.word	0x42c80000

0800118c <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b0af      	sub	sp, #188	; 0xbc
 8001190:	af2a      	add	r7, sp, #168	; 0xa8
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001196:	2100      	movs	r1, #0
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f001 fa30 	bl	80025fe <bno055_set_page>
 800119e:	4603      	mov	r3, r0
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <bno055_linear_acc_z+0x20>
        return err;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	e033      	b.n	8001214 <bno055_linear_acc_z+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80011ac:	687c      	ldr	r4, [r7, #4]
 80011ae:	2302      	movs	r3, #2
 80011b0:	9329      	str	r3, [sp, #164]	; 0xa4
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	9328      	str	r3, [sp, #160]	; 0xa0
 80011b8:	232c      	movs	r3, #44	; 0x2c
 80011ba:	9327      	str	r3, [sp, #156]	; 0x9c
 80011bc:	4668      	mov	r0, sp
 80011be:	f104 0310 	add.w	r3, r4, #16
 80011c2:	229c      	movs	r2, #156	; 0x9c
 80011c4:	4619      	mov	r1, r3
 80011c6:	f008 faed 	bl	80097a4 <memcpy>
 80011ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011ce:	f001 f9b3 	bl	8002538 <bno055_read_regs>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <bno055_linear_acc_z+0x54>
        return err;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	e019      	b.n	8001214 <bno055_linear_acc_z+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80011e0:	7b7b      	ldrb	r3, [r7, #13]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	7b3b      	ldrb	r3, [r7, #12]
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <bno055_linear_acc_z+0x78>
 80011fe:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800121c <bno055_linear_acc_z+0x90>
 8001202:	e001      	b.n	8001208 <bno055_linear_acc_z+0x7c>
 8001204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001212:	2300      	movs	r3, #0
};
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	bd90      	pop	{r4, r7, pc}
 800121c:	42c80000 	.word	0x42c80000

08001220 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b0b1      	sub	sp, #196	; 0xc4
 8001224:	af2a      	add	r7, sp, #168	; 0xa8
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800122a:	2100      	movs	r1, #0
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f001 f9e6 	bl	80025fe <bno055_set_page>
 8001232:	4603      	mov	r3, r0
 8001234:	75fb      	strb	r3, [r7, #23]
 8001236:	7dfb      	ldrb	r3, [r7, #23]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <bno055_linear_acc+0x20>
        return err;
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	e059      	b.n	80012f4 <bno055_linear_acc+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001240:	687c      	ldr	r4, [r7, #4]
 8001242:	2306      	movs	r3, #6
 8001244:	9329      	str	r3, [sp, #164]	; 0xa4
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	9328      	str	r3, [sp, #160]	; 0xa0
 800124c:	2328      	movs	r3, #40	; 0x28
 800124e:	9327      	str	r3, [sp, #156]	; 0x9c
 8001250:	4668      	mov	r0, sp
 8001252:	f104 0310 	add.w	r3, r4, #16
 8001256:	229c      	movs	r2, #156	; 0x9c
 8001258:	4619      	mov	r1, r3
 800125a:	f008 faa3 	bl	80097a4 <memcpy>
 800125e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001262:	f001 f969 	bl	8002538 <bno055_read_regs>
 8001266:	4603      	mov	r3, r0
 8001268:	75fb      	strb	r3, [r7, #23]
 800126a:	7dfb      	ldrb	r3, [r7, #23]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <bno055_linear_acc+0x54>
        return err;
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	e03f      	b.n	80012f4 <bno055_linear_acc+0xd4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <bno055_linear_acc+0x60>
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <bno055_linear_acc+0xdc>)
 800127e:	e001      	b.n	8001284 <bno055_linear_acc+0x64>
 8001280:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001284:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001286:	7a7b      	ldrb	r3, [r7, #9]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	7a3b      	ldrb	r3, [r7, #8]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21b      	sxth	r3, r3
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800129c:	ed97 7a04 	vldr	s14, [r7, #16]
 80012a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80012aa:	7afb      	ldrb	r3, [r7, #11]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	7abb      	ldrb	r3, [r7, #10]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80012c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80012ce:	7b7b      	ldrb	r3, [r7, #13]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	7b3b      	ldrb	r3, [r7, #12]
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b21b      	sxth	r3, r3
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80012e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80012f2:	2300      	movs	r3, #0
};
 80012f4:	4618      	mov	r0, r3
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd90      	pop	{r4, r7, pc}
 80012fc:	42c80000 	.word	0x42c80000

08001300 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b0af      	sub	sp, #188	; 0xbc
 8001304:	af2a      	add	r7, sp, #168	; 0xa8
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800130a:	2100      	movs	r1, #0
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f001 f976 	bl	80025fe <bno055_set_page>
 8001312:	4603      	mov	r3, r0
 8001314:	73fb      	strb	r3, [r7, #15]
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <bno055_gyro_x+0x20>
        return err;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	e033      	b.n	8001388 <bno055_gyro_x+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001320:	687c      	ldr	r4, [r7, #4]
 8001322:	2302      	movs	r3, #2
 8001324:	9329      	str	r3, [sp, #164]	; 0xa4
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	9328      	str	r3, [sp, #160]	; 0xa0
 800132c:	2314      	movs	r3, #20
 800132e:	9327      	str	r3, [sp, #156]	; 0x9c
 8001330:	4668      	mov	r0, sp
 8001332:	f104 0310 	add.w	r3, r4, #16
 8001336:	229c      	movs	r2, #156	; 0x9c
 8001338:	4619      	mov	r1, r3
 800133a:	f008 fa33 	bl	80097a4 <memcpy>
 800133e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001342:	f001 f8f9 	bl	8002538 <bno055_read_regs>
 8001346:	4603      	mov	r3, r0
 8001348:	73fb      	strb	r3, [r7, #15]
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <bno055_gyro_x+0x54>
        return err;
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	e019      	b.n	8001388 <bno055_gyro_x+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001354:	7b7b      	ldrb	r3, [r7, #13]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	7b3b      	ldrb	r3, [r7, #12]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b21b      	sxth	r3, r3
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <bno055_gyro_x+0x78>
 8001372:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001376:	e001      	b.n	800137c <bno055_gyro_x+0x7c>
 8001378:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001390 <bno055_gyro_x+0x90>
    *buf = (s16)((data[1] << 8) | data[0]) /
 800137c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001386:	2300      	movs	r3, #0
};
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	44610000 	.word	0x44610000

08001394 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b0af      	sub	sp, #188	; 0xbc
 8001398:	af2a      	add	r7, sp, #168	; 0xa8
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800139e:	2100      	movs	r1, #0
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f001 f92c 	bl	80025fe <bno055_set_page>
 80013a6:	4603      	mov	r3, r0
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <bno055_gyro_y+0x20>
        return err;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	e033      	b.n	800141c <bno055_gyro_y+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80013b4:	687c      	ldr	r4, [r7, #4]
 80013b6:	2302      	movs	r3, #2
 80013b8:	9329      	str	r3, [sp, #164]	; 0xa4
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	9328      	str	r3, [sp, #160]	; 0xa0
 80013c0:	2316      	movs	r3, #22
 80013c2:	9327      	str	r3, [sp, #156]	; 0x9c
 80013c4:	4668      	mov	r0, sp
 80013c6:	f104 0310 	add.w	r3, r4, #16
 80013ca:	229c      	movs	r2, #156	; 0x9c
 80013cc:	4619      	mov	r1, r3
 80013ce:	f008 f9e9 	bl	80097a4 <memcpy>
 80013d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013d6:	f001 f8af 	bl	8002538 <bno055_read_regs>
 80013da:	4603      	mov	r3, r0
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <bno055_gyro_y+0x54>
        return err;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	e019      	b.n	800141c <bno055_gyro_y+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80013e8:	7b7b      	ldrb	r3, [r7, #13]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	7b3b      	ldrb	r3, [r7, #12]
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001402:	2b00      	cmp	r3, #0
 8001404:	d102      	bne.n	800140c <bno055_gyro_y+0x78>
 8001406:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800140a:	e001      	b.n	8001410 <bno055_gyro_y+0x7c>
 800140c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001424 <bno055_gyro_y+0x90>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800141a:	2300      	movs	r3, #0
};
 800141c:	4618      	mov	r0, r3
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	bd90      	pop	{r4, r7, pc}
 8001424:	44610000 	.word	0x44610000

08001428 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b0af      	sub	sp, #188	; 0xbc
 800142c:	af2a      	add	r7, sp, #168	; 0xa8
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001432:	2100      	movs	r1, #0
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f001 f8e2 	bl	80025fe <bno055_set_page>
 800143a:	4603      	mov	r3, r0
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <bno055_gyro_z+0x20>
        return err;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	e033      	b.n	80014b0 <bno055_gyro_z+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001448:	687c      	ldr	r4, [r7, #4]
 800144a:	2302      	movs	r3, #2
 800144c:	9329      	str	r3, [sp, #164]	; 0xa4
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	9328      	str	r3, [sp, #160]	; 0xa0
 8001454:	2318      	movs	r3, #24
 8001456:	9327      	str	r3, [sp, #156]	; 0x9c
 8001458:	4668      	mov	r0, sp
 800145a:	f104 0310 	add.w	r3, r4, #16
 800145e:	229c      	movs	r2, #156	; 0x9c
 8001460:	4619      	mov	r1, r3
 8001462:	f008 f99f 	bl	80097a4 <memcpy>
 8001466:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800146a:	f001 f865 	bl	8002538 <bno055_read_regs>
 800146e:	4603      	mov	r3, r0
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <bno055_gyro_z+0x54>
        return err;
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	e019      	b.n	80014b0 <bno055_gyro_z+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800147c:	7b7b      	ldrb	r3, [r7, #13]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	7b3b      	ldrb	r3, [r7, #12]
 8001484:	b21b      	sxth	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b21b      	sxth	r3, r3
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <bno055_gyro_z+0x78>
 800149a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800149e:	e001      	b.n	80014a4 <bno055_gyro_z+0x7c>
 80014a0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014b8 <bno055_gyro_z+0x90>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80014a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80014ae:	2300      	movs	r3, #0
};
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd90      	pop	{r4, r7, pc}
 80014b8:	44610000 	.word	0x44610000

080014bc <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b0b1      	sub	sp, #196	; 0xc4
 80014c0:	af2a      	add	r7, sp, #168	; 0xa8
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80014c6:	2100      	movs	r1, #0
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f001 f898 	bl	80025fe <bno055_set_page>
 80014ce:	4603      	mov	r3, r0
 80014d0:	75fb      	strb	r3, [r7, #23]
 80014d2:	7dfb      	ldrb	r3, [r7, #23]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <bno055_gyro+0x20>
        return err;
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	e059      	b.n	8001590 <bno055_gyro+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 80014dc:	687c      	ldr	r4, [r7, #4]
 80014de:	2306      	movs	r3, #6
 80014e0:	9329      	str	r3, [sp, #164]	; 0xa4
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	9328      	str	r3, [sp, #160]	; 0xa0
 80014e8:	2314      	movs	r3, #20
 80014ea:	9327      	str	r3, [sp, #156]	; 0x9c
 80014ec:	4668      	mov	r0, sp
 80014ee:	f104 0310 	add.w	r3, r4, #16
 80014f2:	229c      	movs	r2, #156	; 0x9c
 80014f4:	4619      	mov	r1, r3
 80014f6:	f008 f955 	bl	80097a4 <memcpy>
 80014fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014fe:	f001 f81b 	bl	8002538 <bno055_read_regs>
 8001502:	4603      	mov	r3, r0
 8001504:	75fb      	strb	r3, [r7, #23]
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <bno055_gyro+0x54>
        return err;
 800150c:	7dfb      	ldrb	r3, [r7, #23]
 800150e:	e03f      	b.n	8001590 <bno055_gyro+0xd4>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <bno055_gyro+0x62>
 8001518:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800151c:	e000      	b.n	8001520 <bno055_gyro+0x64>
 800151e:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <bno055_gyro+0xdc>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001520:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001522:	7a7b      	ldrb	r3, [r7, #9]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	b21a      	sxth	r2, r3
 8001528:	7a3b      	ldrb	r3, [r7, #8]
 800152a:	b21b      	sxth	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b21b      	sxth	r3, r3
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001538:	ed97 7a04 	vldr	s14, [r7, #16]
 800153c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001546:	7afb      	ldrb	r3, [r7, #11]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b21a      	sxth	r2, r3
 800154c:	7abb      	ldrb	r3, [r7, #10]
 800154e:	b21b      	sxth	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b21b      	sxth	r3, r3
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800155c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 800156a:	7b7b      	ldrb	r3, [r7, #13]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b21a      	sxth	r2, r3
 8001570:	7b3b      	ldrb	r3, [r7, #12]
 8001572:	b21b      	sxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b21b      	sxth	r3, r3
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001580:	ed97 7a04 	vldr	s14, [r7, #16]
 8001584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	371c      	adds	r7, #28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd90      	pop	{r4, r7, pc}
 8001598:	44610000 	.word	0x44610000

0800159c <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b0af      	sub	sp, #188	; 0xbc
 80015a0:	af2a      	add	r7, sp, #168	; 0xa8
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80015a6:	2100      	movs	r1, #0
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f001 f828 	bl	80025fe <bno055_set_page>
 80015ae:	4603      	mov	r3, r0
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <bno055_mag_x+0x20>
        return err;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	e02c      	b.n	8001616 <bno055_mag_x+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 80015bc:	687c      	ldr	r4, [r7, #4]
 80015be:	2302      	movs	r3, #2
 80015c0:	9329      	str	r3, [sp, #164]	; 0xa4
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	9328      	str	r3, [sp, #160]	; 0xa0
 80015c8:	230e      	movs	r3, #14
 80015ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80015cc:	4668      	mov	r0, sp
 80015ce:	f104 0310 	add.w	r3, r4, #16
 80015d2:	229c      	movs	r2, #156	; 0x9c
 80015d4:	4619      	mov	r1, r3
 80015d6:	f008 f8e5 	bl	80097a4 <memcpy>
 80015da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015de:	f000 ffab 	bl	8002538 <bno055_read_regs>
 80015e2:	4603      	mov	r3, r0
 80015e4:	73fb      	strb	r3, [r7, #15]
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <bno055_mag_x+0x54>
        return err;
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	e012      	b.n	8001616 <bno055_mag_x+0x7a>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80015f0:	7b7b      	ldrb	r3, [r7, #13]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	7b3b      	ldrb	r3, [r7, #12]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	ee07 3a90 	vmov	s15, r3
 8001602:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001606:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800160a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}

0800161e <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 800161e:	b590      	push	{r4, r7, lr}
 8001620:	b0af      	sub	sp, #188	; 0xbc
 8001622:	af2a      	add	r7, sp, #168	; 0xa8
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001628:	2100      	movs	r1, #0
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 ffe7 	bl	80025fe <bno055_set_page>
 8001630:	4603      	mov	r3, r0
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <bno055_mag_y+0x20>
        return err;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	e02c      	b.n	8001698 <bno055_mag_y+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800163e:	687c      	ldr	r4, [r7, #4]
 8001640:	2302      	movs	r3, #2
 8001642:	9329      	str	r3, [sp, #164]	; 0xa4
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	9328      	str	r3, [sp, #160]	; 0xa0
 800164a:	2310      	movs	r3, #16
 800164c:	9327      	str	r3, [sp, #156]	; 0x9c
 800164e:	4668      	mov	r0, sp
 8001650:	f104 0310 	add.w	r3, r4, #16
 8001654:	229c      	movs	r2, #156	; 0x9c
 8001656:	4619      	mov	r1, r3
 8001658:	f008 f8a4 	bl	80097a4 <memcpy>
 800165c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001660:	f000 ff6a 	bl	8002538 <bno055_read_regs>
 8001664:	4603      	mov	r3, r0
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <bno055_mag_y+0x54>
        return err;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	e012      	b.n	8001698 <bno055_mag_y+0x7a>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001672:	7b7b      	ldrb	r3, [r7, #13]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	b21a      	sxth	r2, r3
 8001678:	7b3b      	ldrb	r3, [r7, #12]
 800167a:	b21b      	sxth	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b21b      	sxth	r3, r3
 8001680:	ee07 3a90 	vmov	s15, r3
 8001684:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001688:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800168c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	bd90      	pop	{r4, r7, pc}

080016a0 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b0af      	sub	sp, #188	; 0xbc
 80016a4:	af2a      	add	r7, sp, #168	; 0xa8
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80016aa:	2100      	movs	r1, #0
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 ffa6 	bl	80025fe <bno055_set_page>
 80016b2:	4603      	mov	r3, r0
 80016b4:	73fb      	strb	r3, [r7, #15]
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <bno055_mag_z+0x20>
        return err;
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	e02c      	b.n	800171a <bno055_mag_z+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80016c0:	687c      	ldr	r4, [r7, #4]
 80016c2:	2302      	movs	r3, #2
 80016c4:	9329      	str	r3, [sp, #164]	; 0xa4
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	9328      	str	r3, [sp, #160]	; 0xa0
 80016cc:	2312      	movs	r3, #18
 80016ce:	9327      	str	r3, [sp, #156]	; 0x9c
 80016d0:	4668      	mov	r0, sp
 80016d2:	f104 0310 	add.w	r3, r4, #16
 80016d6:	229c      	movs	r2, #156	; 0x9c
 80016d8:	4619      	mov	r1, r3
 80016da:	f008 f863 	bl	80097a4 <memcpy>
 80016de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016e2:	f000 ff29 	bl	8002538 <bno055_read_regs>
 80016e6:	4603      	mov	r3, r0
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <bno055_mag_z+0x54>
        return err;
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	e012      	b.n	800171a <bno055_mag_z+0x7a>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80016f4:	7b7b      	ldrb	r3, [r7, #13]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	7b3b      	ldrb	r3, [r7, #12]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	b21b      	sxth	r3, r3
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800170e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bd90      	pop	{r4, r7, pc}

08001722 <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8001722:	b590      	push	{r4, r7, lr}
 8001724:	b0af      	sub	sp, #188	; 0xbc
 8001726:	af2a      	add	r7, sp, #168	; 0xa8
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800172c:	2100      	movs	r1, #0
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 ff65 	bl	80025fe <bno055_set_page>
 8001734:	4603      	mov	r3, r0
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <bno055_mag+0x20>
        return err;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	e050      	b.n	80017e4 <bno055_mag+0xc2>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001742:	687c      	ldr	r4, [r7, #4]
 8001744:	2306      	movs	r3, #6
 8001746:	9329      	str	r3, [sp, #164]	; 0xa4
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	9328      	str	r3, [sp, #160]	; 0xa0
 800174e:	230e      	movs	r3, #14
 8001750:	9327      	str	r3, [sp, #156]	; 0x9c
 8001752:	4668      	mov	r0, sp
 8001754:	f104 0310 	add.w	r3, r4, #16
 8001758:	229c      	movs	r2, #156	; 0x9c
 800175a:	4619      	mov	r1, r3
 800175c:	f008 f822 	bl	80097a4 <memcpy>
 8001760:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001764:	f000 fee8 	bl	8002538 <bno055_read_regs>
 8001768:	4603      	mov	r3, r0
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <bno055_mag+0x54>
        return err;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	e036      	b.n	80017e4 <bno055_mag+0xc2>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001776:	7a7b      	ldrb	r3, [r7, #9]
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	b21a      	sxth	r2, r3
 800177c:	7a3b      	ldrb	r3, [r7, #8]
 800177e:	b21b      	sxth	r3, r3
 8001780:	4313      	orrs	r3, r2
 8001782:	b21b      	sxth	r3, r3
 8001784:	ee07 3a90 	vmov	s15, r3
 8001788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800178c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001790:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 800179a:	7afb      	ldrb	r3, [r7, #11]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	b21a      	sxth	r2, r3
 80017a0:	7abb      	ldrb	r3, [r7, #10]
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	4313      	orrs	r3, r2
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80017b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 80017be:	7b7b      	ldrb	r3, [r7, #13]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	7b3b      	ldrb	r3, [r7, #12]
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	ee07 3a90 	vmov	s15, r3
 80017d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80017d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80017e2:	2300      	movs	r3, #0
};
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}

080017ec <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b0b1      	sub	sp, #196	; 0xc4
 80017f0:	af2a      	add	r7, sp, #168	; 0xa8
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80017f6:	2100      	movs	r1, #0
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 ff00 	bl	80025fe <bno055_set_page>
 80017fe:	4603      	mov	r3, r0
 8001800:	75fb      	strb	r3, [r7, #23]
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <bno055_gravity_x+0x20>
        return err;
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	e035      	b.n	8001878 <bno055_gravity_x+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 800180c:	687c      	ldr	r4, [r7, #4]
 800180e:	2302      	movs	r3, #2
 8001810:	9329      	str	r3, [sp, #164]	; 0xa4
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	9328      	str	r3, [sp, #160]	; 0xa0
 8001818:	232e      	movs	r3, #46	; 0x2e
 800181a:	9327      	str	r3, [sp, #156]	; 0x9c
 800181c:	4668      	mov	r0, sp
 800181e:	f104 0310 	add.w	r3, r4, #16
 8001822:	229c      	movs	r2, #156	; 0x9c
 8001824:	4619      	mov	r1, r3
 8001826:	f007 ffbd 	bl	80097a4 <memcpy>
 800182a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800182e:	f000 fe83 	bl	8002538 <bno055_read_regs>
 8001832:	4603      	mov	r3, r0
 8001834:	75fb      	strb	r3, [r7, #23]
 8001836:	7dfb      	ldrb	r3, [r7, #23]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <bno055_gravity_x+0x54>
        return err;
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	e01b      	b.n	8001878 <bno055_gravity_x+0x8c>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <bno055_gravity_x+0x60>
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <bno055_gravity_x+0x94>)
 800184a:	e001      	b.n	8001850 <bno055_gravity_x+0x64>
 800184c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001850:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001852:	7b7b      	ldrb	r3, [r7, #13]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b21a      	sxth	r2, r3
 8001858:	7b3b      	ldrb	r3, [r7, #12]
 800185a:	b21b      	sxth	r3, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	b21b      	sxth	r3, r3
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001868:	ed97 7a04 	vldr	s14, [r7, #16]
 800186c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	371c      	adds	r7, #28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd90      	pop	{r4, r7, pc}
 8001880:	42c80000 	.word	0x42c80000

08001884 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b0b1      	sub	sp, #196	; 0xc4
 8001888:	af2a      	add	r7, sp, #168	; 0xa8
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800188e:	2100      	movs	r1, #0
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 feb4 	bl	80025fe <bno055_set_page>
 8001896:	4603      	mov	r3, r0
 8001898:	75fb      	strb	r3, [r7, #23]
 800189a:	7dfb      	ldrb	r3, [r7, #23]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <bno055_gravity_y+0x20>
        return err;
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	e035      	b.n	8001910 <bno055_gravity_y+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80018a4:	687c      	ldr	r4, [r7, #4]
 80018a6:	2302      	movs	r3, #2
 80018a8:	9329      	str	r3, [sp, #164]	; 0xa4
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	9328      	str	r3, [sp, #160]	; 0xa0
 80018b0:	2330      	movs	r3, #48	; 0x30
 80018b2:	9327      	str	r3, [sp, #156]	; 0x9c
 80018b4:	4668      	mov	r0, sp
 80018b6:	f104 0310 	add.w	r3, r4, #16
 80018ba:	229c      	movs	r2, #156	; 0x9c
 80018bc:	4619      	mov	r1, r3
 80018be:	f007 ff71 	bl	80097a4 <memcpy>
 80018c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018c6:	f000 fe37 	bl	8002538 <bno055_read_regs>
 80018ca:	4603      	mov	r3, r0
 80018cc:	75fb      	strb	r3, [r7, #23]
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <bno055_gravity_y+0x54>
        return err;
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	e01b      	b.n	8001910 <bno055_gravity_y+0x8c>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <bno055_gravity_y+0x60>
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <bno055_gravity_y+0x94>)
 80018e2:	e001      	b.n	80018e8 <bno055_gravity_y+0x64>
 80018e4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80018e8:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80018ea:	7b7b      	ldrb	r3, [r7, #13]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	b21a      	sxth	r2, r3
 80018f0:	7b3b      	ldrb	r3, [r7, #12]
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	ee07 3a90 	vmov	s15, r3
 80018fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001900:	ed97 7a04 	vldr	s14, [r7, #16]
 8001904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	bd90      	pop	{r4, r7, pc}
 8001918:	42c80000 	.word	0x42c80000

0800191c <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b0b1      	sub	sp, #196	; 0xc4
 8001920:	af2a      	add	r7, sp, #168	; 0xa8
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001926:	2100      	movs	r1, #0
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 fe68 	bl	80025fe <bno055_set_page>
 800192e:	4603      	mov	r3, r0
 8001930:	75fb      	strb	r3, [r7, #23]
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <bno055_gravity_z+0x20>
        return err;
 8001938:	7dfb      	ldrb	r3, [r7, #23]
 800193a:	e035      	b.n	80019a8 <bno055_gravity_z+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800193c:	687c      	ldr	r4, [r7, #4]
 800193e:	2302      	movs	r3, #2
 8001940:	9329      	str	r3, [sp, #164]	; 0xa4
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	9328      	str	r3, [sp, #160]	; 0xa0
 8001948:	2332      	movs	r3, #50	; 0x32
 800194a:	9327      	str	r3, [sp, #156]	; 0x9c
 800194c:	4668      	mov	r0, sp
 800194e:	f104 0310 	add.w	r3, r4, #16
 8001952:	229c      	movs	r2, #156	; 0x9c
 8001954:	4619      	mov	r1, r3
 8001956:	f007 ff25 	bl	80097a4 <memcpy>
 800195a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800195e:	f000 fdeb 	bl	8002538 <bno055_read_regs>
 8001962:	4603      	mov	r3, r0
 8001964:	75fb      	strb	r3, [r7, #23]
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <bno055_gravity_z+0x54>
        return err;
 800196c:	7dfb      	ldrb	r3, [r7, #23]
 800196e:	e01b      	b.n	80019a8 <bno055_gravity_z+0x8c>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <bno055_gravity_z+0x60>
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <bno055_gravity_z+0x94>)
 800197a:	e001      	b.n	8001980 <bno055_gravity_z+0x64>
 800197c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001980:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001982:	7b7b      	ldrb	r3, [r7, #13]
 8001984:	021b      	lsls	r3, r3, #8
 8001986:	b21a      	sxth	r2, r3
 8001988:	7b3b      	ldrb	r3, [r7, #12]
 800198a:	b21b      	sxth	r3, r3
 800198c:	4313      	orrs	r3, r2
 800198e:	b21b      	sxth	r3, r3
 8001990:	ee07 3a90 	vmov	s15, r3
 8001994:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001998:	ed97 7a04 	vldr	s14, [r7, #16]
 800199c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	371c      	adds	r7, #28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd90      	pop	{r4, r7, pc}
 80019b0:	42c80000 	.word	0x42c80000

080019b4 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b0b1      	sub	sp, #196	; 0xc4
 80019b8:	af2a      	add	r7, sp, #168	; 0xa8
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80019be:	2100      	movs	r1, #0
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 fe1c 	bl	80025fe <bno055_set_page>
 80019c6:	4603      	mov	r3, r0
 80019c8:	75fb      	strb	r3, [r7, #23]
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <bno055_gravity+0x20>
        return err;
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	e059      	b.n	8001a88 <bno055_gravity+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 80019d4:	687c      	ldr	r4, [r7, #4]
 80019d6:	2306      	movs	r3, #6
 80019d8:	9329      	str	r3, [sp, #164]	; 0xa4
 80019da:	f107 0308 	add.w	r3, r7, #8
 80019de:	9328      	str	r3, [sp, #160]	; 0xa0
 80019e0:	232e      	movs	r3, #46	; 0x2e
 80019e2:	9327      	str	r3, [sp, #156]	; 0x9c
 80019e4:	4668      	mov	r0, sp
 80019e6:	f104 0310 	add.w	r3, r4, #16
 80019ea:	229c      	movs	r2, #156	; 0x9c
 80019ec:	4619      	mov	r1, r3
 80019ee:	f007 fed9 	bl	80097a4 <memcpy>
 80019f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019f6:	f000 fd9f 	bl	8002538 <bno055_read_regs>
 80019fa:	4603      	mov	r3, r0
 80019fc:	75fb      	strb	r3, [r7, #23]
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <bno055_gravity+0x54>
        return err;
 8001a04:	7dfb      	ldrb	r3, [r7, #23]
 8001a06:	e03f      	b.n	8001a88 <bno055_gravity+0xd4>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <bno055_gravity+0x60>
 8001a10:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <bno055_gravity+0xdc>)
 8001a12:	e001      	b.n	8001a18 <bno055_gravity+0x64>
 8001a14:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001a18:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001a1a:	7a7b      	ldrb	r3, [r7, #9]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b21a      	sxth	r2, r3
 8001a20:	7a3b      	ldrb	r3, [r7, #8]
 8001a22:	b21b      	sxth	r3, r3
 8001a24:	4313      	orrs	r3, r2
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a30:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001a3e:	7afb      	ldrb	r3, [r7, #11]
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	7abb      	ldrb	r3, [r7, #10]
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a54:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8001a62:	7b7b      	ldrb	r3, [r7, #13]
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	7b3b      	ldrb	r3, [r7, #12]
 8001a6a:	b21b      	sxth	r3, r3
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a78:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	371c      	adds	r7, #28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd90      	pop	{r4, r7, pc}
 8001a90:	42c80000 	.word	0x42c80000

08001a94 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b0b1      	sub	sp, #196	; 0xc4
 8001a98:	af2a      	add	r7, sp, #168	; 0xa8
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 fdac 	bl	80025fe <bno055_set_page>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	75fb      	strb	r3, [r7, #23]
 8001aaa:	7dfb      	ldrb	r3, [r7, #23]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <bno055_euler_yaw+0x20>
        return err;
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	e035      	b.n	8001b20 <bno055_euler_yaw+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001ab4:	687c      	ldr	r4, [r7, #4]
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	9329      	str	r3, [sp, #164]	; 0xa4
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	9328      	str	r3, [sp, #160]	; 0xa0
 8001ac0:	231a      	movs	r3, #26
 8001ac2:	9327      	str	r3, [sp, #156]	; 0x9c
 8001ac4:	4668      	mov	r0, sp
 8001ac6:	f104 0310 	add.w	r3, r4, #16
 8001aca:	229c      	movs	r2, #156	; 0x9c
 8001acc:	4619      	mov	r1, r3
 8001ace:	f007 fe69 	bl	80097a4 <memcpy>
 8001ad2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ad6:	f000 fd2f 	bl	8002538 <bno055_read_regs>
 8001ada:	4603      	mov	r3, r0
 8001adc:	75fb      	strb	r3, [r7, #23]
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <bno055_euler_yaw+0x54>
        BNO_OK) {
        return err;
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
 8001ae6:	e01b      	b.n	8001b20 <bno055_euler_yaw+0x8c>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <bno055_euler_yaw+0x62>
 8001af0:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001af4:	e000      	b.n	8001af8 <bno055_euler_yaw+0x64>
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <bno055_euler_yaw+0x94>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001af8:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001afa:	7b7b      	ldrb	r3, [r7, #13]
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	b21a      	sxth	r2, r3
 8001b00:	7b3b      	ldrb	r3, [r7, #12]
 8001b02:	b21b      	sxth	r3, r3
 8001b04:	4313      	orrs	r3, r2
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	ee07 3a90 	vmov	s15, r3
 8001b0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b10:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd90      	pop	{r4, r7, pc}
 8001b28:	44610000 	.word	0x44610000

08001b2c <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b0b1      	sub	sp, #196	; 0xc4
 8001b30:	af2a      	add	r7, sp, #168	; 0xa8
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001b36:	2100      	movs	r1, #0
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 fd60 	bl	80025fe <bno055_set_page>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	75fb      	strb	r3, [r7, #23]
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <bno055_euler_roll+0x20>
        return err;
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
 8001b4a:	e035      	b.n	8001bb8 <bno055_euler_roll+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001b4c:	687c      	ldr	r4, [r7, #4]
 8001b4e:	2302      	movs	r3, #2
 8001b50:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b58:	231c      	movs	r3, #28
 8001b5a:	9327      	str	r3, [sp, #156]	; 0x9c
 8001b5c:	4668      	mov	r0, sp
 8001b5e:	f104 0310 	add.w	r3, r4, #16
 8001b62:	229c      	movs	r2, #156	; 0x9c
 8001b64:	4619      	mov	r1, r3
 8001b66:	f007 fe1d 	bl	80097a4 <memcpy>
 8001b6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b6e:	f000 fce3 	bl	8002538 <bno055_read_regs>
 8001b72:	4603      	mov	r3, r0
 8001b74:	75fb      	strb	r3, [r7, #23]
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <bno055_euler_roll+0x54>
        return err;
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
 8001b7e:	e01b      	b.n	8001bb8 <bno055_euler_roll+0x8c>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d102      	bne.n	8001b8e <bno055_euler_roll+0x62>
 8001b88:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001b8c:	e000      	b.n	8001b90 <bno055_euler_roll+0x64>
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <bno055_euler_roll+0x94>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001b90:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001b92:	7b7b      	ldrb	r3, [r7, #13]
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	7b3b      	ldrb	r3, [r7, #12]
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ba8:	ed97 7a04 	vldr	s14, [r7, #16]
 8001bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	371c      	adds	r7, #28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd90      	pop	{r4, r7, pc}
 8001bc0:	44610000 	.word	0x44610000

08001bc4 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b0b1      	sub	sp, #196	; 0xc4
 8001bc8:	af2a      	add	r7, sp, #168	; 0xa8
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001bce:	2100      	movs	r1, #0
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 fd14 	bl	80025fe <bno055_set_page>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	75fb      	strb	r3, [r7, #23]
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <bno055_euler_pitch+0x20>
        return err;
 8001be0:	7dfb      	ldrb	r3, [r7, #23]
 8001be2:	e035      	b.n	8001c50 <bno055_euler_pitch+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8001be4:	687c      	ldr	r4, [r7, #4]
 8001be6:	2302      	movs	r3, #2
 8001be8:	9329      	str	r3, [sp, #164]	; 0xa4
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	9328      	str	r3, [sp, #160]	; 0xa0
 8001bf0:	231e      	movs	r3, #30
 8001bf2:	9327      	str	r3, [sp, #156]	; 0x9c
 8001bf4:	4668      	mov	r0, sp
 8001bf6:	f104 0310 	add.w	r3, r4, #16
 8001bfa:	229c      	movs	r2, #156	; 0x9c
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f007 fdd1 	bl	80097a4 <memcpy>
 8001c02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c06:	f000 fc97 	bl	8002538 <bno055_read_regs>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	75fb      	strb	r3, [r7, #23]
 8001c0e:	7dfb      	ldrb	r3, [r7, #23]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <bno055_euler_pitch+0x54>
        return err;
 8001c14:	7dfb      	ldrb	r3, [r7, #23]
 8001c16:	e01b      	b.n	8001c50 <bno055_euler_pitch+0x8c>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <bno055_euler_pitch+0x62>
 8001c20:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001c24:	e000      	b.n	8001c28 <bno055_euler_pitch+0x64>
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <bno055_euler_pitch+0x94>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001c28:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001c2a:	7b7b      	ldrb	r3, [r7, #13]
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	b21a      	sxth	r2, r3
 8001c30:	7b3b      	ldrb	r3, [r7, #12]
 8001c32:	b21b      	sxth	r3, r3
 8001c34:	4313      	orrs	r3, r2
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	ee07 3a90 	vmov	s15, r3
 8001c3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c40:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	371c      	adds	r7, #28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd90      	pop	{r4, r7, pc}
 8001c58:	44610000 	.word	0x44610000

08001c5c <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b0b1      	sub	sp, #196	; 0xc4
 8001c60:	af2a      	add	r7, sp, #168	; 0xa8
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001c66:	2100      	movs	r1, #0
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fcc8 	bl	80025fe <bno055_set_page>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	75fb      	strb	r3, [r7, #23]
 8001c72:	7dfb      	ldrb	r3, [r7, #23]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <bno055_euler+0x20>
        return err;
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	e059      	b.n	8001d30 <bno055_euler+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8001c7c:	687c      	ldr	r4, [r7, #4]
 8001c7e:	2306      	movs	r3, #6
 8001c80:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c82:	f107 0308 	add.w	r3, r7, #8
 8001c86:	9328      	str	r3, [sp, #160]	; 0xa0
 8001c88:	231a      	movs	r3, #26
 8001c8a:	9327      	str	r3, [sp, #156]	; 0x9c
 8001c8c:	4668      	mov	r0, sp
 8001c8e:	f104 0310 	add.w	r3, r4, #16
 8001c92:	229c      	movs	r2, #156	; 0x9c
 8001c94:	4619      	mov	r1, r3
 8001c96:	f007 fd85 	bl	80097a4 <memcpy>
 8001c9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c9e:	f000 fc4b 	bl	8002538 <bno055_read_regs>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	75fb      	strb	r3, [r7, #23]
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <bno055_euler+0x54>
        BNO_OK) {
        return err;
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	e03f      	b.n	8001d30 <bno055_euler+0xd4>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d102      	bne.n	8001cbe <bno055_euler+0x62>
 8001cb8:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001cbc:	e000      	b.n	8001cc0 <bno055_euler+0x64>
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <bno055_euler+0xdc>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001cc0:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8001cc2:	7a7b      	ldrb	r3, [r7, #9]
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	b21a      	sxth	r2, r3
 8001cc8:	7a3b      	ldrb	r3, [r7, #8]
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	b21b      	sxth	r3, r3
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cd8:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001ce6:	7afb      	ldrb	r3, [r7, #11]
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	b21a      	sxth	r2, r3
 8001cec:	7abb      	ldrb	r3, [r7, #10]
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	ee07 3a90 	vmov	s15, r3
 8001cf8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cfc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8001d0a:	7b7b      	ldrb	r3, [r7, #13]
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	b21a      	sxth	r2, r3
 8001d10:	7b3b      	ldrb	r3, [r7, #12]
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	4313      	orrs	r3, r2
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	ee07 3a90 	vmov	s15, r3
 8001d1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d20:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	371c      	adds	r7, #28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd90      	pop	{r4, r7, pc}
 8001d38:	44610000 	.word	0x44610000

08001d3c <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b0af      	sub	sp, #188	; 0xbc
 8001d40:	af2a      	add	r7, sp, #168	; 0xa8
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001d46:	2100      	movs	r1, #0
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 fc58 	bl	80025fe <bno055_set_page>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <bno055_quaternion_w+0x20>
        return err;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	e02c      	b.n	8001db6 <bno055_quaternion_w+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8001d5c:	687c      	ldr	r4, [r7, #4]
 8001d5e:	2302      	movs	r3, #2
 8001d60:	9329      	str	r3, [sp, #164]	; 0xa4
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	9328      	str	r3, [sp, #160]	; 0xa0
 8001d68:	2320      	movs	r3, #32
 8001d6a:	9327      	str	r3, [sp, #156]	; 0x9c
 8001d6c:	4668      	mov	r0, sp
 8001d6e:	f104 0310 	add.w	r3, r4, #16
 8001d72:	229c      	movs	r2, #156	; 0x9c
 8001d74:	4619      	mov	r1, r3
 8001d76:	f007 fd15 	bl	80097a4 <memcpy>
 8001d7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d7e:	f000 fbdb 	bl	8002538 <bno055_read_regs>
 8001d82:	4603      	mov	r3, r0
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <bno055_quaternion_w+0x54>
        return err;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	e012      	b.n	8001db6 <bno055_quaternion_w+0x7a>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001d90:	7b7b      	ldrb	r3, [r7, #13]
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	b21a      	sxth	r2, r3
 8001d96:	7b3b      	ldrb	r3, [r7, #12]
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da6:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001dc0 <bno055_quaternion_w+0x84>
 8001daa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd90      	pop	{r4, r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	46800000 	.word	0x46800000

08001dc4 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b0af      	sub	sp, #188	; 0xbc
 8001dc8:	af2a      	add	r7, sp, #168	; 0xa8
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001dce:	2100      	movs	r1, #0
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fc14 	bl	80025fe <bno055_set_page>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <bno055_quaternion_x+0x20>
        return err;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	e02c      	b.n	8001e3e <bno055_quaternion_x+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001de4:	687c      	ldr	r4, [r7, #4]
 8001de6:	2302      	movs	r3, #2
 8001de8:	9329      	str	r3, [sp, #164]	; 0xa4
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	9328      	str	r3, [sp, #160]	; 0xa0
 8001df0:	2322      	movs	r3, #34	; 0x22
 8001df2:	9327      	str	r3, [sp, #156]	; 0x9c
 8001df4:	4668      	mov	r0, sp
 8001df6:	f104 0310 	add.w	r3, r4, #16
 8001dfa:	229c      	movs	r2, #156	; 0x9c
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f007 fcd1 	bl	80097a4 <memcpy>
 8001e02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e06:	f000 fb97 	bl	8002538 <bno055_read_regs>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	73fb      	strb	r3, [r7, #15]
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <bno055_quaternion_x+0x54>
        return err;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	e012      	b.n	8001e3e <bno055_quaternion_x+0x7a>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001e18:	7b7b      	ldrb	r3, [r7, #13]
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	b21a      	sxth	r2, r3
 8001e1e:	7b3b      	ldrb	r3, [r7, #12]
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	4313      	orrs	r3, r2
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	ee07 3a90 	vmov	s15, r3
 8001e2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e2e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001e48 <bno055_quaternion_x+0x84>
 8001e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd90      	pop	{r4, r7, pc}
 8001e46:	bf00      	nop
 8001e48:	46800000 	.word	0x46800000

08001e4c <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b0af      	sub	sp, #188	; 0xbc
 8001e50:	af2a      	add	r7, sp, #168	; 0xa8
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001e56:	2100      	movs	r1, #0
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fbd0 	bl	80025fe <bno055_set_page>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <bno055_quaternion_y+0x20>
        return err;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	e02c      	b.n	8001ec6 <bno055_quaternion_y+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001e6c:	687c      	ldr	r4, [r7, #4]
 8001e6e:	2302      	movs	r3, #2
 8001e70:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e78:	2324      	movs	r3, #36	; 0x24
 8001e7a:	9327      	str	r3, [sp, #156]	; 0x9c
 8001e7c:	4668      	mov	r0, sp
 8001e7e:	f104 0310 	add.w	r3, r4, #16
 8001e82:	229c      	movs	r2, #156	; 0x9c
 8001e84:	4619      	mov	r1, r3
 8001e86:	f007 fc8d 	bl	80097a4 <memcpy>
 8001e8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e8e:	f000 fb53 	bl	8002538 <bno055_read_regs>
 8001e92:	4603      	mov	r3, r0
 8001e94:	73fb      	strb	r3, [r7, #15]
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <bno055_quaternion_y+0x54>
        return err;
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	e012      	b.n	8001ec6 <bno055_quaternion_y+0x7a>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001ea0:	7b7b      	ldrb	r3, [r7, #13]
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	b21a      	sxth	r2, r3
 8001ea6:	7b3b      	ldrb	r3, [r7, #12]
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	ee07 3a90 	vmov	s15, r3
 8001eb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eb6:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001ed0 <bno055_quaternion_y+0x84>
 8001eba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd90      	pop	{r4, r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	46800000 	.word	0x46800000

08001ed4 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	b0af      	sub	sp, #188	; 0xbc
 8001ed8:	af2a      	add	r7, sp, #168	; 0xa8
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001ede:	2100      	movs	r1, #0
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 fb8c 	bl	80025fe <bno055_set_page>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	73fb      	strb	r3, [r7, #15]
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <bno055_quaternion_z+0x20>
        return err;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	e02c      	b.n	8001f4e <bno055_quaternion_z+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001ef4:	687c      	ldr	r4, [r7, #4]
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	9329      	str	r3, [sp, #164]	; 0xa4
 8001efa:	f107 030c 	add.w	r3, r7, #12
 8001efe:	9328      	str	r3, [sp, #160]	; 0xa0
 8001f00:	2326      	movs	r3, #38	; 0x26
 8001f02:	9327      	str	r3, [sp, #156]	; 0x9c
 8001f04:	4668      	mov	r0, sp
 8001f06:	f104 0310 	add.w	r3, r4, #16
 8001f0a:	229c      	movs	r2, #156	; 0x9c
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f007 fc49 	bl	80097a4 <memcpy>
 8001f12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f16:	f000 fb0f 	bl	8002538 <bno055_read_regs>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	73fb      	strb	r3, [r7, #15]
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <bno055_quaternion_z+0x54>
        return err;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	e012      	b.n	8001f4e <bno055_quaternion_z+0x7a>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001f28:	7b7b      	ldrb	r3, [r7, #13]
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	b21a      	sxth	r2, r3
 8001f2e:	7b3b      	ldrb	r3, [r7, #12]
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	4313      	orrs	r3, r2
 8001f34:	b21b      	sxth	r3, r3
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f3e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001f58 <bno055_quaternion_z+0x84>
 8001f42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd90      	pop	{r4, r7, pc}
 8001f56:	bf00      	nop
 8001f58:	46800000 	.word	0x46800000

08001f5c <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b0b1      	sub	sp, #196	; 0xc4
 8001f60:	af2a      	add	r7, sp, #168	; 0xa8
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001f66:	2100      	movs	r1, #0
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fb48 	bl	80025fe <bno055_set_page>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	75fb      	strb	r3, [r7, #23]
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <bno055_quaternion+0x20>
        return err;
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	e062      	b.n	8002042 <bno055_quaternion+0xe6>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 8001f7c:	687c      	ldr	r4, [r7, #4]
 8001f7e:	2308      	movs	r3, #8
 8001f80:	9329      	str	r3, [sp, #164]	; 0xa4
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	9328      	str	r3, [sp, #160]	; 0xa0
 8001f88:	2320      	movs	r3, #32
 8001f8a:	9327      	str	r3, [sp, #156]	; 0x9c
 8001f8c:	4668      	mov	r0, sp
 8001f8e:	f104 0310 	add.w	r3, r4, #16
 8001f92:	229c      	movs	r2, #156	; 0x9c
 8001f94:	4619      	mov	r1, r3
 8001f96:	f007 fc05 	bl	80097a4 <memcpy>
 8001f9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f9e:	f000 facb 	bl	8002538 <bno055_read_regs>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	75fb      	strb	r3, [r7, #23]
 8001fa6:	7dfb      	ldrb	r3, [r7, #23]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <bno055_quaternion+0x54>
        return err;
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	e048      	b.n	8002042 <bno055_quaternion+0xe6>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001fb0:	7b7b      	ldrb	r3, [r7, #13]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	b21a      	sxth	r2, r3
 8001fb6:	7b3b      	ldrb	r3, [r7, #12]
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	b21b      	sxth	r3, r3
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc6:	eddf 6a21 	vldr	s13, [pc, #132]	; 800204c <bno055_quaternion+0xf0>
 8001fca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	7bbb      	ldrb	r3, [r7, #14]
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fea:	eddf 6a18 	vldr	s13, [pc, #96]	; 800204c <bno055_quaternion+0xf0>
 8001fee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 8001ff8:	7c7b      	ldrb	r3, [r7, #17]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	b21a      	sxth	r2, r3
 8001ffe:	7c3b      	ldrb	r3, [r7, #16]
 8002000:	b21b      	sxth	r3, r3
 8002002:	4313      	orrs	r3, r2
 8002004:	b21b      	sxth	r3, r3
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800200e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800204c <bno055_quaternion+0xf0>
 8002012:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 800201c:	7cfb      	ldrb	r3, [r7, #19]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b21a      	sxth	r2, r3
 8002022:	7cbb      	ldrb	r3, [r7, #18]
 8002024:	b21b      	sxth	r3, r3
 8002026:	4313      	orrs	r3, r2
 8002028:	b21b      	sxth	r3, r3
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002032:	eddf 6a06 	vldr	s13, [pc, #24]	; 800204c <bno055_quaternion+0xf0>
 8002036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd90      	pop	{r4, r7, pc}
 800204a:	bf00      	nop
 800204c:	46800000 	.word	0x46800000

08002050 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b0af      	sub	sp, #188	; 0xbc
 8002054:	af2a      	add	r7, sp, #168	; 0xa8
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	4608      	mov	r0, r1
 800205a:	4611      	mov	r1, r2
 800205c:	461a      	mov	r2, r3
 800205e:	4603      	mov	r3, r0
 8002060:	70fb      	strb	r3, [r7, #3]
 8002062:	460b      	mov	r3, r1
 8002064:	70bb      	strb	r3, [r7, #2]
 8002066:	4613      	mov	r3, r2
 8002068:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800206a:	2101      	movs	r1, #1
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 fac6 	bl	80025fe <bno055_set_page>
 8002072:	4603      	mov	r3, r0
 8002074:	73fb      	strb	r3, [r7, #15]
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <bno055_acc_conf+0x30>
        return err;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	e04b      	b.n	8002118 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002080:	2100      	movs	r1, #0
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f91b 	bl	80022be <bno055_set_opmode>
 8002088:	4603      	mov	r3, r0
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <bno055_acc_conf+0x46>
        return err;
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	e040      	b.n	8002118 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8002096:	200c      	movs	r0, #12
 8002098:	f001 f9dc 	bl	8003454 <HAL_Delay>
    u8 config = range | bandwidth | mode;
 800209c:	78fa      	ldrb	r2, [r7, #3]
 800209e:	78bb      	ldrb	r3, [r7, #2]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	787b      	ldrb	r3, [r7, #1]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 80020ac:	687c      	ldr	r4, [r7, #4]
 80020ae:	2301      	movs	r3, #1
 80020b0:	9329      	str	r3, [sp, #164]	; 0xa4
 80020b2:	f107 030e 	add.w	r3, r7, #14
 80020b6:	9328      	str	r3, [sp, #160]	; 0xa0
 80020b8:	2308      	movs	r3, #8
 80020ba:	9327      	str	r3, [sp, #156]	; 0x9c
 80020bc:	4668      	mov	r0, sp
 80020be:	f104 0310 	add.w	r3, r4, #16
 80020c2:	229c      	movs	r2, #156	; 0x9c
 80020c4:	4619      	mov	r1, r3
 80020c6:	f007 fb6d 	bl	80097a4 <memcpy>
 80020ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020ce:	f000 fa69 	bl	80025a4 <bno055_write_regs>
 80020d2:	4603      	mov	r3, r0
 80020d4:	73fb      	strb	r3, [r7, #15]
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <bno055_acc_conf+0x90>
        return err;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	e01b      	b.n	8002118 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	791b      	ldrb	r3, [r3, #4]
 80020e4:	4619      	mov	r1, r3
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f8e9 	bl	80022be <bno055_set_opmode>
 80020ec:	4603      	mov	r3, r0
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <bno055_acc_conf+0xaa>
        return err;
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	e00e      	b.n	8002118 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80020fa:	2018      	movs	r0, #24
 80020fc:	f001 f9aa 	bl	8003454 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002100:	2100      	movs	r1, #0
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fa7b 	bl	80025fe <bno055_set_page>
 8002108:	4603      	mov	r3, r0
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <bno055_acc_conf+0xc6>
        return err;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	e000      	b.n	8002118 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bd90      	pop	{r4, r7, pc}

08002120 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b0af      	sub	sp, #188	; 0xbc
 8002124:	af2a      	add	r7, sp, #168	; 0xa8
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	4608      	mov	r0, r1
 800212a:	4611      	mov	r1, r2
 800212c:	461a      	mov	r2, r3
 800212e:	4603      	mov	r3, r0
 8002130:	70fb      	strb	r3, [r7, #3]
 8002132:	460b      	mov	r3, r1
 8002134:	70bb      	strb	r3, [r7, #2]
 8002136:	4613      	mov	r3, r2
 8002138:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800213a:	2101      	movs	r1, #1
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fa5e 	bl	80025fe <bno055_set_page>
 8002142:	4603      	mov	r3, r0
 8002144:	73fb      	strb	r3, [r7, #15]
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <bno055_gyr_conf+0x30>
        return err;
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	e04a      	b.n	80021e6 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002150:	2100      	movs	r1, #0
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f8b3 	bl	80022be <bno055_set_opmode>
 8002158:	4603      	mov	r3, r0
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <bno055_gyr_conf+0x46>
        return err;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	e03f      	b.n	80021e6 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8002166:	200c      	movs	r0, #12
 8002168:	f001 f974 	bl	8003454 <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	78bb      	ldrb	r3, [r7, #2]
 8002170:	4313      	orrs	r3, r2
 8002172:	b2db      	uxtb	r3, r3
 8002174:	733b      	strb	r3, [r7, #12]
 8002176:	787b      	ldrb	r3, [r7, #1]
 8002178:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 800217a:	687c      	ldr	r4, [r7, #4]
 800217c:	2302      	movs	r3, #2
 800217e:	9329      	str	r3, [sp, #164]	; 0xa4
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	9328      	str	r3, [sp, #160]	; 0xa0
 8002186:	230a      	movs	r3, #10
 8002188:	9327      	str	r3, [sp, #156]	; 0x9c
 800218a:	4668      	mov	r0, sp
 800218c:	f104 0310 	add.w	r3, r4, #16
 8002190:	229c      	movs	r2, #156	; 0x9c
 8002192:	4619      	mov	r1, r3
 8002194:	f007 fb06 	bl	80097a4 <memcpy>
 8002198:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800219c:	f000 fa02 	bl	80025a4 <bno055_write_regs>
 80021a0:	4603      	mov	r3, r0
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	e01b      	b.n	80021e6 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	791b      	ldrb	r3, [r3, #4]
 80021b2:	4619      	mov	r1, r3
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f882 	bl	80022be <bno055_set_opmode>
 80021ba:	4603      	mov	r3, r0
 80021bc:	73fb      	strb	r3, [r7, #15]
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <bno055_gyr_conf+0xa8>
        return err;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	e00e      	b.n	80021e6 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80021c8:	2018      	movs	r0, #24
 80021ca:	f001 f943 	bl	8003454 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80021ce:	2100      	movs	r1, #0
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 fa14 	bl	80025fe <bno055_set_page>
 80021d6:	4603      	mov	r3, r0
 80021d8:	73fb      	strb	r3, [r7, #15]
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <bno055_gyr_conf+0xc4>
        return err;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	e000      	b.n	80021e6 <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd90      	pop	{r4, r7, pc}

080021ee <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 80021ee:	b590      	push	{r4, r7, lr}
 80021f0:	b0af      	sub	sp, #188	; 0xbc
 80021f2:	af2a      	add	r7, sp, #168	; 0xa8
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	4608      	mov	r0, r1
 80021f8:	4611      	mov	r1, r2
 80021fa:	461a      	mov	r2, r3
 80021fc:	4603      	mov	r3, r0
 80021fe:	70fb      	strb	r3, [r7, #3]
 8002200:	460b      	mov	r3, r1
 8002202:	70bb      	strb	r3, [r7, #2]
 8002204:	4613      	mov	r3, r2
 8002206:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002208:	2101      	movs	r1, #1
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f9f7 	bl	80025fe <bno055_set_page>
 8002210:	4603      	mov	r3, r0
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <bno055_mag_conf+0x30>
        return err;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	e04b      	b.n	80022b6 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800221e:	2100      	movs	r1, #0
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f84c 	bl	80022be <bno055_set_opmode>
 8002226:	4603      	mov	r3, r0
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <bno055_mag_conf+0x46>
        return err;
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	e040      	b.n	80022b6 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8002234:	200c      	movs	r0, #12
 8002236:	f001 f90d 	bl	8003454 <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	78bb      	ldrb	r3, [r7, #2]
 800223e:	4313      	orrs	r3, r2
 8002240:	b2da      	uxtb	r2, r3
 8002242:	787b      	ldrb	r3, [r7, #1]
 8002244:	4313      	orrs	r3, r2
 8002246:	b2db      	uxtb	r3, r3
 8002248:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 800224a:	687c      	ldr	r4, [r7, #4]
 800224c:	2301      	movs	r3, #1
 800224e:	9329      	str	r3, [sp, #164]	; 0xa4
 8002250:	f107 030e 	add.w	r3, r7, #14
 8002254:	9328      	str	r3, [sp, #160]	; 0xa0
 8002256:	2309      	movs	r3, #9
 8002258:	9327      	str	r3, [sp, #156]	; 0x9c
 800225a:	4668      	mov	r0, sp
 800225c:	f104 0310 	add.w	r3, r4, #16
 8002260:	229c      	movs	r2, #156	; 0x9c
 8002262:	4619      	mov	r1, r3
 8002264:	f007 fa9e 	bl	80097a4 <memcpy>
 8002268:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800226c:	f000 f99a 	bl	80025a4 <bno055_write_regs>
 8002270:	4603      	mov	r3, r0
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <bno055_mag_conf+0x90>
        return err;
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	e01b      	b.n	80022b6 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	791b      	ldrb	r3, [r3, #4]
 8002282:	4619      	mov	r1, r3
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f81a 	bl	80022be <bno055_set_opmode>
 800228a:	4603      	mov	r3, r0
 800228c:	73fb      	strb	r3, [r7, #15]
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <bno055_mag_conf+0xaa>
        return err;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	e00e      	b.n	80022b6 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002298:	2018      	movs	r0, #24
 800229a:	f001 f8db 	bl	8003454 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800229e:	2100      	movs	r1, #0
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f9ac 	bl	80025fe <bno055_set_page>
 80022a6:	4603      	mov	r3, r0
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <bno055_mag_conf+0xc6>
        return err;
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	e000      	b.n	80022b6 <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd90      	pop	{r4, r7, pc}

080022be <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 80022be:	b590      	push	{r4, r7, lr}
 80022c0:	b0af      	sub	sp, #188	; 0xbc
 80022c2:	af2a      	add	r7, sp, #168	; 0xa8
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	460b      	mov	r3, r1
 80022c8:	70fb      	strb	r3, [r7, #3]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80022ca:	2100      	movs	r1, #0
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f996 	bl	80025fe <bno055_set_page>
 80022d2:	4603      	mov	r3, r0
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <bno055_set_opmode+0x22>
        return err;
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	e01c      	b.n	800231a <bno055_set_opmode+0x5c>
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 80022e0:	687c      	ldr	r4, [r7, #4]
 80022e2:	2301      	movs	r3, #1
 80022e4:	9329      	str	r3, [sp, #164]	; 0xa4
 80022e6:	1cfb      	adds	r3, r7, #3
 80022e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80022ea:	233d      	movs	r3, #61	; 0x3d
 80022ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80022ee:	4668      	mov	r0, sp
 80022f0:	f104 0310 	add.w	r3, r4, #16
 80022f4:	229c      	movs	r2, #156	; 0x9c
 80022f6:	4619      	mov	r1, r3
 80022f8:	f007 fa54 	bl	80097a4 <memcpy>
 80022fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002300:	f000 f950 	bl	80025a4 <bno055_write_regs>
 8002304:	4603      	mov	r3, r0
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <bno055_set_opmode+0x54>
        BNO_OK) {
        return err;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	e003      	b.n	800231a <bno055_set_opmode+0x5c>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002312:	2018      	movs	r0, #24
 8002314:	f001 f89e 	bl	8003454 <HAL_Delay>
    return BNO_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}

08002322 <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 8002322:	b590      	push	{r4, r7, lr}
 8002324:	b0af      	sub	sp, #188	; 0xbc
 8002326:	af2a      	add	r7, sp, #168	; 0xa8
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	4608      	mov	r0, r1
 800232c:	4611      	mov	r1, r2
 800232e:	461a      	mov	r2, r3
 8002330:	4603      	mov	r3, r0
 8002332:	70fb      	strb	r3, [r7, #3]
 8002334:	460b      	mov	r3, r1
 8002336:	70bb      	strb	r3, [r7, #2]
 8002338:	4613      	mov	r3, r2
 800233a:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800233c:	2100      	movs	r1, #0
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ffbd 	bl	80022be <bno055_set_opmode>
 8002344:	4603      	mov	r3, r0
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <bno055_set_unit+0x30>
        return err;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	e04b      	b.n	80023ea <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002352:	2100      	movs	r1, #0
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f952 	bl	80025fe <bno055_set_page>
 800235a:	4603      	mov	r3, r0
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <bno055_set_unit+0x46>
        return err;
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	e040      	b.n	80023ea <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	78bb      	ldrb	r3, [r7, #2]
 800236c:	4313      	orrs	r3, r2
 800236e:	b2da      	uxtb	r2, r3
 8002370:	787b      	ldrb	r3, [r7, #1]
 8002372:	4313      	orrs	r3, r2
 8002374:	b2da      	uxtb	r2, r3
 8002376:	f897 3020 	ldrb.w	r3, [r7, #32]
 800237a:	4313      	orrs	r3, r2
 800237c:	b2db      	uxtb	r3, r3
 800237e:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 8002380:	687c      	ldr	r4, [r7, #4]
 8002382:	2301      	movs	r3, #1
 8002384:	9329      	str	r3, [sp, #164]	; 0xa4
 8002386:	f107 030e 	add.w	r3, r7, #14
 800238a:	9328      	str	r3, [sp, #160]	; 0xa0
 800238c:	233b      	movs	r3, #59	; 0x3b
 800238e:	9327      	str	r3, [sp, #156]	; 0x9c
 8002390:	4668      	mov	r0, sp
 8002392:	f104 0310 	add.w	r3, r4, #16
 8002396:	229c      	movs	r2, #156	; 0x9c
 8002398:	4619      	mov	r1, r3
 800239a:	f007 fa03 	bl	80097a4 <memcpy>
 800239e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023a2:	f000 f8ff 	bl	80025a4 <bno055_write_regs>
 80023a6:	4603      	mov	r3, r0
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <bno055_set_unit+0x92>
        return err;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	e01a      	b.n	80023ea <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	78ba      	ldrb	r2, [r7, #2]
 80023b8:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	787a      	ldrb	r2, [r7, #1]
 80023be:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023c6:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	791b      	ldrb	r3, [r3, #4]
 80023d2:	4619      	mov	r1, r3
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff72 	bl	80022be <bno055_set_opmode>
 80023da:	4603      	mov	r3, r0
 80023dc:	73fb      	strb	r3, [r7, #15]
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <bno055_set_unit+0xc6>
        return err;
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	e000      	b.n	80023ea <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd90      	pop	{r4, r7, pc}

080023f2 <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 80023f2:	b590      	push	{r4, r7, lr}
 80023f4:	b0af      	sub	sp, #188	; 0xbc
 80023f6:	af2a      	add	r7, sp, #168	; 0xa8
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 8002404:	2304      	movs	r3, #4
 8002406:	e04d      	b.n	80024a4 <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8002408:	2100      	movs	r1, #0
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ff57 	bl	80022be <bno055_set_opmode>
 8002410:	4603      	mov	r3, r0
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <bno055_set_pwr_mode+0x2c>
        return err;
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	e042      	b.n	80024a4 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800241e:	2100      	movs	r1, #0
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f8ec 	bl	80025fe <bno055_set_page>
 8002426:	4603      	mov	r3, r0
 8002428:	73fb      	strb	r3, [r7, #15]
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <bno055_set_pwr_mode+0x42>
        return err;
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	e037      	b.n	80024a4 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 8002434:	687c      	ldr	r4, [r7, #4]
 8002436:	2301      	movs	r3, #1
 8002438:	9329      	str	r3, [sp, #164]	; 0xa4
 800243a:	1cfb      	adds	r3, r7, #3
 800243c:	9328      	str	r3, [sp, #160]	; 0xa0
 800243e:	233e      	movs	r3, #62	; 0x3e
 8002440:	9327      	str	r3, [sp, #156]	; 0x9c
 8002442:	4668      	mov	r0, sp
 8002444:	f104 0310 	add.w	r3, r4, #16
 8002448:	229c      	movs	r2, #156	; 0x9c
 800244a:	4619      	mov	r1, r3
 800244c:	f007 f9aa 	bl	80097a4 <memcpy>
 8002450:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002454:	f000 f8a6 	bl	80025a4 <bno055_write_regs>
 8002458:	4603      	mov	r3, r0
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	e01e      	b.n	80024a4 <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8002466:	78fa      	ldrb	r2, [r7, #3]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800246c:	2100      	movs	r1, #0
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f8c5 	bl	80025fe <bno055_set_page>
 8002474:	4603      	mov	r3, r0
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <bno055_set_pwr_mode+0x90>
        return err;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	e010      	b.n	80024a4 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	791b      	ldrb	r3, [r3, #4]
 8002486:	4619      	mov	r1, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ff18 	bl	80022be <bno055_set_opmode>
 800248e:	4603      	mov	r3, r0
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <bno055_set_pwr_mode+0xaa>
        return err;
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	e003      	b.n	80024a4 <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 800249c:	2002      	movs	r0, #2
 800249e:	f000 ffd9 	bl	8003454 <HAL_Delay>
    return BNO_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd90      	pop	{r4, r7, pc}

080024ac <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b0af      	sub	sp, #188	; 0xbc
 80024b0:	af2a      	add	r7, sp, #168	; 0xa8
 80024b2:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 80024b4:	2320      	movs	r3, #32
 80024b6:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80024b8:	687c      	ldr	r4, [r7, #4]
 80024ba:	2301      	movs	r3, #1
 80024bc:	9329      	str	r3, [sp, #164]	; 0xa4
 80024be:	f107 030f 	add.w	r3, r7, #15
 80024c2:	9328      	str	r3, [sp, #160]	; 0xa0
 80024c4:	233f      	movs	r3, #63	; 0x3f
 80024c6:	9327      	str	r3, [sp, #156]	; 0x9c
 80024c8:	4668      	mov	r0, sp
 80024ca:	f104 0310 	add.w	r3, r4, #16
 80024ce:	229c      	movs	r2, #156	; 0x9c
 80024d0:	4619      	mov	r1, r3
 80024d2:	f007 f967 	bl	80097a4 <memcpy>
 80024d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024da:	f000 f863 	bl	80025a4 <bno055_write_regs>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <bno055_reset+0x3e>
    }
    return BNO_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd90      	pop	{r4, r7, pc}

080024f2 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 80024f2:	b590      	push	{r4, r7, lr}
 80024f4:	b0af      	sub	sp, #188	; 0xbc
 80024f6:	af2a      	add	r7, sp, #168	; 0xa8
 80024f8:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80024fe:	687c      	ldr	r4, [r7, #4]
 8002500:	2301      	movs	r3, #1
 8002502:	9329      	str	r3, [sp, #164]	; 0xa4
 8002504:	f107 030f 	add.w	r3, r7, #15
 8002508:	9328      	str	r3, [sp, #160]	; 0xa0
 800250a:	233f      	movs	r3, #63	; 0x3f
 800250c:	9327      	str	r3, [sp, #156]	; 0x9c
 800250e:	4668      	mov	r0, sp
 8002510:	f104 0310 	add.w	r3, r4, #16
 8002514:	229c      	movs	r2, #156	; 0x9c
 8002516:	4619      	mov	r1, r3
 8002518:	f007 f944 	bl	80097a4 <memcpy>
 800251c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002520:	f000 f840 	bl	80025a4 <bno055_write_regs>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <bno055_on+0x3c>
        return BNO_ERR_I2C;
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <bno055_on+0x3e>
    }
    return BNO_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	bd90      	pop	{r4, r7, pc}

08002538 <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 8002538:	b084      	sub	sp, #16
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af02      	add	r7, sp, #8
 8002540:	f107 0c10 	add.w	ip, r7, #16
 8002544:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 8002548:	6938      	ldr	r0, [r7, #16]
 800254a:	7dbb      	ldrb	r3, [r7, #22]
 800254c:	b299      	uxth	r1, r3
 800254e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8002552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	2301      	movs	r3, #1
 800255a:	f003 fdf1 	bl	8006140 <HAL_I2C_Master_Transmit>
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8002568:	2301      	movs	r3, #1
 800256a:	e014      	b.n	8002596 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 800256c:	6938      	ldr	r0, [r7, #16]
 800256e:	7dbb      	ldrb	r3, [r7, #22]
 8002570:	b299      	uxth	r1, r3
 8002572:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002576:	b29b      	uxth	r3, r3
 8002578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800257c:	9200      	str	r2, [sp, #0]
 800257e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002582:	f003 fed1 	bl	8006328 <HAL_I2C_Master_Receive>
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025a0:	b004      	add	sp, #16
 80025a2:	4770      	bx	lr

080025a4 <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 80025a4:	b084      	sub	sp, #16
 80025a6:	b5b0      	push	{r4, r5, r7, lr}
 80025a8:	b086      	sub	sp, #24
 80025aa:	af04      	add	r7, sp, #16
 80025ac:	f107 0418 	add.w	r4, r7, #24
 80025b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 80025b4:	69b8      	ldr	r0, [r7, #24]
 80025b6:	7fbb      	ldrb	r3, [r7, #30]
 80025b8:	b299      	uxth	r1, r3
 80025ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025be:	b29a      	uxth	r2, r3
 80025c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025c4:	b29c      	uxth	r4, r3
 80025c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80025d0:	9502      	str	r5, [sp, #8]
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	4623      	mov	r3, r4
 80025dc:	f003 ff9a 	bl	8006514 <HAL_I2C_Mem_Write>
 80025e0:	4603      	mov	r3, r0
 80025e2:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <bno055_write_regs+0x4a>
        return BNO_ERR_I2C;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <bno055_write_regs+0x4c>
    }
    return BNO_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80025fa:	b004      	add	sp, #16
 80025fc:	4770      	bx	lr

080025fe <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 80025fe:	b590      	push	{r4, r7, lr}
 8002600:	b0af      	sub	sp, #188	; 0xbc
 8002602:	af2a      	add	r7, sp, #168	; 0xa8
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	460b      	mov	r3, r1
 8002608:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7b5a      	ldrb	r2, [r3, #13]
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <bno055_set_page+0x1a>
        return BNO_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	e024      	b.n	8002662 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d901      	bls.n	8002622 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 800261e:	2302      	movs	r3, #2
 8002620:	e01f      	b.n	8002662 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 8002622:	687c      	ldr	r4, [r7, #4]
 8002624:	2301      	movs	r3, #1
 8002626:	9329      	str	r3, [sp, #164]	; 0xa4
 8002628:	1cfb      	adds	r3, r7, #3
 800262a:	9328      	str	r3, [sp, #160]	; 0xa0
 800262c:	2307      	movs	r3, #7
 800262e:	9327      	str	r3, [sp, #156]	; 0x9c
 8002630:	4668      	mov	r0, sp
 8002632:	f104 0310 	add.w	r3, r4, #16
 8002636:	229c      	movs	r2, #156	; 0x9c
 8002638:	4619      	mov	r1, r3
 800263a:	f007 f8b3 	bl	80097a4 <memcpy>
 800263e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002642:	f7ff ffaf 	bl	80025a4 <bno055_write_regs>
 8002646:	4603      	mov	r3, r0
 8002648:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <bno055_set_page+0x56>
        return err;
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	e006      	b.n	8002662 <bno055_set_page+0x64>
    }
    imu->_page = page;
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 800265a:	2002      	movs	r0, #2
 800265c:	f000 fefa 	bl	8003454 <HAL_Delay>
    return BNO_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bd90      	pop	{r4, r7, pc}

0800266a <comm_controller_init>:
#include "commcontroller.h"
#include <string.h>



void comm_controller_init(FDCAN_HandleTypeDef* fdcan, CommController *comm){
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af02      	add	r7, sp, #8
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]

	comm->fdcan = *fdcan;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	3350      	adds	r3, #80	; 0x50
 800267a:	4611      	mov	r1, r2
 800267c:	2264      	movs	r2, #100	; 0x64
 800267e:	4618      	mov	r0, r3
 8002680:	f007 f890 	bl	80097a4 <memcpy>
	comm->device_id = DEVICE_ID;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2220      	movs	r2, #32
 8002688:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	comm->send_message = false;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
	comm->received_message = false;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2200      	movs	r2, #0
 8002696:	705a      	strb	r2, [r3, #1]

	comm->TxHeader.Identifier = comm->device_id;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800269e:	461a      	mov	r2, r3
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	605a      	str	r2, [r3, #4]
	comm->TxHeader.IdType=FDCAN_STANDARD_ID;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
	comm->TxHeader.TxFrameType=FDCAN_DATA_FRAME;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2200      	movs	r2, #0
 80026ae:	60da      	str	r2, [r3, #12]
	comm->TxHeader.DataLength=FDCAN_DLC_BYTES_64;  //8 uint32_t values = 32 bytes
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80026b6:	611a      	str	r2, [r3, #16]
	comm->TxHeader.ErrorStateIndicator=FDCAN_ESI_ACTIVE;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2200      	movs	r2, #0
 80026bc:	615a      	str	r2, [r3, #20]
	comm->TxHeader.BitRateSwitch=FDCAN_BRS_OFF;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
	comm->TxHeader.FDFormat=FDCAN_FD_CAN;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80026ca:	61da      	str	r2, [r3, #28]
	comm->TxHeader.TxEventFifoControl=FDCAN_NO_TX_EVENTS;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2200      	movs	r2, #0
 80026d0:	621a      	str	r2, [r3, #32]
	comm->TxHeader.MessageMarker=0;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24

	// Set number of extended ID filters to 1

	comm->filter.IdType = FDCAN_STANDARD_ID;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2200      	movs	r2, #0
 80026dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	comm->filter.FilterIndex = 0;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	comm->filter.FilterType = FDCAN_FILTER_MASK;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	comm->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	comm->filter.FilterID1 = comm->device_id;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80026fe:	461a      	mov	r2, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	comm->filter.FilterID2 = 0x7FF;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800270c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	HAL_FDCAN_ConfigFilter(&comm->fdcan, &comm->filter);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	33b4      	adds	r3, #180	; 0xb4
 800271a:	4619      	mov	r1, r3
 800271c:	4610      	mov	r0, r2
 800271e:	f002 fda3 	bl	8005268 <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&comm->fdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8002728:	2301      	movs	r3, #1
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	2301      	movs	r3, #1
 800272e:	2202      	movs	r2, #2
 8002730:	2102      	movs	r1, #2
 8002732:	f002 fdf3 	bl	800531c <HAL_FDCAN_ConfigGlobalFilter>

	memset(comm->RxData , 0 , RX_BUFFER_SIZE);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	33cc      	adds	r3, #204	; 0xcc
 800273a:	2240      	movs	r2, #64	; 0x40
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f006 ffec 	bl	800971c <memset>

	HAL_FDCAN_Start(&comm->fdcan);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	3350      	adds	r3, #80	; 0x50
 8002748:	4618      	mov	r0, r3
 800274a:	f002 fe18 	bl	800537e <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&comm->fdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	3350      	adds	r3, #80	; 0x50
 8002752:	2200      	movs	r2, #0
 8002754:	2101      	movs	r1, #1
 8002756:	4618      	mov	r0, r3
 8002758:	f002 ff58 	bl	800560c <HAL_FDCAN_ActivateNotification>

}
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <send_message>:


void send_message(CommController *comm , uint8_t *payload) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
	if(HAL_FDCAN_AddMessageToTxFifoQ(&comm->fdcan, &comm->TxHeader, payload) != HAL_OK)//
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3304      	adds	r3, #4
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	4619      	mov	r1, r3
 800277c:	f002 fe27 	bl	80053ce <HAL_FDCAN_AddMessageToTxFifoQ>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <send_message+0x26>
		{
		  Error_Handler();
 8002786:	f000 fb55 	bl	8002e34 <Error_Handler>
		}
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <process_received_message>:

int process_received_message(CommController *comm) {
 8002792:	b480      	push	{r7}
 8002794:	b085      	sub	sp, #20
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]

	int flag = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
	if (comm->RxHeader.Identifier == DEVICE_ID) {  //simple logic for now, its a flag to send a message back from the device
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d101      	bne.n	80027aa <process_received_message+0x18>
		flag = 1;
 80027a6:	2301      	movs	r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]
	}
	return flag;
 80027aa:	68fb      	ldr	r3, [r7, #12]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <ADC_init>:
#include "contact_sensors.h"
#include "configuration.h"
#include "adc.h"
#include "dma.h"

void ADC_init(ADC_HandleTypeDef *adc, ContactSensors *sensors){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
	sensors->adc = adc;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	621a      	str	r2, [r3, #32]
	memset(sensors->adcValues , 0 , sizeof(sensors->adcValues));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2220      	movs	r2, #32
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f006 ffa4 	bl	800971c <memset>
	HAL_ADC_Start_DMA(sensors->adc, sensors->adcValues, NUMBER_OF_SENSORS);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	6839      	ldr	r1, [r7, #0]
 80027da:	2208      	movs	r2, #8
 80027dc:	4618      	mov	r0, r3
 80027de:	f001 fa3f 	bl	8003c60 <HAL_ADC_Start_DMA>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <ADC_update_payload>:


void ADC_update_payload(ContactSensors *sensors) {
 80027ea:	b480      	push	{r7}
 80027ec:	b085      	sub	sp, #20
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
    // Pointer to the current position in the payload
    uint8_t *payloadPtr = sensors->payload;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3324      	adds	r3, #36	; 0x24
 80027f6:	60fb      	str	r3, [r7, #12]

    // Iterate through each ADC value
    for (int i = 0; i < NUMBER_OF_SENSORS; i++) {
 80027f8:	2300      	movs	r3, #0
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	e02d      	b.n	800285a <ADC_update_payload+0x70>
        // Extract each byte from the 32-bit ADC value and flip the MSB for the most significant byte
        *payloadPtr++ = ((sensors->adcValues[i] >> 24) & 0xFF) ^ 0x80;  // MSB with flipped bit
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002806:	0e1b      	lsrs	r3, r3, #24
 8002808:	b2db      	uxtb	r3, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	1c51      	adds	r1, r2, #1
 800280e:	60f9      	str	r1, [r7, #12]
 8002810:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8002814:	43db      	mvns	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	7013      	strb	r3, [r2, #0]
        *payloadPtr++ = (sensors->adcValues[i] >> 16) & 0xFF;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002822:	0c19      	lsrs	r1, r3, #16
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	60fa      	str	r2, [r7, #12]
 800282a:	b2ca      	uxtb	r2, r1
 800282c:	701a      	strb	r2, [r3, #0]
        *payloadPtr++ = (sensors->adcValues[i] >> 8) & 0xFF;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002836:	0a19      	lsrs	r1, r3, #8
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	60fa      	str	r2, [r7, #12]
 800283e:	b2ca      	uxtb	r2, r1
 8002840:	701a      	strb	r2, [r3, #0]
        *payloadPtr++ = sensors->adcValues[i] & 0xFF;                    // LSB
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	60fa      	str	r2, [r7, #12]
 8002850:	b2ca      	uxtb	r2, r1
 8002852:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUMBER_OF_SENSORS; i++) {
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	3301      	adds	r3, #1
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b07      	cmp	r3, #7
 800285e:	ddce      	ble.n	80027fe <ADC_update_payload+0x14>
    }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <MX_DMA_Init+0x50>)
 8002878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287a:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <MX_DMA_Init+0x50>)
 800287c:	f043 0304 	orr.w	r3, r3, #4
 8002880:	6493      	str	r3, [r2, #72]	; 0x48
 8002882:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <MX_DMA_Init+0x50>)
 8002884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800288e:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <MX_DMA_Init+0x50>)
 8002890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002892:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <MX_DMA_Init+0x50>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6493      	str	r3, [r2, #72]	; 0x48
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <MX_DMA_Init+0x50>)
 800289c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2100      	movs	r1, #0
 80028aa:	200b      	movs	r0, #11
 80028ac:	f002 f8db 	bl	8004a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028b0:	200b      	movs	r0, #11
 80028b2:	f002 f8f2 	bl	8004a9a <HAL_NVIC_EnableIRQ>

}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000

080028c4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80028c8:	4b20      	ldr	r3, [pc, #128]	; (800294c <MX_FDCAN1_Init+0x88>)
 80028ca:	4a21      	ldr	r2, [pc, #132]	; (8002950 <MX_FDCAN1_Init+0x8c>)
 80028cc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80028ce:	4b1f      	ldr	r3, [pc, #124]	; (800294c <MX_FDCAN1_Init+0x88>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80028d4:	4b1d      	ldr	r3, [pc, #116]	; (800294c <MX_FDCAN1_Init+0x88>)
 80028d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028da:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <MX_FDCAN1_Init+0x88>)
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80028e2:	4b1a      	ldr	r3, [pc, #104]	; (800294c <MX_FDCAN1_Init+0x88>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80028e8:	4b18      	ldr	r3, [pc, #96]	; (800294c <MX_FDCAN1_Init+0x88>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80028ee:	4b17      	ldr	r3, [pc, #92]	; (800294c <MX_FDCAN1_Init+0x88>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80028f4:	4b15      	ldr	r3, [pc, #84]	; (800294c <MX_FDCAN1_Init+0x88>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <MX_FDCAN1_Init+0x88>)
 80028fc:	2202      	movs	r2, #2
 80028fe:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 107;
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <MX_FDCAN1_Init+0x88>)
 8002902:	226b      	movs	r2, #107	; 0x6b
 8002904:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 36;
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <MX_FDCAN1_Init+0x88>)
 8002908:	2224      	movs	r2, #36	; 0x24
 800290a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 6;
 800290c:	4b0f      	ldr	r3, [pc, #60]	; (800294c <MX_FDCAN1_Init+0x88>)
 800290e:	2206      	movs	r2, #6
 8002910:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8002912:	4b0e      	ldr	r3, [pc, #56]	; (800294c <MX_FDCAN1_Init+0x88>)
 8002914:	2209      	movs	r2, #9
 8002916:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <MX_FDCAN1_Init+0x88>)
 800291a:	220f      	movs	r2, #15
 800291c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <MX_FDCAN1_Init+0x88>)
 8002920:	2209      	movs	r2, #9
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <MX_FDCAN1_Init+0x88>)
 8002926:	2201      	movs	r2, #1
 8002928:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <MX_FDCAN1_Init+0x88>)
 800292c:	2200      	movs	r2, #0
 800292e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <MX_FDCAN1_Init+0x88>)
 8002932:	2200      	movs	r2, #0
 8002934:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002936:	4805      	ldr	r0, [pc, #20]	; (800294c <MX_FDCAN1_Init+0x88>)
 8002938:	f002 fb3c 	bl	8004fb4 <HAL_FDCAN_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8002942:	f000 fa77 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000144 	.word	0x20000144
 8002950:	40006400 	.word	0x40006400

08002954 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b09e      	sub	sp, #120	; 0x78
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800296c:	f107 0310 	add.w	r3, r7, #16
 8002970:	2254      	movs	r2, #84	; 0x54
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f006 fed1 	bl	800971c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a24      	ldr	r2, [pc, #144]	; (8002a10 <HAL_FDCAN_MspInit+0xbc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d141      	bne.n	8002a08 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002988:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800298a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800298e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002990:	f107 0310 	add.w	r3, r7, #16
 8002994:	4618      	mov	r0, r3
 8002996:	f005 f80d 	bl	80079b4 <HAL_RCCEx_PeriphCLKConfig>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80029a0:	f000 fa48 	bl	8002e34 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_FDCAN_MspInit+0xc0>)
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	4a1a      	ldr	r2, [pc, #104]	; (8002a14 <HAL_FDCAN_MspInit+0xc0>)
 80029aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029ae:	6593      	str	r3, [r2, #88]	; 0x58
 80029b0:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <HAL_FDCAN_MspInit+0xc0>)
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029bc:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <HAL_FDCAN_MspInit+0xc0>)
 80029be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <HAL_FDCAN_MspInit+0xc0>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <HAL_FDCAN_MspInit+0xc0>)
 80029ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029d8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2300      	movs	r3, #0
 80029e4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80029e6:	2309      	movs	r3, #9
 80029e8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029ee:	4619      	mov	r1, r3
 80029f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f4:	f003 f97a 	bl	8005cec <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80029f8:	2200      	movs	r2, #0
 80029fa:	2100      	movs	r1, #0
 80029fc:	2015      	movs	r0, #21
 80029fe:	f002 f832 	bl	8004a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002a02:	2015      	movs	r0, #21
 8002a04:	f002 f849 	bl	8004a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002a08:	bf00      	nop
 8002a0a:	3778      	adds	r7, #120	; 0x78
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40006400 	.word	0x40006400
 8002a14:	40021000 	.word	0x40021000

08002a18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1e:	f107 030c 	add.w	r3, r7, #12
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
 8002a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <MX_GPIO_Init+0x90>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	4a1d      	ldr	r2, [pc, #116]	; (8002aa8 <MX_GPIO_Init+0x90>)
 8002a34:	f043 0304 	orr.w	r3, r3, #4
 8002a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <MX_GPIO_Init+0x90>)
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <MX_GPIO_Init+0x90>)
 8002a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4a:	4a17      	ldr	r2, [pc, #92]	; (8002aa8 <MX_GPIO_Init+0x90>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <MX_GPIO_Init+0x90>)
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <MX_GPIO_Init+0x90>)
 8002a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a62:	4a11      	ldr	r2, [pc, #68]	; (8002aa8 <MX_GPIO_Init+0x90>)
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <MX_GPIO_Init+0x90>)
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8002a76:	2200      	movs	r2, #0
 8002a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a7c:	480b      	ldr	r0, [pc, #44]	; (8002aac <MX_GPIO_Init+0x94>)
 8002a7e:	f003 fab7 	bl	8005ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8002a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8002a94:	f107 030c 	add.w	r3, r7, #12
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4804      	ldr	r0, [pc, #16]	; (8002aac <MX_GPIO_Init+0x94>)
 8002a9c:	f003 f926 	bl	8005cec <HAL_GPIO_Init>

}
 8002aa0:	bf00      	nop
 8002aa2:	3720      	adds	r7, #32
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	48000800 	.word	0x48000800

08002ab0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ab4:	4b1e      	ldr	r3, [pc, #120]	; (8002b30 <MX_I2C1_Init+0x80>)
 8002ab6:	4a1f      	ldr	r2, [pc, #124]	; (8002b34 <MX_I2C1_Init+0x84>)
 8002ab8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0070215B;
 8002aba:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <MX_I2C1_Init+0x80>)
 8002abc:	4a1e      	ldr	r2, [pc, #120]	; (8002b38 <MX_I2C1_Init+0x88>)
 8002abe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <MX_I2C1_Init+0x80>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <MX_I2C1_Init+0x80>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002acc:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <MX_I2C1_Init+0x80>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ad2:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <MX_I2C1_Init+0x80>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ad8:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <MX_I2C1_Init+0x80>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ade:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <MX_I2C1_Init+0x80>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ae4:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <MX_I2C1_Init+0x80>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002aea:	4811      	ldr	r0, [pc, #68]	; (8002b30 <MX_I2C1_Init+0x80>)
 8002aec:	f003 fa98 	bl	8006020 <HAL_I2C_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002af6:	f000 f99d 	bl	8002e34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002afa:	2100      	movs	r1, #0
 8002afc:	480c      	ldr	r0, [pc, #48]	; (8002b30 <MX_I2C1_Init+0x80>)
 8002afe:	f004 f8e9 	bl	8006cd4 <HAL_I2CEx_ConfigAnalogFilter>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b08:	f000 f994 	bl	8002e34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4808      	ldr	r0, [pc, #32]	; (8002b30 <MX_I2C1_Init+0x80>)
 8002b10:	f004 f92b 	bl	8006d6a <HAL_I2CEx_ConfigDigitalFilter>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b1a:	f000 f98b 	bl	8002e34 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <MX_I2C1_Init+0x8c>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4a06      	ldr	r2, [pc, #24]	; (8002b3c <MX_I2C1_Init+0x8c>)
 8002b24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b28:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	200001a8 	.word	0x200001a8
 8002b34:	40005400 	.word	0x40005400
 8002b38:	0070215b 	.word	0x0070215b
 8002b3c:	40010000 	.word	0x40010000

08002b40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b0a0      	sub	sp, #128	; 0x80
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	60da      	str	r2, [r3, #12]
 8002b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b58:	f107 0318 	add.w	r3, r7, #24
 8002b5c:	2254      	movs	r2, #84	; 0x54
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f006 fddb 	bl	800971c <memset>
  if(i2cHandle->Instance==I2C1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a2d      	ldr	r2, [pc, #180]	; (8002c20 <HAL_I2C_MspInit+0xe0>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d153      	bne.n	8002c18 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b70:	2340      	movs	r3, #64	; 0x40
 8002b72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b74:	2300      	movs	r3, #0
 8002b76:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b78:	f107 0318 	add.w	r3, r7, #24
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f004 ff19 	bl	80079b4 <HAL_RCCEx_PeriphCLKConfig>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002b88:	f000 f954 	bl	8002e34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8c:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <HAL_I2C_MspInit+0xe4>)
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b90:	4a24      	ldr	r2, [pc, #144]	; (8002c24 <HAL_I2C_MspInit+0xe4>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b98:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <HAL_I2C_MspInit+0xe4>)
 8002b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba4:	4b1f      	ldr	r3, [pc, #124]	; (8002c24 <HAL_I2C_MspInit+0xe4>)
 8002ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba8:	4a1e      	ldr	r2, [pc, #120]	; (8002c24 <HAL_I2C_MspInit+0xe4>)
 8002baa:	f043 0302 	orr.w	r3, r3, #2
 8002bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bb0:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <HAL_I2C_MspInit+0xe4>)
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bc2:	2312      	movs	r3, #18
 8002bc4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bce:	2304      	movs	r3, #4
 8002bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bdc:	f003 f886 	bl	8005cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002be4:	2312      	movs	r3, #18
 8002be6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bec:	2300      	movs	r3, #0
 8002bee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bf0:	2304      	movs	r3, #4
 8002bf2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	480b      	ldr	r0, [pc, #44]	; (8002c28 <HAL_I2C_MspInit+0xe8>)
 8002bfc:	f003 f876 	bl	8005cec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <HAL_I2C_MspInit+0xe4>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <HAL_I2C_MspInit+0xe4>)
 8002c06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_I2C_MspInit+0xe4>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002c18:	bf00      	nop
 8002c1a:	3780      	adds	r7, #128	; 0x80
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40005400 	.word	0x40005400
 8002c24:	40021000 	.word	0x40021000
 8002c28:	48000400 	.word	0x48000400

08002c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c30:	f000 fb9f 	bl	8003372 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c34:	f000 f86e 	bl	8002d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c38:	f7ff feee 	bl	8002a18 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c3c:	f7ff fe18 	bl	8002870 <MX_DMA_Init>
  MX_ADC2_Init();
 8002c40:	f7fd fdc0 	bl	80007c4 <MX_ADC2_Init>
  MX_I2C1_Init();
 8002c44:	f7ff ff34 	bl	8002ab0 <MX_I2C1_Init>
  MX_UART4_Init();
 8002c48:	f000 fa24 	bl	8003094 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8002c4c:	f000 fa6e 	bl	800312c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002c50:	f000 f9aa 	bl	8002fa8 <MX_TIM3_Init>
  MX_FDCAN1_Init();
 8002c54:	f7ff fe36 	bl	80028c4 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  soul_sense.imu = &imu;
 8002c58:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <main+0xbc>)
 8002c5a:	4a24      	ldr	r2, [pc, #144]	; (8002cec <main+0xc0>)
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40
  soul_sense.contact_sensors = &contact_sensors;
 8002c5e:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <main+0xbc>)
 8002c60:	4a23      	ldr	r2, [pc, #140]	; (8002cf0 <main+0xc4>)
 8002c62:	645a      	str	r2, [r3, #68]	; 0x44
  soul_sense.version = &fw_version;
 8002c64:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <main+0xbc>)
 8002c66:	4a23      	ldr	r2, [pc, #140]	; (8002cf4 <main+0xc8>)
 8002c68:	649a      	str	r2, [r3, #72]	; 0x48
  soul_init(&soul_sense , &hi2c1 , &hadc2); // inits the soulsense, imu, contact sensors
 8002c6a:	4a23      	ldr	r2, [pc, #140]	; (8002cf8 <main+0xcc>)
 8002c6c:	4923      	ldr	r1, [pc, #140]	; (8002cfc <main+0xd0>)
 8002c6e:	481e      	ldr	r0, [pc, #120]	; (8002ce8 <main+0xbc>)
 8002c70:	f7fd fd2d 	bl	80006ce <soul_init>
  comm_controller_init(&hfdcan1 , &comm_controller);
 8002c74:	4922      	ldr	r1, [pc, #136]	; (8002d00 <main+0xd4>)
 8002c76:	4823      	ldr	r0, [pc, #140]	; (8002d04 <main+0xd8>)
 8002c78:	f7ff fcf7 	bl	800266a <comm_controller_init>

  currentState = IDLE;
 8002c7c:	4b22      	ldr	r3, [pc, #136]	; (8002d08 <main+0xdc>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim3); // starting timer IT
 8002c82:	4822      	ldr	r0, [pc, #136]	; (8002d0c <main+0xe0>)
 8002c84:	f005 f93c 	bl	8007f00 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch(currentState) {
 8002c88:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <main+0xdc>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d00e      	beq.n	8002cae <main+0x82>
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	dc22      	bgt.n	8002cda <main+0xae>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d024      	beq.n	8002ce2 <main+0xb6>
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d11e      	bne.n	8002cda <main+0xae>
	  	  case IDLE:
		  	  break;


	      case READ_IMU:
	    	  imu_read_data(soul_sense.imu);
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <main+0xbc>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd fc6b 	bl	800057c <imu_read_data>
	    	  currentState = IDLE;
 8002ca6:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <main+0xdc>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
	          break;
 8002cac:	e01a      	b.n	8002ce4 <main+0xb8>


	      case RECEIVE_N_TRANSMIT:
	    	  //received a request to send data
	    	  if(process_received_message(&comm_controller)){
 8002cae:	4814      	ldr	r0, [pc, #80]	; (8002d00 <main+0xd4>)
 8002cb0:	f7ff fd6f 	bl	8002792 <process_received_message>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d006      	beq.n	8002cc8 <main+0x9c>
	    		  soul_update_payload(&soul_sense);  //converting the data into byte array
 8002cba:	480b      	ldr	r0, [pc, #44]	; (8002ce8 <main+0xbc>)
 8002cbc:	f7fd fd28 	bl	8000710 <soul_update_payload>
				  send_message(&comm_controller, soul_sense.payload);  //sending the byte array
 8002cc0:	4909      	ldr	r1, [pc, #36]	; (8002ce8 <main+0xbc>)
 8002cc2:	480f      	ldr	r0, [pc, #60]	; (8002d00 <main+0xd4>)
 8002cc4:	f7ff fd4e 	bl	8002764 <send_message>
	    	  }

	    	  memset(comm_controller.RxData, 0 , RX_BUFFER_SIZE);   //deleting used content from RxData buffer
 8002cc8:	2240      	movs	r2, #64	; 0x40
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4810      	ldr	r0, [pc, #64]	; (8002d10 <main+0xe4>)
 8002cce:	f006 fd25 	bl	800971c <memset>
	    	  currentState = IDLE;
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <main+0xdc>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
	          break;
 8002cd8:	e004      	b.n	8002ce4 <main+0xb8>


	      default:
	    	  currentState = IDLE;
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <main+0xdc>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
	          break;
 8002ce0:	e000      	b.n	8002ce4 <main+0xb8>
		  	  break;
 8002ce2:	bf00      	nop
	  switch(currentState) {
 8002ce4:	e7d0      	b.n	8002c88 <main+0x5c>
 8002ce6:	bf00      	nop
 8002ce8:	200001f8 	.word	0x200001f8
 8002cec:	20000354 	.word	0x20000354
 8002cf0:	200003a0 	.word	0x200003a0
 8002cf4:	200003e4 	.word	0x200003e4
 8002cf8:	20000078 	.word	0x20000078
 8002cfc:	200001a8 	.word	0x200001a8
 8002d00:	20000244 	.word	0x20000244
 8002d04:	20000144 	.word	0x20000144
 8002d08:	200001f4 	.word	0x200001f4
 8002d0c:	200003ec 	.word	0x200003ec
 8002d10:	20000310 	.word	0x20000310

08002d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b094      	sub	sp, #80	; 0x50
 8002d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d1a:	f107 0318 	add.w	r3, r7, #24
 8002d1e:	2238      	movs	r2, #56	; 0x38
 8002d20:	2100      	movs	r1, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f006 fcfa 	bl	800971c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]
 8002d34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d3a:	f004 f863 	bl	8006e04 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d48:	2340      	movs	r3, #64	; 0x40
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d50:	2302      	movs	r3, #2
 8002d52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002d54:	2301      	movs	r3, #1
 8002d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 18;
 8002d58:	2312      	movs	r3, #18
 8002d5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d60:	2302      	movs	r3, #2
 8002d62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d64:	2302      	movs	r3, #2
 8002d66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d68:	f107 0318 	add.w	r3, r7, #24
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f004 f8ed 	bl	8006f4c <HAL_RCC_OscConfig>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8002d78:	f000 f85c 	bl	8002e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d7c:	230f      	movs	r3, #15
 8002d7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d80:	2303      	movs	r3, #3
 8002d82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	2104      	movs	r1, #4
 8002d94:	4618      	mov	r0, r3
 8002d96:	f004 fbf1 	bl	800757c <HAL_RCC_ClockConfig>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002da0:	f000 f848 	bl	8002e34 <Error_Handler>
  }
}
 8002da4:	bf00      	nop
 8002da6:	3750      	adds	r7, #80	; 0x50
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) //fdcan callback IT
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_FDCAN_RxFifo0Callback+0x2a>
	{
		if (HAL_FDCAN_GetRxMessage(&comm_controller.fdcan, FDCAN_RX_FIFO0, &comm_controller.RxHeader, comm_controller.RxData) != HAL_OK)
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002dc2:	4a0e      	ldr	r2, [pc, #56]	; (8002dfc <HAL_FDCAN_RxFifo0Callback+0x50>)
 8002dc4:	2140      	movs	r1, #64	; 0x40
 8002dc6:	480e      	ldr	r0, [pc, #56]	; (8002e00 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8002dc8:	f002 fb46 	bl	8005458 <HAL_FDCAN_GetRxMessage>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_FDCAN_RxFifo0Callback+0x2a>
		{
			Error_Handler();
 8002dd2:	f000 f82f 	bl	8002e34 <Error_Handler>
		}
	}
	currentState = RECEIVE_N_TRANSMIT;
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8002dd8:	2203      	movs	r2, #3
 8002dda:	701a      	strb	r2, [r3, #0]
	if (HAL_FDCAN_ActivateNotification(&comm_controller.fdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2101      	movs	r1, #1
 8002de0:	4807      	ldr	r0, [pc, #28]	; (8002e00 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8002de2:	f002 fc13 	bl	800560c <HAL_FDCAN_ActivateNotification>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_FDCAN_RxFifo0Callback+0x44>
	{
		Error_Handler();
 8002dec:	f000 f822 	bl	8002e34 <Error_Handler>
	}
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000310 	.word	0x20000310
 8002dfc:	2000026c 	.word	0x2000026c
 8002e00:	20000294 	.word	0x20000294
 8002e04:	200001f4 	.word	0x200001f4

08002e08 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)   //timer callback IT
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a05      	ldr	r2, [pc, #20]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d102      	bne.n	8002e20 <HAL_TIM_PeriodElapsedCallback+0x18>
		currentState = READ_IMU;
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
	}
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	40000400 	.word	0x40000400
 8002e30:	200001f4 	.word	0x200001f4

08002e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e38:	b672      	cpsid	i
}
 8002e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e3c:	e7fe      	b.n	8002e3c <Error_Handler+0x8>
	...

08002e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e46:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <HAL_MspInit+0x44>)
 8002e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4a:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <HAL_MspInit+0x44>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6613      	str	r3, [r2, #96]	; 0x60
 8002e52:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <HAL_MspInit+0x44>)
 8002e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	607b      	str	r3, [r7, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <HAL_MspInit+0x44>)
 8002e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e62:	4a08      	ldr	r2, [pc, #32]	; (8002e84 <HAL_MspInit+0x44>)
 8002e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e68:	6593      	str	r3, [r2, #88]	; 0x58
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_MspInit+0x44>)
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000

08002e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e8c:	e7fe      	b.n	8002e8c <NMI_Handler+0x4>

08002e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e92:	e7fe      	b.n	8002e92 <HardFault_Handler+0x4>

08002e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e98:	e7fe      	b.n	8002e98 <MemManage_Handler+0x4>

08002e9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e9e:	e7fe      	b.n	8002e9e <BusFault_Handler+0x4>

08002ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ea4:	e7fe      	b.n	8002ea4 <UsageFault_Handler+0x4>

08002ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ed4:	f000 faa0 	bl	8003418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ed8:	bf00      	nop
 8002eda:	bd80      	pop	{r7, pc}

08002edc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002ee0:	4802      	ldr	r0, [pc, #8]	; (8002eec <DMA1_Channel1_IRQHandler+0x10>)
 8002ee2:	f001 ff18 	bl	8004d16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	200000e4 	.word	0x200000e4

08002ef0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002ef4:	4802      	ldr	r0, [pc, #8]	; (8002f00 <FDCAN1_IT0_IRQHandler+0x10>)
 8002ef6:	f002 fc6f 	bl	80057d8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000144 	.word	0x20000144

08002f04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f08:	4802      	ldr	r0, [pc, #8]	; (8002f14 <TIM3_IRQHandler+0x10>)
 8002f0a:	f005 f871 	bl	8007ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	200003ec 	.word	0x200003ec

08002f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f20:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <_sbrk+0x5c>)
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <_sbrk+0x60>)
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f2c:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <_sbrk+0x64>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d102      	bne.n	8002f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f34:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <_sbrk+0x64>)
 8002f36:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <_sbrk+0x68>)
 8002f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <_sbrk+0x64>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d207      	bcs.n	8002f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f48:	f006 fc00 	bl	800974c <__errno>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	220c      	movs	r2, #12
 8002f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f56:	e009      	b.n	8002f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <_sbrk+0x64>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f5e:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <_sbrk+0x64>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	4a05      	ldr	r2, [pc, #20]	; (8002f7c <_sbrk+0x64>)
 8002f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20020000 	.word	0x20020000
 8002f78:	00000400 	.word	0x00000400
 8002f7c:	200003e8 	.word	0x200003e8
 8002f80:	200006a8 	.word	0x200006a8

08002f84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <SystemInit+0x20>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	4a05      	ldr	r2, [pc, #20]	; (8002fa4 <SystemInit+0x20>)
 8002f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fae:	f107 0310 	add.w	r3, r7, #16
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fbc:	1d3b      	adds	r3, r7, #4
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fc6:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <MX_TIM3_Init+0x98>)
 8002fc8:	4a1e      	ldr	r2, [pc, #120]	; (8003044 <MX_TIM3_Init+0x9c>)
 8002fca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8002fcc:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <MX_TIM3_Init+0x98>)
 8002fce:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8002fd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd4:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <MX_TIM3_Init+0x98>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8002fda:	4b19      	ldr	r3, [pc, #100]	; (8003040 <MX_TIM3_Init+0x98>)
 8002fdc:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002fe0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe2:	4b17      	ldr	r3, [pc, #92]	; (8003040 <MX_TIM3_Init+0x98>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fe8:	4b15      	ldr	r3, [pc, #84]	; (8003040 <MX_TIM3_Init+0x98>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fee:	4814      	ldr	r0, [pc, #80]	; (8003040 <MX_TIM3_Init+0x98>)
 8002ff0:	f004 ff2e 	bl	8007e50 <HAL_TIM_Base_Init>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002ffa:	f7ff ff1b 	bl	8002e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003002:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003004:	f107 0310 	add.w	r3, r7, #16
 8003008:	4619      	mov	r1, r3
 800300a:	480d      	ldr	r0, [pc, #52]	; (8003040 <MX_TIM3_Init+0x98>)
 800300c:	f005 f970 	bl	80082f0 <HAL_TIM_ConfigClockSource>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8003016:	f7ff ff0d 	bl	8002e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800301a:	2300      	movs	r3, #0
 800301c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003022:	1d3b      	adds	r3, r7, #4
 8003024:	4619      	mov	r1, r3
 8003026:	4806      	ldr	r0, [pc, #24]	; (8003040 <MX_TIM3_Init+0x98>)
 8003028:	f005 fbe4 	bl	80087f4 <HAL_TIMEx_MasterConfigSynchronization>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8003032:	f7ff feff 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003036:	bf00      	nop
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200003ec 	.word	0x200003ec
 8003044:	40000400 	.word	0x40000400

08003048 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0d      	ldr	r2, [pc, #52]	; (800308c <HAL_TIM_Base_MspInit+0x44>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d113      	bne.n	8003082 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800305a:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <HAL_TIM_Base_MspInit+0x48>)
 800305c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305e:	4a0c      	ldr	r2, [pc, #48]	; (8003090 <HAL_TIM_Base_MspInit+0x48>)
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	6593      	str	r3, [r2, #88]	; 0x58
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <HAL_TIM_Base_MspInit+0x48>)
 8003068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003072:	2200      	movs	r2, #0
 8003074:	2100      	movs	r1, #0
 8003076:	201d      	movs	r0, #29
 8003078:	f001 fcf5 	bl	8004a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800307c:	201d      	movs	r0, #29
 800307e:	f001 fd0c 	bl	8004a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40000400 	.word	0x40000400
 8003090:	40021000 	.word	0x40021000

08003094 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003098:	4b22      	ldr	r3, [pc, #136]	; (8003124 <MX_UART4_Init+0x90>)
 800309a:	4a23      	ldr	r2, [pc, #140]	; (8003128 <MX_UART4_Init+0x94>)
 800309c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800309e:	4b21      	ldr	r3, [pc, #132]	; (8003124 <MX_UART4_Init+0x90>)
 80030a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80030a6:	4b1f      	ldr	r3, [pc, #124]	; (8003124 <MX_UART4_Init+0x90>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80030ac:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <MX_UART4_Init+0x90>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80030b2:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <MX_UART4_Init+0x90>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80030b8:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <MX_UART4_Init+0x90>)
 80030ba:	220c      	movs	r2, #12
 80030bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <MX_UART4_Init+0x90>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80030c4:	4b17      	ldr	r3, [pc, #92]	; (8003124 <MX_UART4_Init+0x90>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <MX_UART4_Init+0x90>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030d0:	4b14      	ldr	r3, [pc, #80]	; (8003124 <MX_UART4_Init+0x90>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030d6:	4b13      	ldr	r3, [pc, #76]	; (8003124 <MX_UART4_Init+0x90>)
 80030d8:	2200      	movs	r2, #0
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80030dc:	4811      	ldr	r0, [pc, #68]	; (8003124 <MX_UART4_Init+0x90>)
 80030de:	f005 fc65 	bl	80089ac <HAL_UART_Init>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80030e8:	f7ff fea4 	bl	8002e34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030ec:	2100      	movs	r1, #0
 80030ee:	480d      	ldr	r0, [pc, #52]	; (8003124 <MX_UART4_Init+0x90>)
 80030f0:	f006 f996 	bl	8009420 <HAL_UARTEx_SetTxFifoThreshold>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80030fa:	f7ff fe9b 	bl	8002e34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030fe:	2100      	movs	r1, #0
 8003100:	4808      	ldr	r0, [pc, #32]	; (8003124 <MX_UART4_Init+0x90>)
 8003102:	f006 f9cb 	bl	800949c <HAL_UARTEx_SetRxFifoThreshold>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800310c:	f7ff fe92 	bl	8002e34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003110:	4804      	ldr	r0, [pc, #16]	; (8003124 <MX_UART4_Init+0x90>)
 8003112:	f006 f94c 	bl	80093ae <HAL_UARTEx_DisableFifoMode>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800311c:	f7ff fe8a 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003120:	bf00      	nop
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000438 	.word	0x20000438
 8003128:	40004c00 	.word	0x40004c00

0800312c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003130:	4b22      	ldr	r3, [pc, #136]	; (80031bc <MX_USART3_UART_Init+0x90>)
 8003132:	4a23      	ldr	r2, [pc, #140]	; (80031c0 <MX_USART3_UART_Init+0x94>)
 8003134:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003136:	4b21      	ldr	r3, [pc, #132]	; (80031bc <MX_USART3_UART_Init+0x90>)
 8003138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800313c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800313e:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <MX_USART3_UART_Init+0x90>)
 8003140:	2200      	movs	r2, #0
 8003142:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003144:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <MX_USART3_UART_Init+0x90>)
 8003146:	2200      	movs	r2, #0
 8003148:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800314a:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <MX_USART3_UART_Init+0x90>)
 800314c:	2200      	movs	r2, #0
 800314e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003150:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <MX_USART3_UART_Init+0x90>)
 8003152:	220c      	movs	r2, #12
 8003154:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003156:	4b19      	ldr	r3, [pc, #100]	; (80031bc <MX_USART3_UART_Init+0x90>)
 8003158:	2200      	movs	r2, #0
 800315a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800315c:	4b17      	ldr	r3, [pc, #92]	; (80031bc <MX_USART3_UART_Init+0x90>)
 800315e:	2200      	movs	r2, #0
 8003160:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003162:	4b16      	ldr	r3, [pc, #88]	; (80031bc <MX_USART3_UART_Init+0x90>)
 8003164:	2200      	movs	r2, #0
 8003166:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003168:	4b14      	ldr	r3, [pc, #80]	; (80031bc <MX_USART3_UART_Init+0x90>)
 800316a:	2200      	movs	r2, #0
 800316c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800316e:	4b13      	ldr	r3, [pc, #76]	; (80031bc <MX_USART3_UART_Init+0x90>)
 8003170:	2200      	movs	r2, #0
 8003172:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003174:	4811      	ldr	r0, [pc, #68]	; (80031bc <MX_USART3_UART_Init+0x90>)
 8003176:	f005 fc19 	bl	80089ac <HAL_UART_Init>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003180:	f7ff fe58 	bl	8002e34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003184:	2100      	movs	r1, #0
 8003186:	480d      	ldr	r0, [pc, #52]	; (80031bc <MX_USART3_UART_Init+0x90>)
 8003188:	f006 f94a 	bl	8009420 <HAL_UARTEx_SetTxFifoThreshold>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003192:	f7ff fe4f 	bl	8002e34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003196:	2100      	movs	r1, #0
 8003198:	4808      	ldr	r0, [pc, #32]	; (80031bc <MX_USART3_UART_Init+0x90>)
 800319a:	f006 f97f 	bl	800949c <HAL_UARTEx_SetRxFifoThreshold>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80031a4:	f7ff fe46 	bl	8002e34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80031a8:	4804      	ldr	r0, [pc, #16]	; (80031bc <MX_USART3_UART_Init+0x90>)
 80031aa:	f006 f900 	bl	80093ae <HAL_UARTEx_DisableFifoMode>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80031b4:	f7ff fe3e 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80031b8:	bf00      	nop
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	200004c8 	.word	0x200004c8
 80031c0:	40004800 	.word	0x40004800

080031c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b0a0      	sub	sp, #128	; 0x80
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031dc:	f107 0318 	add.w	r3, r7, #24
 80031e0:	2254      	movs	r2, #84	; 0x54
 80031e2:	2100      	movs	r1, #0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f006 fa99 	bl	800971c <memset>
  if(uartHandle->Instance==UART4)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a3d      	ldr	r2, [pc, #244]	; (80032e4 <HAL_UART_MspInit+0x120>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d137      	bne.n	8003264 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80031f4:	2308      	movs	r3, #8
 80031f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80031f8:	2300      	movs	r3, #0
 80031fa:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031fc:	f107 0318 	add.w	r3, r7, #24
 8003200:	4618      	mov	r0, r3
 8003202:	f004 fbd7 	bl	80079b4 <HAL_RCCEx_PeriphCLKConfig>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800320c:	f7ff fe12 	bl	8002e34 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003210:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <HAL_UART_MspInit+0x124>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	4a34      	ldr	r2, [pc, #208]	; (80032e8 <HAL_UART_MspInit+0x124>)
 8003216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800321a:	6593      	str	r3, [r2, #88]	; 0x58
 800321c:	4b32      	ldr	r3, [pc, #200]	; (80032e8 <HAL_UART_MspInit+0x124>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003228:	4b2f      	ldr	r3, [pc, #188]	; (80032e8 <HAL_UART_MspInit+0x124>)
 800322a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322c:	4a2e      	ldr	r2, [pc, #184]	; (80032e8 <HAL_UART_MspInit+0x124>)
 800322e:	f043 0304 	orr.w	r3, r3, #4
 8003232:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003234:	4b2c      	ldr	r3, [pc, #176]	; (80032e8 <HAL_UART_MspInit+0x124>)
 8003236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003240:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003244:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003246:	2302      	movs	r3, #2
 8003248:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324a:	2300      	movs	r3, #0
 800324c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324e:	2300      	movs	r3, #0
 8003250:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003252:	2305      	movs	r3, #5
 8003254:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003256:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800325a:	4619      	mov	r1, r3
 800325c:	4823      	ldr	r0, [pc, #140]	; (80032ec <HAL_UART_MspInit+0x128>)
 800325e:	f002 fd45 	bl	8005cec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003262:	e03b      	b.n	80032dc <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a21      	ldr	r2, [pc, #132]	; (80032f0 <HAL_UART_MspInit+0x12c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d136      	bne.n	80032dc <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800326e:	2304      	movs	r3, #4
 8003270:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003272:	2300      	movs	r3, #0
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003276:	f107 0318 	add.w	r3, r7, #24
 800327a:	4618      	mov	r0, r3
 800327c:	f004 fb9a 	bl	80079b4 <HAL_RCCEx_PeriphCLKConfig>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8003286:	f7ff fdd5 	bl	8002e34 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800328a:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <HAL_UART_MspInit+0x124>)
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328e:	4a16      	ldr	r2, [pc, #88]	; (80032e8 <HAL_UART_MspInit+0x124>)
 8003290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003294:	6593      	str	r3, [r2, #88]	; 0x58
 8003296:	4b14      	ldr	r3, [pc, #80]	; (80032e8 <HAL_UART_MspInit+0x124>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <HAL_UART_MspInit+0x124>)
 80032a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a6:	4a10      	ldr	r2, [pc, #64]	; (80032e8 <HAL_UART_MspInit+0x124>)
 80032a8:	f043 0302 	orr.w	r3, r3, #2
 80032ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032ae:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <HAL_UART_MspInit+0x124>)
 80032b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c0:	2302      	movs	r3, #2
 80032c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c8:	2300      	movs	r3, #0
 80032ca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80032cc:	2307      	movs	r3, #7
 80032ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032d4:	4619      	mov	r1, r3
 80032d6:	4807      	ldr	r0, [pc, #28]	; (80032f4 <HAL_UART_MspInit+0x130>)
 80032d8:	f002 fd08 	bl	8005cec <HAL_GPIO_Init>
}
 80032dc:	bf00      	nop
 80032de:	3780      	adds	r7, #128	; 0x80
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40004c00 	.word	0x40004c00
 80032e8:	40021000 	.word	0x40021000
 80032ec:	48000800 	.word	0x48000800
 80032f0:	40004800 	.word	0x40004800
 80032f4:	48000400 	.word	0x48000400

080032f8 <version_init>:
 */


#include "version.h"

void version_init(FwVersion* version){
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	version->version[0] = HW_VERSION;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	701a      	strb	r2, [r3, #0]
	version->version[1] = SW_MAJOR_VERSION;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	705a      	strb	r2, [r3, #1]
	version->version[2] = SW_MINOR_VERSION;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	709a      	strb	r2, [r3, #2]
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003320:	480d      	ldr	r0, [pc, #52]	; (8003358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003322:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003324:	480d      	ldr	r0, [pc, #52]	; (800335c <LoopForever+0x6>)
  ldr r1, =_edata
 8003326:	490e      	ldr	r1, [pc, #56]	; (8003360 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003328:	4a0e      	ldr	r2, [pc, #56]	; (8003364 <LoopForever+0xe>)
  movs r3, #0
 800332a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800332c:	e002      	b.n	8003334 <LoopCopyDataInit>

0800332e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800332e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003332:	3304      	adds	r3, #4

08003334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003338:	d3f9      	bcc.n	800332e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800333a:	4a0b      	ldr	r2, [pc, #44]	; (8003368 <LoopForever+0x12>)
  ldr r4, =_ebss
 800333c:	4c0b      	ldr	r4, [pc, #44]	; (800336c <LoopForever+0x16>)
  movs r3, #0
 800333e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003340:	e001      	b.n	8003346 <LoopFillZerobss>

08003342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003344:	3204      	adds	r2, #4

08003346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003348:	d3fb      	bcc.n	8003342 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800334a:	f7ff fe1b 	bl	8002f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800334e:	f006 fa03 	bl	8009758 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003352:	f7ff fc6b 	bl	8002c2c <main>

08003356 <LoopForever>:

LoopForever:
    b LoopForever
 8003356:	e7fe      	b.n	8003356 <LoopForever>
  ldr   r0, =_estack
 8003358:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800335c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003360:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003364:	08009838 	.word	0x08009838
  ldr r2, =_sbss
 8003368:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800336c:	200006a4 	.word	0x200006a4

08003370 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003370:	e7fe      	b.n	8003370 <ADC1_2_IRQHandler>

08003372 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800337c:	2003      	movs	r0, #3
 800337e:	f001 fb67 	bl	8004a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003382:	200f      	movs	r0, #15
 8003384:	f000 f80e 	bl	80033a4 <HAL_InitTick>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	71fb      	strb	r3, [r7, #7]
 8003392:	e001      	b.n	8003398 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003394:	f7ff fd54 	bl	8002e40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003398:	79fb      	ldrb	r3, [r7, #7]

}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80033b0:	4b16      	ldr	r3, [pc, #88]	; (800340c <HAL_InitTick+0x68>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d022      	beq.n	80033fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80033b8:	4b15      	ldr	r3, [pc, #84]	; (8003410 <HAL_InitTick+0x6c>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b13      	ldr	r3, [pc, #76]	; (800340c <HAL_InitTick+0x68>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033cc:	4618      	mov	r0, r3
 80033ce:	f001 fb72 	bl	8004ab6 <HAL_SYSTICK_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10f      	bne.n	80033f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b0f      	cmp	r3, #15
 80033dc:	d809      	bhi.n	80033f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033de:	2200      	movs	r2, #0
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033e6:	f001 fb3e 	bl	8004a66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033ea:	4a0a      	ldr	r2, [pc, #40]	; (8003414 <HAL_InitTick+0x70>)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	e007      	b.n	8003402 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
 80033f6:	e004      	b.n	8003402 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
 80033fc:	e001      	b.n	8003402 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003402:	7bfb      	ldrb	r3, [r7, #15]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20000008 	.word	0x20000008
 8003410:	20000000 	.word	0x20000000
 8003414:	20000004 	.word	0x20000004

08003418 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_IncTick+0x1c>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_IncTick+0x20>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4413      	add	r3, r2
 8003426:	4a03      	ldr	r2, [pc, #12]	; (8003434 <HAL_IncTick+0x1c>)
 8003428:	6013      	str	r3, [r2, #0]
}
 800342a:	bf00      	nop
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	20000558 	.word	0x20000558
 8003438:	20000008 	.word	0x20000008

0800343c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return uwTick;
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <HAL_GetTick+0x14>)
 8003442:	681b      	ldr	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	20000558 	.word	0x20000558

08003454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800345c:	f7ff ffee 	bl	800343c <HAL_GetTick>
 8003460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800346c:	d004      	beq.n	8003478 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_Delay+0x40>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4413      	add	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003478:	bf00      	nop
 800347a:	f7ff ffdf 	bl	800343c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	429a      	cmp	r2, r3
 8003488:	d8f7      	bhi.n	800347a <HAL_Delay+0x26>
  {
  }
}
 800348a:	bf00      	nop
 800348c:	bf00      	nop
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20000008 	.word	0x20000008

08003498 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	609a      	str	r2, [r3, #8]
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	609a      	str	r2, [r3, #8]
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3360      	adds	r3, #96	; 0x60
 8003512:	461a      	mov	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b08      	ldr	r3, [pc, #32]	; (8003544 <LL_ADC_SetOffset+0x44>)
 8003522:	4013      	ands	r3, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	4313      	orrs	r3, r2
 8003530:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003538:	bf00      	nop
 800353a:	371c      	adds	r7, #28
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	03fff000 	.word	0x03fff000

08003548 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3360      	adds	r3, #96	; 0x60
 8003556:	461a      	mov	r2, r3
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3360      	adds	r3, #96	; 0x60
 8003584:	461a      	mov	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	431a      	orrs	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800359e:	bf00      	nop
 80035a0:	371c      	adds	r7, #28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b087      	sub	sp, #28
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3360      	adds	r3, #96	; 0x60
 80035ba:	461a      	mov	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80035d4:	bf00      	nop
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3360      	adds	r3, #96	; 0x60
 80035f0:	461a      	mov	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	431a      	orrs	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	615a      	str	r2, [r3, #20]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003662:	b480      	push	{r7}
 8003664:	b087      	sub	sp, #28
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3330      	adds	r3, #48	; 0x30
 8003672:	461a      	mov	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	4413      	add	r3, r2
 8003680:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	211f      	movs	r1, #31
 800368e:	fa01 f303 	lsl.w	r3, r1, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	401a      	ands	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	0e9b      	lsrs	r3, r3, #26
 800369a:	f003 011f 	and.w	r1, r3, #31
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	fa01 f303 	lsl.w	r3, r1, r3
 80036a8:	431a      	orrs	r2, r3
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b087      	sub	sp, #28
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3314      	adds	r3, #20
 80036ca:	461a      	mov	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	0e5b      	lsrs	r3, r3, #25
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	4413      	add	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	0d1b      	lsrs	r3, r3, #20
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2107      	movs	r1, #7
 80036e8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	401a      	ands	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	0d1b      	lsrs	r3, r3, #20
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	431a      	orrs	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003704:	bf00      	nop
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a0f      	ldr	r2, [pc, #60]	; (800375c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d10a      	bne.n	800373a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003730:	431a      	orrs	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003738:	e00a      	b.n	8003750 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003746:	43db      	mvns	r3, r3
 8003748:	401a      	ands	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	407f0000 	.word	0x407f0000

08003760 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 031f 	and.w	r3, r3, #31
}
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800378c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6093      	str	r3, [r2, #8]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b4:	d101      	bne.n	80037ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80037d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003804:	d101      	bne.n	800380a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003828:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800382c:	f043 0201 	orr.w	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <LL_ADC_IsEnabled+0x18>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <LL_ADC_IsEnabled+0x1a>
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003876:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800387a:	f043 0204 	orr.w	r2, r3, #4
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d101      	bne.n	80038a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d101      	bne.n	80038cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038dc:	b590      	push	{r4, r7, lr}
 80038de:	b089      	sub	sp, #36	; 0x24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e1af      	b.n	8003c56 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7fd f837 	bl	8000978 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ff3f 	bl	80037a0 <LL_ADC_IsDeepPowerDownEnabled>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ff25 	bl	800377c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff ff5a 	bl	80037f0 <LL_ADC_IsInternalRegulatorEnabled>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d115      	bne.n	800396e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ff3e 	bl	80037c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800394c:	4b9f      	ldr	r3, [pc, #636]	; (8003bcc <HAL_ADC_Init+0x2f0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	099b      	lsrs	r3, r3, #6
 8003952:	4a9f      	ldr	r2, [pc, #636]	; (8003bd0 <HAL_ADC_Init+0x2f4>)
 8003954:	fba2 2303 	umull	r2, r3, r2, r3
 8003958:	099b      	lsrs	r3, r3, #6
 800395a:	3301      	adds	r3, #1
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003960:	e002      	b.n	8003968 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	3b01      	subs	r3, #1
 8003966:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f9      	bne.n	8003962 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff ff3c 	bl	80037f0 <LL_ADC_IsInternalRegulatorEnabled>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10d      	bne.n	800399a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003982:	f043 0210 	orr.w	r2, r3, #16
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398e:	f043 0201 	orr.w	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff ff75 	bl	800388e <LL_ADC_REG_IsConversionOngoing>
 80039a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f040 8148 	bne.w	8003c44 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f040 8144 	bne.w	8003c44 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80039c4:	f043 0202 	orr.w	r2, r3, #2
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ff35 	bl	8003840 <LL_ADC_IsEnabled>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d141      	bne.n	8003a60 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039e4:	d004      	beq.n	80039f0 <HAL_ADC_Init+0x114>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a7a      	ldr	r2, [pc, #488]	; (8003bd4 <HAL_ADC_Init+0x2f8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d10f      	bne.n	8003a10 <HAL_ADC_Init+0x134>
 80039f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80039f4:	f7ff ff24 	bl	8003840 <LL_ADC_IsEnabled>
 80039f8:	4604      	mov	r4, r0
 80039fa:	4876      	ldr	r0, [pc, #472]	; (8003bd4 <HAL_ADC_Init+0x2f8>)
 80039fc:	f7ff ff20 	bl	8003840 <LL_ADC_IsEnabled>
 8003a00:	4603      	mov	r3, r0
 8003a02:	4323      	orrs	r3, r4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e012      	b.n	8003a36 <HAL_ADC_Init+0x15a>
 8003a10:	4871      	ldr	r0, [pc, #452]	; (8003bd8 <HAL_ADC_Init+0x2fc>)
 8003a12:	f7ff ff15 	bl	8003840 <LL_ADC_IsEnabled>
 8003a16:	4604      	mov	r4, r0
 8003a18:	4870      	ldr	r0, [pc, #448]	; (8003bdc <HAL_ADC_Init+0x300>)
 8003a1a:	f7ff ff11 	bl	8003840 <LL_ADC_IsEnabled>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	431c      	orrs	r4, r3
 8003a22:	486f      	ldr	r0, [pc, #444]	; (8003be0 <HAL_ADC_Init+0x304>)
 8003a24:	f7ff ff0c 	bl	8003840 <LL_ADC_IsEnabled>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	4323      	orrs	r3, r4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bf0c      	ite	eq
 8003a30:	2301      	moveq	r3, #1
 8003a32:	2300      	movne	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d012      	beq.n	8003a60 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a42:	d004      	beq.n	8003a4e <HAL_ADC_Init+0x172>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a62      	ldr	r2, [pc, #392]	; (8003bd4 <HAL_ADC_Init+0x2f8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <HAL_ADC_Init+0x176>
 8003a4e:	4a65      	ldr	r2, [pc, #404]	; (8003be4 <HAL_ADC_Init+0x308>)
 8003a50:	e000      	b.n	8003a54 <HAL_ADC_Init+0x178>
 8003a52:	4a65      	ldr	r2, [pc, #404]	; (8003be8 <HAL_ADC_Init+0x30c>)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f7ff fd1c 	bl	8003498 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	7f5b      	ldrb	r3, [r3, #29]
 8003a64:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a6a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003a70:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003a76:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a7e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d106      	bne.n	8003a9c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	3b01      	subs	r3, #1
 8003a94:	045b      	lsls	r3, r3, #17
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d009      	beq.n	8003ab8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	4b4b      	ldr	r3, [pc, #300]	; (8003bec <HAL_ADC_Init+0x310>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	69b9      	ldr	r1, [r7, #24]
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff fed1 	bl	800388e <LL_ADC_REG_IsConversionOngoing>
 8003aec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff fede 	bl	80038b4 <LL_ADC_INJ_IsConversionOngoing>
 8003af8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d17f      	bne.n	8003c00 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d17c      	bne.n	8003c00 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b0a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b12:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b22:	f023 0302 	bic.w	r3, r3, #2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	69b9      	ldr	r1, [r7, #24]
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d017      	beq.n	8003b68 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b50:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6911      	ldr	r1, [r2, #16]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	430b      	orrs	r3, r1
 8003b62:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003b66:	e013      	b.n	8003b90 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b8c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d12a      	bne.n	8003bf0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ba4:	f023 0304 	bic.w	r3, r3, #4
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003bb0:	4311      	orrs	r1, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003bb6:	4311      	orrs	r1, r2
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0201 	orr.w	r2, r2, #1
 8003bc8:	611a      	str	r2, [r3, #16]
 8003bca:	e019      	b.n	8003c00 <HAL_ADC_Init+0x324>
 8003bcc:	20000000 	.word	0x20000000
 8003bd0:	053e2d63 	.word	0x053e2d63
 8003bd4:	50000100 	.word	0x50000100
 8003bd8:	50000400 	.word	0x50000400
 8003bdc:	50000500 	.word	0x50000500
 8003be0:	50000600 	.word	0x50000600
 8003be4:	50000300 	.word	0x50000300
 8003be8:	50000700 	.word	0x50000700
 8003bec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d10c      	bne.n	8003c22 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	f023 010f 	bic.w	r1, r3, #15
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	1e5a      	subs	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c20:	e007      	b.n	8003c32 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 020f 	bic.w	r2, r2, #15
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c36:	f023 0303 	bic.w	r3, r3, #3
 8003c3a:	f043 0201 	orr.w	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c42:	e007      	b.n	8003c54 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c48:	f043 0210 	orr.w	r2, r3, #16
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c54:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3724      	adds	r7, #36	; 0x24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd90      	pop	{r4, r7, pc}
 8003c5e:	bf00      	nop

08003c60 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c74:	d004      	beq.n	8003c80 <HAL_ADC_Start_DMA+0x20>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a5a      	ldr	r2, [pc, #360]	; (8003de4 <HAL_ADC_Start_DMA+0x184>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d101      	bne.n	8003c84 <HAL_ADC_Start_DMA+0x24>
 8003c80:	4b59      	ldr	r3, [pc, #356]	; (8003de8 <HAL_ADC_Start_DMA+0x188>)
 8003c82:	e000      	b.n	8003c86 <HAL_ADC_Start_DMA+0x26>
 8003c84:	4b59      	ldr	r3, [pc, #356]	; (8003dec <HAL_ADC_Start_DMA+0x18c>)
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff fd6a 	bl	8003760 <LL_ADC_GetMultimode>
 8003c8c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fdfb 	bl	800388e <LL_ADC_REG_IsConversionOngoing>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f040 809b 	bne.w	8003dd6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_ADC_Start_DMA+0x4e>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e096      	b.n	8003ddc <HAL_ADC_Start_DMA+0x17c>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a4d      	ldr	r2, [pc, #308]	; (8003df0 <HAL_ADC_Start_DMA+0x190>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d008      	beq.n	8003cd2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b05      	cmp	r3, #5
 8003cca:	d002      	beq.n	8003cd2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	2b09      	cmp	r3, #9
 8003cd0:	d17a      	bne.n	8003dc8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fcf6 	bl	80046c4 <ADC_Enable>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d16d      	bne.n	8003dbe <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a3a      	ldr	r2, [pc, #232]	; (8003de4 <HAL_ADC_Start_DMA+0x184>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d009      	beq.n	8003d14 <HAL_ADC_Start_DMA+0xb4>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a3b      	ldr	r2, [pc, #236]	; (8003df4 <HAL_ADC_Start_DMA+0x194>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d002      	beq.n	8003d10 <HAL_ADC_Start_DMA+0xb0>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	e003      	b.n	8003d18 <HAL_ADC_Start_DMA+0xb8>
 8003d10:	4b39      	ldr	r3, [pc, #228]	; (8003df8 <HAL_ADC_Start_DMA+0x198>)
 8003d12:	e001      	b.n	8003d18 <HAL_ADC_Start_DMA+0xb8>
 8003d14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d002      	beq.n	8003d26 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d105      	bne.n	8003d32 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d006      	beq.n	8003d4c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d42:	f023 0206 	bic.w	r2, r3, #6
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	661a      	str	r2, [r3, #96]	; 0x60
 8003d4a:	e002      	b.n	8003d52 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d56:	4a29      	ldr	r2, [pc, #164]	; (8003dfc <HAL_ADC_Start_DMA+0x19c>)
 8003d58:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5e:	4a28      	ldr	r2, [pc, #160]	; (8003e00 <HAL_ADC_Start_DMA+0x1a0>)
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d66:	4a27      	ldr	r2, [pc, #156]	; (8003e04 <HAL_ADC_Start_DMA+0x1a4>)
 8003d68:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	221c      	movs	r2, #28
 8003d70:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0210 	orr.w	r2, r2, #16
 8003d88:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0201 	orr.w	r2, r2, #1
 8003d98:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3340      	adds	r3, #64	; 0x40
 8003da4:	4619      	mov	r1, r3
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f000 ff39 	bl	8004c20 <HAL_DMA_Start_IT>
 8003dae:	4603      	mov	r3, r0
 8003db0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fd55 	bl	8003866 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003dbc:	e00d      	b.n	8003dda <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003dc6:	e008      	b.n	8003dda <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003dd4:	e001      	b.n	8003dda <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	50000100 	.word	0x50000100
 8003de8:	50000300 	.word	0x50000300
 8003dec:	50000700 	.word	0x50000700
 8003df0:	50000600 	.word	0x50000600
 8003df4:	50000500 	.word	0x50000500
 8003df8:	50000400 	.word	0x50000400
 8003dfc:	08004789 	.word	0x08004789
 8003e00:	08004861 	.word	0x08004861
 8003e04:	0800487d 	.word	0x0800487d

08003e08 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b0b6      	sub	sp, #216	; 0xd8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d102      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x24>
 8003e62:	2302      	movs	r3, #2
 8003e64:	f000 bc13 	b.w	800468e <HAL_ADC_ConfigChannel+0x84a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fd0a 	bl	800388e <LL_ADC_REG_IsConversionOngoing>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f040 83f3 	bne.w	8004668 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6859      	ldr	r1, [r3, #4]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f7ff fbe7 	bl	8003662 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff fcf8 	bl	800388e <LL_ADC_REG_IsConversionOngoing>
 8003e9e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fd04 	bl	80038b4 <LL_ADC_INJ_IsConversionOngoing>
 8003eac:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003eb0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f040 81d9 	bne.w	800426c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003eba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f040 81d4 	bne.w	800426c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ecc:	d10f      	bne.n	8003eee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f7ff fbee 	bl	80036ba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff fb95 	bl	8003616 <LL_ADC_SetSamplingTimeCommonConfig>
 8003eec:	e00e      	b.n	8003f0c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6819      	ldr	r1, [r3, #0]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f7ff fbdd 	bl	80036ba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2100      	movs	r1, #0
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff fb85 	bl	8003616 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	08db      	lsrs	r3, r3, #3
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d022      	beq.n	8003f74 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6919      	ldr	r1, [r3, #16]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f3e:	f7ff fadf 	bl	8003500 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6919      	ldr	r1, [r3, #16]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f7ff fb2b 	bl	80035aa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	6919      	ldr	r1, [r3, #16]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	7f1b      	ldrb	r3, [r3, #28]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d102      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x126>
 8003f64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f68:	e000      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x128>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f7ff fb37 	bl	80035e0 <LL_ADC_SetOffsetSaturation>
 8003f72:	e17b      	b.n	800426c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2100      	movs	r1, #0
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fae4 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x15c>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff fad9 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003f96:	4603      	mov	r3, r0
 8003f98:	0e9b      	lsrs	r3, r3, #26
 8003f9a:	f003 021f 	and.w	r2, r3, #31
 8003f9e:	e01e      	b.n	8003fde <HAL_ADC_ConfigChannel+0x19a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff face 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fb6:	fa93 f3a3 	rbit	r3, r3
 8003fba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003fc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003fce:	2320      	movs	r3, #32
 8003fd0:	e004      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003fd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fd6:	fab3 f383 	clz	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d105      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x1b2>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	0e9b      	lsrs	r3, r3, #26
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	e018      	b.n	8004028 <HAL_ADC_ConfigChannel+0x1e4>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004002:	fa93 f3a3 	rbit	r3, r3
 8004006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800400a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800400e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004012:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800401a:	2320      	movs	r3, #32
 800401c:	e004      	b.n	8004028 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800401e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004022:	fab3 f383 	clz	r3, r3
 8004026:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004028:	429a      	cmp	r2, r3
 800402a:	d106      	bne.n	800403a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2200      	movs	r2, #0
 8004032:	2100      	movs	r1, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fa9d 	bl	8003574 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2101      	movs	r1, #1
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff fa81 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8004046:	4603      	mov	r3, r0
 8004048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <HAL_ADC_ConfigChannel+0x222>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2101      	movs	r1, #1
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fa76 	bl	8003548 <LL_ADC_GetOffsetChannel>
 800405c:	4603      	mov	r3, r0
 800405e:	0e9b      	lsrs	r3, r3, #26
 8004060:	f003 021f 	and.w	r2, r3, #31
 8004064:	e01e      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x260>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2101      	movs	r1, #1
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fa6b 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8004072:	4603      	mov	r3, r0
 8004074:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004078:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800407c:	fa93 f3a3 	rbit	r3, r3
 8004080:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004084:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004088:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800408c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004094:	2320      	movs	r3, #32
 8004096:	e004      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004098:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800409c:	fab3 f383 	clz	r3, r3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d105      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x278>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	0e9b      	lsrs	r3, r3, #26
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	e018      	b.n	80040ee <HAL_ADC_ConfigChannel+0x2aa>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040c8:	fa93 f3a3 	rbit	r3, r3
 80040cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80040d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80040d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80040d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80040e0:	2320      	movs	r3, #32
 80040e2:	e004      	b.n	80040ee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80040e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040e8:	fab3 f383 	clz	r3, r3
 80040ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d106      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2200      	movs	r2, #0
 80040f8:	2101      	movs	r1, #1
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fa3a 	bl	8003574 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2102      	movs	r1, #2
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff fa1e 	bl	8003548 <LL_ADC_GetOffsetChannel>
 800410c:	4603      	mov	r3, r0
 800410e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <HAL_ADC_ConfigChannel+0x2e8>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2102      	movs	r1, #2
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff fa13 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8004122:	4603      	mov	r3, r0
 8004124:	0e9b      	lsrs	r3, r3, #26
 8004126:	f003 021f 	and.w	r2, r3, #31
 800412a:	e01e      	b.n	800416a <HAL_ADC_ConfigChannel+0x326>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2102      	movs	r1, #2
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff fa08 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8004138:	4603      	mov	r3, r0
 800413a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004142:	fa93 f3a3 	rbit	r3, r3
 8004146:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800414a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800414e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004152:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800415a:	2320      	movs	r3, #32
 800415c:	e004      	b.n	8004168 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800415e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004162:	fab3 f383 	clz	r3, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004172:	2b00      	cmp	r3, #0
 8004174:	d105      	bne.n	8004182 <HAL_ADC_ConfigChannel+0x33e>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	0e9b      	lsrs	r3, r3, #26
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	e016      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x36c>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800418e:	fa93 f3a3 	rbit	r3, r3
 8004192:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004194:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004196:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800419a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80041a2:	2320      	movs	r3, #32
 80041a4:	e004      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80041a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041aa:	fab3 f383 	clz	r3, r3
 80041ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d106      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2200      	movs	r2, #0
 80041ba:	2102      	movs	r1, #2
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff f9d9 	bl	8003574 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2103      	movs	r1, #3
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff f9bd 	bl	8003548 <LL_ADC_GetOffsetChannel>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x3aa>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2103      	movs	r1, #3
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff f9b2 	bl	8003548 <LL_ADC_GetOffsetChannel>
 80041e4:	4603      	mov	r3, r0
 80041e6:	0e9b      	lsrs	r3, r3, #26
 80041e8:	f003 021f 	and.w	r2, r3, #31
 80041ec:	e017      	b.n	800421e <HAL_ADC_ConfigChannel+0x3da>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2103      	movs	r1, #3
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff f9a7 	bl	8003548 <LL_ADC_GetOffsetChannel>
 80041fa:	4603      	mov	r3, r0
 80041fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004200:	fa93 f3a3 	rbit	r3, r3
 8004204:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004208:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800420a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004210:	2320      	movs	r3, #32
 8004212:	e003      	b.n	800421c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004216:	fab3 f383 	clz	r3, r3
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004226:	2b00      	cmp	r3, #0
 8004228:	d105      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x3f2>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	0e9b      	lsrs	r3, r3, #26
 8004230:	f003 031f 	and.w	r3, r3, #31
 8004234:	e011      	b.n	800425a <HAL_ADC_ConfigChannel+0x416>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800423e:	fa93 f3a3 	rbit	r3, r3
 8004242:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004246:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800424e:	2320      	movs	r3, #32
 8004250:	e003      	b.n	800425a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004254:	fab3 f383 	clz	r3, r3
 8004258:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800425a:	429a      	cmp	r2, r3
 800425c:	d106      	bne.n	800426c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2200      	movs	r2, #0
 8004264:	2103      	movs	r1, #3
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff f984 	bl	8003574 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fae5 	bl	8003840 <LL_ADC_IsEnabled>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	f040 813d 	bne.w	80044f8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	6819      	ldr	r1, [r3, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	461a      	mov	r2, r3
 800428c:	f7ff fa40 	bl	8003710 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4aa2      	ldr	r2, [pc, #648]	; (8004520 <HAL_ADC_ConfigChannel+0x6dc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	f040 812e 	bne.w	80044f8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10b      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x480>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	0e9b      	lsrs	r3, r3, #26
 80042b2:	3301      	adds	r3, #1
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	2b09      	cmp	r3, #9
 80042ba:	bf94      	ite	ls
 80042bc:	2301      	movls	r3, #1
 80042be:	2300      	movhi	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	e019      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x4b4>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042cc:	fa93 f3a3 	rbit	r3, r3
 80042d0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80042d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042d4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80042d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80042dc:	2320      	movs	r3, #32
 80042de:	e003      	b.n	80042e8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80042e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042e2:	fab3 f383 	clz	r3, r3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	3301      	adds	r3, #1
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	2b09      	cmp	r3, #9
 80042f0:	bf94      	ite	ls
 80042f2:	2301      	movls	r3, #1
 80042f4:	2300      	movhi	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d079      	beq.n	80043f0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004304:	2b00      	cmp	r3, #0
 8004306:	d107      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x4d4>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	0e9b      	lsrs	r3, r3, #26
 800430e:	3301      	adds	r3, #1
 8004310:	069b      	lsls	r3, r3, #26
 8004312:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004316:	e015      	b.n	8004344 <HAL_ADC_ConfigChannel+0x500>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004320:	fa93 f3a3 	rbit	r3, r3
 8004324:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004328:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800432a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004330:	2320      	movs	r3, #32
 8004332:	e003      	b.n	800433c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004336:	fab3 f383 	clz	r3, r3
 800433a:	b2db      	uxtb	r3, r3
 800433c:	3301      	adds	r3, #1
 800433e:	069b      	lsls	r3, r3, #26
 8004340:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x520>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	0e9b      	lsrs	r3, r3, #26
 8004356:	3301      	adds	r3, #1
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	2101      	movs	r1, #1
 800435e:	fa01 f303 	lsl.w	r3, r1, r3
 8004362:	e017      	b.n	8004394 <HAL_ADC_ConfigChannel+0x550>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800436c:	fa93 f3a3 	rbit	r3, r3
 8004370:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004374:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800437c:	2320      	movs	r3, #32
 800437e:	e003      	b.n	8004388 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004382:	fab3 f383 	clz	r3, r3
 8004386:	b2db      	uxtb	r3, r3
 8004388:	3301      	adds	r3, #1
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	2101      	movs	r1, #1
 8004390:	fa01 f303 	lsl.w	r3, r1, r3
 8004394:	ea42 0103 	orr.w	r1, r2, r3
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x576>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	0e9b      	lsrs	r3, r3, #26
 80043aa:	3301      	adds	r3, #1
 80043ac:	f003 021f 	and.w	r2, r3, #31
 80043b0:	4613      	mov	r3, r2
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	4413      	add	r3, r2
 80043b6:	051b      	lsls	r3, r3, #20
 80043b8:	e018      	b.n	80043ec <HAL_ADC_ConfigChannel+0x5a8>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c2:	fa93 f3a3 	rbit	r3, r3
 80043c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80043c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80043cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80043d2:	2320      	movs	r3, #32
 80043d4:	e003      	b.n	80043de <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80043d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d8:	fab3 f383 	clz	r3, r3
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	3301      	adds	r3, #1
 80043e0:	f003 021f 	and.w	r2, r3, #31
 80043e4:	4613      	mov	r3, r2
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	4413      	add	r3, r2
 80043ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043ec:	430b      	orrs	r3, r1
 80043ee:	e07e      	b.n	80044ee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d107      	bne.n	800440c <HAL_ADC_ConfigChannel+0x5c8>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	0e9b      	lsrs	r3, r3, #26
 8004402:	3301      	adds	r3, #1
 8004404:	069b      	lsls	r3, r3, #26
 8004406:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800440a:	e015      	b.n	8004438 <HAL_ADC_ConfigChannel+0x5f4>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	fa93 f3a3 	rbit	r3, r3
 8004418:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800441a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004424:	2320      	movs	r3, #32
 8004426:	e003      	b.n	8004430 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	fab3 f383 	clz	r3, r3
 800442e:	b2db      	uxtb	r3, r3
 8004430:	3301      	adds	r3, #1
 8004432:	069b      	lsls	r3, r3, #26
 8004434:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004440:	2b00      	cmp	r3, #0
 8004442:	d109      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x614>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	0e9b      	lsrs	r3, r3, #26
 800444a:	3301      	adds	r3, #1
 800444c:	f003 031f 	and.w	r3, r3, #31
 8004450:	2101      	movs	r1, #1
 8004452:	fa01 f303 	lsl.w	r3, r1, r3
 8004456:	e017      	b.n	8004488 <HAL_ADC_ConfigChannel+0x644>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	fa93 f3a3 	rbit	r3, r3
 8004464:	61fb      	str	r3, [r7, #28]
  return result;
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004470:	2320      	movs	r3, #32
 8004472:	e003      	b.n	800447c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	fab3 f383 	clz	r3, r3
 800447a:	b2db      	uxtb	r3, r3
 800447c:	3301      	adds	r3, #1
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	2101      	movs	r1, #1
 8004484:	fa01 f303 	lsl.w	r3, r1, r3
 8004488:	ea42 0103 	orr.w	r1, r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10d      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x670>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	0e9b      	lsrs	r3, r3, #26
 800449e:	3301      	adds	r3, #1
 80044a0:	f003 021f 	and.w	r2, r3, #31
 80044a4:	4613      	mov	r3, r2
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	4413      	add	r3, r2
 80044aa:	3b1e      	subs	r3, #30
 80044ac:	051b      	lsls	r3, r3, #20
 80044ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044b2:	e01b      	b.n	80044ec <HAL_ADC_ConfigChannel+0x6a8>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	fa93 f3a3 	rbit	r3, r3
 80044c0:	613b      	str	r3, [r7, #16]
  return result;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80044cc:	2320      	movs	r3, #32
 80044ce:	e003      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	fab3 f383 	clz	r3, r3
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	3301      	adds	r3, #1
 80044da:	f003 021f 	and.w	r2, r3, #31
 80044de:	4613      	mov	r3, r2
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	4413      	add	r3, r2
 80044e4:	3b1e      	subs	r3, #30
 80044e6:	051b      	lsls	r3, r3, #20
 80044e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044ec:	430b      	orrs	r3, r1
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	6892      	ldr	r2, [r2, #8]
 80044f2:	4619      	mov	r1, r3
 80044f4:	f7ff f8e1 	bl	80036ba <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4b09      	ldr	r3, [pc, #36]	; (8004524 <HAL_ADC_ConfigChannel+0x6e0>)
 80044fe:	4013      	ands	r3, r2
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80be 	beq.w	8004682 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800450e:	d004      	beq.n	800451a <HAL_ADC_ConfigChannel+0x6d6>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a04      	ldr	r2, [pc, #16]	; (8004528 <HAL_ADC_ConfigChannel+0x6e4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d10a      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x6ec>
 800451a:	4b04      	ldr	r3, [pc, #16]	; (800452c <HAL_ADC_ConfigChannel+0x6e8>)
 800451c:	e009      	b.n	8004532 <HAL_ADC_ConfigChannel+0x6ee>
 800451e:	bf00      	nop
 8004520:	407f0000 	.word	0x407f0000
 8004524:	80080000 	.word	0x80080000
 8004528:	50000100 	.word	0x50000100
 800452c:	50000300 	.word	0x50000300
 8004530:	4b59      	ldr	r3, [pc, #356]	; (8004698 <HAL_ADC_ConfigChannel+0x854>)
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe ffd6 	bl	80034e4 <LL_ADC_GetCommonPathInternalCh>
 8004538:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a56      	ldr	r2, [pc, #344]	; (800469c <HAL_ADC_ConfigChannel+0x858>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d004      	beq.n	8004550 <HAL_ADC_ConfigChannel+0x70c>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a55      	ldr	r2, [pc, #340]	; (80046a0 <HAL_ADC_ConfigChannel+0x85c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d13a      	bne.n	80045c6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004550:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d134      	bne.n	80045c6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004564:	d005      	beq.n	8004572 <HAL_ADC_ConfigChannel+0x72e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a4e      	ldr	r2, [pc, #312]	; (80046a4 <HAL_ADC_ConfigChannel+0x860>)
 800456c:	4293      	cmp	r3, r2
 800456e:	f040 8085 	bne.w	800467c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800457a:	d004      	beq.n	8004586 <HAL_ADC_ConfigChannel+0x742>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a49      	ldr	r2, [pc, #292]	; (80046a8 <HAL_ADC_ConfigChannel+0x864>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d101      	bne.n	800458a <HAL_ADC_ConfigChannel+0x746>
 8004586:	4a49      	ldr	r2, [pc, #292]	; (80046ac <HAL_ADC_ConfigChannel+0x868>)
 8004588:	e000      	b.n	800458c <HAL_ADC_ConfigChannel+0x748>
 800458a:	4a43      	ldr	r2, [pc, #268]	; (8004698 <HAL_ADC_ConfigChannel+0x854>)
 800458c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004590:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f7fe ff91 	bl	80034be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800459c:	4b44      	ldr	r3, [pc, #272]	; (80046b0 <HAL_ADC_ConfigChannel+0x86c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	099b      	lsrs	r3, r3, #6
 80045a2:	4a44      	ldr	r2, [pc, #272]	; (80046b4 <HAL_ADC_ConfigChannel+0x870>)
 80045a4:	fba2 2303 	umull	r2, r3, r2, r3
 80045a8:	099b      	lsrs	r3, r3, #6
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	4613      	mov	r3, r2
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045b6:	e002      	b.n	80045be <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f9      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045c4:	e05a      	b.n	800467c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a3b      	ldr	r2, [pc, #236]	; (80046b8 <HAL_ADC_ConfigChannel+0x874>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d125      	bne.n	800461c <HAL_ADC_ConfigChannel+0x7d8>
 80045d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d11f      	bne.n	800461c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a31      	ldr	r2, [pc, #196]	; (80046a8 <HAL_ADC_ConfigChannel+0x864>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d104      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x7ac>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a34      	ldr	r2, [pc, #208]	; (80046bc <HAL_ADC_ConfigChannel+0x878>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d047      	beq.n	8004680 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045f8:	d004      	beq.n	8004604 <HAL_ADC_ConfigChannel+0x7c0>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a2a      	ldr	r2, [pc, #168]	; (80046a8 <HAL_ADC_ConfigChannel+0x864>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d101      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x7c4>
 8004604:	4a29      	ldr	r2, [pc, #164]	; (80046ac <HAL_ADC_ConfigChannel+0x868>)
 8004606:	e000      	b.n	800460a <HAL_ADC_ConfigChannel+0x7c6>
 8004608:	4a23      	ldr	r2, [pc, #140]	; (8004698 <HAL_ADC_ConfigChannel+0x854>)
 800460a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800460e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004612:	4619      	mov	r1, r3
 8004614:	4610      	mov	r0, r2
 8004616:	f7fe ff52 	bl	80034be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800461a:	e031      	b.n	8004680 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a27      	ldr	r2, [pc, #156]	; (80046c0 <HAL_ADC_ConfigChannel+0x87c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d12d      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004626:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800462a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d127      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a1c      	ldr	r2, [pc, #112]	; (80046a8 <HAL_ADC_ConfigChannel+0x864>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d022      	beq.n	8004682 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004644:	d004      	beq.n	8004650 <HAL_ADC_ConfigChannel+0x80c>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a17      	ldr	r2, [pc, #92]	; (80046a8 <HAL_ADC_ConfigChannel+0x864>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d101      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x810>
 8004650:	4a16      	ldr	r2, [pc, #88]	; (80046ac <HAL_ADC_ConfigChannel+0x868>)
 8004652:	e000      	b.n	8004656 <HAL_ADC_ConfigChannel+0x812>
 8004654:	4a10      	ldr	r2, [pc, #64]	; (8004698 <HAL_ADC_ConfigChannel+0x854>)
 8004656:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800465a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f7fe ff2c 	bl	80034be <LL_ADC_SetCommonPathInternalCh>
 8004666:	e00c      	b.n	8004682 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466c:	f043 0220 	orr.w	r2, r3, #32
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800467a:	e002      	b.n	8004682 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800467c:	bf00      	nop
 800467e:	e000      	b.n	8004682 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004680:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800468a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800468e:	4618      	mov	r0, r3
 8004690:	37d8      	adds	r7, #216	; 0xd8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	50000700 	.word	0x50000700
 800469c:	c3210000 	.word	0xc3210000
 80046a0:	90c00010 	.word	0x90c00010
 80046a4:	50000600 	.word	0x50000600
 80046a8:	50000100 	.word	0x50000100
 80046ac:	50000300 	.word	0x50000300
 80046b0:	20000000 	.word	0x20000000
 80046b4:	053e2d63 	.word	0x053e2d63
 80046b8:	c7520000 	.word	0xc7520000
 80046bc:	50000500 	.word	0x50000500
 80046c0:	cb840000 	.word	0xcb840000

080046c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff f8b5 	bl	8003840 <LL_ADC_IsEnabled>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d14d      	bne.n	8004778 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	4b28      	ldr	r3, [pc, #160]	; (8004784 <ADC_Enable+0xc0>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00d      	beq.n	8004706 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ee:	f043 0210 	orr.w	r2, r3, #16
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046fa:	f043 0201 	orr.w	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e039      	b.n	800477a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff f884 	bl	8003818 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004710:	f7fe fe94 	bl	800343c <HAL_GetTick>
 8004714:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004716:	e028      	b.n	800476a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff f88f 	bl	8003840 <LL_ADC_IsEnabled>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d104      	bne.n	8004732 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff f873 	bl	8003818 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004732:	f7fe fe83 	bl	800343c <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d914      	bls.n	800476a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b01      	cmp	r3, #1
 800474c:	d00d      	beq.n	800476a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004752:	f043 0210 	orr.w	r2, r3, #16
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475e:	f043 0201 	orr.w	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e007      	b.n	800477a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b01      	cmp	r3, #1
 8004776:	d1cf      	bne.n	8004718 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	8000003f 	.word	0x8000003f

08004788 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d14b      	bne.n	800483a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d021      	beq.n	8004800 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fe ff3b 	bl	800363c <LL_ADC_REG_IsTriggerSourceSWStart>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d032      	beq.n	8004832 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d12b      	bne.n	8004832 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d11f      	bne.n	8004832 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f6:	f043 0201 	orr.w	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80047fe:	e018      	b.n	8004832 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d111      	bne.n	8004832 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d105      	bne.n	8004832 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482a:	f043 0201 	orr.w	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f7ff fae8 	bl	8003e08 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004838:	e00e      	b.n	8004858 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f7ff faf2 	bl	8003e30 <HAL_ADC_ErrorCallback>
}
 800484c:	e004      	b.n	8004858 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	4798      	blx	r3
}
 8004858:	bf00      	nop
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7ff fad4 	bl	8003e1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004874:	bf00      	nop
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489a:	f043 0204 	orr.w	r2, r3, #4
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f7ff fac4 	bl	8003e30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048c0:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <__NVIC_SetPriorityGrouping+0x44>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048cc:	4013      	ands	r3, r2
 80048ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048e2:	4a04      	ldr	r2, [pc, #16]	; (80048f4 <__NVIC_SetPriorityGrouping+0x44>)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	60d3      	str	r3, [r2, #12]
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	e000ed00 	.word	0xe000ed00

080048f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048fc:	4b04      	ldr	r3, [pc, #16]	; (8004910 <__NVIC_GetPriorityGrouping+0x18>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	0a1b      	lsrs	r3, r3, #8
 8004902:	f003 0307 	and.w	r3, r3, #7
}
 8004906:	4618      	mov	r0, r3
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	e000ed00 	.word	0xe000ed00

08004914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	4603      	mov	r3, r0
 800491c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800491e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004922:	2b00      	cmp	r3, #0
 8004924:	db0b      	blt.n	800493e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004926:	79fb      	ldrb	r3, [r7, #7]
 8004928:	f003 021f 	and.w	r2, r3, #31
 800492c:	4907      	ldr	r1, [pc, #28]	; (800494c <__NVIC_EnableIRQ+0x38>)
 800492e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	2001      	movs	r0, #1
 8004936:	fa00 f202 	lsl.w	r2, r0, r2
 800493a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	e000e100 	.word	0xe000e100

08004950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	4603      	mov	r3, r0
 8004958:	6039      	str	r1, [r7, #0]
 800495a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800495c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004960:	2b00      	cmp	r3, #0
 8004962:	db0a      	blt.n	800497a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	b2da      	uxtb	r2, r3
 8004968:	490c      	ldr	r1, [pc, #48]	; (800499c <__NVIC_SetPriority+0x4c>)
 800496a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496e:	0112      	lsls	r2, r2, #4
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	440b      	add	r3, r1
 8004974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004978:	e00a      	b.n	8004990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	b2da      	uxtb	r2, r3
 800497e:	4908      	ldr	r1, [pc, #32]	; (80049a0 <__NVIC_SetPriority+0x50>)
 8004980:	79fb      	ldrb	r3, [r7, #7]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	3b04      	subs	r3, #4
 8004988:	0112      	lsls	r2, r2, #4
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	440b      	add	r3, r1
 800498e:	761a      	strb	r2, [r3, #24]
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	e000e100 	.word	0xe000e100
 80049a0:	e000ed00 	.word	0xe000ed00

080049a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b089      	sub	sp, #36	; 0x24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f1c3 0307 	rsb	r3, r3, #7
 80049be:	2b04      	cmp	r3, #4
 80049c0:	bf28      	it	cs
 80049c2:	2304      	movcs	r3, #4
 80049c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	3304      	adds	r3, #4
 80049ca:	2b06      	cmp	r3, #6
 80049cc:	d902      	bls.n	80049d4 <NVIC_EncodePriority+0x30>
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3b03      	subs	r3, #3
 80049d2:	e000      	b.n	80049d6 <NVIC_EncodePriority+0x32>
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	43da      	mvns	r2, r3
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	401a      	ands	r2, r3
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	fa01 f303 	lsl.w	r3, r1, r3
 80049f6:	43d9      	mvns	r1, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049fc:	4313      	orrs	r3, r2
         );
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3724      	adds	r7, #36	; 0x24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
	...

08004a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a1c:	d301      	bcc.n	8004a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e00f      	b.n	8004a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a22:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <SysTick_Config+0x40>)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a2a:	210f      	movs	r1, #15
 8004a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a30:	f7ff ff8e 	bl	8004950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <SysTick_Config+0x40>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a3a:	4b04      	ldr	r3, [pc, #16]	; (8004a4c <SysTick_Config+0x40>)
 8004a3c:	2207      	movs	r2, #7
 8004a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	e000e010 	.word	0xe000e010

08004a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff ff29 	bl	80048b0 <__NVIC_SetPriorityGrouping>
}
 8004a5e:	bf00      	nop
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b086      	sub	sp, #24
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
 8004a72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a74:	f7ff ff40 	bl	80048f8 <__NVIC_GetPriorityGrouping>
 8004a78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	6978      	ldr	r0, [r7, #20]
 8004a80:	f7ff ff90 	bl	80049a4 <NVIC_EncodePriority>
 8004a84:	4602      	mov	r2, r0
 8004a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff ff5f 	bl	8004950 <__NVIC_SetPriority>
}
 8004a92:	bf00      	nop
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff ff33 	bl	8004914 <__NVIC_EnableIRQ>
}
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff ffa4 	bl	8004a0c <SysTick_Config>
 8004ac4:	4603      	mov	r3, r0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e08d      	b.n	8004bfe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	4b47      	ldr	r3, [pc, #284]	; (8004c08 <HAL_DMA_Init+0x138>)
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d80f      	bhi.n	8004b0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	4b45      	ldr	r3, [pc, #276]	; (8004c0c <HAL_DMA_Init+0x13c>)
 8004af6:	4413      	add	r3, r2
 8004af8:	4a45      	ldr	r2, [pc, #276]	; (8004c10 <HAL_DMA_Init+0x140>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	009a      	lsls	r2, r3, #2
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a42      	ldr	r2, [pc, #264]	; (8004c14 <HAL_DMA_Init+0x144>)
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40
 8004b0c:	e00e      	b.n	8004b2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	4b40      	ldr	r3, [pc, #256]	; (8004c18 <HAL_DMA_Init+0x148>)
 8004b16:	4413      	add	r3, r2
 8004b18:	4a3d      	ldr	r2, [pc, #244]	; (8004c10 <HAL_DMA_Init+0x140>)
 8004b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1e:	091b      	lsrs	r3, r3, #4
 8004b20:	009a      	lsls	r2, r3, #2
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a3c      	ldr	r2, [pc, #240]	; (8004c1c <HAL_DMA_Init+0x14c>)
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f9b6 	bl	8004ef0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b8c:	d102      	bne.n	8004b94 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ba8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d010      	beq.n	8004bd4 <HAL_DMA_Init+0x104>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d80c      	bhi.n	8004bd4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f9d6 	bl	8004f6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004bd0:	605a      	str	r2, [r3, #4]
 8004bd2:	e008      	b.n	8004be6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40020407 	.word	0x40020407
 8004c0c:	bffdfff8 	.word	0xbffdfff8
 8004c10:	cccccccd 	.word	0xcccccccd
 8004c14:	40020000 	.word	0x40020000
 8004c18:	bffdfbf8 	.word	0xbffdfbf8
 8004c1c:	40020400 	.word	0x40020400

08004c20 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_DMA_Start_IT+0x20>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e066      	b.n	8004d0e <HAL_DMA_Start_IT+0xee>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d155      	bne.n	8004d00 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f8fb 	bl	8004e74 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d008      	beq.n	8004c98 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 020e 	orr.w	r2, r2, #14
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	e00f      	b.n	8004cb8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0204 	bic.w	r2, r2, #4
 8004ca6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 020a 	orr.w	r2, r2, #10
 8004cb6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cd4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d007      	beq.n	8004cee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	e005      	b.n	8004d0c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	2204      	movs	r2, #4
 8004d38:	409a      	lsls	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d026      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x7a>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d021      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d107      	bne.n	8004d6a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0204 	bic.w	r2, r2, #4
 8004d68:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6e:	f003 021f 	and.w	r2, r3, #31
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	2104      	movs	r1, #4
 8004d78:	fa01 f202 	lsl.w	r2, r1, r2
 8004d7c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d071      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004d8e:	e06c      	b.n	8004e6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d94:	f003 031f 	and.w	r3, r3, #31
 8004d98:	2202      	movs	r2, #2
 8004d9a:	409a      	lsls	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d02e      	beq.n	8004e02 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d029      	beq.n	8004e02 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10b      	bne.n	8004dd4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 020a 	bic.w	r2, r2, #10
 8004dca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd8:	f003 021f 	and.w	r2, r3, #31
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	2102      	movs	r1, #2
 8004de2:	fa01 f202 	lsl.w	r2, r1, r2
 8004de6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d038      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004e00:	e033      	b.n	8004e6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	f003 031f 	and.w	r3, r3, #31
 8004e0a:	2208      	movs	r2, #8
 8004e0c:	409a      	lsls	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d02a      	beq.n	8004e6c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d025      	beq.n	8004e6c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 020e 	bic.w	r2, r2, #14
 8004e2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e34:	f003 021f 	and.w	r2, r3, #31
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d004      	beq.n	8004e6c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004e6a:	bf00      	nop
 8004e6c:	bf00      	nop
}
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e8a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d004      	beq.n	8004e9e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e9c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	f003 021f 	and.w	r2, r3, #31
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	2101      	movs	r1, #1
 8004eac:	fa01 f202 	lsl.w	r2, r1, r2
 8004eb0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	2b10      	cmp	r3, #16
 8004ec0:	d108      	bne.n	8004ed4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ed2:	e007      	b.n	8004ee4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	60da      	str	r2, [r3, #12]
}
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	4b16      	ldr	r3, [pc, #88]	; (8004f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d802      	bhi.n	8004f0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004f04:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	e001      	b.n	8004f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004f0a:	4b15      	ldr	r3, [pc, #84]	; (8004f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004f0c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	3b08      	subs	r3, #8
 8004f1a:	4a12      	ldr	r2, [pc, #72]	; (8004f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f20:	091b      	lsrs	r3, r3, #4
 8004f22:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f28:	089b      	lsrs	r3, r3, #2
 8004f2a:	009a      	lsls	r2, r3, #2
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	4413      	add	r3, r2
 8004f30:	461a      	mov	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a0b      	ldr	r2, [pc, #44]	; (8004f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004f3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 031f 	and.w	r3, r3, #31
 8004f42:	2201      	movs	r2, #1
 8004f44:	409a      	lsls	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40020407 	.word	0x40020407
 8004f5c:	40020800 	.word	0x40020800
 8004f60:	40020820 	.word	0x40020820
 8004f64:	cccccccd 	.word	0xcccccccd
 8004f68:	40020880 	.word	0x40020880

08004f6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004f80:	4413      	add	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	461a      	mov	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004f8e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	f003 031f 	and.w	r3, r3, #31
 8004f98:	2201      	movs	r2, #1
 8004f9a:	409a      	lsls	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	1000823f 	.word	0x1000823f
 8004fb0:	40020940 	.word	0x40020940

08004fb4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e147      	b.n	8005256 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fd fcba 	bl	8002954 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0210 	bic.w	r2, r2, #16
 8004fee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ff0:	f7fe fa24 	bl	800343c <HAL_GetTick>
 8004ff4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004ff6:	e012      	b.n	800501e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004ff8:	f7fe fa20 	bl	800343c <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b0a      	cmp	r3, #10
 8005004:	d90b      	bls.n	800501e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800500a:	f043 0201 	orr.w	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2203      	movs	r2, #3
 8005016:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e11b      	b.n	8005256 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b08      	cmp	r3, #8
 800502a:	d0e5      	beq.n	8004ff8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699a      	ldr	r2, [r3, #24]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800503c:	f7fe f9fe 	bl	800343c <HAL_GetTick>
 8005040:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005042:	e012      	b.n	800506a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005044:	f7fe f9fa 	bl	800343c <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b0a      	cmp	r3, #10
 8005050:	d90b      	bls.n	800506a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005056:	f043 0201 	orr.w	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2203      	movs	r2, #3
 8005062:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e0f5      	b.n	8005256 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0e5      	beq.n	8005044 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0202 	orr.w	r2, r2, #2
 8005086:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a74      	ldr	r2, [pc, #464]	; (8005260 <HAL_FDCAN_Init+0x2ac>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d103      	bne.n	800509a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005092:	4a74      	ldr	r2, [pc, #464]	; (8005264 <HAL_FDCAN_Init+0x2b0>)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	7c1b      	ldrb	r3, [r3, #16]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d108      	bne.n	80050b4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	699a      	ldr	r2, [r3, #24]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050b0:	619a      	str	r2, [r3, #24]
 80050b2:	e007      	b.n	80050c4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699a      	ldr	r2, [r3, #24]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050c2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	7c5b      	ldrb	r3, [r3, #17]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d108      	bne.n	80050de <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699a      	ldr	r2, [r3, #24]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050da:	619a      	str	r2, [r3, #24]
 80050dc:	e007      	b.n	80050ee <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699a      	ldr	r2, [r3, #24]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050ec:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	7c9b      	ldrb	r3, [r3, #18]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d108      	bne.n	8005108 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699a      	ldr	r2, [r3, #24]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005104:	619a      	str	r2, [r3, #24]
 8005106:	e007      	b.n	8005118 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699a      	ldr	r2, [r3, #24]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005116:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	699a      	ldr	r2, [r3, #24]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800513c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0210 	bic.w	r2, r2, #16
 800514c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d108      	bne.n	8005168 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699a      	ldr	r2, [r3, #24]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0204 	orr.w	r2, r2, #4
 8005164:	619a      	str	r2, [r3, #24]
 8005166:	e02c      	b.n	80051c2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d028      	beq.n	80051c2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b02      	cmp	r3, #2
 8005176:	d01c      	beq.n	80051b2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699a      	ldr	r2, [r3, #24]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005186:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691a      	ldr	r2, [r3, #16]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0210 	orr.w	r2, r2, #16
 8005196:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	2b03      	cmp	r3, #3
 800519e:	d110      	bne.n	80051c2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699a      	ldr	r2, [r3, #24]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0220 	orr.w	r2, r2, #32
 80051ae:	619a      	str	r2, [r3, #24]
 80051b0:	e007      	b.n	80051c2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0220 	orr.w	r2, r2, #32
 80051c0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051d2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80051da:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80051ea:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051ec:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051f6:	d115      	bne.n	8005224 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	3b01      	subs	r3, #1
 8005204:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005206:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520c:	3b01      	subs	r3, #1
 800520e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005210:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	3b01      	subs	r3, #1
 800521a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005220:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005222:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fc6e 	bl	8005b1c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40006400 	.word	0x40006400
 8005264:	40006500 	.word	0x40006500

08005268 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005278:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800527a:	7dfb      	ldrb	r3, [r7, #23]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d002      	beq.n	8005286 <HAL_FDCAN_ConfigFilter+0x1e>
 8005280:	7dfb      	ldrb	r3, [r7, #23]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d13d      	bne.n	8005302 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d119      	bne.n	80052c2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800529a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80052a2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	e01d      	b.n	80052fe <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	075a      	lsls	r2, r3, #29
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	079a      	lsls	r2, r3, #30
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	3304      	adds	r3, #4
 80052f6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	e006      	b.n	8005310 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005306:	f043 0202 	orr.w	r2, r3, #2
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
  }
}
 8005310:	4618      	mov	r0, r3
 8005312:	371c      	adds	r7, #28
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b01      	cmp	r3, #1
 8005334:	d116      	bne.n	8005364 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800533e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	011a      	lsls	r2, r3, #4
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	431a      	orrs	r2, r3
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	431a      	orrs	r2, r3
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	431a      	orrs	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	e006      	b.n	8005372 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005368:	f043 0204 	orr.w	r2, r3, #4
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
  }
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b01      	cmp	r3, #1
 8005390:	d110      	bne.n	80053b4 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2202      	movs	r2, #2
 8005396:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699a      	ldr	r2, [r3, #24]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0201 	bic.w	r2, r2, #1
 80053a8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	e006      	b.n	80053c2 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b8:	f043 0204 	orr.w	r2, r3, #4
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
  }
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b086      	sub	sp, #24
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d12c      	bne.n	8005440 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80053ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d007      	beq.n	8005406 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e023      	b.n	800544e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800540e:	0c1b      	lsrs	r3, r3, #16
 8005410:	f003 0303 	and.w	r3, r3, #3
 8005414:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 fbe9 	bl	8005bf4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2101      	movs	r1, #1
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	fa01 f202 	lsl.w	r2, r1, r2
 800542e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005432:	2201      	movs	r2, #1
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	409a      	lsls	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	e006      	b.n	800544e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005444:	f043 0208 	orr.w	r2, r3, #8
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
  }
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005458:	b480      	push	{r7}
 800545a:	b08b      	sub	sp, #44	; 0x2c
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800546c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800546e:	7efb      	ldrb	r3, [r7, #27]
 8005470:	2b02      	cmp	r3, #2
 8005472:	f040 80bc 	bne.w	80055ee <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b40      	cmp	r3, #64	; 0x40
 800547a:	d121      	bne.n	80054c0 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	2b00      	cmp	r3, #0
 800548a:	d107      	bne.n	800549c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005490:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e0af      	b.n	80055fc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a4:	0a1b      	lsrs	r3, r3, #8
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	4613      	mov	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	4413      	add	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	440b      	add	r3, r1
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24
 80054be:	e020      	b.n	8005502 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d107      	bne.n	80054e0 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e08d      	b.n	80055fc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054e8:	0a1b      	lsrs	r3, r3, #8
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	4613      	mov	r3, r2
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	4413      	add	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	440b      	add	r3, r1
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d107      	bne.n	8005526 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	0c9b      	lsrs	r3, r3, #18
 800551c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	e005      	b.n	8005532 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	3304      	adds	r3, #4
 800554e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	b29a      	uxth	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	0e1b      	lsrs	r3, r3, #24
 8005584:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	0fda      	lsrs	r2, r3, #31
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	3304      	adds	r3, #4
 800559a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80055a0:	2300      	movs	r3, #0
 80055a2:	623b      	str	r3, [r7, #32]
 80055a4:	e00a      	b.n	80055bc <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	441a      	add	r2, r3
 80055ac:	6839      	ldr	r1, [r7, #0]
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	440b      	add	r3, r1
 80055b2:	7812      	ldrb	r2, [r2, #0]
 80055b4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	3301      	adds	r3, #1
 80055ba:	623b      	str	r3, [r7, #32]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	0c1b      	lsrs	r3, r3, #16
 80055c2:	4a11      	ldr	r2, [pc, #68]	; (8005608 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80055c4:	5cd3      	ldrb	r3, [r2, r3]
 80055c6:	461a      	mov	r2, r3
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d3eb      	bcc.n	80055a6 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b40      	cmp	r3, #64	; 0x40
 80055d2:	d105      	bne.n	80055e0 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80055de:	e004      	b.n	80055ea <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69fa      	ldr	r2, [r7, #28]
 80055e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e006      	b.n	80055fc <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f2:	f043 0208 	orr.w	r2, r3, #8
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
  }
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	372c      	adds	r7, #44	; 0x2c
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	080097f0 	.word	0x080097f0

0800560c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800561e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005620:	7dfb      	ldrb	r3, [r7, #23]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d003      	beq.n	800562e <HAL_FDCAN_ActivateNotification+0x22>
 8005626:	7dfb      	ldrb	r3, [r7, #23]
 8005628:	2b02      	cmp	r3, #2
 800562a:	f040 80c8 	bne.w	80057be <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	2b00      	cmp	r3, #0
 800563e:	d004      	beq.n	800564a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d03b      	beq.n	80056c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005650:	2b00      	cmp	r3, #0
 8005652:	d004      	beq.n	800565e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d031      	beq.n	80056c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005664:	2b00      	cmp	r3, #0
 8005666:	d004      	beq.n	8005672 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b00      	cmp	r3, #0
 8005670:	d027      	beq.n	80056c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005678:	2b00      	cmp	r3, #0
 800567a:	d004      	beq.n	8005686 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01d      	beq.n	80056c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800568c:	2b00      	cmp	r3, #0
 800568e:	d004      	beq.n	800569a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b00      	cmp	r3, #0
 8005698:	d013      	beq.n	80056c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f003 0320 	and.w	r3, r3, #32
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00c      	beq.n	80056d2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d107      	bne.n	80056d2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0201 	orr.w	r2, r2, #1
 80056d0:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d004      	beq.n	80056e6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d13b      	bne.n	800575e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d131      	bne.n	800575e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f003 0304 	and.w	r3, r3, #4
 800570a:	2b00      	cmp	r3, #0
 800570c:	d127      	bne.n	800575e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005714:	2b00      	cmp	r3, #0
 8005716:	d004      	beq.n	8005722 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d11d      	bne.n	800575e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005728:	2b00      	cmp	r3, #0
 800572a:	d004      	beq.n	8005736 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2b00      	cmp	r3, #0
 8005734:	d113      	bne.n	800575e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800573c:	2b00      	cmp	r3, #0
 800573e:	d004      	beq.n	800574a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b00      	cmp	r3, #0
 8005748:	d109      	bne.n	800575e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00c      	beq.n	800576e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	d007      	beq.n	800576e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f042 0202 	orr.w	r2, r2, #2
 800576c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005774:	2b00      	cmp	r3, #0
 8005776:	d009      	beq.n	800578c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	430a      	orrs	r2, r1
 8005788:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	e006      	b.n	80057cc <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c2:	f043 0202 	orr.w	r2, r3, #2
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
  }
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	371c      	adds	r7, #28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	; 0x28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f4:	4013      	ands	r3, r2
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580a:	6a3a      	ldr	r2, [r7, #32]
 800580c:	4013      	ands	r3, r2
 800580e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800581a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005822:	69fa      	ldr	r2, [r7, #28]
 8005824:	4013      	ands	r3, r2
 8005826:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8005832:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	4013      	ands	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005846:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800584a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4013      	ands	r3, r2
 8005856:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800585e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00d      	beq.n	8005882 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	d006      	beq.n	8005882 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2240      	movs	r2, #64	; 0x40
 800587a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f92e 	bl	8005ade <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01b      	beq.n	80058c8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589a:	2b00      	cmp	r3, #0
 800589c:	d014      	beq.n	80058c8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80058a6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	4013      	ands	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058be:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80058c0:	6939      	ldr	r1, [r7, #16]
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f8ec 	bl	8005aa0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80058d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f8b6 	bl	8005a4a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6a3a      	ldr	r2, [r7, #32]
 80058ea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80058ec:	6a39      	ldr	r1, [r7, #32]
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fd fa5c 	bl	8002dac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d007      	beq.n	800590a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005902:	69f9      	ldr	r1, [r7, #28]
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f8ab 	bl	8005a60 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00e      	beq.n	8005936 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005922:	2b00      	cmp	r3, #0
 8005924:	d007      	beq.n	8005936 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800592e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f8a0 	bl	8005a76 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800593c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01a      	beq.n	800597a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594e:	2b00      	cmp	r3, #0
 8005950:	d013      	beq.n	800597a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800595a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4013      	ands	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2280      	movs	r2, #128	; 0x80
 8005970:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005972:	68f9      	ldr	r1, [r7, #12]
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f888 	bl	8005a8a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005980:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00e      	beq.n	80059a6 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800599e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f888 	bl	8005ab6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00e      	beq.n	80059d2 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80059ca:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f87c 	bl	8005aca <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d011      	beq.n	8005a04 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80059f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005a12:	6979      	ldr	r1, [r7, #20]
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f876 	bl	8005b06 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d009      	beq.n	8005a34 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f858 	bl	8005af2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005a42:	bf00      	nop
 8005a44:	3728      	adds	r7, #40	; 0x28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005b24:	4b30      	ldr	r3, [pc, #192]	; (8005be8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005b26:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a2f      	ldr	r2, [pc, #188]	; (8005bec <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d103      	bne.n	8005b3a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b38:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a2c      	ldr	r2, [pc, #176]	; (8005bf0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d103      	bne.n	8005b4c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005b4a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b5a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b62:	041a      	lsls	r2, r3, #16
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b80:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	061a      	lsls	r2, r3, #24
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	e005      	b.n	8005bce <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d3f3      	bcc.n	8005bc2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005bda:	bf00      	nop
 8005bdc:	bf00      	nop
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	4000a400 	.word	0x4000a400
 8005bec:	40006800 	.word	0x40006800
 8005bf0:	40006c00 	.word	0x40006c00

08005bf4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b089      	sub	sp, #36	; 0x24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005c12:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	61fb      	str	r3, [r7, #28]
 8005c1e:	e00a      	b.n	8005c36 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005c28:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005c2e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c34:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005c40:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005c46:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005c4c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	4413      	add	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	440b      	add	r3, r1
 8005c66:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	3304      	adds	r3, #4
 8005c72:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005c80:	2300      	movs	r3, #0
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	e020      	b.n	8005cc8 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	3303      	adds	r3, #3
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	3302      	adds	r3, #2
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	440b      	add	r3, r1
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005c9e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	440b      	add	r3, r1
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005cac:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005cb6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	0c1b      	lsrs	r3, r3, #16
 8005cce:	4a06      	ldr	r2, [pc, #24]	; (8005ce8 <FDCAN_CopyMessageToRAM+0xf4>)
 8005cd0:	5cd3      	ldrb	r3, [r2, r3]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d3d5      	bcc.n	8005c86 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	3724      	adds	r7, #36	; 0x24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	080097f0 	.word	0x080097f0

08005cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005cfa:	e15a      	b.n	8005fb2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	2101      	movs	r1, #1
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	fa01 f303 	lsl.w	r3, r1, r3
 8005d08:	4013      	ands	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 814c 	beq.w	8005fac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f003 0303 	and.w	r3, r3, #3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d005      	beq.n	8005d2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d130      	bne.n	8005d8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	2203      	movs	r2, #3
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4013      	ands	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d62:	2201      	movs	r2, #1
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6a:	43db      	mvns	r3, r3
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	091b      	lsrs	r3, r3, #4
 8005d78:	f003 0201 	and.w	r2, r3, #1
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d017      	beq.n	8005dca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	2203      	movs	r2, #3
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43db      	mvns	r3, r3
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4013      	ands	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d123      	bne.n	8005e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	08da      	lsrs	r2, r3, #3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3208      	adds	r2, #8
 8005dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	220f      	movs	r2, #15
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	43db      	mvns	r3, r3
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4013      	ands	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	08da      	lsrs	r2, r3, #3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3208      	adds	r2, #8
 8005e18:	6939      	ldr	r1, [r7, #16]
 8005e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	2203      	movs	r2, #3
 8005e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2e:	43db      	mvns	r3, r3
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4013      	ands	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f003 0203 	and.w	r2, r3, #3
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 80a6 	beq.w	8005fac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e60:	4b5b      	ldr	r3, [pc, #364]	; (8005fd0 <HAL_GPIO_Init+0x2e4>)
 8005e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e64:	4a5a      	ldr	r2, [pc, #360]	; (8005fd0 <HAL_GPIO_Init+0x2e4>)
 8005e66:	f043 0301 	orr.w	r3, r3, #1
 8005e6a:	6613      	str	r3, [r2, #96]	; 0x60
 8005e6c:	4b58      	ldr	r3, [pc, #352]	; (8005fd0 <HAL_GPIO_Init+0x2e4>)
 8005e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	60bb      	str	r3, [r7, #8]
 8005e76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e78:	4a56      	ldr	r2, [pc, #344]	; (8005fd4 <HAL_GPIO_Init+0x2e8>)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	089b      	lsrs	r3, r3, #2
 8005e7e:	3302      	adds	r3, #2
 8005e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	220f      	movs	r2, #15
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	43db      	mvns	r3, r3
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005ea2:	d01f      	beq.n	8005ee4 <HAL_GPIO_Init+0x1f8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a4c      	ldr	r2, [pc, #304]	; (8005fd8 <HAL_GPIO_Init+0x2ec>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d019      	beq.n	8005ee0 <HAL_GPIO_Init+0x1f4>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a4b      	ldr	r2, [pc, #300]	; (8005fdc <HAL_GPIO_Init+0x2f0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d013      	beq.n	8005edc <HAL_GPIO_Init+0x1f0>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a4a      	ldr	r2, [pc, #296]	; (8005fe0 <HAL_GPIO_Init+0x2f4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d00d      	beq.n	8005ed8 <HAL_GPIO_Init+0x1ec>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a49      	ldr	r2, [pc, #292]	; (8005fe4 <HAL_GPIO_Init+0x2f8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d007      	beq.n	8005ed4 <HAL_GPIO_Init+0x1e8>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a48      	ldr	r2, [pc, #288]	; (8005fe8 <HAL_GPIO_Init+0x2fc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d101      	bne.n	8005ed0 <HAL_GPIO_Init+0x1e4>
 8005ecc:	2305      	movs	r3, #5
 8005ece:	e00a      	b.n	8005ee6 <HAL_GPIO_Init+0x1fa>
 8005ed0:	2306      	movs	r3, #6
 8005ed2:	e008      	b.n	8005ee6 <HAL_GPIO_Init+0x1fa>
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	e006      	b.n	8005ee6 <HAL_GPIO_Init+0x1fa>
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e004      	b.n	8005ee6 <HAL_GPIO_Init+0x1fa>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e002      	b.n	8005ee6 <HAL_GPIO_Init+0x1fa>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e000      	b.n	8005ee6 <HAL_GPIO_Init+0x1fa>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	f002 0203 	and.w	r2, r2, #3
 8005eec:	0092      	lsls	r2, r2, #2
 8005eee:	4093      	lsls	r3, r2
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ef6:	4937      	ldr	r1, [pc, #220]	; (8005fd4 <HAL_GPIO_Init+0x2e8>)
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	089b      	lsrs	r3, r3, #2
 8005efc:	3302      	adds	r3, #2
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f04:	4b39      	ldr	r3, [pc, #228]	; (8005fec <HAL_GPIO_Init+0x300>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4013      	ands	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f28:	4a30      	ldr	r2, [pc, #192]	; (8005fec <HAL_GPIO_Init+0x300>)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f2e:	4b2f      	ldr	r3, [pc, #188]	; (8005fec <HAL_GPIO_Init+0x300>)
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	43db      	mvns	r3, r3
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f52:	4a26      	ldr	r2, [pc, #152]	; (8005fec <HAL_GPIO_Init+0x300>)
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005f58:	4b24      	ldr	r3, [pc, #144]	; (8005fec <HAL_GPIO_Init+0x300>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	43db      	mvns	r3, r3
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4013      	ands	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f7c:	4a1b      	ldr	r2, [pc, #108]	; (8005fec <HAL_GPIO_Init+0x300>)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005f82:	4b1a      	ldr	r3, [pc, #104]	; (8005fec <HAL_GPIO_Init+0x300>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005fa6:	4a11      	ldr	r2, [pc, #68]	; (8005fec <HAL_GPIO_Init+0x300>)
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f47f ae9d 	bne.w	8005cfc <HAL_GPIO_Init+0x10>
  }
}
 8005fc2:	bf00      	nop
 8005fc4:	bf00      	nop
 8005fc6:	371c      	adds	r7, #28
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	40010000 	.word	0x40010000
 8005fd8:	48000400 	.word	0x48000400
 8005fdc:	48000800 	.word	0x48000800
 8005fe0:	48000c00 	.word	0x48000c00
 8005fe4:	48001000 	.word	0x48001000
 8005fe8:	48001400 	.word	0x48001400
 8005fec:	40010400 	.word	0x40010400

08005ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	807b      	strh	r3, [r7, #2]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006000:	787b      	ldrb	r3, [r7, #1]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006006:	887a      	ldrh	r2, [r7, #2]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800600c:	e002      	b.n	8006014 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800600e:	887a      	ldrh	r2, [r7, #2]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e081      	b.n	8006136 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d106      	bne.n	800604c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fc fd7a 	bl	8002b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2224      	movs	r2, #36	; 0x24
 8006050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006070:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006080:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d107      	bne.n	800609a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006096:	609a      	str	r2, [r3, #8]
 8006098:	e006      	b.n	80060a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80060a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d104      	bne.n	80060ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	6812      	ldr	r2, [r2, #0]
 80060c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69d9      	ldr	r1, [r3, #28]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a1a      	ldr	r2, [r3, #32]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2220      	movs	r2, #32
 8006122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	607a      	str	r2, [r7, #4]
 800614a:	461a      	mov	r2, r3
 800614c:	460b      	mov	r3, r1
 800614e:	817b      	strh	r3, [r7, #10]
 8006150:	4613      	mov	r3, r2
 8006152:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b20      	cmp	r3, #32
 800615e:	f040 80da 	bne.w	8006316 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_I2C_Master_Transmit+0x30>
 800616c:	2302      	movs	r3, #2
 800616e:	e0d3      	b.n	8006318 <HAL_I2C_Master_Transmit+0x1d8>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006178:	f7fd f960 	bl	800343c <HAL_GetTick>
 800617c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	2319      	movs	r3, #25
 8006184:	2201      	movs	r2, #1
 8006186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 fb4e 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e0be      	b.n	8006318 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2221      	movs	r2, #33	; 0x21
 800619e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2210      	movs	r2, #16
 80061a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	893a      	ldrh	r2, [r7, #8]
 80061ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2bff      	cmp	r3, #255	; 0xff
 80061ca:	d90e      	bls.n	80061ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	22ff      	movs	r2, #255	; 0xff
 80061d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	8979      	ldrh	r1, [r7, #10]
 80061da:	4b51      	ldr	r3, [pc, #324]	; (8006320 <HAL_I2C_Master_Transmit+0x1e0>)
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 fd44 	bl	8006c70 <I2C_TransferConfig>
 80061e8:	e06c      	b.n	80062c4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	8979      	ldrh	r1, [r7, #10]
 80061fc:	4b48      	ldr	r3, [pc, #288]	; (8006320 <HAL_I2C_Master_Transmit+0x1e0>)
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 fd33 	bl	8006c70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800620a:	e05b      	b.n	80062c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	6a39      	ldr	r1, [r7, #32]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fb4b 	bl	80068ac <I2C_WaitOnTXISFlagUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e07b      	b.n	8006318 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	781a      	ldrb	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623a:	b29b      	uxth	r3, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006254:	b29b      	uxth	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d034      	beq.n	80062c4 <HAL_I2C_Master_Transmit+0x184>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800625e:	2b00      	cmp	r3, #0
 8006260:	d130      	bne.n	80062c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	2200      	movs	r2, #0
 800626a:	2180      	movs	r1, #128	; 0x80
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 fadd 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e04d      	b.n	8006318 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006280:	b29b      	uxth	r3, r3
 8006282:	2bff      	cmp	r3, #255	; 0xff
 8006284:	d90e      	bls.n	80062a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	22ff      	movs	r2, #255	; 0xff
 800628a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006290:	b2da      	uxtb	r2, r3
 8006292:	8979      	ldrh	r1, [r7, #10]
 8006294:	2300      	movs	r3, #0
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 fce7 	bl	8006c70 <I2C_TransferConfig>
 80062a2:	e00f      	b.n	80062c4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	8979      	ldrh	r1, [r7, #10]
 80062b6:	2300      	movs	r3, #0
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 fcd6 	bl	8006c70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d19e      	bne.n	800620c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	6a39      	ldr	r1, [r7, #32]
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fb2a 	bl	800692c <I2C_WaitOnSTOPFlagUntilTimeout>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e01a      	b.n	8006318 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2220      	movs	r2, #32
 80062e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6859      	ldr	r1, [r3, #4]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <HAL_I2C_Master_Transmit+0x1e4>)
 80062f6:	400b      	ands	r3, r1
 80062f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	e000      	b.n	8006318 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006316:	2302      	movs	r3, #2
  }
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	80002000 	.word	0x80002000
 8006324:	fe00e800 	.word	0xfe00e800

08006328 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b088      	sub	sp, #32
 800632c:	af02      	add	r7, sp, #8
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	607a      	str	r2, [r7, #4]
 8006332:	461a      	mov	r2, r3
 8006334:	460b      	mov	r3, r1
 8006336:	817b      	strh	r3, [r7, #10]
 8006338:	4613      	mov	r3, r2
 800633a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b20      	cmp	r3, #32
 8006346:	f040 80db 	bne.w	8006500 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_I2C_Master_Receive+0x30>
 8006354:	2302      	movs	r3, #2
 8006356:	e0d4      	b.n	8006502 <HAL_I2C_Master_Receive+0x1da>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006360:	f7fd f86c 	bl	800343c <HAL_GetTick>
 8006364:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	2319      	movs	r3, #25
 800636c:	2201      	movs	r2, #1
 800636e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 fa5a 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e0bf      	b.n	8006502 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2222      	movs	r2, #34	; 0x22
 8006386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2210      	movs	r2, #16
 800638e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	893a      	ldrh	r2, [r7, #8]
 80063a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	2bff      	cmp	r3, #255	; 0xff
 80063b2:	d90e      	bls.n	80063d2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	22ff      	movs	r2, #255	; 0xff
 80063b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	8979      	ldrh	r1, [r7, #10]
 80063c2:	4b52      	ldr	r3, [pc, #328]	; (800650c <HAL_I2C_Master_Receive+0x1e4>)
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 fc50 	bl	8006c70 <I2C_TransferConfig>
 80063d0:	e06d      	b.n	80064ae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	8979      	ldrh	r1, [r7, #10]
 80063e4:	4b49      	ldr	r3, [pc, #292]	; (800650c <HAL_I2C_Master_Receive+0x1e4>)
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 fc3f 	bl	8006c70 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80063f2:	e05c      	b.n	80064ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	6a39      	ldr	r1, [r7, #32]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fad3 	bl	80069a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e07c      	b.n	8006502 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006424:	3b01      	subs	r3, #1
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006430:	b29b      	uxth	r3, r3
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d034      	beq.n	80064ae <HAL_I2C_Master_Receive+0x186>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006448:	2b00      	cmp	r3, #0
 800644a:	d130      	bne.n	80064ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	2200      	movs	r2, #0
 8006454:	2180      	movs	r1, #128	; 0x80
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 f9e8 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e04d      	b.n	8006502 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646a:	b29b      	uxth	r3, r3
 800646c:	2bff      	cmp	r3, #255	; 0xff
 800646e:	d90e      	bls.n	800648e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	22ff      	movs	r2, #255	; 0xff
 8006474:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647a:	b2da      	uxtb	r2, r3
 800647c:	8979      	ldrh	r1, [r7, #10]
 800647e:	2300      	movs	r3, #0
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 fbf2 	bl	8006c70 <I2C_TransferConfig>
 800648c:	e00f      	b.n	80064ae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649c:	b2da      	uxtb	r2, r3
 800649e:	8979      	ldrh	r1, [r7, #10]
 80064a0:	2300      	movs	r3, #0
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 fbe1 	bl	8006c70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d19d      	bne.n	80063f4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	6a39      	ldr	r1, [r7, #32]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 fa35 	bl	800692c <I2C_WaitOnSTOPFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e01a      	b.n	8006502 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2220      	movs	r2, #32
 80064d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6859      	ldr	r1, [r3, #4]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	4b0c      	ldr	r3, [pc, #48]	; (8006510 <HAL_I2C_Master_Receive+0x1e8>)
 80064e0:	400b      	ands	r3, r1
 80064e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	e000      	b.n	8006502 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006500:	2302      	movs	r3, #2
  }
}
 8006502:	4618      	mov	r0, r3
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	80002400 	.word	0x80002400
 8006510:	fe00e800 	.word	0xfe00e800

08006514 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af02      	add	r7, sp, #8
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	4608      	mov	r0, r1
 800651e:	4611      	mov	r1, r2
 8006520:	461a      	mov	r2, r3
 8006522:	4603      	mov	r3, r0
 8006524:	817b      	strh	r3, [r7, #10]
 8006526:	460b      	mov	r3, r1
 8006528:	813b      	strh	r3, [r7, #8]
 800652a:	4613      	mov	r3, r2
 800652c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b20      	cmp	r3, #32
 8006538:	f040 80f9 	bne.w	800672e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <HAL_I2C_Mem_Write+0x34>
 8006542:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	d105      	bne.n	8006554 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800654e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e0ed      	b.n	8006730 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800655a:	2b01      	cmp	r3, #1
 800655c:	d101      	bne.n	8006562 <HAL_I2C_Mem_Write+0x4e>
 800655e:	2302      	movs	r3, #2
 8006560:	e0e6      	b.n	8006730 <HAL_I2C_Mem_Write+0x21c>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800656a:	f7fc ff67 	bl	800343c <HAL_GetTick>
 800656e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	2319      	movs	r3, #25
 8006576:	2201      	movs	r2, #1
 8006578:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 f955 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e0d1      	b.n	8006730 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2221      	movs	r2, #33	; 0x21
 8006590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2240      	movs	r2, #64	; 0x40
 8006598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6a3a      	ldr	r2, [r7, #32]
 80065a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065b4:	88f8      	ldrh	r0, [r7, #6]
 80065b6:	893a      	ldrh	r2, [r7, #8]
 80065b8:	8979      	ldrh	r1, [r7, #10]
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	9301      	str	r3, [sp, #4]
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	4603      	mov	r3, r0
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f8b9 	bl	800673c <I2C_RequestMemoryWrite>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e0a9      	b.n	8006730 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	2bff      	cmp	r3, #255	; 0xff
 80065e4:	d90e      	bls.n	8006604 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	22ff      	movs	r2, #255	; 0xff
 80065ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	8979      	ldrh	r1, [r7, #10]
 80065f4:	2300      	movs	r3, #0
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 fb37 	bl	8006c70 <I2C_TransferConfig>
 8006602:	e00f      	b.n	8006624 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006608:	b29a      	uxth	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006612:	b2da      	uxtb	r2, r3
 8006614:	8979      	ldrh	r1, [r7, #10]
 8006616:	2300      	movs	r3, #0
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 fb26 	bl	8006c70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f93f 	bl	80068ac <I2C_WaitOnTXISFlagUntilTimeout>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e07b      	b.n	8006730 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	781a      	ldrb	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006660:	3b01      	subs	r3, #1
 8006662:	b29a      	uxth	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d034      	beq.n	80066dc <HAL_I2C_Mem_Write+0x1c8>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006676:	2b00      	cmp	r3, #0
 8006678:	d130      	bne.n	80066dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006680:	2200      	movs	r2, #0
 8006682:	2180      	movs	r1, #128	; 0x80
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 f8d1 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e04d      	b.n	8006730 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006698:	b29b      	uxth	r3, r3
 800669a:	2bff      	cmp	r3, #255	; 0xff
 800669c:	d90e      	bls.n	80066bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	22ff      	movs	r2, #255	; 0xff
 80066a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	8979      	ldrh	r1, [r7, #10]
 80066ac:	2300      	movs	r3, #0
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 fadb 	bl	8006c70 <I2C_TransferConfig>
 80066ba:	e00f      	b.n	80066dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	8979      	ldrh	r1, [r7, #10]
 80066ce:	2300      	movs	r3, #0
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 faca 	bl	8006c70 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d19e      	bne.n	8006624 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 f91e 	bl	800692c <I2C_WaitOnSTOPFlagUntilTimeout>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e01a      	b.n	8006730 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2220      	movs	r2, #32
 8006700:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6859      	ldr	r1, [r3, #4]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	4b0a      	ldr	r3, [pc, #40]	; (8006738 <HAL_I2C_Mem_Write+0x224>)
 800670e:	400b      	ands	r3, r1
 8006710:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2220      	movs	r2, #32
 8006716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	e000      	b.n	8006730 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800672e:	2302      	movs	r3, #2
  }
}
 8006730:	4618      	mov	r0, r3
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	fe00e800 	.word	0xfe00e800

0800673c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	4608      	mov	r0, r1
 8006746:	4611      	mov	r1, r2
 8006748:	461a      	mov	r2, r3
 800674a:	4603      	mov	r3, r0
 800674c:	817b      	strh	r3, [r7, #10]
 800674e:	460b      	mov	r3, r1
 8006750:	813b      	strh	r3, [r7, #8]
 8006752:	4613      	mov	r3, r2
 8006754:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006756:	88fb      	ldrh	r3, [r7, #6]
 8006758:	b2da      	uxtb	r2, r3
 800675a:	8979      	ldrh	r1, [r7, #10]
 800675c:	4b20      	ldr	r3, [pc, #128]	; (80067e0 <I2C_RequestMemoryWrite+0xa4>)
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 fa83 	bl	8006c70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800676a:	69fa      	ldr	r2, [r7, #28]
 800676c:	69b9      	ldr	r1, [r7, #24]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 f89c 	bl	80068ac <I2C_WaitOnTXISFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e02c      	b.n	80067d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d105      	bne.n	8006790 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006784:	893b      	ldrh	r3, [r7, #8]
 8006786:	b2da      	uxtb	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	629a      	str	r2, [r3, #40]	; 0x28
 800678e:	e015      	b.n	80067bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006790:	893b      	ldrh	r3, [r7, #8]
 8006792:	0a1b      	lsrs	r3, r3, #8
 8006794:	b29b      	uxth	r3, r3
 8006796:	b2da      	uxtb	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	69b9      	ldr	r1, [r7, #24]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 f882 	bl	80068ac <I2C_WaitOnTXISFlagUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e012      	b.n	80067d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067b2:	893b      	ldrh	r3, [r7, #8]
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	2200      	movs	r2, #0
 80067c4:	2180      	movs	r1, #128	; 0x80
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f830 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e000      	b.n	80067d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	80002000 	.word	0x80002000

080067e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d103      	bne.n	8006802 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2200      	movs	r2, #0
 8006800:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b01      	cmp	r3, #1
 800680e:	d007      	beq.n	8006820 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	619a      	str	r2, [r3, #24]
  }
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	4613      	mov	r3, r2
 800683a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800683c:	e022      	b.n	8006884 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006844:	d01e      	beq.n	8006884 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006846:	f7fc fdf9 	bl	800343c <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d302      	bcc.n	800685c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d113      	bne.n	8006884 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006860:	f043 0220 	orr.w	r2, r3, #32
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2220      	movs	r2, #32
 800686c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e00f      	b.n	80068a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	4013      	ands	r3, r2
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	429a      	cmp	r2, r3
 8006892:	bf0c      	ite	eq
 8006894:	2301      	moveq	r3, #1
 8006896:	2300      	movne	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	461a      	mov	r2, r3
 800689c:	79fb      	ldrb	r3, [r7, #7]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d0cd      	beq.n	800683e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068b8:	e02c      	b.n	8006914 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 f8ea 	bl	8006a98 <I2C_IsErrorOccurred>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e02a      	b.n	8006924 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068d4:	d01e      	beq.n	8006914 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d6:	f7fc fdb1 	bl	800343c <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d302      	bcc.n	80068ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d113      	bne.n	8006914 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f0:	f043 0220 	orr.w	r2, r3, #32
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e007      	b.n	8006924 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b02      	cmp	r3, #2
 8006920:	d1cb      	bne.n	80068ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006938:	e028      	b.n	800698c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 f8aa 	bl	8006a98 <I2C_IsErrorOccurred>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e026      	b.n	800699c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800694e:	f7fc fd75 	bl	800343c <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	429a      	cmp	r2, r3
 800695c:	d302      	bcc.n	8006964 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d113      	bne.n	800698c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006968:	f043 0220 	orr.w	r2, r3, #32
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2220      	movs	r2, #32
 8006974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e007      	b.n	800699c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b20      	cmp	r3, #32
 8006998:	d1cf      	bne.n	800693a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069b0:	e064      	b.n	8006a7c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	68b9      	ldr	r1, [r7, #8]
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 f86e 	bl	8006a98 <I2C_IsErrorOccurred>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e062      	b.n	8006a8c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	f003 0320 	and.w	r3, r3, #32
 80069d0:	2b20      	cmp	r3, #32
 80069d2:	d138      	bne.n	8006a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d105      	bne.n	80069ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e04e      	b.n	8006a8c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	f003 0310 	and.w	r3, r3, #16
 80069f8:	2b10      	cmp	r3, #16
 80069fa:	d107      	bne.n	8006a0c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2210      	movs	r2, #16
 8006a02:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2204      	movs	r2, #4
 8006a08:	645a      	str	r2, [r3, #68]	; 0x44
 8006a0a:	e002      	b.n	8006a12 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2220      	movs	r2, #32
 8006a18:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6859      	ldr	r1, [r3, #4]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	4b1b      	ldr	r3, [pc, #108]	; (8006a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006a26:	400b      	ands	r3, r1
 8006a28:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e022      	b.n	8006a8c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a46:	f7fc fcf9 	bl	800343c <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d302      	bcc.n	8006a5c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10f      	bne.n	8006a7c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a60:	f043 0220 	orr.w	r2, r3, #32
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e007      	b.n	8006a8c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	f003 0304 	and.w	r3, r3, #4
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	d193      	bne.n	80069b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	fe00e800 	.word	0xfe00e800

08006a98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08a      	sub	sp, #40	; 0x28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	f003 0310 	and.w	r3, r3, #16
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d075      	beq.n	8006bb0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2210      	movs	r2, #16
 8006aca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006acc:	e056      	b.n	8006b7c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ad4:	d052      	beq.n	8006b7c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ad6:	f7fc fcb1 	bl	800343c <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d302      	bcc.n	8006aec <I2C_IsErrorOccurred+0x54>
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d147      	bne.n	8006b7c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006af6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006afe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b0e:	d12e      	bne.n	8006b6e <I2C_IsErrorOccurred+0xd6>
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b16:	d02a      	beq.n	8006b6e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006b18:	7cfb      	ldrb	r3, [r7, #19]
 8006b1a:	2b20      	cmp	r3, #32
 8006b1c:	d027      	beq.n	8006b6e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b2c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006b2e:	f7fc fc85 	bl	800343c <HAL_GetTick>
 8006b32:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b34:	e01b      	b.n	8006b6e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b36:	f7fc fc81 	bl	800343c <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	2b19      	cmp	r3, #25
 8006b42:	d914      	bls.n	8006b6e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b48:	f043 0220 	orr.w	r2, r3, #32
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b20      	cmp	r3, #32
 8006b7a:	d1dc      	bne.n	8006b36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	f003 0320 	and.w	r3, r3, #32
 8006b86:	2b20      	cmp	r3, #32
 8006b88:	d003      	beq.n	8006b92 <I2C_IsErrorOccurred+0xfa>
 8006b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d09d      	beq.n	8006ace <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d103      	bne.n	8006ba2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	f043 0304 	orr.w	r3, r3, #4
 8006ba8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00b      	beq.n	8006bda <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	f043 0301 	orr.w	r3, r3, #1
 8006bc8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00b      	beq.n	8006bfc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	f043 0308 	orr.w	r3, r3, #8
 8006bea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00b      	beq.n	8006c1e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	f043 0302 	orr.w	r3, r3, #2
 8006c0c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d01c      	beq.n	8006c60 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7ff fddc 	bl	80067e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6859      	ldr	r1, [r3, #4]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	4b0d      	ldr	r3, [pc, #52]	; (8006c6c <I2C_IsErrorOccurred+0x1d4>)
 8006c38:	400b      	ands	r3, r1
 8006c3a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	431a      	orrs	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3728      	adds	r7, #40	; 0x28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	fe00e800 	.word	0xfe00e800

08006c70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	607b      	str	r3, [r7, #4]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	817b      	strh	r3, [r7, #10]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c82:	897b      	ldrh	r3, [r7, #10]
 8006c84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c88:	7a7b      	ldrb	r3, [r7, #9]
 8006c8a:	041b      	lsls	r3, r3, #16
 8006c8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c90:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c9e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	0d5b      	lsrs	r3, r3, #21
 8006caa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006cae:	4b08      	ldr	r3, [pc, #32]	; (8006cd0 <I2C_TransferConfig+0x60>)
 8006cb0:	430b      	orrs	r3, r1
 8006cb2:	43db      	mvns	r3, r3
 8006cb4:	ea02 0103 	and.w	r1, r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006cc2:	bf00      	nop
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	03ff63ff 	.word	0x03ff63ff

08006cd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d138      	bne.n	8006d5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d101      	bne.n	8006cf8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	e032      	b.n	8006d5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2224      	movs	r2, #36	; 0x24
 8006d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0201 	bic.w	r2, r2, #1
 8006d16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6819      	ldr	r1, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f042 0201 	orr.w	r2, r2, #1
 8006d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e000      	b.n	8006d5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d5c:	2302      	movs	r3, #2
  }
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b085      	sub	sp, #20
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b20      	cmp	r3, #32
 8006d7e:	d139      	bne.n	8006df4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d101      	bne.n	8006d8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	e033      	b.n	8006df6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2224      	movs	r2, #36	; 0x24
 8006d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0201 	bic.w	r2, r2, #1
 8006dac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006dbc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	021b      	lsls	r3, r3, #8
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f042 0201 	orr.w	r2, r2, #1
 8006dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	e000      	b.n	8006df6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006df4:	2302      	movs	r3, #2
  }
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
	...

08006e04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d141      	bne.n	8006e96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e12:	4b4b      	ldr	r3, [pc, #300]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e1e:	d131      	bne.n	8006e84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e20:	4b47      	ldr	r3, [pc, #284]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e26:	4a46      	ldr	r2, [pc, #280]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e30:	4b43      	ldr	r3, [pc, #268]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e38:	4a41      	ldr	r2, [pc, #260]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e40:	4b40      	ldr	r3, [pc, #256]	; (8006f44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2232      	movs	r2, #50	; 0x32
 8006e46:	fb02 f303 	mul.w	r3, r2, r3
 8006e4a:	4a3f      	ldr	r2, [pc, #252]	; (8006f48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e50:	0c9b      	lsrs	r3, r3, #18
 8006e52:	3301      	adds	r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e56:	e002      	b.n	8006e5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e5e:	4b38      	ldr	r3, [pc, #224]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e6a:	d102      	bne.n	8006e72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1f2      	bne.n	8006e58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e72:	4b33      	ldr	r3, [pc, #204]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e7e:	d158      	bne.n	8006f32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e057      	b.n	8006f34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e84:	4b2e      	ldr	r3, [pc, #184]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e8a:	4a2d      	ldr	r2, [pc, #180]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006e94:	e04d      	b.n	8006f32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e9c:	d141      	bne.n	8006f22 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e9e:	4b28      	ldr	r3, [pc, #160]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eaa:	d131      	bne.n	8006f10 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006eac:	4b24      	ldr	r3, [pc, #144]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eb2:	4a23      	ldr	r2, [pc, #140]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ebc:	4b20      	ldr	r3, [pc, #128]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ec4:	4a1e      	ldr	r2, [pc, #120]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006eca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ecc:	4b1d      	ldr	r3, [pc, #116]	; (8006f44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2232      	movs	r2, #50	; 0x32
 8006ed2:	fb02 f303 	mul.w	r3, r2, r3
 8006ed6:	4a1c      	ldr	r2, [pc, #112]	; (8006f48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8006edc:	0c9b      	lsrs	r3, r3, #18
 8006ede:	3301      	adds	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ee2:	e002      	b.n	8006eea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006eea:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef6:	d102      	bne.n	8006efe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1f2      	bne.n	8006ee4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006efe:	4b10      	ldr	r3, [pc, #64]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f0a:	d112      	bne.n	8006f32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e011      	b.n	8006f34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f10:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f16:	4a0a      	ldr	r2, [pc, #40]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006f20:	e007      	b.n	8006f32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f22:	4b07      	ldr	r3, [pc, #28]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f2a:	4a05      	ldr	r2, [pc, #20]	; (8006f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f30:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	40007000 	.word	0x40007000
 8006f44:	20000000 	.word	0x20000000
 8006f48:	431bde83 	.word	0x431bde83

08006f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b088      	sub	sp, #32
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e306      	b.n	800756c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d075      	beq.n	8007056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f6a:	4b97      	ldr	r3, [pc, #604]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f003 030c 	and.w	r3, r3, #12
 8006f72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f74:	4b94      	ldr	r3, [pc, #592]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f003 0303 	and.w	r3, r3, #3
 8006f7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2b0c      	cmp	r3, #12
 8006f82:	d102      	bne.n	8006f8a <HAL_RCC_OscConfig+0x3e>
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d002      	beq.n	8006f90 <HAL_RCC_OscConfig+0x44>
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d10b      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f90:	4b8d      	ldr	r3, [pc, #564]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d05b      	beq.n	8007054 <HAL_RCC_OscConfig+0x108>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d157      	bne.n	8007054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e2e1      	b.n	800756c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fb0:	d106      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x74>
 8006fb2:	4b85      	ldr	r3, [pc, #532]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a84      	ldr	r2, [pc, #528]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8006fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	e01d      	b.n	8006ffc <HAL_RCC_OscConfig+0xb0>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fc8:	d10c      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x98>
 8006fca:	4b7f      	ldr	r3, [pc, #508]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a7e      	ldr	r2, [pc, #504]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8006fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fd4:	6013      	str	r3, [r2, #0]
 8006fd6:	4b7c      	ldr	r3, [pc, #496]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a7b      	ldr	r2, [pc, #492]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8006fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	e00b      	b.n	8006ffc <HAL_RCC_OscConfig+0xb0>
 8006fe4:	4b78      	ldr	r3, [pc, #480]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a77      	ldr	r2, [pc, #476]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8006fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fee:	6013      	str	r3, [r2, #0]
 8006ff0:	4b75      	ldr	r3, [pc, #468]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a74      	ldr	r2, [pc, #464]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8006ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d013      	beq.n	800702c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007004:	f7fc fa1a 	bl	800343c <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800700a:	e008      	b.n	800701e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800700c:	f7fc fa16 	bl	800343c <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b64      	cmp	r3, #100	; 0x64
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e2a6      	b.n	800756c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800701e:	4b6a      	ldr	r3, [pc, #424]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0f0      	beq.n	800700c <HAL_RCC_OscConfig+0xc0>
 800702a:	e014      	b.n	8007056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800702c:	f7fc fa06 	bl	800343c <HAL_GetTick>
 8007030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007032:	e008      	b.n	8007046 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007034:	f7fc fa02 	bl	800343c <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b64      	cmp	r3, #100	; 0x64
 8007040:	d901      	bls.n	8007046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e292      	b.n	800756c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007046:	4b60      	ldr	r3, [pc, #384]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1f0      	bne.n	8007034 <HAL_RCC_OscConfig+0xe8>
 8007052:	e000      	b.n	8007056 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d075      	beq.n	800714e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007062:	4b59      	ldr	r3, [pc, #356]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f003 030c 	and.w	r3, r3, #12
 800706a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800706c:	4b56      	ldr	r3, [pc, #344]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f003 0303 	and.w	r3, r3, #3
 8007074:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b0c      	cmp	r3, #12
 800707a:	d102      	bne.n	8007082 <HAL_RCC_OscConfig+0x136>
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d002      	beq.n	8007088 <HAL_RCC_OscConfig+0x13c>
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b04      	cmp	r3, #4
 8007086:	d11f      	bne.n	80070c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007088:	4b4f      	ldr	r3, [pc, #316]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <HAL_RCC_OscConfig+0x154>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e265      	b.n	800756c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070a0:	4b49      	ldr	r3, [pc, #292]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	061b      	lsls	r3, r3, #24
 80070ae:	4946      	ldr	r1, [pc, #280]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80070b4:	4b45      	ldr	r3, [pc, #276]	; (80071cc <HAL_RCC_OscConfig+0x280>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fc f973 	bl	80033a4 <HAL_InitTick>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d043      	beq.n	800714c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e251      	b.n	800756c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d023      	beq.n	8007118 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070d0:	4b3d      	ldr	r3, [pc, #244]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a3c      	ldr	r2, [pc, #240]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 80070d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070dc:	f7fc f9ae 	bl	800343c <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070e4:	f7fc f9aa 	bl	800343c <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e23a      	b.n	800756c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070f6:	4b34      	ldr	r3, [pc, #208]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0f0      	beq.n	80070e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007102:	4b31      	ldr	r3, [pc, #196]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	061b      	lsls	r3, r3, #24
 8007110:	492d      	ldr	r1, [pc, #180]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8007112:	4313      	orrs	r3, r2
 8007114:	604b      	str	r3, [r1, #4]
 8007116:	e01a      	b.n	800714e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007118:	4b2b      	ldr	r3, [pc, #172]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a2a      	ldr	r2, [pc, #168]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 800711e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007124:	f7fc f98a 	bl	800343c <HAL_GetTick>
 8007128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800712a:	e008      	b.n	800713e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800712c:	f7fc f986 	bl	800343c <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e216      	b.n	800756c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800713e:	4b22      	ldr	r3, [pc, #136]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1f0      	bne.n	800712c <HAL_RCC_OscConfig+0x1e0>
 800714a:	e000      	b.n	800714e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800714c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0308 	and.w	r3, r3, #8
 8007156:	2b00      	cmp	r3, #0
 8007158:	d041      	beq.n	80071de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d01c      	beq.n	800719c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007162:	4b19      	ldr	r3, [pc, #100]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 8007164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007168:	4a17      	ldr	r2, [pc, #92]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 800716a:	f043 0301 	orr.w	r3, r3, #1
 800716e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007172:	f7fc f963 	bl	800343c <HAL_GetTick>
 8007176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007178:	e008      	b.n	800718c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800717a:	f7fc f95f 	bl	800343c <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	2b02      	cmp	r3, #2
 8007186:	d901      	bls.n	800718c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e1ef      	b.n	800756c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800718c:	4b0e      	ldr	r3, [pc, #56]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 800718e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d0ef      	beq.n	800717a <HAL_RCC_OscConfig+0x22e>
 800719a:	e020      	b.n	80071de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800719c:	4b0a      	ldr	r3, [pc, #40]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 800719e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071a2:	4a09      	ldr	r2, [pc, #36]	; (80071c8 <HAL_RCC_OscConfig+0x27c>)
 80071a4:	f023 0301 	bic.w	r3, r3, #1
 80071a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ac:	f7fc f946 	bl	800343c <HAL_GetTick>
 80071b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071b2:	e00d      	b.n	80071d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071b4:	f7fc f942 	bl	800343c <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d906      	bls.n	80071d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e1d2      	b.n	800756c <HAL_RCC_OscConfig+0x620>
 80071c6:	bf00      	nop
 80071c8:	40021000 	.word	0x40021000
 80071cc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071d0:	4b8c      	ldr	r3, [pc, #560]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 80071d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1ea      	bne.n	80071b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0304 	and.w	r3, r3, #4
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 80a6 	beq.w	8007338 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071ec:	2300      	movs	r3, #0
 80071ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80071f0:	4b84      	ldr	r3, [pc, #528]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 80071f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <HAL_RCC_OscConfig+0x2b4>
 80071fc:	2301      	movs	r3, #1
 80071fe:	e000      	b.n	8007202 <HAL_RCC_OscConfig+0x2b6>
 8007200:	2300      	movs	r3, #0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00d      	beq.n	8007222 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007206:	4b7f      	ldr	r3, [pc, #508]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 8007208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720a:	4a7e      	ldr	r2, [pc, #504]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 800720c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007210:	6593      	str	r3, [r2, #88]	; 0x58
 8007212:	4b7c      	ldr	r3, [pc, #496]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 8007214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800721e:	2301      	movs	r3, #1
 8007220:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007222:	4b79      	ldr	r3, [pc, #484]	; (8007408 <HAL_RCC_OscConfig+0x4bc>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800722a:	2b00      	cmp	r3, #0
 800722c:	d118      	bne.n	8007260 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800722e:	4b76      	ldr	r3, [pc, #472]	; (8007408 <HAL_RCC_OscConfig+0x4bc>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a75      	ldr	r2, [pc, #468]	; (8007408 <HAL_RCC_OscConfig+0x4bc>)
 8007234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800723a:	f7fc f8ff 	bl	800343c <HAL_GetTick>
 800723e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007240:	e008      	b.n	8007254 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007242:	f7fc f8fb 	bl	800343c <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d901      	bls.n	8007254 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e18b      	b.n	800756c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007254:	4b6c      	ldr	r3, [pc, #432]	; (8007408 <HAL_RCC_OscConfig+0x4bc>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0f0      	beq.n	8007242 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d108      	bne.n	800727a <HAL_RCC_OscConfig+0x32e>
 8007268:	4b66      	ldr	r3, [pc, #408]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 800726a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726e:	4a65      	ldr	r2, [pc, #404]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 8007270:	f043 0301 	orr.w	r3, r3, #1
 8007274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007278:	e024      	b.n	80072c4 <HAL_RCC_OscConfig+0x378>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	2b05      	cmp	r3, #5
 8007280:	d110      	bne.n	80072a4 <HAL_RCC_OscConfig+0x358>
 8007282:	4b60      	ldr	r3, [pc, #384]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 8007284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007288:	4a5e      	ldr	r2, [pc, #376]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 800728a:	f043 0304 	orr.w	r3, r3, #4
 800728e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007292:	4b5c      	ldr	r3, [pc, #368]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 8007294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007298:	4a5a      	ldr	r2, [pc, #360]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 800729a:	f043 0301 	orr.w	r3, r3, #1
 800729e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072a2:	e00f      	b.n	80072c4 <HAL_RCC_OscConfig+0x378>
 80072a4:	4b57      	ldr	r3, [pc, #348]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 80072a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072aa:	4a56      	ldr	r2, [pc, #344]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 80072ac:	f023 0301 	bic.w	r3, r3, #1
 80072b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072b4:	4b53      	ldr	r3, [pc, #332]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 80072b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ba:	4a52      	ldr	r2, [pc, #328]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 80072bc:	f023 0304 	bic.w	r3, r3, #4
 80072c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d016      	beq.n	80072fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072cc:	f7fc f8b6 	bl	800343c <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072d2:	e00a      	b.n	80072ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072d4:	f7fc f8b2 	bl	800343c <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d901      	bls.n	80072ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e140      	b.n	800756c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072ea:	4b46      	ldr	r3, [pc, #280]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 80072ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f0:	f003 0302 	and.w	r3, r3, #2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d0ed      	beq.n	80072d4 <HAL_RCC_OscConfig+0x388>
 80072f8:	e015      	b.n	8007326 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072fa:	f7fc f89f 	bl	800343c <HAL_GetTick>
 80072fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007300:	e00a      	b.n	8007318 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007302:	f7fc f89b 	bl	800343c <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007310:	4293      	cmp	r3, r2
 8007312:	d901      	bls.n	8007318 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e129      	b.n	800756c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007318:	4b3a      	ldr	r3, [pc, #232]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 800731a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1ed      	bne.n	8007302 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007326:	7ffb      	ldrb	r3, [r7, #31]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d105      	bne.n	8007338 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800732c:	4b35      	ldr	r3, [pc, #212]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 800732e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007330:	4a34      	ldr	r2, [pc, #208]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 8007332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007336:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0320 	and.w	r3, r3, #32
 8007340:	2b00      	cmp	r3, #0
 8007342:	d03c      	beq.n	80073be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d01c      	beq.n	8007386 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800734c:	4b2d      	ldr	r3, [pc, #180]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 800734e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007352:	4a2c      	ldr	r2, [pc, #176]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 8007354:	f043 0301 	orr.w	r3, r3, #1
 8007358:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800735c:	f7fc f86e 	bl	800343c <HAL_GetTick>
 8007360:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007362:	e008      	b.n	8007376 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007364:	f7fc f86a 	bl	800343c <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	2b02      	cmp	r3, #2
 8007370:	d901      	bls.n	8007376 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e0fa      	b.n	800756c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007376:	4b23      	ldr	r3, [pc, #140]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 8007378:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0ef      	beq.n	8007364 <HAL_RCC_OscConfig+0x418>
 8007384:	e01b      	b.n	80073be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007386:	4b1f      	ldr	r3, [pc, #124]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 8007388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800738c:	4a1d      	ldr	r2, [pc, #116]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 800738e:	f023 0301 	bic.w	r3, r3, #1
 8007392:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007396:	f7fc f851 	bl	800343c <HAL_GetTick>
 800739a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800739c:	e008      	b.n	80073b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800739e:	f7fc f84d 	bl	800343c <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d901      	bls.n	80073b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e0dd      	b.n	800756c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073b0:	4b14      	ldr	r3, [pc, #80]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 80073b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1ef      	bne.n	800739e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 80d1 	beq.w	800756a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073c8:	4b0e      	ldr	r3, [pc, #56]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f003 030c 	and.w	r3, r3, #12
 80073d0:	2b0c      	cmp	r3, #12
 80073d2:	f000 808b 	beq.w	80074ec <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d15e      	bne.n	800749c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073de:	4b09      	ldr	r3, [pc, #36]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a08      	ldr	r2, [pc, #32]	; (8007404 <HAL_RCC_OscConfig+0x4b8>)
 80073e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ea:	f7fc f827 	bl	800343c <HAL_GetTick>
 80073ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073f0:	e00c      	b.n	800740c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073f2:	f7fc f823 	bl	800343c <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d905      	bls.n	800740c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e0b3      	b.n	800756c <HAL_RCC_OscConfig+0x620>
 8007404:	40021000 	.word	0x40021000
 8007408:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800740c:	4b59      	ldr	r3, [pc, #356]	; (8007574 <HAL_RCC_OscConfig+0x628>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1ec      	bne.n	80073f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007418:	4b56      	ldr	r3, [pc, #344]	; (8007574 <HAL_RCC_OscConfig+0x628>)
 800741a:	68da      	ldr	r2, [r3, #12]
 800741c:	4b56      	ldr	r3, [pc, #344]	; (8007578 <HAL_RCC_OscConfig+0x62c>)
 800741e:	4013      	ands	r3, r2
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6a11      	ldr	r1, [r2, #32]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007428:	3a01      	subs	r2, #1
 800742a:	0112      	lsls	r2, r2, #4
 800742c:	4311      	orrs	r1, r2
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007432:	0212      	lsls	r2, r2, #8
 8007434:	4311      	orrs	r1, r2
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800743a:	0852      	lsrs	r2, r2, #1
 800743c:	3a01      	subs	r2, #1
 800743e:	0552      	lsls	r2, r2, #21
 8007440:	4311      	orrs	r1, r2
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007446:	0852      	lsrs	r2, r2, #1
 8007448:	3a01      	subs	r2, #1
 800744a:	0652      	lsls	r2, r2, #25
 800744c:	4311      	orrs	r1, r2
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007452:	06d2      	lsls	r2, r2, #27
 8007454:	430a      	orrs	r2, r1
 8007456:	4947      	ldr	r1, [pc, #284]	; (8007574 <HAL_RCC_OscConfig+0x628>)
 8007458:	4313      	orrs	r3, r2
 800745a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800745c:	4b45      	ldr	r3, [pc, #276]	; (8007574 <HAL_RCC_OscConfig+0x628>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a44      	ldr	r2, [pc, #272]	; (8007574 <HAL_RCC_OscConfig+0x628>)
 8007462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007466:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007468:	4b42      	ldr	r3, [pc, #264]	; (8007574 <HAL_RCC_OscConfig+0x628>)
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	4a41      	ldr	r2, [pc, #260]	; (8007574 <HAL_RCC_OscConfig+0x628>)
 800746e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007472:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007474:	f7fb ffe2 	bl	800343c <HAL_GetTick>
 8007478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800747a:	e008      	b.n	800748e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800747c:	f7fb ffde 	bl	800343c <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b02      	cmp	r3, #2
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e06e      	b.n	800756c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800748e:	4b39      	ldr	r3, [pc, #228]	; (8007574 <HAL_RCC_OscConfig+0x628>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0f0      	beq.n	800747c <HAL_RCC_OscConfig+0x530>
 800749a:	e066      	b.n	800756a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800749c:	4b35      	ldr	r3, [pc, #212]	; (8007574 <HAL_RCC_OscConfig+0x628>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a34      	ldr	r2, [pc, #208]	; (8007574 <HAL_RCC_OscConfig+0x628>)
 80074a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074a6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80074a8:	4b32      	ldr	r3, [pc, #200]	; (8007574 <HAL_RCC_OscConfig+0x628>)
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	4a31      	ldr	r2, [pc, #196]	; (8007574 <HAL_RCC_OscConfig+0x628>)
 80074ae:	f023 0303 	bic.w	r3, r3, #3
 80074b2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80074b4:	4b2f      	ldr	r3, [pc, #188]	; (8007574 <HAL_RCC_OscConfig+0x628>)
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	4a2e      	ldr	r2, [pc, #184]	; (8007574 <HAL_RCC_OscConfig+0x628>)
 80074ba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80074be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c4:	f7fb ffba 	bl	800343c <HAL_GetTick>
 80074c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074ca:	e008      	b.n	80074de <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074cc:	f7fb ffb6 	bl	800343c <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d901      	bls.n	80074de <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e046      	b.n	800756c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074de:	4b25      	ldr	r3, [pc, #148]	; (8007574 <HAL_RCC_OscConfig+0x628>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1f0      	bne.n	80074cc <HAL_RCC_OscConfig+0x580>
 80074ea:	e03e      	b.n	800756a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	69db      	ldr	r3, [r3, #28]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d101      	bne.n	80074f8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e039      	b.n	800756c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80074f8:	4b1e      	ldr	r3, [pc, #120]	; (8007574 <HAL_RCC_OscConfig+0x628>)
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f003 0203 	and.w	r2, r3, #3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a1b      	ldr	r3, [r3, #32]
 8007508:	429a      	cmp	r2, r3
 800750a:	d12c      	bne.n	8007566 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007516:	3b01      	subs	r3, #1
 8007518:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800751a:	429a      	cmp	r2, r3
 800751c:	d123      	bne.n	8007566 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007528:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800752a:	429a      	cmp	r2, r3
 800752c:	d11b      	bne.n	8007566 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800753a:	429a      	cmp	r2, r3
 800753c:	d113      	bne.n	8007566 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007548:	085b      	lsrs	r3, r3, #1
 800754a:	3b01      	subs	r3, #1
 800754c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800754e:	429a      	cmp	r2, r3
 8007550:	d109      	bne.n	8007566 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755c:	085b      	lsrs	r3, r3, #1
 800755e:	3b01      	subs	r3, #1
 8007560:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007562:	429a      	cmp	r2, r3
 8007564:	d001      	beq.n	800756a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e000      	b.n	800756c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3720      	adds	r7, #32
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	40021000 	.word	0x40021000
 8007578:	019f800c 	.word	0x019f800c

0800757c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007586:	2300      	movs	r3, #0
 8007588:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e11e      	b.n	80077d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007594:	4b91      	ldr	r3, [pc, #580]	; (80077dc <HAL_RCC_ClockConfig+0x260>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 030f 	and.w	r3, r3, #15
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d910      	bls.n	80075c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075a2:	4b8e      	ldr	r3, [pc, #568]	; (80077dc <HAL_RCC_ClockConfig+0x260>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f023 020f 	bic.w	r2, r3, #15
 80075aa:	498c      	ldr	r1, [pc, #560]	; (80077dc <HAL_RCC_ClockConfig+0x260>)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075b2:	4b8a      	ldr	r3, [pc, #552]	; (80077dc <HAL_RCC_ClockConfig+0x260>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 030f 	and.w	r3, r3, #15
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d001      	beq.n	80075c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e106      	b.n	80077d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d073      	beq.n	80076b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d129      	bne.n	800762c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075d8:	4b81      	ldr	r3, [pc, #516]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e0f4      	b.n	80077d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80075e8:	f000 f99e 	bl	8007928 <RCC_GetSysClockFreqFromPLLSource>
 80075ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	4a7c      	ldr	r2, [pc, #496]	; (80077e4 <HAL_RCC_ClockConfig+0x268>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d93f      	bls.n	8007676 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80075f6:	4b7a      	ldr	r3, [pc, #488]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d009      	beq.n	8007616 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800760a:	2b00      	cmp	r3, #0
 800760c:	d033      	beq.n	8007676 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007612:	2b00      	cmp	r3, #0
 8007614:	d12f      	bne.n	8007676 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007616:	4b72      	ldr	r3, [pc, #456]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800761e:	4a70      	ldr	r2, [pc, #448]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007624:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007626:	2380      	movs	r3, #128	; 0x80
 8007628:	617b      	str	r3, [r7, #20]
 800762a:	e024      	b.n	8007676 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	2b02      	cmp	r3, #2
 8007632:	d107      	bne.n	8007644 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007634:	4b6a      	ldr	r3, [pc, #424]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d109      	bne.n	8007654 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e0c6      	b.n	80077d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007644:	4b66      	ldr	r3, [pc, #408]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e0be      	b.n	80077d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007654:	f000 f8ce 	bl	80077f4 <HAL_RCC_GetSysClockFreq>
 8007658:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	4a61      	ldr	r2, [pc, #388]	; (80077e4 <HAL_RCC_ClockConfig+0x268>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d909      	bls.n	8007676 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007662:	4b5f      	ldr	r3, [pc, #380]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800766a:	4a5d      	ldr	r2, [pc, #372]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 800766c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007670:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007672:	2380      	movs	r3, #128	; 0x80
 8007674:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007676:	4b5a      	ldr	r3, [pc, #360]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f023 0203 	bic.w	r2, r3, #3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	4957      	ldr	r1, [pc, #348]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007684:	4313      	orrs	r3, r2
 8007686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007688:	f7fb fed8 	bl	800343c <HAL_GetTick>
 800768c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800768e:	e00a      	b.n	80076a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007690:	f7fb fed4 	bl	800343c <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	f241 3288 	movw	r2, #5000	; 0x1388
 800769e:	4293      	cmp	r3, r2
 80076a0:	d901      	bls.n	80076a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e095      	b.n	80077d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076a6:	4b4e      	ldr	r3, [pc, #312]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f003 020c 	and.w	r2, r3, #12
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d1eb      	bne.n	8007690 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d023      	beq.n	800770c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d005      	beq.n	80076dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076d0:	4b43      	ldr	r3, [pc, #268]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	4a42      	ldr	r2, [pc, #264]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80076d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80076da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d007      	beq.n	80076f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80076e8:	4b3d      	ldr	r3, [pc, #244]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80076f0:	4a3b      	ldr	r2, [pc, #236]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80076f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80076f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076f8:	4b39      	ldr	r3, [pc, #228]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	4936      	ldr	r1, [pc, #216]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007706:	4313      	orrs	r3, r2
 8007708:	608b      	str	r3, [r1, #8]
 800770a:	e008      	b.n	800771e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2b80      	cmp	r3, #128	; 0x80
 8007710:	d105      	bne.n	800771e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007712:	4b33      	ldr	r3, [pc, #204]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	4a32      	ldr	r2, [pc, #200]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007718:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800771c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800771e:	4b2f      	ldr	r3, [pc, #188]	; (80077dc <HAL_RCC_ClockConfig+0x260>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 030f 	and.w	r3, r3, #15
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	429a      	cmp	r2, r3
 800772a:	d21d      	bcs.n	8007768 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800772c:	4b2b      	ldr	r3, [pc, #172]	; (80077dc <HAL_RCC_ClockConfig+0x260>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f023 020f 	bic.w	r2, r3, #15
 8007734:	4929      	ldr	r1, [pc, #164]	; (80077dc <HAL_RCC_ClockConfig+0x260>)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	4313      	orrs	r3, r2
 800773a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800773c:	f7fb fe7e 	bl	800343c <HAL_GetTick>
 8007740:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007742:	e00a      	b.n	800775a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007744:	f7fb fe7a 	bl	800343c <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007752:	4293      	cmp	r3, r2
 8007754:	d901      	bls.n	800775a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e03b      	b.n	80077d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800775a:	4b20      	ldr	r3, [pc, #128]	; (80077dc <HAL_RCC_ClockConfig+0x260>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	429a      	cmp	r2, r3
 8007766:	d1ed      	bne.n	8007744 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0304 	and.w	r3, r3, #4
 8007770:	2b00      	cmp	r3, #0
 8007772:	d008      	beq.n	8007786 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007774:	4b1a      	ldr	r3, [pc, #104]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	4917      	ldr	r1, [pc, #92]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007782:	4313      	orrs	r3, r2
 8007784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	2b00      	cmp	r3, #0
 8007790:	d009      	beq.n	80077a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007792:	4b13      	ldr	r3, [pc, #76]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	490f      	ldr	r1, [pc, #60]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077a6:	f000 f825 	bl	80077f4 <HAL_RCC_GetSysClockFreq>
 80077aa:	4602      	mov	r2, r0
 80077ac:	4b0c      	ldr	r3, [pc, #48]	; (80077e0 <HAL_RCC_ClockConfig+0x264>)
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	091b      	lsrs	r3, r3, #4
 80077b2:	f003 030f 	and.w	r3, r3, #15
 80077b6:	490c      	ldr	r1, [pc, #48]	; (80077e8 <HAL_RCC_ClockConfig+0x26c>)
 80077b8:	5ccb      	ldrb	r3, [r1, r3]
 80077ba:	f003 031f 	and.w	r3, r3, #31
 80077be:	fa22 f303 	lsr.w	r3, r2, r3
 80077c2:	4a0a      	ldr	r2, [pc, #40]	; (80077ec <HAL_RCC_ClockConfig+0x270>)
 80077c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80077c6:	4b0a      	ldr	r3, [pc, #40]	; (80077f0 <HAL_RCC_ClockConfig+0x274>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fb fdea 	bl	80033a4 <HAL_InitTick>
 80077d0:	4603      	mov	r3, r0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	40022000 	.word	0x40022000
 80077e0:	40021000 	.word	0x40021000
 80077e4:	04c4b400 	.word	0x04c4b400
 80077e8:	080097d8 	.word	0x080097d8
 80077ec:	20000000 	.word	0x20000000
 80077f0:	20000004 	.word	0x20000004

080077f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80077fa:	4b2c      	ldr	r3, [pc, #176]	; (80078ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 030c 	and.w	r3, r3, #12
 8007802:	2b04      	cmp	r3, #4
 8007804:	d102      	bne.n	800780c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007806:	4b2a      	ldr	r3, [pc, #168]	; (80078b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007808:	613b      	str	r3, [r7, #16]
 800780a:	e047      	b.n	800789c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800780c:	4b27      	ldr	r3, [pc, #156]	; (80078ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f003 030c 	and.w	r3, r3, #12
 8007814:	2b08      	cmp	r3, #8
 8007816:	d102      	bne.n	800781e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007818:	4b26      	ldr	r3, [pc, #152]	; (80078b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800781a:	613b      	str	r3, [r7, #16]
 800781c:	e03e      	b.n	800789c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800781e:	4b23      	ldr	r3, [pc, #140]	; (80078ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f003 030c 	and.w	r3, r3, #12
 8007826:	2b0c      	cmp	r3, #12
 8007828:	d136      	bne.n	8007898 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800782a:	4b20      	ldr	r3, [pc, #128]	; (80078ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	f003 0303 	and.w	r3, r3, #3
 8007832:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007834:	4b1d      	ldr	r3, [pc, #116]	; (80078ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	091b      	lsrs	r3, r3, #4
 800783a:	f003 030f 	and.w	r3, r3, #15
 800783e:	3301      	adds	r3, #1
 8007840:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2b03      	cmp	r3, #3
 8007846:	d10c      	bne.n	8007862 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007848:	4a1a      	ldr	r2, [pc, #104]	; (80078b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007850:	4a16      	ldr	r2, [pc, #88]	; (80078ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8007852:	68d2      	ldr	r2, [r2, #12]
 8007854:	0a12      	lsrs	r2, r2, #8
 8007856:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800785a:	fb02 f303 	mul.w	r3, r2, r3
 800785e:	617b      	str	r3, [r7, #20]
      break;
 8007860:	e00c      	b.n	800787c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007862:	4a13      	ldr	r2, [pc, #76]	; (80078b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	fbb2 f3f3 	udiv	r3, r2, r3
 800786a:	4a10      	ldr	r2, [pc, #64]	; (80078ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800786c:	68d2      	ldr	r2, [r2, #12]
 800786e:	0a12      	lsrs	r2, r2, #8
 8007870:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007874:	fb02 f303 	mul.w	r3, r2, r3
 8007878:	617b      	str	r3, [r7, #20]
      break;
 800787a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800787c:	4b0b      	ldr	r3, [pc, #44]	; (80078ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	0e5b      	lsrs	r3, r3, #25
 8007882:	f003 0303 	and.w	r3, r3, #3
 8007886:	3301      	adds	r3, #1
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	fbb2 f3f3 	udiv	r3, r2, r3
 8007894:	613b      	str	r3, [r7, #16]
 8007896:	e001      	b.n	800789c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800789c:	693b      	ldr	r3, [r7, #16]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	371c      	adds	r7, #28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	40021000 	.word	0x40021000
 80078b0:	00f42400 	.word	0x00f42400
 80078b4:	007a1200 	.word	0x007a1200

080078b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078bc:	4b03      	ldr	r3, [pc, #12]	; (80078cc <HAL_RCC_GetHCLKFreq+0x14>)
 80078be:	681b      	ldr	r3, [r3, #0]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	20000000 	.word	0x20000000

080078d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80078d4:	f7ff fff0 	bl	80078b8 <HAL_RCC_GetHCLKFreq>
 80078d8:	4602      	mov	r2, r0
 80078da:	4b06      	ldr	r3, [pc, #24]	; (80078f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	0a1b      	lsrs	r3, r3, #8
 80078e0:	f003 0307 	and.w	r3, r3, #7
 80078e4:	4904      	ldr	r1, [pc, #16]	; (80078f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078e6:	5ccb      	ldrb	r3, [r1, r3]
 80078e8:	f003 031f 	and.w	r3, r3, #31
 80078ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	40021000 	.word	0x40021000
 80078f8:	080097e8 	.word	0x080097e8

080078fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007900:	f7ff ffda 	bl	80078b8 <HAL_RCC_GetHCLKFreq>
 8007904:	4602      	mov	r2, r0
 8007906:	4b06      	ldr	r3, [pc, #24]	; (8007920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	0adb      	lsrs	r3, r3, #11
 800790c:	f003 0307 	and.w	r3, r3, #7
 8007910:	4904      	ldr	r1, [pc, #16]	; (8007924 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007912:	5ccb      	ldrb	r3, [r1, r3]
 8007914:	f003 031f 	and.w	r3, r3, #31
 8007918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800791c:	4618      	mov	r0, r3
 800791e:	bd80      	pop	{r7, pc}
 8007920:	40021000 	.word	0x40021000
 8007924:	080097e8 	.word	0x080097e8

08007928 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800792e:	4b1e      	ldr	r3, [pc, #120]	; (80079a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007938:	4b1b      	ldr	r3, [pc, #108]	; (80079a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	091b      	lsrs	r3, r3, #4
 800793e:	f003 030f 	and.w	r3, r3, #15
 8007942:	3301      	adds	r3, #1
 8007944:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2b03      	cmp	r3, #3
 800794a:	d10c      	bne.n	8007966 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800794c:	4a17      	ldr	r2, [pc, #92]	; (80079ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	fbb2 f3f3 	udiv	r3, r2, r3
 8007954:	4a14      	ldr	r2, [pc, #80]	; (80079a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007956:	68d2      	ldr	r2, [r2, #12]
 8007958:	0a12      	lsrs	r2, r2, #8
 800795a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800795e:	fb02 f303 	mul.w	r3, r2, r3
 8007962:	617b      	str	r3, [r7, #20]
    break;
 8007964:	e00c      	b.n	8007980 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007966:	4a12      	ldr	r2, [pc, #72]	; (80079b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	fbb2 f3f3 	udiv	r3, r2, r3
 800796e:	4a0e      	ldr	r2, [pc, #56]	; (80079a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007970:	68d2      	ldr	r2, [r2, #12]
 8007972:	0a12      	lsrs	r2, r2, #8
 8007974:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007978:	fb02 f303 	mul.w	r3, r2, r3
 800797c:	617b      	str	r3, [r7, #20]
    break;
 800797e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007980:	4b09      	ldr	r3, [pc, #36]	; (80079a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	0e5b      	lsrs	r3, r3, #25
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	3301      	adds	r3, #1
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	fbb2 f3f3 	udiv	r3, r2, r3
 8007998:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800799a:	687b      	ldr	r3, [r7, #4]
}
 800799c:	4618      	mov	r0, r3
 800799e:	371c      	adds	r7, #28
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	40021000 	.word	0x40021000
 80079ac:	007a1200 	.word	0x007a1200
 80079b0:	00f42400 	.word	0x00f42400

080079b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079bc:	2300      	movs	r3, #0
 80079be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079c0:	2300      	movs	r3, #0
 80079c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 8098 	beq.w	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079d2:	2300      	movs	r3, #0
 80079d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079d6:	4b43      	ldr	r3, [pc, #268]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10d      	bne.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079e2:	4b40      	ldr	r3, [pc, #256]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e6:	4a3f      	ldr	r2, [pc, #252]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ec:	6593      	str	r3, [r2, #88]	; 0x58
 80079ee:	4b3d      	ldr	r3, [pc, #244]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f6:	60bb      	str	r3, [r7, #8]
 80079f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079fa:	2301      	movs	r3, #1
 80079fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079fe:	4b3a      	ldr	r3, [pc, #232]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a39      	ldr	r2, [pc, #228]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a0a:	f7fb fd17 	bl	800343c <HAL_GetTick>
 8007a0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a10:	e009      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a12:	f7fb fd13 	bl	800343c <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d902      	bls.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	74fb      	strb	r3, [r7, #19]
        break;
 8007a24:	e005      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a26:	4b30      	ldr	r3, [pc, #192]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d0ef      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007a32:	7cfb      	ldrb	r3, [r7, #19]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d159      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a38:	4b2a      	ldr	r3, [pc, #168]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d01e      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d019      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a54:	4b23      	ldr	r3, [pc, #140]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a60:	4b20      	ldr	r3, [pc, #128]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a66:	4a1f      	ldr	r2, [pc, #124]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a70:	4b1c      	ldr	r3, [pc, #112]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a76:	4a1b      	ldr	r2, [pc, #108]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a80:	4a18      	ldr	r2, [pc, #96]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d016      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a92:	f7fb fcd3 	bl	800343c <HAL_GetTick>
 8007a96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a98:	e00b      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a9a:	f7fb fccf 	bl	800343c <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d902      	bls.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	74fb      	strb	r3, [r7, #19]
            break;
 8007ab0:	e006      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ab2:	4b0c      	ldr	r3, [pc, #48]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0ec      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007ac0:	7cfb      	ldrb	r3, [r7, #19]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10b      	bne.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ac6:	4b07      	ldr	r3, [pc, #28]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad4:	4903      	ldr	r1, [pc, #12]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007adc:	e008      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ade:	7cfb      	ldrb	r3, [r7, #19]
 8007ae0:	74bb      	strb	r3, [r7, #18]
 8007ae2:	e005      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007ae4:	40021000 	.word	0x40021000
 8007ae8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aec:	7cfb      	ldrb	r3, [r7, #19]
 8007aee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007af0:	7c7b      	ldrb	r3, [r7, #17]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d105      	bne.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007af6:	4ba7      	ldr	r3, [pc, #668]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007afa:	4aa6      	ldr	r2, [pc, #664]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b0e:	4ba1      	ldr	r3, [pc, #644]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b14:	f023 0203 	bic.w	r2, r3, #3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	499d      	ldr	r1, [pc, #628]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0302 	and.w	r3, r3, #2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00a      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b30:	4b98      	ldr	r3, [pc, #608]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b36:	f023 020c 	bic.w	r2, r3, #12
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	4995      	ldr	r1, [pc, #596]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0304 	and.w	r3, r3, #4
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b52:	4b90      	ldr	r3, [pc, #576]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	498c      	ldr	r1, [pc, #560]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0308 	and.w	r3, r3, #8
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00a      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b74:	4b87      	ldr	r3, [pc, #540]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	4984      	ldr	r1, [pc, #528]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0310 	and.w	r3, r3, #16
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00a      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b96:	4b7f      	ldr	r3, [pc, #508]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	497b      	ldr	r1, [pc, #492]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0320 	and.w	r3, r3, #32
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bb8:	4b76      	ldr	r3, [pc, #472]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	4973      	ldr	r1, [pc, #460]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bda:	4b6e      	ldr	r3, [pc, #440]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	496a      	ldr	r1, [pc, #424]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00a      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007bfc:	4b65      	ldr	r3, [pc, #404]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	4962      	ldr	r1, [pc, #392]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c1e:	4b5d      	ldr	r3, [pc, #372]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	4959      	ldr	r1, [pc, #356]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00a      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c40:	4b54      	ldr	r3, [pc, #336]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c46:	f023 0203 	bic.w	r2, r3, #3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4e:	4951      	ldr	r1, [pc, #324]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c62:	4b4c      	ldr	r3, [pc, #304]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c70:	4948      	ldr	r1, [pc, #288]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d015      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c84:	4b43      	ldr	r3, [pc, #268]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c92:	4940      	ldr	r1, [pc, #256]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ca2:	d105      	bne.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ca4:	4b3b      	ldr	r3, [pc, #236]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	4a3a      	ldr	r2, [pc, #232]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d015      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007cbc:	4b35      	ldr	r3, [pc, #212]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cca:	4932      	ldr	r1, [pc, #200]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cda:	d105      	bne.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cdc:	4b2d      	ldr	r3, [pc, #180]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	4a2c      	ldr	r2, [pc, #176]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ce6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d015      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007cf4:	4b27      	ldr	r3, [pc, #156]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cfa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d02:	4924      	ldr	r1, [pc, #144]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d12:	d105      	bne.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d14:	4b1f      	ldr	r3, [pc, #124]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	4a1e      	ldr	r2, [pc, #120]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d1e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d015      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d2c:	4b19      	ldr	r3, [pc, #100]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3a:	4916      	ldr	r1, [pc, #88]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d4a:	d105      	bne.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d4c:	4b11      	ldr	r3, [pc, #68]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	4a10      	ldr	r2, [pc, #64]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d56:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d019      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d64:	4b0b      	ldr	r3, [pc, #44]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	4908      	ldr	r1, [pc, #32]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d82:	d109      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d84:	4b03      	ldr	r3, [pc, #12]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	4a02      	ldr	r2, [pc, #8]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d8e:	60d3      	str	r3, [r2, #12]
 8007d90:	e002      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007d92:	bf00      	nop
 8007d94:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d015      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007da4:	4b29      	ldr	r3, [pc, #164]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007daa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db2:	4926      	ldr	r1, [pc, #152]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dc2:	d105      	bne.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007dc4:	4b21      	ldr	r3, [pc, #132]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	4a20      	ldr	r2, [pc, #128]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dce:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d015      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007ddc:	4b1b      	ldr	r3, [pc, #108]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dea:	4918      	ldr	r1, [pc, #96]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dfa:	d105      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007dfc:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	4a12      	ldr	r2, [pc, #72]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e06:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d015      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e14:	4b0d      	ldr	r3, [pc, #52]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e22:	490a      	ldr	r1, [pc, #40]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e32:	d105      	bne.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e34:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	4a04      	ldr	r2, [pc, #16]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007e40:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	40021000 	.word	0x40021000

08007e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e049      	b.n	8007ef6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d106      	bne.n	8007e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7fb f8e6 	bl	8003048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	4610      	mov	r0, r2
 8007e90:	f000 fb6c 	bl	800856c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d001      	beq.n	8007f18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e054      	b.n	8007fc2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f042 0201 	orr.w	r2, r2, #1
 8007f2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a26      	ldr	r2, [pc, #152]	; (8007fd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d022      	beq.n	8007f80 <HAL_TIM_Base_Start_IT+0x80>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f42:	d01d      	beq.n	8007f80 <HAL_TIM_Base_Start_IT+0x80>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a22      	ldr	r2, [pc, #136]	; (8007fd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d018      	beq.n	8007f80 <HAL_TIM_Base_Start_IT+0x80>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a21      	ldr	r2, [pc, #132]	; (8007fd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d013      	beq.n	8007f80 <HAL_TIM_Base_Start_IT+0x80>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a1f      	ldr	r2, [pc, #124]	; (8007fdc <HAL_TIM_Base_Start_IT+0xdc>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d00e      	beq.n	8007f80 <HAL_TIM_Base_Start_IT+0x80>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a1e      	ldr	r2, [pc, #120]	; (8007fe0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d009      	beq.n	8007f80 <HAL_TIM_Base_Start_IT+0x80>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a1c      	ldr	r2, [pc, #112]	; (8007fe4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d004      	beq.n	8007f80 <HAL_TIM_Base_Start_IT+0x80>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a1b      	ldr	r2, [pc, #108]	; (8007fe8 <HAL_TIM_Base_Start_IT+0xe8>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d115      	bne.n	8007fac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689a      	ldr	r2, [r3, #8]
 8007f86:	4b19      	ldr	r3, [pc, #100]	; (8007fec <HAL_TIM_Base_Start_IT+0xec>)
 8007f88:	4013      	ands	r3, r2
 8007f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b06      	cmp	r3, #6
 8007f90:	d015      	beq.n	8007fbe <HAL_TIM_Base_Start_IT+0xbe>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f98:	d011      	beq.n	8007fbe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f042 0201 	orr.w	r2, r2, #1
 8007fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007faa:	e008      	b.n	8007fbe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f042 0201 	orr.w	r2, r2, #1
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	e000      	b.n	8007fc0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	40012c00 	.word	0x40012c00
 8007fd4:	40000400 	.word	0x40000400
 8007fd8:	40000800 	.word	0x40000800
 8007fdc:	40000c00 	.word	0x40000c00
 8007fe0:	40013400 	.word	0x40013400
 8007fe4:	40014000 	.word	0x40014000
 8007fe8:	40015000 	.word	0x40015000
 8007fec:	00010007 	.word	0x00010007

08007ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	f003 0302 	and.w	r3, r3, #2
 8008002:	2b02      	cmp	r3, #2
 8008004:	d122      	bne.n	800804c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	f003 0302 	and.w	r3, r3, #2
 8008010:	2b02      	cmp	r3, #2
 8008012:	d11b      	bne.n	800804c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f06f 0202 	mvn.w	r2, #2
 800801c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	f003 0303 	and.w	r3, r3, #3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fa7c 	bl	8008530 <HAL_TIM_IC_CaptureCallback>
 8008038:	e005      	b.n	8008046 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fa6e 	bl	800851c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fa7f 	bl	8008544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	f003 0304 	and.w	r3, r3, #4
 8008056:	2b04      	cmp	r3, #4
 8008058:	d122      	bne.n	80080a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	f003 0304 	and.w	r3, r3, #4
 8008064:	2b04      	cmp	r3, #4
 8008066:	d11b      	bne.n	80080a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f06f 0204 	mvn.w	r2, #4
 8008070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2202      	movs	r2, #2
 8008076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fa52 	bl	8008530 <HAL_TIM_IC_CaptureCallback>
 800808c:	e005      	b.n	800809a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fa44 	bl	800851c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fa55 	bl	8008544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	f003 0308 	and.w	r3, r3, #8
 80080aa:	2b08      	cmp	r3, #8
 80080ac:	d122      	bne.n	80080f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	f003 0308 	and.w	r3, r3, #8
 80080b8:	2b08      	cmp	r3, #8
 80080ba:	d11b      	bne.n	80080f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f06f 0208 	mvn.w	r2, #8
 80080c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2204      	movs	r2, #4
 80080ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	f003 0303 	and.w	r3, r3, #3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fa28 	bl	8008530 <HAL_TIM_IC_CaptureCallback>
 80080e0:	e005      	b.n	80080ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fa1a 	bl	800851c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fa2b 	bl	8008544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	f003 0310 	and.w	r3, r3, #16
 80080fe:	2b10      	cmp	r3, #16
 8008100:	d122      	bne.n	8008148 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	f003 0310 	and.w	r3, r3, #16
 800810c:	2b10      	cmp	r3, #16
 800810e:	d11b      	bne.n	8008148 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f06f 0210 	mvn.w	r2, #16
 8008118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2208      	movs	r2, #8
 800811e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f9fe 	bl	8008530 <HAL_TIM_IC_CaptureCallback>
 8008134:	e005      	b.n	8008142 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f9f0 	bl	800851c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fa01 	bl	8008544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b01      	cmp	r3, #1
 8008154:	d10e      	bne.n	8008174 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	2b01      	cmp	r3, #1
 8008162:	d107      	bne.n	8008174 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f06f 0201 	mvn.w	r2, #1
 800816c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7fa fe4a 	bl	8002e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800817e:	2b80      	cmp	r3, #128	; 0x80
 8008180:	d10e      	bne.n	80081a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800818c:	2b80      	cmp	r3, #128	; 0x80
 800818e:	d107      	bne.n	80081a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fbca 	bl	8008934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ae:	d10e      	bne.n	80081ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ba:	2b80      	cmp	r3, #128	; 0x80
 80081bc:	d107      	bne.n	80081ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80081c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fbbd 	bl	8008948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d8:	2b40      	cmp	r3, #64	; 0x40
 80081da:	d10e      	bne.n	80081fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e6:	2b40      	cmp	r3, #64	; 0x40
 80081e8:	d107      	bne.n	80081fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f9af 	bl	8008558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	f003 0320 	and.w	r3, r3, #32
 8008204:	2b20      	cmp	r3, #32
 8008206:	d10e      	bne.n	8008226 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	f003 0320 	and.w	r3, r3, #32
 8008212:	2b20      	cmp	r3, #32
 8008214:	d107      	bne.n	8008226 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f06f 0220 	mvn.w	r2, #32
 800821e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fb7d 	bl	8008920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008234:	d10f      	bne.n	8008256 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008244:	d107      	bne.n	8008256 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800824e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fb83 	bl	800895c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008260:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008264:	d10f      	bne.n	8008286 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008270:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008274:	d107      	bne.n	8008286 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800827e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fb75 	bl	8008970 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008294:	d10f      	bne.n	80082b6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082a4:	d107      	bne.n	80082b6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80082ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fb67 	bl	8008984 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082c4:	d10f      	bne.n	80082e6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082d4:	d107      	bne.n	80082e6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80082de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fb59 	bl	8008998 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
	...

080082f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008304:	2b01      	cmp	r3, #1
 8008306:	d101      	bne.n	800830c <HAL_TIM_ConfigClockSource+0x1c>
 8008308:	2302      	movs	r3, #2
 800830a:	e0f6      	b.n	80084fa <HAL_TIM_ConfigClockSource+0x20a>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800832a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800832e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a6f      	ldr	r2, [pc, #444]	; (8008504 <HAL_TIM_ConfigClockSource+0x214>)
 8008346:	4293      	cmp	r3, r2
 8008348:	f000 80c1 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x1de>
 800834c:	4a6d      	ldr	r2, [pc, #436]	; (8008504 <HAL_TIM_ConfigClockSource+0x214>)
 800834e:	4293      	cmp	r3, r2
 8008350:	f200 80c6 	bhi.w	80084e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008354:	4a6c      	ldr	r2, [pc, #432]	; (8008508 <HAL_TIM_ConfigClockSource+0x218>)
 8008356:	4293      	cmp	r3, r2
 8008358:	f000 80b9 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x1de>
 800835c:	4a6a      	ldr	r2, [pc, #424]	; (8008508 <HAL_TIM_ConfigClockSource+0x218>)
 800835e:	4293      	cmp	r3, r2
 8008360:	f200 80be 	bhi.w	80084e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008364:	4a69      	ldr	r2, [pc, #420]	; (800850c <HAL_TIM_ConfigClockSource+0x21c>)
 8008366:	4293      	cmp	r3, r2
 8008368:	f000 80b1 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x1de>
 800836c:	4a67      	ldr	r2, [pc, #412]	; (800850c <HAL_TIM_ConfigClockSource+0x21c>)
 800836e:	4293      	cmp	r3, r2
 8008370:	f200 80b6 	bhi.w	80084e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008374:	4a66      	ldr	r2, [pc, #408]	; (8008510 <HAL_TIM_ConfigClockSource+0x220>)
 8008376:	4293      	cmp	r3, r2
 8008378:	f000 80a9 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x1de>
 800837c:	4a64      	ldr	r2, [pc, #400]	; (8008510 <HAL_TIM_ConfigClockSource+0x220>)
 800837e:	4293      	cmp	r3, r2
 8008380:	f200 80ae 	bhi.w	80084e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008384:	4a63      	ldr	r2, [pc, #396]	; (8008514 <HAL_TIM_ConfigClockSource+0x224>)
 8008386:	4293      	cmp	r3, r2
 8008388:	f000 80a1 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x1de>
 800838c:	4a61      	ldr	r2, [pc, #388]	; (8008514 <HAL_TIM_ConfigClockSource+0x224>)
 800838e:	4293      	cmp	r3, r2
 8008390:	f200 80a6 	bhi.w	80084e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008394:	4a60      	ldr	r2, [pc, #384]	; (8008518 <HAL_TIM_ConfigClockSource+0x228>)
 8008396:	4293      	cmp	r3, r2
 8008398:	f000 8099 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x1de>
 800839c:	4a5e      	ldr	r2, [pc, #376]	; (8008518 <HAL_TIM_ConfigClockSource+0x228>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	f200 809e 	bhi.w	80084e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80083a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80083a8:	f000 8091 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x1de>
 80083ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80083b0:	f200 8096 	bhi.w	80084e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80083b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083b8:	f000 8089 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x1de>
 80083bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083c0:	f200 808e 	bhi.w	80084e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80083c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083c8:	d03e      	beq.n	8008448 <HAL_TIM_ConfigClockSource+0x158>
 80083ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083ce:	f200 8087 	bhi.w	80084e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80083d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d6:	f000 8086 	beq.w	80084e6 <HAL_TIM_ConfigClockSource+0x1f6>
 80083da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083de:	d87f      	bhi.n	80084e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80083e0:	2b70      	cmp	r3, #112	; 0x70
 80083e2:	d01a      	beq.n	800841a <HAL_TIM_ConfigClockSource+0x12a>
 80083e4:	2b70      	cmp	r3, #112	; 0x70
 80083e6:	d87b      	bhi.n	80084e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80083e8:	2b60      	cmp	r3, #96	; 0x60
 80083ea:	d050      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x19e>
 80083ec:	2b60      	cmp	r3, #96	; 0x60
 80083ee:	d877      	bhi.n	80084e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80083f0:	2b50      	cmp	r3, #80	; 0x50
 80083f2:	d03c      	beq.n	800846e <HAL_TIM_ConfigClockSource+0x17e>
 80083f4:	2b50      	cmp	r3, #80	; 0x50
 80083f6:	d873      	bhi.n	80084e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80083f8:	2b40      	cmp	r3, #64	; 0x40
 80083fa:	d058      	beq.n	80084ae <HAL_TIM_ConfigClockSource+0x1be>
 80083fc:	2b40      	cmp	r3, #64	; 0x40
 80083fe:	d86f      	bhi.n	80084e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008400:	2b30      	cmp	r3, #48	; 0x30
 8008402:	d064      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0x1de>
 8008404:	2b30      	cmp	r3, #48	; 0x30
 8008406:	d86b      	bhi.n	80084e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008408:	2b20      	cmp	r3, #32
 800840a:	d060      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0x1de>
 800840c:	2b20      	cmp	r3, #32
 800840e:	d867      	bhi.n	80084e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008410:	2b00      	cmp	r3, #0
 8008412:	d05c      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0x1de>
 8008414:	2b10      	cmp	r3, #16
 8008416:	d05a      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0x1de>
 8008418:	e062      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6818      	ldr	r0, [r3, #0]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	6899      	ldr	r1, [r3, #8]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	f000 f9c3 	bl	80087b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800843c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	609a      	str	r2, [r3, #8]
      break;
 8008446:	e04f      	b.n	80084e8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6818      	ldr	r0, [r3, #0]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	6899      	ldr	r1, [r3, #8]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	f000 f9ac 	bl	80087b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689a      	ldr	r2, [r3, #8]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800846a:	609a      	str	r2, [r3, #8]
      break;
 800846c:	e03c      	b.n	80084e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6818      	ldr	r0, [r3, #0]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	6859      	ldr	r1, [r3, #4]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	461a      	mov	r2, r3
 800847c:	f000 f91e 	bl	80086bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2150      	movs	r1, #80	; 0x50
 8008486:	4618      	mov	r0, r3
 8008488:	f000 f977 	bl	800877a <TIM_ITRx_SetConfig>
      break;
 800848c:	e02c      	b.n	80084e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6818      	ldr	r0, [r3, #0]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	6859      	ldr	r1, [r3, #4]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	461a      	mov	r2, r3
 800849c:	f000 f93d 	bl	800871a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2160      	movs	r1, #96	; 0x60
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 f967 	bl	800877a <TIM_ITRx_SetConfig>
      break;
 80084ac:	e01c      	b.n	80084e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6818      	ldr	r0, [r3, #0]
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	6859      	ldr	r1, [r3, #4]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	461a      	mov	r2, r3
 80084bc:	f000 f8fe 	bl	80086bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2140      	movs	r1, #64	; 0x40
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 f957 	bl	800877a <TIM_ITRx_SetConfig>
      break;
 80084cc:	e00c      	b.n	80084e8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4619      	mov	r1, r3
 80084d8:	4610      	mov	r0, r2
 80084da:	f000 f94e 	bl	800877a <TIM_ITRx_SetConfig>
      break;
 80084de:	e003      	b.n	80084e8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	73fb      	strb	r3, [r7, #15]
      break;
 80084e4:	e000      	b.n	80084e8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80084e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	00100070 	.word	0x00100070
 8008508:	00100060 	.word	0x00100060
 800850c:	00100050 	.word	0x00100050
 8008510:	00100040 	.word	0x00100040
 8008514:	00100030 	.word	0x00100030
 8008518:	00100020 	.word	0x00100020

0800851c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a46      	ldr	r2, [pc, #280]	; (8008698 <TIM_Base_SetConfig+0x12c>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d017      	beq.n	80085b4 <TIM_Base_SetConfig+0x48>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800858a:	d013      	beq.n	80085b4 <TIM_Base_SetConfig+0x48>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a43      	ldr	r2, [pc, #268]	; (800869c <TIM_Base_SetConfig+0x130>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d00f      	beq.n	80085b4 <TIM_Base_SetConfig+0x48>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a42      	ldr	r2, [pc, #264]	; (80086a0 <TIM_Base_SetConfig+0x134>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d00b      	beq.n	80085b4 <TIM_Base_SetConfig+0x48>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a41      	ldr	r2, [pc, #260]	; (80086a4 <TIM_Base_SetConfig+0x138>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d007      	beq.n	80085b4 <TIM_Base_SetConfig+0x48>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a40      	ldr	r2, [pc, #256]	; (80086a8 <TIM_Base_SetConfig+0x13c>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d003      	beq.n	80085b4 <TIM_Base_SetConfig+0x48>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a3f      	ldr	r2, [pc, #252]	; (80086ac <TIM_Base_SetConfig+0x140>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d108      	bne.n	80085c6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a33      	ldr	r2, [pc, #204]	; (8008698 <TIM_Base_SetConfig+0x12c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d023      	beq.n	8008616 <TIM_Base_SetConfig+0xaa>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d4:	d01f      	beq.n	8008616 <TIM_Base_SetConfig+0xaa>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a30      	ldr	r2, [pc, #192]	; (800869c <TIM_Base_SetConfig+0x130>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d01b      	beq.n	8008616 <TIM_Base_SetConfig+0xaa>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a2f      	ldr	r2, [pc, #188]	; (80086a0 <TIM_Base_SetConfig+0x134>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d017      	beq.n	8008616 <TIM_Base_SetConfig+0xaa>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a2e      	ldr	r2, [pc, #184]	; (80086a4 <TIM_Base_SetConfig+0x138>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d013      	beq.n	8008616 <TIM_Base_SetConfig+0xaa>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a2d      	ldr	r2, [pc, #180]	; (80086a8 <TIM_Base_SetConfig+0x13c>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d00f      	beq.n	8008616 <TIM_Base_SetConfig+0xaa>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a2d      	ldr	r2, [pc, #180]	; (80086b0 <TIM_Base_SetConfig+0x144>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d00b      	beq.n	8008616 <TIM_Base_SetConfig+0xaa>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a2c      	ldr	r2, [pc, #176]	; (80086b4 <TIM_Base_SetConfig+0x148>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d007      	beq.n	8008616 <TIM_Base_SetConfig+0xaa>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a2b      	ldr	r2, [pc, #172]	; (80086b8 <TIM_Base_SetConfig+0x14c>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d003      	beq.n	8008616 <TIM_Base_SetConfig+0xaa>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a26      	ldr	r2, [pc, #152]	; (80086ac <TIM_Base_SetConfig+0x140>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d108      	bne.n	8008628 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800861c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	4313      	orrs	r3, r2
 8008626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	4313      	orrs	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	689a      	ldr	r2, [r3, #8]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a12      	ldr	r2, [pc, #72]	; (8008698 <TIM_Base_SetConfig+0x12c>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d013      	beq.n	800867c <TIM_Base_SetConfig+0x110>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a14      	ldr	r2, [pc, #80]	; (80086a8 <TIM_Base_SetConfig+0x13c>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d00f      	beq.n	800867c <TIM_Base_SetConfig+0x110>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a14      	ldr	r2, [pc, #80]	; (80086b0 <TIM_Base_SetConfig+0x144>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d00b      	beq.n	800867c <TIM_Base_SetConfig+0x110>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a13      	ldr	r2, [pc, #76]	; (80086b4 <TIM_Base_SetConfig+0x148>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d007      	beq.n	800867c <TIM_Base_SetConfig+0x110>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a12      	ldr	r2, [pc, #72]	; (80086b8 <TIM_Base_SetConfig+0x14c>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d003      	beq.n	800867c <TIM_Base_SetConfig+0x110>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a0d      	ldr	r2, [pc, #52]	; (80086ac <TIM_Base_SetConfig+0x140>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d103      	bne.n	8008684 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	691a      	ldr	r2, [r3, #16]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	615a      	str	r2, [r3, #20]
}
 800868a:	bf00      	nop
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	40012c00 	.word	0x40012c00
 800869c:	40000400 	.word	0x40000400
 80086a0:	40000800 	.word	0x40000800
 80086a4:	40000c00 	.word	0x40000c00
 80086a8:	40013400 	.word	0x40013400
 80086ac:	40015000 	.word	0x40015000
 80086b0:	40014000 	.word	0x40014000
 80086b4:	40014400 	.word	0x40014400
 80086b8:	40014800 	.word	0x40014800

080086bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6a1b      	ldr	r3, [r3, #32]
 80086cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	f023 0201 	bic.w	r2, r3, #1
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	011b      	lsls	r3, r3, #4
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f023 030a 	bic.w	r3, r3, #10
 80086f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	4313      	orrs	r3, r2
 8008700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	621a      	str	r2, [r3, #32]
}
 800870e:	bf00      	nop
 8008710:	371c      	adds	r7, #28
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800871a:	b480      	push	{r7}
 800871c:	b087      	sub	sp, #28
 800871e:	af00      	add	r7, sp, #0
 8008720:	60f8      	str	r0, [r7, #12]
 8008722:	60b9      	str	r1, [r7, #8]
 8008724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	f023 0210 	bic.w	r2, r3, #16
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6a1b      	ldr	r3, [r3, #32]
 800873c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	031b      	lsls	r3, r3, #12
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	4313      	orrs	r3, r2
 800874e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008756:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	011b      	lsls	r3, r3, #4
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	4313      	orrs	r3, r2
 8008760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	621a      	str	r2, [r3, #32]
}
 800876e:	bf00      	nop
 8008770:	371c      	adds	r7, #28
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800877a:	b480      	push	{r7}
 800877c:	b085      	sub	sp, #20
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008794:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4313      	orrs	r3, r2
 800879c:	f043 0307 	orr.w	r3, r3, #7
 80087a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	609a      	str	r2, [r3, #8]
}
 80087a8:	bf00      	nop
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b087      	sub	sp, #28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	021a      	lsls	r2, r3, #8
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	431a      	orrs	r2, r3
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	4313      	orrs	r3, r2
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	4313      	orrs	r3, r2
 80087e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	609a      	str	r2, [r3, #8]
}
 80087e8:	bf00      	nop
 80087ea:	371c      	adds	r7, #28
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008804:	2b01      	cmp	r3, #1
 8008806:	d101      	bne.n	800880c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008808:	2302      	movs	r3, #2
 800880a:	e074      	b.n	80088f6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a34      	ldr	r2, [pc, #208]	; (8008904 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d009      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a33      	ldr	r2, [pc, #204]	; (8008908 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d004      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a31      	ldr	r2, [pc, #196]	; (800890c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d108      	bne.n	800885c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008850:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	4313      	orrs	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	4313      	orrs	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a21      	ldr	r2, [pc, #132]	; (8008904 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d022      	beq.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800888c:	d01d      	beq.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a1f      	ldr	r2, [pc, #124]	; (8008910 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d018      	beq.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a1d      	ldr	r2, [pc, #116]	; (8008914 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d013      	beq.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a1c      	ldr	r2, [pc, #112]	; (8008918 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d00e      	beq.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a15      	ldr	r2, [pc, #84]	; (8008908 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d009      	beq.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a18      	ldr	r2, [pc, #96]	; (800891c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d004      	beq.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a11      	ldr	r2, [pc, #68]	; (800890c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d10c      	bne.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	4313      	orrs	r3, r2
 80088da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	40012c00 	.word	0x40012c00
 8008908:	40013400 	.word	0x40013400
 800890c:	40015000 	.word	0x40015000
 8008910:	40000400 	.word	0x40000400
 8008914:	40000800 	.word	0x40000800
 8008918:	40000c00 	.word	0x40000c00
 800891c:	40014000 	.word	0x40014000

08008920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e042      	b.n	8008a44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d106      	bne.n	80089d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7fa fbf7 	bl	80031c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2224      	movs	r2, #36	; 0x24
 80089da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 0201 	bic.w	r2, r2, #1
 80089ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f82c 	bl	8008a4c <UART_SetConfig>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d101      	bne.n	80089fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e022      	b.n	8008a44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d002      	beq.n	8008a0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fb1c 	bl	8009044 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	689a      	ldr	r2, [r3, #8]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f042 0201 	orr.w	r2, r2, #1
 8008a3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fba3 	bl	8009188 <UART_CheckIdleState>
 8008a42:	4603      	mov	r3, r0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a50:	b08c      	sub	sp, #48	; 0x30
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	689a      	ldr	r2, [r3, #8]
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	431a      	orrs	r2, r3
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	431a      	orrs	r2, r3
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	69db      	ldr	r3, [r3, #28]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	4baa      	ldr	r3, [pc, #680]	; (8008d24 <UART_SetConfig+0x2d8>)
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	6812      	ldr	r2, [r2, #0]
 8008a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a84:	430b      	orrs	r3, r1
 8008a86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	68da      	ldr	r2, [r3, #12]
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a9f      	ldr	r2, [pc, #636]	; (8008d28 <UART_SetConfig+0x2dc>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d004      	beq.n	8008ab8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008ac2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	6812      	ldr	r2, [r2, #0]
 8008aca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008acc:	430b      	orrs	r3, r1
 8008ace:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad6:	f023 010f 	bic.w	r1, r3, #15
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a90      	ldr	r2, [pc, #576]	; (8008d2c <UART_SetConfig+0x2e0>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d125      	bne.n	8008b3c <UART_SetConfig+0xf0>
 8008af0:	4b8f      	ldr	r3, [pc, #572]	; (8008d30 <UART_SetConfig+0x2e4>)
 8008af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af6:	f003 0303 	and.w	r3, r3, #3
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	d81a      	bhi.n	8008b34 <UART_SetConfig+0xe8>
 8008afe:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <UART_SetConfig+0xb8>)
 8008b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b04:	08008b15 	.word	0x08008b15
 8008b08:	08008b25 	.word	0x08008b25
 8008b0c:	08008b1d 	.word	0x08008b1d
 8008b10:	08008b2d 	.word	0x08008b2d
 8008b14:	2301      	movs	r3, #1
 8008b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b1a:	e116      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b22:	e112      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008b24:	2304      	movs	r3, #4
 8008b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b2a:	e10e      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008b2c:	2308      	movs	r3, #8
 8008b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b32:	e10a      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008b34:	2310      	movs	r3, #16
 8008b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b3a:	e106      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a7c      	ldr	r2, [pc, #496]	; (8008d34 <UART_SetConfig+0x2e8>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d138      	bne.n	8008bb8 <UART_SetConfig+0x16c>
 8008b46:	4b7a      	ldr	r3, [pc, #488]	; (8008d30 <UART_SetConfig+0x2e4>)
 8008b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b4c:	f003 030c 	and.w	r3, r3, #12
 8008b50:	2b0c      	cmp	r3, #12
 8008b52:	d82d      	bhi.n	8008bb0 <UART_SetConfig+0x164>
 8008b54:	a201      	add	r2, pc, #4	; (adr r2, 8008b5c <UART_SetConfig+0x110>)
 8008b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5a:	bf00      	nop
 8008b5c:	08008b91 	.word	0x08008b91
 8008b60:	08008bb1 	.word	0x08008bb1
 8008b64:	08008bb1 	.word	0x08008bb1
 8008b68:	08008bb1 	.word	0x08008bb1
 8008b6c:	08008ba1 	.word	0x08008ba1
 8008b70:	08008bb1 	.word	0x08008bb1
 8008b74:	08008bb1 	.word	0x08008bb1
 8008b78:	08008bb1 	.word	0x08008bb1
 8008b7c:	08008b99 	.word	0x08008b99
 8008b80:	08008bb1 	.word	0x08008bb1
 8008b84:	08008bb1 	.word	0x08008bb1
 8008b88:	08008bb1 	.word	0x08008bb1
 8008b8c:	08008ba9 	.word	0x08008ba9
 8008b90:	2300      	movs	r3, #0
 8008b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b96:	e0d8      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008b98:	2302      	movs	r3, #2
 8008b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b9e:	e0d4      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008ba0:	2304      	movs	r3, #4
 8008ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ba6:	e0d0      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008ba8:	2308      	movs	r3, #8
 8008baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bae:	e0cc      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008bb0:	2310      	movs	r3, #16
 8008bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bb6:	e0c8      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a5e      	ldr	r2, [pc, #376]	; (8008d38 <UART_SetConfig+0x2ec>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d125      	bne.n	8008c0e <UART_SetConfig+0x1c2>
 8008bc2:	4b5b      	ldr	r3, [pc, #364]	; (8008d30 <UART_SetConfig+0x2e4>)
 8008bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008bcc:	2b30      	cmp	r3, #48	; 0x30
 8008bce:	d016      	beq.n	8008bfe <UART_SetConfig+0x1b2>
 8008bd0:	2b30      	cmp	r3, #48	; 0x30
 8008bd2:	d818      	bhi.n	8008c06 <UART_SetConfig+0x1ba>
 8008bd4:	2b20      	cmp	r3, #32
 8008bd6:	d00a      	beq.n	8008bee <UART_SetConfig+0x1a2>
 8008bd8:	2b20      	cmp	r3, #32
 8008bda:	d814      	bhi.n	8008c06 <UART_SetConfig+0x1ba>
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <UART_SetConfig+0x19a>
 8008be0:	2b10      	cmp	r3, #16
 8008be2:	d008      	beq.n	8008bf6 <UART_SetConfig+0x1aa>
 8008be4:	e00f      	b.n	8008c06 <UART_SetConfig+0x1ba>
 8008be6:	2300      	movs	r3, #0
 8008be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bec:	e0ad      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008bee:	2302      	movs	r3, #2
 8008bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bf4:	e0a9      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008bf6:	2304      	movs	r3, #4
 8008bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bfc:	e0a5      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008bfe:	2308      	movs	r3, #8
 8008c00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c04:	e0a1      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008c06:	2310      	movs	r3, #16
 8008c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c0c:	e09d      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a4a      	ldr	r2, [pc, #296]	; (8008d3c <UART_SetConfig+0x2f0>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d125      	bne.n	8008c64 <UART_SetConfig+0x218>
 8008c18:	4b45      	ldr	r3, [pc, #276]	; (8008d30 <UART_SetConfig+0x2e4>)
 8008c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008c22:	2bc0      	cmp	r3, #192	; 0xc0
 8008c24:	d016      	beq.n	8008c54 <UART_SetConfig+0x208>
 8008c26:	2bc0      	cmp	r3, #192	; 0xc0
 8008c28:	d818      	bhi.n	8008c5c <UART_SetConfig+0x210>
 8008c2a:	2b80      	cmp	r3, #128	; 0x80
 8008c2c:	d00a      	beq.n	8008c44 <UART_SetConfig+0x1f8>
 8008c2e:	2b80      	cmp	r3, #128	; 0x80
 8008c30:	d814      	bhi.n	8008c5c <UART_SetConfig+0x210>
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <UART_SetConfig+0x1f0>
 8008c36:	2b40      	cmp	r3, #64	; 0x40
 8008c38:	d008      	beq.n	8008c4c <UART_SetConfig+0x200>
 8008c3a:	e00f      	b.n	8008c5c <UART_SetConfig+0x210>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c42:	e082      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008c44:	2302      	movs	r3, #2
 8008c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c4a:	e07e      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008c4c:	2304      	movs	r3, #4
 8008c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c52:	e07a      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008c54:	2308      	movs	r3, #8
 8008c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c5a:	e076      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008c5c:	2310      	movs	r3, #16
 8008c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c62:	e072      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a35      	ldr	r2, [pc, #212]	; (8008d40 <UART_SetConfig+0x2f4>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d12a      	bne.n	8008cc4 <UART_SetConfig+0x278>
 8008c6e:	4b30      	ldr	r3, [pc, #192]	; (8008d30 <UART_SetConfig+0x2e4>)
 8008c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c7c:	d01a      	beq.n	8008cb4 <UART_SetConfig+0x268>
 8008c7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c82:	d81b      	bhi.n	8008cbc <UART_SetConfig+0x270>
 8008c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c88:	d00c      	beq.n	8008ca4 <UART_SetConfig+0x258>
 8008c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c8e:	d815      	bhi.n	8008cbc <UART_SetConfig+0x270>
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d003      	beq.n	8008c9c <UART_SetConfig+0x250>
 8008c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c98:	d008      	beq.n	8008cac <UART_SetConfig+0x260>
 8008c9a:	e00f      	b.n	8008cbc <UART_SetConfig+0x270>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ca2:	e052      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008caa:	e04e      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008cac:	2304      	movs	r3, #4
 8008cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cb2:	e04a      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008cb4:	2308      	movs	r3, #8
 8008cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cba:	e046      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cc2:	e042      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a17      	ldr	r2, [pc, #92]	; (8008d28 <UART_SetConfig+0x2dc>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d13a      	bne.n	8008d44 <UART_SetConfig+0x2f8>
 8008cce:	4b18      	ldr	r3, [pc, #96]	; (8008d30 <UART_SetConfig+0x2e4>)
 8008cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008cd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008cdc:	d01a      	beq.n	8008d14 <UART_SetConfig+0x2c8>
 8008cde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ce2:	d81b      	bhi.n	8008d1c <UART_SetConfig+0x2d0>
 8008ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ce8:	d00c      	beq.n	8008d04 <UART_SetConfig+0x2b8>
 8008cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cee:	d815      	bhi.n	8008d1c <UART_SetConfig+0x2d0>
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d003      	beq.n	8008cfc <UART_SetConfig+0x2b0>
 8008cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cf8:	d008      	beq.n	8008d0c <UART_SetConfig+0x2c0>
 8008cfa:	e00f      	b.n	8008d1c <UART_SetConfig+0x2d0>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d02:	e022      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008d04:	2302      	movs	r3, #2
 8008d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d0a:	e01e      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008d0c:	2304      	movs	r3, #4
 8008d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d12:	e01a      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008d14:	2308      	movs	r3, #8
 8008d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d1a:	e016      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008d1c:	2310      	movs	r3, #16
 8008d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d22:	e012      	b.n	8008d4a <UART_SetConfig+0x2fe>
 8008d24:	cfff69f3 	.word	0xcfff69f3
 8008d28:	40008000 	.word	0x40008000
 8008d2c:	40013800 	.word	0x40013800
 8008d30:	40021000 	.word	0x40021000
 8008d34:	40004400 	.word	0x40004400
 8008d38:	40004800 	.word	0x40004800
 8008d3c:	40004c00 	.word	0x40004c00
 8008d40:	40005000 	.word	0x40005000
 8008d44:	2310      	movs	r3, #16
 8008d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4aae      	ldr	r2, [pc, #696]	; (8009008 <UART_SetConfig+0x5bc>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	f040 8097 	bne.w	8008e84 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d5a:	2b08      	cmp	r3, #8
 8008d5c:	d823      	bhi.n	8008da6 <UART_SetConfig+0x35a>
 8008d5e:	a201      	add	r2, pc, #4	; (adr r2, 8008d64 <UART_SetConfig+0x318>)
 8008d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d64:	08008d89 	.word	0x08008d89
 8008d68:	08008da7 	.word	0x08008da7
 8008d6c:	08008d91 	.word	0x08008d91
 8008d70:	08008da7 	.word	0x08008da7
 8008d74:	08008d97 	.word	0x08008d97
 8008d78:	08008da7 	.word	0x08008da7
 8008d7c:	08008da7 	.word	0x08008da7
 8008d80:	08008da7 	.word	0x08008da7
 8008d84:	08008d9f 	.word	0x08008d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d88:	f7fe fda2 	bl	80078d0 <HAL_RCC_GetPCLK1Freq>
 8008d8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d8e:	e010      	b.n	8008db2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d90:	4b9e      	ldr	r3, [pc, #632]	; (800900c <UART_SetConfig+0x5c0>)
 8008d92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d94:	e00d      	b.n	8008db2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d96:	f7fe fd2d 	bl	80077f4 <HAL_RCC_GetSysClockFreq>
 8008d9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d9c:	e009      	b.n	8008db2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008da2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008da4:	e005      	b.n	8008db2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008da6:	2300      	movs	r3, #0
 8008da8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008db0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 8130 	beq.w	800901a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbe:	4a94      	ldr	r2, [pc, #592]	; (8009010 <UART_SetConfig+0x5c4>)
 8008dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dcc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	005b      	lsls	r3, r3, #1
 8008dd6:	4413      	add	r3, r2
 8008dd8:	69ba      	ldr	r2, [r7, #24]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d305      	bcc.n	8008dea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008de4:	69ba      	ldr	r2, [r7, #24]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d903      	bls.n	8008df2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008df0:	e113      	b.n	800901a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	2200      	movs	r2, #0
 8008df6:	60bb      	str	r3, [r7, #8]
 8008df8:	60fa      	str	r2, [r7, #12]
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfe:	4a84      	ldr	r2, [pc, #528]	; (8009010 <UART_SetConfig+0x5c4>)
 8008e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	2200      	movs	r2, #0
 8008e08:	603b      	str	r3, [r7, #0]
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e14:	f7f7 fa00 	bl	8000218 <__aeabi_uldivmod>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	4619      	mov	r1, r3
 8008e20:	f04f 0200 	mov.w	r2, #0
 8008e24:	f04f 0300 	mov.w	r3, #0
 8008e28:	020b      	lsls	r3, r1, #8
 8008e2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e2e:	0202      	lsls	r2, r0, #8
 8008e30:	6979      	ldr	r1, [r7, #20]
 8008e32:	6849      	ldr	r1, [r1, #4]
 8008e34:	0849      	lsrs	r1, r1, #1
 8008e36:	2000      	movs	r0, #0
 8008e38:	460c      	mov	r4, r1
 8008e3a:	4605      	mov	r5, r0
 8008e3c:	eb12 0804 	adds.w	r8, r2, r4
 8008e40:	eb43 0905 	adc.w	r9, r3, r5
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	469a      	mov	sl, r3
 8008e4c:	4693      	mov	fp, r2
 8008e4e:	4652      	mov	r2, sl
 8008e50:	465b      	mov	r3, fp
 8008e52:	4640      	mov	r0, r8
 8008e54:	4649      	mov	r1, r9
 8008e56:	f7f7 f9df 	bl	8000218 <__aeabi_uldivmod>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	4613      	mov	r3, r2
 8008e60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e68:	d308      	bcc.n	8008e7c <UART_SetConfig+0x430>
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e70:	d204      	bcs.n	8008e7c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6a3a      	ldr	r2, [r7, #32]
 8008e78:	60da      	str	r2, [r3, #12]
 8008e7a:	e0ce      	b.n	800901a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008e82:	e0ca      	b.n	800901a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	69db      	ldr	r3, [r3, #28]
 8008e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e8c:	d166      	bne.n	8008f5c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008e8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d827      	bhi.n	8008ee6 <UART_SetConfig+0x49a>
 8008e96:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <UART_SetConfig+0x450>)
 8008e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9c:	08008ec1 	.word	0x08008ec1
 8008ea0:	08008ec9 	.word	0x08008ec9
 8008ea4:	08008ed1 	.word	0x08008ed1
 8008ea8:	08008ee7 	.word	0x08008ee7
 8008eac:	08008ed7 	.word	0x08008ed7
 8008eb0:	08008ee7 	.word	0x08008ee7
 8008eb4:	08008ee7 	.word	0x08008ee7
 8008eb8:	08008ee7 	.word	0x08008ee7
 8008ebc:	08008edf 	.word	0x08008edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ec0:	f7fe fd06 	bl	80078d0 <HAL_RCC_GetPCLK1Freq>
 8008ec4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ec6:	e014      	b.n	8008ef2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ec8:	f7fe fd18 	bl	80078fc <HAL_RCC_GetPCLK2Freq>
 8008ecc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ece:	e010      	b.n	8008ef2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ed0:	4b4e      	ldr	r3, [pc, #312]	; (800900c <UART_SetConfig+0x5c0>)
 8008ed2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ed4:	e00d      	b.n	8008ef2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ed6:	f7fe fc8d 	bl	80077f4 <HAL_RCC_GetSysClockFreq>
 8008eda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008edc:	e009      	b.n	8008ef2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ee2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ee4:	e005      	b.n	8008ef2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008ef0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f000 8090 	beq.w	800901a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efe:	4a44      	ldr	r2, [pc, #272]	; (8009010 <UART_SetConfig+0x5c4>)
 8008f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f04:	461a      	mov	r2, r3
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f0c:	005a      	lsls	r2, r3, #1
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	085b      	lsrs	r3, r3, #1
 8008f14:	441a      	add	r2, r3
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	2b0f      	cmp	r3, #15
 8008f24:	d916      	bls.n	8008f54 <UART_SetConfig+0x508>
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f2c:	d212      	bcs.n	8008f54 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f2e:	6a3b      	ldr	r3, [r7, #32]
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	f023 030f 	bic.w	r3, r3, #15
 8008f36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f38:	6a3b      	ldr	r3, [r7, #32]
 8008f3a:	085b      	lsrs	r3, r3, #1
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	f003 0307 	and.w	r3, r3, #7
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	8bfb      	ldrh	r3, [r7, #30]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	8bfa      	ldrh	r2, [r7, #30]
 8008f50:	60da      	str	r2, [r3, #12]
 8008f52:	e062      	b.n	800901a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008f5a:	e05e      	b.n	800901a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f60:	2b08      	cmp	r3, #8
 8008f62:	d828      	bhi.n	8008fb6 <UART_SetConfig+0x56a>
 8008f64:	a201      	add	r2, pc, #4	; (adr r2, 8008f6c <UART_SetConfig+0x520>)
 8008f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6a:	bf00      	nop
 8008f6c:	08008f91 	.word	0x08008f91
 8008f70:	08008f99 	.word	0x08008f99
 8008f74:	08008fa1 	.word	0x08008fa1
 8008f78:	08008fb7 	.word	0x08008fb7
 8008f7c:	08008fa7 	.word	0x08008fa7
 8008f80:	08008fb7 	.word	0x08008fb7
 8008f84:	08008fb7 	.word	0x08008fb7
 8008f88:	08008fb7 	.word	0x08008fb7
 8008f8c:	08008faf 	.word	0x08008faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f90:	f7fe fc9e 	bl	80078d0 <HAL_RCC_GetPCLK1Freq>
 8008f94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f96:	e014      	b.n	8008fc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f98:	f7fe fcb0 	bl	80078fc <HAL_RCC_GetPCLK2Freq>
 8008f9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f9e:	e010      	b.n	8008fc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fa0:	4b1a      	ldr	r3, [pc, #104]	; (800900c <UART_SetConfig+0x5c0>)
 8008fa2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008fa4:	e00d      	b.n	8008fc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fa6:	f7fe fc25 	bl	80077f4 <HAL_RCC_GetSysClockFreq>
 8008faa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008fac:	e009      	b.n	8008fc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008fb4:	e005      	b.n	8008fc2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008fc0:	bf00      	nop
    }

    if (pclk != 0U)
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d028      	beq.n	800901a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	4a10      	ldr	r2, [pc, #64]	; (8009010 <UART_SetConfig+0x5c4>)
 8008fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	085b      	lsrs	r3, r3, #1
 8008fe0:	441a      	add	r2, r3
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	2b0f      	cmp	r3, #15
 8008ff0:	d910      	bls.n	8009014 <UART_SetConfig+0x5c8>
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ff8:	d20c      	bcs.n	8009014 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ffa:	6a3b      	ldr	r3, [r7, #32]
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	60da      	str	r2, [r3, #12]
 8009004:	e009      	b.n	800901a <UART_SetConfig+0x5ce>
 8009006:	bf00      	nop
 8009008:	40008000 	.word	0x40008000
 800900c:	00f42400 	.word	0x00f42400
 8009010:	08009800 	.word	0x08009800
      }
      else
      {
        ret = HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	2201      	movs	r2, #1
 800901e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2201      	movs	r2, #1
 8009026:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2200      	movs	r2, #0
 800902e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	2200      	movs	r2, #0
 8009034:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009036:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800903a:	4618      	mov	r0, r3
 800903c:	3730      	adds	r7, #48	; 0x30
 800903e:	46bd      	mov	sp, r7
 8009040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00a      	beq.n	800906e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	430a      	orrs	r2, r1
 800906c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009072:	f003 0302 	and.w	r3, r3, #2
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	430a      	orrs	r2, r1
 800908e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009094:	f003 0304 	and.w	r3, r3, #4
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00a      	beq.n	80090b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	430a      	orrs	r2, r1
 80090b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b6:	f003 0308 	and.w	r3, r3, #8
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	430a      	orrs	r2, r1
 80090d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d8:	f003 0310 	and.w	r3, r3, #16
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00a      	beq.n	80090f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	430a      	orrs	r2, r1
 80090f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fa:	f003 0320 	and.w	r3, r3, #32
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00a      	beq.n	8009118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	430a      	orrs	r2, r1
 8009116:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009120:	2b00      	cmp	r3, #0
 8009122:	d01a      	beq.n	800915a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	430a      	orrs	r2, r1
 8009138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800913e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009142:	d10a      	bne.n	800915a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	430a      	orrs	r2, r1
 8009158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00a      	beq.n	800917c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	430a      	orrs	r2, r1
 800917a:	605a      	str	r2, [r3, #4]
  }
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b086      	sub	sp, #24
 800918c:	af02      	add	r7, sp, #8
 800918e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009198:	f7fa f950 	bl	800343c <HAL_GetTick>
 800919c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 0308 	and.w	r3, r3, #8
 80091a8:	2b08      	cmp	r3, #8
 80091aa:	d10e      	bne.n	80091ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f82f 	bl	800921e <UART_WaitOnFlagUntilTimeout>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e025      	b.n	8009216 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 0304 	and.w	r3, r3, #4
 80091d4:	2b04      	cmp	r3, #4
 80091d6:	d10e      	bne.n	80091f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f819 	bl	800921e <UART_WaitOnFlagUntilTimeout>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091f2:	2303      	movs	r3, #3
 80091f4:	e00f      	b.n	8009216 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2220      	movs	r2, #32
 80091fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2220      	movs	r2, #32
 8009202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b09c      	sub	sp, #112	; 0x70
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	60b9      	str	r1, [r7, #8]
 8009228:	603b      	str	r3, [r7, #0]
 800922a:	4613      	mov	r3, r2
 800922c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800922e:	e0a9      	b.n	8009384 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009230:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009236:	f000 80a5 	beq.w	8009384 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800923a:	f7fa f8ff 	bl	800343c <HAL_GetTick>
 800923e:	4602      	mov	r2, r0
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009246:	429a      	cmp	r2, r3
 8009248:	d302      	bcc.n	8009250 <UART_WaitOnFlagUntilTimeout+0x32>
 800924a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800924c:	2b00      	cmp	r3, #0
 800924e:	d140      	bne.n	80092d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009258:	e853 3f00 	ldrex	r3, [r3]
 800925c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800925e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009260:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009264:	667b      	str	r3, [r7, #100]	; 0x64
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	461a      	mov	r2, r3
 800926c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800926e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009270:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009272:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009274:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800927c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e6      	bne.n	8009250 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3308      	adds	r3, #8
 8009288:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800928c:	e853 3f00 	ldrex	r3, [r3]
 8009290:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009294:	f023 0301 	bic.w	r3, r3, #1
 8009298:	663b      	str	r3, [r7, #96]	; 0x60
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	3308      	adds	r3, #8
 80092a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80092a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092aa:	e841 2300 	strex	r3, r2, [r1]
 80092ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80092b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e5      	bne.n	8009282 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2220      	movs	r2, #32
 80092ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2220      	movs	r2, #32
 80092c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e069      	b.n	80093a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0304 	and.w	r3, r3, #4
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d051      	beq.n	8009384 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092ee:	d149      	bne.n	8009384 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	e853 3f00 	ldrex	r3, [r3]
 8009306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800930e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	461a      	mov	r2, r3
 8009316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009318:	637b      	str	r3, [r7, #52]	; 0x34
 800931a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800931e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009320:	e841 2300 	strex	r3, r2, [r1]
 8009324:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1e6      	bne.n	80092fa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	3308      	adds	r3, #8
 8009332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	e853 3f00 	ldrex	r3, [r3]
 800933a:	613b      	str	r3, [r7, #16]
   return(result);
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	f023 0301 	bic.w	r3, r3, #1
 8009342:	66bb      	str	r3, [r7, #104]	; 0x68
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3308      	adds	r3, #8
 800934a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800934c:	623a      	str	r2, [r7, #32]
 800934e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	69f9      	ldr	r1, [r7, #28]
 8009352:	6a3a      	ldr	r2, [r7, #32]
 8009354:	e841 2300 	strex	r3, r2, [r1]
 8009358:	61bb      	str	r3, [r7, #24]
   return(result);
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e5      	bne.n	800932c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2220      	movs	r2, #32
 8009364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2220      	movs	r2, #32
 800936c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2220      	movs	r2, #32
 8009374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e010      	b.n	80093a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	69da      	ldr	r2, [r3, #28]
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	4013      	ands	r3, r2
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	429a      	cmp	r2, r3
 8009392:	bf0c      	ite	eq
 8009394:	2301      	moveq	r3, #1
 8009396:	2300      	movne	r3, #0
 8009398:	b2db      	uxtb	r3, r3
 800939a:	461a      	mov	r2, r3
 800939c:	79fb      	ldrb	r3, [r7, #7]
 800939e:	429a      	cmp	r2, r3
 80093a0:	f43f af46 	beq.w	8009230 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3770      	adds	r7, #112	; 0x70
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b085      	sub	sp, #20
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d101      	bne.n	80093c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80093c0:	2302      	movs	r3, #2
 80093c2:	e027      	b.n	8009414 <HAL_UARTEx_DisableFifoMode+0x66>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2224      	movs	r2, #36	; 0x24
 80093d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f022 0201 	bic.w	r2, r2, #1
 80093ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80093f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2220      	movs	r2, #32
 8009406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009430:	2b01      	cmp	r3, #1
 8009432:	d101      	bne.n	8009438 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009434:	2302      	movs	r3, #2
 8009436:	e02d      	b.n	8009494 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2224      	movs	r2, #36	; 0x24
 8009444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f022 0201 	bic.w	r2, r2, #1
 800945e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	430a      	orrs	r2, r1
 8009472:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f84f 	bl	8009518 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2220      	movs	r2, #32
 8009486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d101      	bne.n	80094b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094b0:	2302      	movs	r3, #2
 80094b2:	e02d      	b.n	8009510 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2224      	movs	r2, #36	; 0x24
 80094c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f022 0201 	bic.w	r2, r2, #1
 80094da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	430a      	orrs	r2, r1
 80094ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f811 	bl	8009518 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2220      	movs	r2, #32
 8009502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009524:	2b00      	cmp	r3, #0
 8009526:	d108      	bne.n	800953a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009538:	e031      	b.n	800959e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800953a:	2308      	movs	r3, #8
 800953c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800953e:	2308      	movs	r3, #8
 8009540:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	0e5b      	lsrs	r3, r3, #25
 800954a:	b2db      	uxtb	r3, r3
 800954c:	f003 0307 	and.w	r3, r3, #7
 8009550:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	0f5b      	lsrs	r3, r3, #29
 800955a:	b2db      	uxtb	r3, r3
 800955c:	f003 0307 	and.w	r3, r3, #7
 8009560:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009562:	7bbb      	ldrb	r3, [r7, #14]
 8009564:	7b3a      	ldrb	r2, [r7, #12]
 8009566:	4911      	ldr	r1, [pc, #68]	; (80095ac <UARTEx_SetNbDataToProcess+0x94>)
 8009568:	5c8a      	ldrb	r2, [r1, r2]
 800956a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800956e:	7b3a      	ldrb	r2, [r7, #12]
 8009570:	490f      	ldr	r1, [pc, #60]	; (80095b0 <UARTEx_SetNbDataToProcess+0x98>)
 8009572:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009574:	fb93 f3f2 	sdiv	r3, r3, r2
 8009578:	b29a      	uxth	r2, r3
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009580:	7bfb      	ldrb	r3, [r7, #15]
 8009582:	7b7a      	ldrb	r2, [r7, #13]
 8009584:	4909      	ldr	r1, [pc, #36]	; (80095ac <UARTEx_SetNbDataToProcess+0x94>)
 8009586:	5c8a      	ldrb	r2, [r1, r2]
 8009588:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800958c:	7b7a      	ldrb	r2, [r7, #13]
 800958e:	4908      	ldr	r1, [pc, #32]	; (80095b0 <UARTEx_SetNbDataToProcess+0x98>)
 8009590:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009592:	fb93 f3f2 	sdiv	r3, r3, r2
 8009596:	b29a      	uxth	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800959e:	bf00      	nop
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	08009818 	.word	0x08009818
 80095b0:	08009820 	.word	0x08009820

080095b4 <malloc>:
 80095b4:	4b02      	ldr	r3, [pc, #8]	; (80095c0 <malloc+0xc>)
 80095b6:	4601      	mov	r1, r0
 80095b8:	6818      	ldr	r0, [r3, #0]
 80095ba:	f000 b823 	b.w	8009604 <_malloc_r>
 80095be:	bf00      	nop
 80095c0:	20000058 	.word	0x20000058

080095c4 <sbrk_aligned>:
 80095c4:	b570      	push	{r4, r5, r6, lr}
 80095c6:	4e0e      	ldr	r6, [pc, #56]	; (8009600 <sbrk_aligned+0x3c>)
 80095c8:	460c      	mov	r4, r1
 80095ca:	6831      	ldr	r1, [r6, #0]
 80095cc:	4605      	mov	r5, r0
 80095ce:	b911      	cbnz	r1, 80095d6 <sbrk_aligned+0x12>
 80095d0:	f000 f8ac 	bl	800972c <_sbrk_r>
 80095d4:	6030      	str	r0, [r6, #0]
 80095d6:	4621      	mov	r1, r4
 80095d8:	4628      	mov	r0, r5
 80095da:	f000 f8a7 	bl	800972c <_sbrk_r>
 80095de:	1c43      	adds	r3, r0, #1
 80095e0:	d00a      	beq.n	80095f8 <sbrk_aligned+0x34>
 80095e2:	1cc4      	adds	r4, r0, #3
 80095e4:	f024 0403 	bic.w	r4, r4, #3
 80095e8:	42a0      	cmp	r0, r4
 80095ea:	d007      	beq.n	80095fc <sbrk_aligned+0x38>
 80095ec:	1a21      	subs	r1, r4, r0
 80095ee:	4628      	mov	r0, r5
 80095f0:	f000 f89c 	bl	800972c <_sbrk_r>
 80095f4:	3001      	adds	r0, #1
 80095f6:	d101      	bne.n	80095fc <sbrk_aligned+0x38>
 80095f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80095fc:	4620      	mov	r0, r4
 80095fe:	bd70      	pop	{r4, r5, r6, pc}
 8009600:	20000560 	.word	0x20000560

08009604 <_malloc_r>:
 8009604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009608:	1ccd      	adds	r5, r1, #3
 800960a:	f025 0503 	bic.w	r5, r5, #3
 800960e:	3508      	adds	r5, #8
 8009610:	2d0c      	cmp	r5, #12
 8009612:	bf38      	it	cc
 8009614:	250c      	movcc	r5, #12
 8009616:	2d00      	cmp	r5, #0
 8009618:	4607      	mov	r7, r0
 800961a:	db01      	blt.n	8009620 <_malloc_r+0x1c>
 800961c:	42a9      	cmp	r1, r5
 800961e:	d905      	bls.n	800962c <_malloc_r+0x28>
 8009620:	230c      	movs	r3, #12
 8009622:	603b      	str	r3, [r7, #0]
 8009624:	2600      	movs	r6, #0
 8009626:	4630      	mov	r0, r6
 8009628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800962c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009700 <_malloc_r+0xfc>
 8009630:	f000 f868 	bl	8009704 <__malloc_lock>
 8009634:	f8d8 3000 	ldr.w	r3, [r8]
 8009638:	461c      	mov	r4, r3
 800963a:	bb5c      	cbnz	r4, 8009694 <_malloc_r+0x90>
 800963c:	4629      	mov	r1, r5
 800963e:	4638      	mov	r0, r7
 8009640:	f7ff ffc0 	bl	80095c4 <sbrk_aligned>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	4604      	mov	r4, r0
 8009648:	d155      	bne.n	80096f6 <_malloc_r+0xf2>
 800964a:	f8d8 4000 	ldr.w	r4, [r8]
 800964e:	4626      	mov	r6, r4
 8009650:	2e00      	cmp	r6, #0
 8009652:	d145      	bne.n	80096e0 <_malloc_r+0xdc>
 8009654:	2c00      	cmp	r4, #0
 8009656:	d048      	beq.n	80096ea <_malloc_r+0xe6>
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	4631      	mov	r1, r6
 800965c:	4638      	mov	r0, r7
 800965e:	eb04 0903 	add.w	r9, r4, r3
 8009662:	f000 f863 	bl	800972c <_sbrk_r>
 8009666:	4581      	cmp	r9, r0
 8009668:	d13f      	bne.n	80096ea <_malloc_r+0xe6>
 800966a:	6821      	ldr	r1, [r4, #0]
 800966c:	1a6d      	subs	r5, r5, r1
 800966e:	4629      	mov	r1, r5
 8009670:	4638      	mov	r0, r7
 8009672:	f7ff ffa7 	bl	80095c4 <sbrk_aligned>
 8009676:	3001      	adds	r0, #1
 8009678:	d037      	beq.n	80096ea <_malloc_r+0xe6>
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	442b      	add	r3, r5
 800967e:	6023      	str	r3, [r4, #0]
 8009680:	f8d8 3000 	ldr.w	r3, [r8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d038      	beq.n	80096fa <_malloc_r+0xf6>
 8009688:	685a      	ldr	r2, [r3, #4]
 800968a:	42a2      	cmp	r2, r4
 800968c:	d12b      	bne.n	80096e6 <_malloc_r+0xe2>
 800968e:	2200      	movs	r2, #0
 8009690:	605a      	str	r2, [r3, #4]
 8009692:	e00f      	b.n	80096b4 <_malloc_r+0xb0>
 8009694:	6822      	ldr	r2, [r4, #0]
 8009696:	1b52      	subs	r2, r2, r5
 8009698:	d41f      	bmi.n	80096da <_malloc_r+0xd6>
 800969a:	2a0b      	cmp	r2, #11
 800969c:	d917      	bls.n	80096ce <_malloc_r+0xca>
 800969e:	1961      	adds	r1, r4, r5
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	6025      	str	r5, [r4, #0]
 80096a4:	bf18      	it	ne
 80096a6:	6059      	strne	r1, [r3, #4]
 80096a8:	6863      	ldr	r3, [r4, #4]
 80096aa:	bf08      	it	eq
 80096ac:	f8c8 1000 	streq.w	r1, [r8]
 80096b0:	5162      	str	r2, [r4, r5]
 80096b2:	604b      	str	r3, [r1, #4]
 80096b4:	4638      	mov	r0, r7
 80096b6:	f104 060b 	add.w	r6, r4, #11
 80096ba:	f000 f829 	bl	8009710 <__malloc_unlock>
 80096be:	f026 0607 	bic.w	r6, r6, #7
 80096c2:	1d23      	adds	r3, r4, #4
 80096c4:	1af2      	subs	r2, r6, r3
 80096c6:	d0ae      	beq.n	8009626 <_malloc_r+0x22>
 80096c8:	1b9b      	subs	r3, r3, r6
 80096ca:	50a3      	str	r3, [r4, r2]
 80096cc:	e7ab      	b.n	8009626 <_malloc_r+0x22>
 80096ce:	42a3      	cmp	r3, r4
 80096d0:	6862      	ldr	r2, [r4, #4]
 80096d2:	d1dd      	bne.n	8009690 <_malloc_r+0x8c>
 80096d4:	f8c8 2000 	str.w	r2, [r8]
 80096d8:	e7ec      	b.n	80096b4 <_malloc_r+0xb0>
 80096da:	4623      	mov	r3, r4
 80096dc:	6864      	ldr	r4, [r4, #4]
 80096de:	e7ac      	b.n	800963a <_malloc_r+0x36>
 80096e0:	4634      	mov	r4, r6
 80096e2:	6876      	ldr	r6, [r6, #4]
 80096e4:	e7b4      	b.n	8009650 <_malloc_r+0x4c>
 80096e6:	4613      	mov	r3, r2
 80096e8:	e7cc      	b.n	8009684 <_malloc_r+0x80>
 80096ea:	230c      	movs	r3, #12
 80096ec:	603b      	str	r3, [r7, #0]
 80096ee:	4638      	mov	r0, r7
 80096f0:	f000 f80e 	bl	8009710 <__malloc_unlock>
 80096f4:	e797      	b.n	8009626 <_malloc_r+0x22>
 80096f6:	6025      	str	r5, [r4, #0]
 80096f8:	e7dc      	b.n	80096b4 <_malloc_r+0xb0>
 80096fa:	605b      	str	r3, [r3, #4]
 80096fc:	deff      	udf	#255	; 0xff
 80096fe:	bf00      	nop
 8009700:	2000055c 	.word	0x2000055c

08009704 <__malloc_lock>:
 8009704:	4801      	ldr	r0, [pc, #4]	; (800970c <__malloc_lock+0x8>)
 8009706:	f000 b84b 	b.w	80097a0 <__retarget_lock_acquire_recursive>
 800970a:	bf00      	nop
 800970c:	200006a0 	.word	0x200006a0

08009710 <__malloc_unlock>:
 8009710:	4801      	ldr	r0, [pc, #4]	; (8009718 <__malloc_unlock+0x8>)
 8009712:	f000 b846 	b.w	80097a2 <__retarget_lock_release_recursive>
 8009716:	bf00      	nop
 8009718:	200006a0 	.word	0x200006a0

0800971c <memset>:
 800971c:	4402      	add	r2, r0
 800971e:	4603      	mov	r3, r0
 8009720:	4293      	cmp	r3, r2
 8009722:	d100      	bne.n	8009726 <memset+0xa>
 8009724:	4770      	bx	lr
 8009726:	f803 1b01 	strb.w	r1, [r3], #1
 800972a:	e7f9      	b.n	8009720 <memset+0x4>

0800972c <_sbrk_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	4d06      	ldr	r5, [pc, #24]	; (8009748 <_sbrk_r+0x1c>)
 8009730:	2300      	movs	r3, #0
 8009732:	4604      	mov	r4, r0
 8009734:	4608      	mov	r0, r1
 8009736:	602b      	str	r3, [r5, #0]
 8009738:	f7f9 fbee 	bl	8002f18 <_sbrk>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d102      	bne.n	8009746 <_sbrk_r+0x1a>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	b103      	cbz	r3, 8009746 <_sbrk_r+0x1a>
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	2000069c 	.word	0x2000069c

0800974c <__errno>:
 800974c:	4b01      	ldr	r3, [pc, #4]	; (8009754 <__errno+0x8>)
 800974e:	6818      	ldr	r0, [r3, #0]
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	20000058 	.word	0x20000058

08009758 <__libc_init_array>:
 8009758:	b570      	push	{r4, r5, r6, lr}
 800975a:	4d0d      	ldr	r5, [pc, #52]	; (8009790 <__libc_init_array+0x38>)
 800975c:	4c0d      	ldr	r4, [pc, #52]	; (8009794 <__libc_init_array+0x3c>)
 800975e:	1b64      	subs	r4, r4, r5
 8009760:	10a4      	asrs	r4, r4, #2
 8009762:	2600      	movs	r6, #0
 8009764:	42a6      	cmp	r6, r4
 8009766:	d109      	bne.n	800977c <__libc_init_array+0x24>
 8009768:	4d0b      	ldr	r5, [pc, #44]	; (8009798 <__libc_init_array+0x40>)
 800976a:	4c0c      	ldr	r4, [pc, #48]	; (800979c <__libc_init_array+0x44>)
 800976c:	f000 f828 	bl	80097c0 <_init>
 8009770:	1b64      	subs	r4, r4, r5
 8009772:	10a4      	asrs	r4, r4, #2
 8009774:	2600      	movs	r6, #0
 8009776:	42a6      	cmp	r6, r4
 8009778:	d105      	bne.n	8009786 <__libc_init_array+0x2e>
 800977a:	bd70      	pop	{r4, r5, r6, pc}
 800977c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009780:	4798      	blx	r3
 8009782:	3601      	adds	r6, #1
 8009784:	e7ee      	b.n	8009764 <__libc_init_array+0xc>
 8009786:	f855 3b04 	ldr.w	r3, [r5], #4
 800978a:	4798      	blx	r3
 800978c:	3601      	adds	r6, #1
 800978e:	e7f2      	b.n	8009776 <__libc_init_array+0x1e>
 8009790:	08009830 	.word	0x08009830
 8009794:	08009830 	.word	0x08009830
 8009798:	08009830 	.word	0x08009830
 800979c:	08009834 	.word	0x08009834

080097a0 <__retarget_lock_acquire_recursive>:
 80097a0:	4770      	bx	lr

080097a2 <__retarget_lock_release_recursive>:
 80097a2:	4770      	bx	lr

080097a4 <memcpy>:
 80097a4:	440a      	add	r2, r1
 80097a6:	4291      	cmp	r1, r2
 80097a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80097ac:	d100      	bne.n	80097b0 <memcpy+0xc>
 80097ae:	4770      	bx	lr
 80097b0:	b510      	push	{r4, lr}
 80097b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097ba:	4291      	cmp	r1, r2
 80097bc:	d1f9      	bne.n	80097b2 <memcpy+0xe>
 80097be:	bd10      	pop	{r4, pc}

080097c0 <_init>:
 80097c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c2:	bf00      	nop
 80097c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c6:	bc08      	pop	{r3}
 80097c8:	469e      	mov	lr, r3
 80097ca:	4770      	bx	lr

080097cc <_fini>:
 80097cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ce:	bf00      	nop
 80097d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097d2:	bc08      	pop	{r3}
 80097d4:	469e      	mov	lr, r3
 80097d6:	4770      	bx	lr
