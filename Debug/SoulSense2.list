
SoulSense2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080095a8  080095a8  000195a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095f8  080095f8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080095f8  080095f8  000195f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009600  08009600  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009600  08009600  00019600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009604  08009604  00019604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08009608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  2000005c  08009664  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08009664  0002067c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023ae2  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043bd  00000000  00000000  00043bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab0  00000000  00000000  00047f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014b5  00000000  00000000  00049a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c00e  00000000  00000000  0004aed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000221e5  00000000  00000000  00076ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011bcd7  00000000  00000000  000990c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007478  00000000  00000000  001b4da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001bc218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009590 	.word	0x08009590

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08009590 	.word	0x08009590

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <imu_init>:

/* Private variables ---------------------------------------------------------*/


// Initializing the IMU
void imu_init(I2C_HandleTypeDef* i2c,IMU* imu) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af02      	add	r7, sp, #8
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
//	memset(imu->payload , 0 , SIZE_OF_IMU_DATA);
    // Ensure that the BNO pointer is allocated (if using dynamic memory)
    imu->bno = (bno055_t*) malloc(sizeof(bno055_t));
 800051e:	20ac      	movs	r0, #172	; 0xac
 8000520:	f008 ff30 	bl	8009384 <malloc>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	601a      	str	r2, [r3, #0]

    if (imu->bno == NULL) {
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d01f      	beq.n	8000574 <imu_init+0x60>
        // Handle memory allocation error
        return;
    }

    imu->bno->i2c = i2c;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	601a      	str	r2, [r3, #0]
    imu->bno->addr = BNO_ADDR_ALT;
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2228      	movs	r2, #40	; 0x28
 8000542:	719a      	strb	r2, [r3, #6]
    imu->bno->mode = BNO_MODE_IMU;
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2208      	movs	r2, #8
 800054a:	711a      	strb	r2, [r3, #4]

    imu->errInit = bno055_init(imu->bno);
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fa3b 	bl	80009cc <bno055_init>
 8000556:	4603      	mov	r3, r0
 8000558:	461a      	mov	r2, r3
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    bno055_set_unit(imu->bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	6818      	ldr	r0, [r3, #0]
 8000564:	2300      	movs	r3, #0
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2300      	movs	r3, #0
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	f001 fe64 	bl	800223a <bno055_set_unit>
 8000572:	e000      	b.n	8000576 <imu_init+0x62>
        return;
 8000574:	bf00      	nop
    	                      BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG); //set correct units!
}
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <imu_update_payload>:
    if (imu->bno) {
        free(imu->bno);
    }
}

void imu_update_payload(IMU* imu) {
 800057c:	b480      	push	{r7}
 800057e:	b08d      	sub	sp, #52	; 0x34
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    // Starting index for the payload
    int index = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Convert quaternion values to byte array format.
    float quaternion_values[4] = {
        imu->quaternion.x,
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	69db      	ldr	r3, [r3, #28]
    float quaternion_values[4] = {
 800058c:	617b      	str	r3, [r7, #20]
        imu->quaternion.y,
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6a1b      	ldr	r3, [r3, #32]
    float quaternion_values[4] = {
 8000592:	61bb      	str	r3, [r7, #24]
        imu->quaternion.z,
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    float quaternion_values[4] = {
 8000598:	61fb      	str	r3, [r7, #28]
        imu->quaternion.w
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    float quaternion_values[4] = {
 800059e:	623b      	str	r3, [r7, #32]
    };

    for (int i = 0; i < 4; i++) {
 80005a0:	2300      	movs	r3, #0
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80005a4:	e010      	b.n	80005c8 <imu_update_payload+0x4c>
        memcpy(&imu->payload[index], &quaternion_values[i], 4);
 80005a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a8:	3330      	adds	r3, #48	; 0x30
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	f107 0114 	add.w	r1, r7, #20
 80005b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005b4:	0092      	lsls	r2, r2, #2
 80005b6:	440a      	add	r2, r1
 80005b8:	6812      	ldr	r2, [r2, #0]
 80005ba:	601a      	str	r2, [r3, #0]
        index += 4;
 80005bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005be:	3304      	adds	r3, #4
 80005c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < 4; i++) {
 80005c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c4:	3301      	adds	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80005c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	ddeb      	ble.n	80005a6 <imu_update_payload+0x2a>
    }

    // Convert accelerometer values to byte array format.
    float accel_values[3] = {
        imu->accelerometer.x,
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	691b      	ldr	r3, [r3, #16]
    float accel_values[3] = {
 80005d2:	60bb      	str	r3, [r7, #8]
        imu->accelerometer.y,
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	695b      	ldr	r3, [r3, #20]
    float accel_values[3] = {
 80005d8:	60fb      	str	r3, [r7, #12]
        imu->accelerometer.z,
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	699b      	ldr	r3, [r3, #24]
    float accel_values[3] = {
 80005de:	613b      	str	r3, [r7, #16]
    };

    for (int i = 0; i < 3; i++) {
 80005e0:	2300      	movs	r3, #0
 80005e2:	627b      	str	r3, [r7, #36]	; 0x24
 80005e4:	e010      	b.n	8000608 <imu_update_payload+0x8c>
        memcpy(&imu->payload[index], &accel_values[i], 4);
 80005e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005e8:	3330      	adds	r3, #48	; 0x30
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	f107 0108 	add.w	r1, r7, #8
 80005f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005f4:	0092      	lsls	r2, r2, #2
 80005f6:	440a      	add	r2, r1
 80005f8:	6812      	ldr	r2, [r2, #0]
 80005fa:	601a      	str	r2, [r3, #0]
        index += 4;
 80005fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005fe:	3304      	adds	r3, #4
 8000600:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < 3; i++) {
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	3301      	adds	r3, #1
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
 8000608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060a:	2b02      	cmp	r3, #2
 800060c:	ddeb      	ble.n	80005e6 <imu_update_payload+0x6a>
    }
}
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	3734      	adds	r7, #52	; 0x34
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <soul_init>:
#include "Imu.h"
#include "contact_sensors.h"
#include "configuration.h"

// Adjust soul_init to use pointers for the parameters
void soul_init(SoulSense* soul_sense){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
    memset(soul_sense->payload, 0, SIZE_OF_SOLE_DATA);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	223f      	movs	r2, #63	; 0x3f
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f008 ff5e 	bl	80094ec <memset>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <soul_update_payload>:

void soul_update_payload(SoulSense* soul_sense, ContactSensors* adc_data, IMU* imu_data, FwVersion* sole_version) {
 8000638:	b480      	push	{r7}
 800063a:	b089      	sub	sp, #36	; 0x24
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
 8000644:	603b      	str	r3, [r7, #0]
    int index = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]

    // Copy ContactSensors payload
    for (int i = 0; i < NUMBER_OF_SENSORS * 4; i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
 800064e:	e00f      	b.n	8000670 <soul_update_payload+0x38>
        soul_sense->payload[index] = adc_data->payload[i];
 8000650:	68ba      	ldr	r2, [r7, #8]
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	4413      	add	r3, r2
 8000656:	3324      	adds	r3, #36	; 0x24
 8000658:	7819      	ldrb	r1, [r3, #0]
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	4413      	add	r3, r2
 8000660:	460a      	mov	r2, r1
 8000662:	701a      	strb	r2, [r3, #0]
        index++;
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	3301      	adds	r3, #1
 8000668:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < NUMBER_OF_SENSORS * 4; i++) {
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	3301      	adds	r3, #1
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	2b1f      	cmp	r3, #31
 8000674:	ddec      	ble.n	8000650 <soul_update_payload+0x18>
    }

    // Copy IMU payload
    for (int i = 0; i < SIZE_OF_IMU_DATA; i++) {
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	e00f      	b.n	800069c <soul_update_payload+0x64>
        soul_sense->payload[index] = imu_data->payload[i];
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	4413      	add	r3, r2
 8000682:	3330      	adds	r3, #48	; 0x30
 8000684:	7819      	ldrb	r1, [r3, #0]
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	4413      	add	r3, r2
 800068c:	460a      	mov	r2, r1
 800068e:	701a      	strb	r2, [r3, #0]
        index++;
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	3301      	adds	r3, #1
 8000694:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < SIZE_OF_IMU_DATA; i++) {
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	3301      	adds	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	2b1b      	cmp	r3, #27
 80006a0:	ddec      	ble.n	800067c <soul_update_payload+0x44>
    }

    // Copy FwVersion payload (version)
    for (int i = 0; i < VERSION_LEN; i++) {
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	e00e      	b.n	80006c6 <soul_update_payload+0x8e>
        soul_sense->payload[index] = sole_version->version[i];
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	4413      	add	r3, r2
 80006ae:	7819      	ldrb	r1, [r3, #0]
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	4413      	add	r3, r2
 80006b6:	460a      	mov	r2, r1
 80006b8:	701a      	strb	r2, [r3, #0]
        index++;
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3301      	adds	r3, #1
 80006be:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < VERSION_LEN; i++) {
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	3301      	adds	r3, #1
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	2b02      	cmp	r3, #2
 80006ca:	dded      	ble.n	80006a8 <soul_update_payload+0x70>
    }
}
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	3724      	adds	r7, #36	; 0x24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
	...

080006dc <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2220      	movs	r2, #32
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f008 feff 	bl	80094ec <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006ee:	4b5e      	ldr	r3, [pc, #376]	; (8000868 <MX_ADC2_Init+0x18c>)
 80006f0:	4a5e      	ldr	r2, [pc, #376]	; (800086c <MX_ADC2_Init+0x190>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f4:	4b5c      	ldr	r3, [pc, #368]	; (8000868 <MX_ADC2_Init+0x18c>)
 80006f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006fc:	4b5a      	ldr	r3, [pc, #360]	; (8000868 <MX_ADC2_Init+0x18c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b59      	ldr	r3, [pc, #356]	; (8000868 <MX_ADC2_Init+0x18c>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000708:	4b57      	ldr	r3, [pc, #348]	; (8000868 <MX_ADC2_Init+0x18c>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800070e:	4b56      	ldr	r3, [pc, #344]	; (8000868 <MX_ADC2_Init+0x18c>)
 8000710:	2201      	movs	r2, #1
 8000712:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000714:	4b54      	ldr	r3, [pc, #336]	; (8000868 <MX_ADC2_Init+0x18c>)
 8000716:	2208      	movs	r2, #8
 8000718:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800071a:	4b53      	ldr	r3, [pc, #332]	; (8000868 <MX_ADC2_Init+0x18c>)
 800071c:	2200      	movs	r2, #0
 800071e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000720:	4b51      	ldr	r3, [pc, #324]	; (8000868 <MX_ADC2_Init+0x18c>)
 8000722:	2201      	movs	r2, #1
 8000724:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 8;
 8000726:	4b50      	ldr	r3, [pc, #320]	; (8000868 <MX_ADC2_Init+0x18c>)
 8000728:	2208      	movs	r2, #8
 800072a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b4e      	ldr	r3, [pc, #312]	; (8000868 <MX_ADC2_Init+0x18c>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b4c      	ldr	r3, [pc, #304]	; (8000868 <MX_ADC2_Init+0x18c>)
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	4b4b      	ldr	r3, [pc, #300]	; (8000868 <MX_ADC2_Init+0x18c>)
 800073c:	2200      	movs	r2, #0
 800073e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000740:	4b49      	ldr	r3, [pc, #292]	; (8000868 <MX_ADC2_Init+0x18c>)
 8000742:	2201      	movs	r2, #1
 8000744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000748:	4b47      	ldr	r3, [pc, #284]	; (8000868 <MX_ADC2_Init+0x18c>)
 800074a:	2200      	movs	r2, #0
 800074c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800074e:	4b46      	ldr	r3, [pc, #280]	; (8000868 <MX_ADC2_Init+0x18c>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000756:	4844      	ldr	r0, [pc, #272]	; (8000868 <MX_ADC2_Init+0x18c>)
 8000758:	f003 f834 	bl	80037c4 <HAL_ADC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000762:	f002 fadb 	bl	8002d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000766:	4b42      	ldr	r3, [pc, #264]	; (8000870 <MX_ADC2_Init+0x194>)
 8000768:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076a:	2306      	movs	r3, #6
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800076e:	2305      	movs	r3, #5
 8000770:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000772:	237f      	movs	r3, #127	; 0x7f
 8000774:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000776:	2304      	movs	r3, #4
 8000778:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	4619      	mov	r1, r3
 8000782:	4839      	ldr	r0, [pc, #228]	; (8000868 <MX_ADC2_Init+0x18c>)
 8000784:	f003 fad2 	bl	8003d2c <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800078e:	f002 fac5 	bl	8002d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000792:	4b38      	ldr	r3, [pc, #224]	; (8000874 <MX_ADC2_Init+0x198>)
 8000794:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000796:	230c      	movs	r3, #12
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4832      	ldr	r0, [pc, #200]	; (8000868 <MX_ADC2_Init+0x18c>)
 80007a0:	f003 fac4 	bl	8003d2c <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80007aa:	f002 fab7 	bl	8002d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007ae:	4b32      	ldr	r3, [pc, #200]	; (8000878 <MX_ADC2_Init+0x19c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007b2:	2312      	movs	r3, #18
 80007b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	4619      	mov	r1, r3
 80007ba:	482b      	ldr	r0, [pc, #172]	; (8000868 <MX_ADC2_Init+0x18c>)
 80007bc:	f003 fab6 	bl	8003d2c <HAL_ADC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 80007c6:	f002 faa9 	bl	8002d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007ca:	4b2c      	ldr	r3, [pc, #176]	; (800087c <MX_ADC2_Init+0x1a0>)
 80007cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80007ce:	2318      	movs	r3, #24
 80007d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	4619      	mov	r1, r3
 80007d6:	4824      	ldr	r0, [pc, #144]	; (8000868 <MX_ADC2_Init+0x18c>)
 80007d8:	f003 faa8 	bl	8003d2c <HAL_ADC_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 80007e2:	f002 fa9b 	bl	8002d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007e6:	4b26      	ldr	r3, [pc, #152]	; (8000880 <MX_ADC2_Init+0x1a4>)
 80007e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80007ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	4619      	mov	r1, r3
 80007f4:	481c      	ldr	r0, [pc, #112]	; (8000868 <MX_ADC2_Init+0x18c>)
 80007f6:	f003 fa99 	bl	8003d2c <HAL_ADC_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 8000800:	f002 fa8c 	bl	8002d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_ADC2_Init+0x1a8>)
 8000806:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000808:	f44f 7383 	mov.w	r3, #262	; 0x106
 800080c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	4815      	ldr	r0, [pc, #84]	; (8000868 <MX_ADC2_Init+0x18c>)
 8000814:	f003 fa8a 	bl	8003d2c <HAL_ADC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 800081e:	f002 fa7d 	bl	8002d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <MX_ADC2_Init+0x1ac>)
 8000824:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000826:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800082a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_ADC2_Init+0x18c>)
 8000832:	f003 fa7b 	bl	8003d2c <HAL_ADC_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC2_Init+0x164>
  {
    Error_Handler();
 800083c:	f002 fa6e 	bl	8002d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_ADC2_Init+0x1b0>)
 8000842:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000844:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000848:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_ADC2_Init+0x18c>)
 8000850:	f003 fa6c 	bl	8003d2c <HAL_ADC_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC2_Init+0x182>
  {
    Error_Handler();
 800085a:	f002 fa5f 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000078 	.word	0x20000078
 800086c:	50000100 	.word	0x50000100
 8000870:	04300002 	.word	0x04300002
 8000874:	08600004 	.word	0x08600004
 8000878:	0c900008 	.word	0x0c900008
 800087c:	10c00010 	.word	0x10c00010
 8000880:	14f00020 	.word	0x14f00020
 8000884:	19200040 	.word	0x19200040
 8000888:	1d500080 	.word	0x1d500080
 800088c:	21800100 	.word	0x21800100

08000890 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b0a0      	sub	sp, #128	; 0x80
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a8:	f107 0318 	add.w	r3, r7, #24
 80008ac:	2254      	movs	r2, #84	; 0x54
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f008 fe1b 	bl	80094ec <memset>
  if(adcHandle->Instance==ADC2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a3f      	ldr	r2, [pc, #252]	; (80009b8 <HAL_ADC_MspInit+0x128>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d177      	bne.n	80009b0 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	f107 0318 	add.w	r3, r7, #24
 80008d0:	4618      	mov	r0, r3
 80008d2:	f006 ff57 	bl	8007784 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80008dc:	f002 fa1e 	bl	8002d1c <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008e0:	4b36      	ldr	r3, [pc, #216]	; (80009bc <HAL_ADC_MspInit+0x12c>)
 80008e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e4:	4a35      	ldr	r2, [pc, #212]	; (80009bc <HAL_ADC_MspInit+0x12c>)
 80008e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ec:	4b33      	ldr	r3, [pc, #204]	; (80009bc <HAL_ADC_MspInit+0x12c>)
 80008ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f8:	4b30      	ldr	r3, [pc, #192]	; (80009bc <HAL_ADC_MspInit+0x12c>)
 80008fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fc:	4a2f      	ldr	r2, [pc, #188]	; (80009bc <HAL_ADC_MspInit+0x12c>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000904:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <HAL_ADC_MspInit+0x12c>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <HAL_ADC_MspInit+0x12c>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000914:	4a29      	ldr	r2, [pc, #164]	; (80009bc <HAL_ADC_MspInit+0x12c>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <HAL_ADC_MspInit+0x12c>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    PC4     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8000928:	2317      	movs	r3, #23
 800092a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092c:	2303      	movs	r3, #3
 800092e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000934:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000938:	4619      	mov	r1, r3
 800093a:	4821      	ldr	r0, [pc, #132]	; (80009c0 <HAL_ADC_MspInit+0x130>)
 800093c:	f005 f8be 	bl	8005abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000940:	23c3      	movs	r3, #195	; 0xc3
 8000942:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000944:	2303      	movs	r3, #3
 8000946:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000950:	4619      	mov	r1, r3
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000956:	f005 f8b1 	bl	8005abc <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <HAL_ADC_MspInit+0x134>)
 800095c:	4a1a      	ldr	r2, [pc, #104]	; (80009c8 <HAL_ADC_MspInit+0x138>)
 800095e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_ADC_MspInit+0x134>)
 8000962:	2224      	movs	r2, #36	; 0x24
 8000964:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_ADC_MspInit+0x134>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_ADC_MspInit+0x134>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <HAL_ADC_MspInit+0x134>)
 8000974:	2280      	movs	r2, #128	; 0x80
 8000976:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_ADC_MspInit+0x134>)
 800097a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_ADC_MspInit+0x134>)
 8000982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000986:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_ADC_MspInit+0x134>)
 800098a:	2220      	movs	r2, #32
 800098c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_ADC_MspInit+0x134>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000994:	480b      	ldr	r0, [pc, #44]	; (80009c4 <HAL_ADC_MspInit+0x134>)
 8000996:	f004 f80f 	bl	80049b8 <HAL_DMA_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 80009a0:	f002 f9bc 	bl	8002d1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <HAL_ADC_MspInit+0x134>)
 80009a8:	655a      	str	r2, [r3, #84]	; 0x54
 80009aa:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <HAL_ADC_MspInit+0x134>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80009b0:	bf00      	nop
 80009b2:	3780      	adds	r7, #128	; 0x80
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	50000100 	.word	0x50000100
 80009bc:	40021000 	.word	0x40021000
 80009c0:	48000800 	.word	0x48000800
 80009c4:	200000e4 	.word	0x200000e4
 80009c8:	40020008 	.word	0x40020008

080009cc <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b0b1      	sub	sp, #196	; 0xc4
 80009d0:	af2a      	add	r7, sp, #168	; 0xa8
 80009d2:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	73fb      	strb	r3, [r7, #15]
    error_bno err;
    uint32_t timeSaver;

    imu->addr = (imu->addr << 1);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	799b      	ldrb	r3, [r3, #6]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 80009e4:	687c      	ldr	r4, [r7, #4]
 80009e6:	2301      	movs	r3, #1
 80009e8:	9329      	str	r3, [sp, #164]	; 0xa4
 80009ea:	f107 030f 	add.w	r3, r7, #15
 80009ee:	9328      	str	r3, [sp, #160]	; 0xa0
 80009f0:	2300      	movs	r3, #0
 80009f2:	9327      	str	r3, [sp, #156]	; 0x9c
 80009f4:	4668      	mov	r0, sp
 80009f6:	f104 0310 	add.w	r3, r4, #16
 80009fa:	229c      	movs	r2, #156	; 0x9c
 80009fc:	4619      	mov	r1, r3
 80009fe:	f008 fdb9 	bl	8009574 <memcpy>
 8000a02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a06:	f001 fd23 	bl	8002450 <bno055_read_regs>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	75fb      	strb	r3, [r7, #23]
    if (err != BNO_OK) {
 8000a0e:	7dfb      	ldrb	r3, [r7, #23]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <bno055_init+0x4c>
        return err;
 8000a14:	7dfb      	ldrb	r3, [r7, #23]
 8000a16:	e0df      	b.n	8000bd8 <bno055_init+0x20c>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	2ba0      	cmp	r3, #160	; 0xa0
 8000a1c:	d001      	beq.n	8000a22 <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8000a1e:	2306      	movs	r3, #6
 8000a20:	e0da      	b.n	8000bd8 <bno055_init+0x20c>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8000a22:	2100      	movs	r1, #0
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f001 fbd6 	bl	80021d6 <bno055_set_opmode>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	75fb      	strb	r3, [r7, #23]
 8000a2e:	7dfb      	ldrb	r3, [r7, #23]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <bno055_init+0x6c>
        return err;
 8000a34:	7dfb      	ldrb	r3, [r7, #23]
 8000a36:	e0cf      	b.n	8000bd8 <bno055_init+0x20c>
    }
    timeSaver = HAL_GetTick();
 8000a38:	f002 fc74 	bl	8003324 <HAL_GetTick>
 8000a3c:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < 2) {}//wait
 8000a3e:	bf00      	nop
 8000a40:	f002 fc70 	bl	8003324 <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d9f8      	bls.n	8000a40 <bno055_init+0x74>
    //HAL_Delay(2);
    bno055_reset(imu);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f001 fcb8 	bl	80023c4 <bno055_reset>
    timeSaver = HAL_GetTick();
 8000a54:	f002 fc66 	bl	8003324 <HAL_GetTick>
 8000a58:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < 5000) {} //wait
 8000a5a:	bf00      	nop
 8000a5c:	f002 fc62 	bl	8003324 <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	f241 3287 	movw	r2, #4999	; 0x1387
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d9f6      	bls.n	8000a5c <bno055_init+0x90>
    //HAL_Delay(5000);
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8000a6e:	2100      	movs	r1, #0
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f001 fc4a 	bl	800230a <bno055_set_pwr_mode>
 8000a76:	4603      	mov	r3, r0
 8000a78:	75fb      	strb	r3, [r7, #23]
 8000a7a:	7dfb      	ldrb	r3, [r7, #23]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <bno055_init+0xb8>
        return err;
 8000a80:	7dfb      	ldrb	r3, [r7, #23]
 8000a82:	e0a9      	b.n	8000bd8 <bno055_init+0x20c>
    }
    timeSaver = HAL_GetTick();
 8000a84:	f002 fc4e 	bl	8003324 <HAL_GetTick>
 8000a88:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < 10) {}//wait
 8000a8a:	bf00      	nop
 8000a8c:	f002 fc4a 	bl	8003324 <HAL_GetTick>
 8000a90:	4602      	mov	r2, r0
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	2b09      	cmp	r3, #9
 8000a98:	d9f8      	bls.n	8000a8c <bno055_init+0xc0>
    //HAL_Delay(10);
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f001 fd3a 	bl	8002516 <bno055_set_page>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	75fb      	strb	r3, [r7, #23]
 8000aa6:	7dfb      	ldrb	r3, [r7, #23]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <bno055_init+0xe4>
        return err;
 8000aac:	7dfb      	ldrb	r3, [r7, #23]
 8000aae:	e093      	b.n	8000bd8 <bno055_init+0x20c>
    }
    timeSaver = HAL_GetTick();
 8000ab0:	f002 fc38 	bl	8003324 <HAL_GetTick>
 8000ab4:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < BNO_CONFIG_TIME_DELAY + 5) {} //wait
 8000ab6:	bf00      	nop
 8000ab8:	f002 fc34 	bl	8003324 <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	2b0b      	cmp	r3, #11
 8000ac4:	d9f8      	bls.n	8000ab8 <bno055_init+0xec>
    //HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
    bno055_on(imu);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f001 fc9f 	bl	800240a <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	791b      	ldrb	r3, [r3, #4]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f001 fb7f 	bl	80021d6 <bno055_set_opmode>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	75fb      	strb	r3, [r7, #23]
 8000adc:	7dfb      	ldrb	r3, [r7, #23]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <bno055_init+0x11a>
        return err;
 8000ae2:	7dfb      	ldrb	r3, [r7, #23]
 8000ae4:	e078      	b.n	8000bd8 <bno055_init+0x20c>
    }
    timeSaver = HAL_GetTick();
 8000ae6:	f002 fc1d 	bl	8003324 <HAL_GetTick>
 8000aea:	6138      	str	r0, [r7, #16]
    while (HAL_GetTick() - timeSaver < BNO_ANY_TIME_DELAY + 5) {}//wait
 8000aec:	bf00      	nop
 8000aee:	f002 fc19 	bl	8003324 <HAL_GetTick>
 8000af2:	4602      	mov	r2, r0
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	2b17      	cmp	r3, #23
 8000afa:	d9f8      	bls.n	8000aee <bno055_init+0x122>
    //HAL_Delay(BNO_ANY_TIME_DELAY + 5);

    imu->temperature = &bno055_temperature;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a38      	ldr	r2, [pc, #224]	; (8000be0 <bno055_init+0x214>)
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
    imu->acc_x = &bno055_acc_x;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a37      	ldr	r2, [pc, #220]	; (8000be4 <bno055_init+0x218>)
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
    imu->acc_y = &bno055_acc_y;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a37      	ldr	r2, [pc, #220]	; (8000be8 <bno055_init+0x21c>)
 8000b0c:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->acc_z = &bno055_acc_z;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a36      	ldr	r2, [pc, #216]	; (8000bec <bno055_init+0x220>)
 8000b12:	631a      	str	r2, [r3, #48]	; 0x30
    imu->acc = &bno055_acc;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a36      	ldr	r2, [pc, #216]	; (8000bf0 <bno055_init+0x224>)
 8000b18:	635a      	str	r2, [r3, #52]	; 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a35      	ldr	r2, [pc, #212]	; (8000bf4 <bno055_init+0x228>)
 8000b1e:	639a      	str	r2, [r3, #56]	; 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a35      	ldr	r2, [pc, #212]	; (8000bf8 <bno055_init+0x22c>)
 8000b24:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a34      	ldr	r2, [pc, #208]	; (8000bfc <bno055_init+0x230>)
 8000b2a:	641a      	str	r2, [r3, #64]	; 0x40
    imu->linear_acc = &bno055_linear_acc;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a34      	ldr	r2, [pc, #208]	; (8000c00 <bno055_init+0x234>)
 8000b30:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyro_x = &bno055_gyro_x;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a33      	ldr	r2, [pc, #204]	; (8000c04 <bno055_init+0x238>)
 8000b36:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyro_y = &bno055_gyro_y;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a33      	ldr	r2, [pc, #204]	; (8000c08 <bno055_init+0x23c>)
 8000b3c:	64da      	str	r2, [r3, #76]	; 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a32      	ldr	r2, [pc, #200]	; (8000c0c <bno055_init+0x240>)
 8000b42:	651a      	str	r2, [r3, #80]	; 0x50
    imu->gyro = &bno055_gyro;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a32      	ldr	r2, [pc, #200]	; (8000c10 <bno055_init+0x244>)
 8000b48:	655a      	str	r2, [r3, #84]	; 0x54
    imu->mag_x = &bno055_mag_x;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a31      	ldr	r2, [pc, #196]	; (8000c14 <bno055_init+0x248>)
 8000b4e:	659a      	str	r2, [r3, #88]	; 0x58
    imu->mag_y = &bno055_mag_y;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a31      	ldr	r2, [pc, #196]	; (8000c18 <bno055_init+0x24c>)
 8000b54:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->mag_z = &bno055_mag_z;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a30      	ldr	r2, [pc, #192]	; (8000c1c <bno055_init+0x250>)
 8000b5a:	661a      	str	r2, [r3, #96]	; 0x60
    imu->mag = &bno055_mag;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a30      	ldr	r2, [pc, #192]	; (8000c20 <bno055_init+0x254>)
 8000b60:	665a      	str	r2, [r3, #100]	; 0x64
    imu->gravity_x = &bno055_gravity_x;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a2f      	ldr	r2, [pc, #188]	; (8000c24 <bno055_init+0x258>)
 8000b66:	669a      	str	r2, [r3, #104]	; 0x68
    imu->gravity_y = &bno055_gravity_y;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a2f      	ldr	r2, [pc, #188]	; (8000c28 <bno055_init+0x25c>)
 8000b6c:	66da      	str	r2, [r3, #108]	; 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a2e      	ldr	r2, [pc, #184]	; (8000c2c <bno055_init+0x260>)
 8000b72:	671a      	str	r2, [r3, #112]	; 0x70
    imu->gravity = &bno055_gravity;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a2e      	ldr	r2, [pc, #184]	; (8000c30 <bno055_init+0x264>)
 8000b78:	675a      	str	r2, [r3, #116]	; 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a2d      	ldr	r2, [pc, #180]	; (8000c34 <bno055_init+0x268>)
 8000b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    imu->euler_roll = &bno055_euler_roll;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a2c      	ldr	r2, [pc, #176]	; (8000c38 <bno055_init+0x26c>)
 8000b86:	679a      	str	r2, [r3, #120]	; 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a2c      	ldr	r2, [pc, #176]	; (8000c3c <bno055_init+0x270>)
 8000b8c:	67da      	str	r2, [r3, #124]	; 0x7c
    imu->euler = &bno055_euler;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a2b      	ldr	r2, [pc, #172]	; (8000c40 <bno055_init+0x274>)
 8000b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <bno055_init+0x278>)
 8000b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a29      	ldr	r2, [pc, #164]	; (8000c48 <bno055_init+0x27c>)
 8000ba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a28      	ldr	r2, [pc, #160]	; (8000c4c <bno055_init+0x280>)
 8000baa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a27      	ldr	r2, [pc, #156]	; (8000c50 <bno055_init+0x284>)
 8000bb2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    imu->quaternion = &bno055_quaternion;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a26      	ldr	r2, [pc, #152]	; (8000c54 <bno055_init+0x288>)
 8000bba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    imu->acc_config = &bno055_acc_conf;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a25      	ldr	r2, [pc, #148]	; (8000c58 <bno055_init+0x28c>)
 8000bc2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a24      	ldr	r2, [pc, #144]	; (8000c5c <bno055_init+0x290>)
 8000bca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    imu->mag_config = &bno055_mag_conf;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <bno055_init+0x294>)
 8000bd2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return BNO_OK;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	371c      	adds	r7, #28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd90      	pop	{r4, r7, pc}
 8000be0:	08000c65 	.word	0x08000c65
 8000be4:	08000ce1 	.word	0x08000ce1
 8000be8:	08000d75 	.word	0x08000d75
 8000bec:	08000e09 	.word	0x08000e09
 8000bf0:	08000e9d 	.word	0x08000e9d
 8000bf4:	08000f7d 	.word	0x08000f7d
 8000bf8:	08001011 	.word	0x08001011
 8000bfc:	080010a5 	.word	0x080010a5
 8000c00:	08001139 	.word	0x08001139
 8000c04:	08001219 	.word	0x08001219
 8000c08:	080012ad 	.word	0x080012ad
 8000c0c:	08001341 	.word	0x08001341
 8000c10:	080013d5 	.word	0x080013d5
 8000c14:	080014b5 	.word	0x080014b5
 8000c18:	08001537 	.word	0x08001537
 8000c1c:	080015b9 	.word	0x080015b9
 8000c20:	0800163b 	.word	0x0800163b
 8000c24:	08001705 	.word	0x08001705
 8000c28:	0800179d 	.word	0x0800179d
 8000c2c:	08001835 	.word	0x08001835
 8000c30:	080018cd 	.word	0x080018cd
 8000c34:	080019ad 	.word	0x080019ad
 8000c38:	08001a45 	.word	0x08001a45
 8000c3c:	08001add 	.word	0x08001add
 8000c40:	08001b75 	.word	0x08001b75
 8000c44:	08001c55 	.word	0x08001c55
 8000c48:	08001cdd 	.word	0x08001cdd
 8000c4c:	08001d65 	.word	0x08001d65
 8000c50:	08001ded 	.word	0x08001ded
 8000c54:	08001e75 	.word	0x08001e75
 8000c58:	08001f69 	.word	0x08001f69
 8000c5c:	08002039 	.word	0x08002039
 8000c60:	08002107 	.word	0x08002107

08000c64 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b0af      	sub	sp, #188	; 0xbc
 8000c68:	af2a      	add	r7, sp, #168	; 0xa8
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000c6e:	2100      	movs	r1, #0
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f001 fc50 	bl	8002516 <bno055_set_page>
 8000c76:	4603      	mov	r3, r0
 8000c78:	73fb      	strb	r3, [r7, #15]
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <bno055_temperature+0x20>
        return err;
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	e029      	b.n	8000cd8 <bno055_temperature+0x74>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 8000c88:	687c      	ldr	r4, [r7, #4]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	9329      	str	r3, [sp, #164]	; 0xa4
 8000c8e:	f107 030e 	add.w	r3, r7, #14
 8000c92:	9328      	str	r3, [sp, #160]	; 0xa0
 8000c94:	2334      	movs	r3, #52	; 0x34
 8000c96:	9327      	str	r3, [sp, #156]	; 0x9c
 8000c98:	4668      	mov	r0, sp
 8000c9a:	f104 0310 	add.w	r3, r4, #16
 8000c9e:	229c      	movs	r2, #156	; 0x9c
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f008 fc67 	bl	8009574 <memcpy>
 8000ca6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000caa:	f001 fbd1 	bl	8002450 <bno055_read_regs>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	73fb      	strb	r3, [r7, #15]
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <bno055_temperature+0x58>
        return err;
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	e00d      	b.n	8000cd8 <bno055_temperature+0x74>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	7bdb      	ldrb	r3, [r3, #15]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d004      	beq.n	8000cce <bno055_temperature+0x6a>
 8000cc4:	7bbb      	ldrb	r3, [r7, #14]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	b25b      	sxtb	r3, r3
 8000ccc:	e001      	b.n	8000cd2 <bno055_temperature+0x6e>
 8000cce:	7bbb      	ldrb	r3, [r7, #14]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	683a      	ldr	r2, [r7, #0]
 8000cd4:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd90      	pop	{r4, r7, pc}

08000ce0 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b0af      	sub	sp, #188	; 0xbc
 8000ce4:	af2a      	add	r7, sp, #168	; 0xa8
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000cea:	2100      	movs	r1, #0
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f001 fc12 	bl	8002516 <bno055_set_page>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	73fb      	strb	r3, [r7, #15]
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <bno055_acc_x+0x20>
        return err;
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	e033      	b.n	8000d68 <bno055_acc_x+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000d00:	687c      	ldr	r4, [r7, #4]
 8000d02:	2302      	movs	r3, #2
 8000d04:	9329      	str	r3, [sp, #164]	; 0xa4
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	9328      	str	r3, [sp, #160]	; 0xa0
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	9327      	str	r3, [sp, #156]	; 0x9c
 8000d10:	4668      	mov	r0, sp
 8000d12:	f104 0310 	add.w	r3, r4, #16
 8000d16:	229c      	movs	r2, #156	; 0x9c
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f008 fc2b 	bl	8009574 <memcpy>
 8000d1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d22:	f001 fb95 	bl	8002450 <bno055_read_regs>
 8000d26:	4603      	mov	r3, r0
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <bno055_acc_x+0x54>
        return err;
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	e019      	b.n	8000d68 <bno055_acc_x+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000d34:	7b7b      	ldrb	r3, [r7, #13]
 8000d36:	021b      	lsls	r3, r3, #8
 8000d38:	b21a      	sxth	r2, r3
 8000d3a:	7b3b      	ldrb	r3, [r7, #12]
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	ee07 3a90 	vmov	s15, r3
 8000d46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d102      	bne.n	8000d58 <bno055_acc_x+0x78>
 8000d52:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000d70 <bno055_acc_x+0x90>
 8000d56:	e001      	b.n	8000d5c <bno055_acc_x+0x7c>
 8000d58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000d66:	2300      	movs	r3, #0
};
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd90      	pop	{r4, r7, pc}
 8000d70:	42c80000 	.word	0x42c80000

08000d74 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b0af      	sub	sp, #188	; 0xbc
 8000d78:	af2a      	add	r7, sp, #168	; 0xa8
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000d7e:	2100      	movs	r1, #0
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f001 fbc8 	bl	8002516 <bno055_set_page>
 8000d86:	4603      	mov	r3, r0
 8000d88:	73fb      	strb	r3, [r7, #15]
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <bno055_acc_y+0x20>
        return err;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	e033      	b.n	8000dfc <bno055_acc_y+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000d94:	687c      	ldr	r4, [r7, #4]
 8000d96:	2302      	movs	r3, #2
 8000d98:	9329      	str	r3, [sp, #164]	; 0xa4
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	9328      	str	r3, [sp, #160]	; 0xa0
 8000da0:	230a      	movs	r3, #10
 8000da2:	9327      	str	r3, [sp, #156]	; 0x9c
 8000da4:	4668      	mov	r0, sp
 8000da6:	f104 0310 	add.w	r3, r4, #16
 8000daa:	229c      	movs	r2, #156	; 0x9c
 8000dac:	4619      	mov	r1, r3
 8000dae:	f008 fbe1 	bl	8009574 <memcpy>
 8000db2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000db6:	f001 fb4b 	bl	8002450 <bno055_read_regs>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	73fb      	strb	r3, [r7, #15]
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <bno055_acc_y+0x54>
        return err;
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	e019      	b.n	8000dfc <bno055_acc_y+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000dc8:	7b7b      	ldrb	r3, [r7, #13]
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	7b3b      	ldrb	r3, [r7, #12]
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d102      	bne.n	8000dec <bno055_acc_y+0x78>
 8000de6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000e04 <bno055_acc_y+0x90>
 8000dea:	e001      	b.n	8000df0 <bno055_acc_y+0x7c>
 8000dec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000dfa:	2300      	movs	r3, #0
};
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd90      	pop	{r4, r7, pc}
 8000e04:	42c80000 	.word	0x42c80000

08000e08 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b0af      	sub	sp, #188	; 0xbc
 8000e0c:	af2a      	add	r7, sp, #168	; 0xa8
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000e12:	2100      	movs	r1, #0
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f001 fb7e 	bl	8002516 <bno055_set_page>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	73fb      	strb	r3, [r7, #15]
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <bno055_acc_z+0x20>
        return err;
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	e033      	b.n	8000e90 <bno055_acc_z+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000e28:	687c      	ldr	r4, [r7, #4]
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	9329      	str	r3, [sp, #164]	; 0xa4
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	9328      	str	r3, [sp, #160]	; 0xa0
 8000e34:	230c      	movs	r3, #12
 8000e36:	9327      	str	r3, [sp, #156]	; 0x9c
 8000e38:	4668      	mov	r0, sp
 8000e3a:	f104 0310 	add.w	r3, r4, #16
 8000e3e:	229c      	movs	r2, #156	; 0x9c
 8000e40:	4619      	mov	r1, r3
 8000e42:	f008 fb97 	bl	8009574 <memcpy>
 8000e46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e4a:	f001 fb01 	bl	8002450 <bno055_read_regs>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	73fb      	strb	r3, [r7, #15]
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <bno055_acc_z+0x54>
        return err;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	e019      	b.n	8000e90 <bno055_acc_z+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e5c:	7b7b      	ldrb	r3, [r7, #13]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	7b3b      	ldrb	r3, [r7, #12]
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	ee07 3a90 	vmov	s15, r3
 8000e6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d102      	bne.n	8000e80 <bno055_acc_z+0x78>
 8000e7a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000e98 <bno055_acc_z+0x90>
 8000e7e:	e001      	b.n	8000e84 <bno055_acc_z+0x7c>
 8000e80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000e8e:	2300      	movs	r3, #0
};
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd90      	pop	{r4, r7, pc}
 8000e98:	42c80000 	.word	0x42c80000

08000e9c <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b0b1      	sub	sp, #196	; 0xc4
 8000ea0:	af2a      	add	r7, sp, #168	; 0xa8
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f001 fb34 	bl	8002516 <bno055_set_page>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	75fb      	strb	r3, [r7, #23]
 8000eb2:	7dfb      	ldrb	r3, [r7, #23]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <bno055_acc+0x20>
        return err;
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	e059      	b.n	8000f70 <bno055_acc+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 8000ebc:	687c      	ldr	r4, [r7, #4]
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	9329      	str	r3, [sp, #164]	; 0xa4
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	9328      	str	r3, [sp, #160]	; 0xa0
 8000ec8:	2308      	movs	r3, #8
 8000eca:	9327      	str	r3, [sp, #156]	; 0x9c
 8000ecc:	4668      	mov	r0, sp
 8000ece:	f104 0310 	add.w	r3, r4, #16
 8000ed2:	229c      	movs	r2, #156	; 0x9c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f008 fb4d 	bl	8009574 <memcpy>
 8000eda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ede:	f001 fab7 	bl	8002450 <bno055_read_regs>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	75fb      	strb	r3, [r7, #23]
 8000ee6:	7dfb      	ldrb	r3, [r7, #23]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <bno055_acc+0x54>
        return err;
 8000eec:	7dfb      	ldrb	r3, [r7, #23]
 8000eee:	e03f      	b.n	8000f70 <bno055_acc+0xd4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d101      	bne.n	8000efc <bno055_acc+0x60>
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <bno055_acc+0xdc>)
 8000efa:	e001      	b.n	8000f00 <bno055_acc+0x64>
 8000efc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000f00:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000f02:	7a7b      	ldrb	r3, [r7, #9]
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	7a3b      	ldrb	r3, [r7, #8]
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	ee07 3a90 	vmov	s15, r3
 8000f14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f18:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000f26:	7afb      	ldrb	r3, [r7, #11]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	7abb      	ldrb	r3, [r7, #10]
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	ee07 3a90 	vmov	s15, r3
 8000f38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f3c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000f4a:	7b7b      	ldrb	r3, [r7, #13]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	7b3b      	ldrb	r3, [r7, #12]
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	4313      	orrs	r3, r2
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f60:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000f6e:	2300      	movs	r3, #0
};
 8000f70:	4618      	mov	r0, r3
 8000f72:	371c      	adds	r7, #28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	42c80000 	.word	0x42c80000

08000f7c <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b0af      	sub	sp, #188	; 0xbc
 8000f80:	af2a      	add	r7, sp, #168	; 0xa8
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000f86:	2100      	movs	r1, #0
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f001 fac4 	bl	8002516 <bno055_set_page>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <bno055_linear_acc_x+0x20>
        return err;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	e033      	b.n	8001004 <bno055_linear_acc_x+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000f9c:	687c      	ldr	r4, [r7, #4]
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	9329      	str	r3, [sp, #164]	; 0xa4
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	9328      	str	r3, [sp, #160]	; 0xa0
 8000fa8:	2328      	movs	r3, #40	; 0x28
 8000faa:	9327      	str	r3, [sp, #156]	; 0x9c
 8000fac:	4668      	mov	r0, sp
 8000fae:	f104 0310 	add.w	r3, r4, #16
 8000fb2:	229c      	movs	r2, #156	; 0x9c
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f008 fadd 	bl	8009574 <memcpy>
 8000fba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fbe:	f001 fa47 	bl	8002450 <bno055_read_regs>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <bno055_linear_acc_x+0x54>
        return err;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	e019      	b.n	8001004 <bno055_linear_acc_x+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000fd0:	7b7b      	ldrb	r3, [r7, #13]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	7b3b      	ldrb	r3, [r7, #12]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d102      	bne.n	8000ff4 <bno055_linear_acc_x+0x78>
 8000fee:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800100c <bno055_linear_acc_x+0x90>
 8000ff2:	e001      	b.n	8000ff8 <bno055_linear_acc_x+0x7c>
 8000ff4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001002:	2300      	movs	r3, #0
};
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}
 800100c:	42c80000 	.word	0x42c80000

08001010 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b0af      	sub	sp, #188	; 0xbc
 8001014:	af2a      	add	r7, sp, #168	; 0xa8
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800101a:	2100      	movs	r1, #0
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f001 fa7a 	bl	8002516 <bno055_set_page>
 8001022:	4603      	mov	r3, r0
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <bno055_linear_acc_y+0x20>
        return err;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	e033      	b.n	8001098 <bno055_linear_acc_y+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001030:	687c      	ldr	r4, [r7, #4]
 8001032:	2302      	movs	r3, #2
 8001034:	9329      	str	r3, [sp, #164]	; 0xa4
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	9328      	str	r3, [sp, #160]	; 0xa0
 800103c:	232a      	movs	r3, #42	; 0x2a
 800103e:	9327      	str	r3, [sp, #156]	; 0x9c
 8001040:	4668      	mov	r0, sp
 8001042:	f104 0310 	add.w	r3, r4, #16
 8001046:	229c      	movs	r2, #156	; 0x9c
 8001048:	4619      	mov	r1, r3
 800104a:	f008 fa93 	bl	8009574 <memcpy>
 800104e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001052:	f001 f9fd 	bl	8002450 <bno055_read_regs>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <bno055_linear_acc_y+0x54>
        return err;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	e019      	b.n	8001098 <bno055_linear_acc_y+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001064:	7b7b      	ldrb	r3, [r7, #13]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	7b3b      	ldrb	r3, [r7, #12]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800107e:	2b00      	cmp	r3, #0
 8001080:	d102      	bne.n	8001088 <bno055_linear_acc_y+0x78>
 8001082:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80010a0 <bno055_linear_acc_y+0x90>
 8001086:	e001      	b.n	800108c <bno055_linear_acc_y+0x7c>
 8001088:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800108c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001096:	2300      	movs	r3, #0
};
 8001098:	4618      	mov	r0, r3
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	bd90      	pop	{r4, r7, pc}
 80010a0:	42c80000 	.word	0x42c80000

080010a4 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b0af      	sub	sp, #188	; 0xbc
 80010a8:	af2a      	add	r7, sp, #168	; 0xa8
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80010ae:	2100      	movs	r1, #0
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f001 fa30 	bl	8002516 <bno055_set_page>
 80010b6:	4603      	mov	r3, r0
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <bno055_linear_acc_z+0x20>
        return err;
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	e033      	b.n	800112c <bno055_linear_acc_z+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80010c4:	687c      	ldr	r4, [r7, #4]
 80010c6:	2302      	movs	r3, #2
 80010c8:	9329      	str	r3, [sp, #164]	; 0xa4
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	9328      	str	r3, [sp, #160]	; 0xa0
 80010d0:	232c      	movs	r3, #44	; 0x2c
 80010d2:	9327      	str	r3, [sp, #156]	; 0x9c
 80010d4:	4668      	mov	r0, sp
 80010d6:	f104 0310 	add.w	r3, r4, #16
 80010da:	229c      	movs	r2, #156	; 0x9c
 80010dc:	4619      	mov	r1, r3
 80010de:	f008 fa49 	bl	8009574 <memcpy>
 80010e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010e6:	f001 f9b3 	bl	8002450 <bno055_read_regs>
 80010ea:	4603      	mov	r3, r0
 80010ec:	73fb      	strb	r3, [r7, #15]
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <bno055_linear_acc_z+0x54>
        return err;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	e019      	b.n	800112c <bno055_linear_acc_z+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	7b3b      	ldrb	r3, [r7, #12]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21b      	sxth	r3, r3
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001112:	2b00      	cmp	r3, #0
 8001114:	d102      	bne.n	800111c <bno055_linear_acc_z+0x78>
 8001116:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001134 <bno055_linear_acc_z+0x90>
 800111a:	e001      	b.n	8001120 <bno055_linear_acc_z+0x7c>
 800111c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800112a:	2300      	movs	r3, #0
};
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bd90      	pop	{r4, r7, pc}
 8001134:	42c80000 	.word	0x42c80000

08001138 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b0b1      	sub	sp, #196	; 0xc4
 800113c:	af2a      	add	r7, sp, #168	; 0xa8
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001142:	2100      	movs	r1, #0
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f001 f9e6 	bl	8002516 <bno055_set_page>
 800114a:	4603      	mov	r3, r0
 800114c:	75fb      	strb	r3, [r7, #23]
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <bno055_linear_acc+0x20>
        return err;
 8001154:	7dfb      	ldrb	r3, [r7, #23]
 8001156:	e059      	b.n	800120c <bno055_linear_acc+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001158:	687c      	ldr	r4, [r7, #4]
 800115a:	2306      	movs	r3, #6
 800115c:	9329      	str	r3, [sp, #164]	; 0xa4
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	9328      	str	r3, [sp, #160]	; 0xa0
 8001164:	2328      	movs	r3, #40	; 0x28
 8001166:	9327      	str	r3, [sp, #156]	; 0x9c
 8001168:	4668      	mov	r0, sp
 800116a:	f104 0310 	add.w	r3, r4, #16
 800116e:	229c      	movs	r2, #156	; 0x9c
 8001170:	4619      	mov	r1, r3
 8001172:	f008 f9ff 	bl	8009574 <memcpy>
 8001176:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800117a:	f001 f969 	bl	8002450 <bno055_read_regs>
 800117e:	4603      	mov	r3, r0
 8001180:	75fb      	strb	r3, [r7, #23]
 8001182:	7dfb      	ldrb	r3, [r7, #23]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <bno055_linear_acc+0x54>
        return err;
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	e03f      	b.n	800120c <bno055_linear_acc+0xd4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <bno055_linear_acc+0x60>
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <bno055_linear_acc+0xdc>)
 8001196:	e001      	b.n	800119c <bno055_linear_acc+0x64>
 8001198:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800119c:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 800119e:	7a7b      	ldrb	r3, [r7, #9]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	7a3b      	ldrb	r3, [r7, #8]
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80011b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80011c2:	7afb      	ldrb	r3, [r7, #11]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	7abb      	ldrb	r3, [r7, #10]
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80011dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80011e6:	7b7b      	ldrb	r3, [r7, #13]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	7b3b      	ldrb	r3, [r7, #12]
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 800120a:	2300      	movs	r3, #0
};
 800120c:	4618      	mov	r0, r3
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd90      	pop	{r4, r7, pc}
 8001214:	42c80000 	.word	0x42c80000

08001218 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b0af      	sub	sp, #188	; 0xbc
 800121c:	af2a      	add	r7, sp, #168	; 0xa8
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001222:	2100      	movs	r1, #0
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f001 f976 	bl	8002516 <bno055_set_page>
 800122a:	4603      	mov	r3, r0
 800122c:	73fb      	strb	r3, [r7, #15]
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <bno055_gyro_x+0x20>
        return err;
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	e033      	b.n	80012a0 <bno055_gyro_x+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001238:	687c      	ldr	r4, [r7, #4]
 800123a:	2302      	movs	r3, #2
 800123c:	9329      	str	r3, [sp, #164]	; 0xa4
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	9328      	str	r3, [sp, #160]	; 0xa0
 8001244:	2314      	movs	r3, #20
 8001246:	9327      	str	r3, [sp, #156]	; 0x9c
 8001248:	4668      	mov	r0, sp
 800124a:	f104 0310 	add.w	r3, r4, #16
 800124e:	229c      	movs	r2, #156	; 0x9c
 8001250:	4619      	mov	r1, r3
 8001252:	f008 f98f 	bl	8009574 <memcpy>
 8001256:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800125a:	f001 f8f9 	bl	8002450 <bno055_read_regs>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <bno055_gyro_x+0x54>
        return err;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	e019      	b.n	80012a0 <bno055_gyro_x+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800126c:	7b7b      	ldrb	r3, [r7, #13]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	b21a      	sxth	r2, r3
 8001272:	7b3b      	ldrb	r3, [r7, #12]
 8001274:	b21b      	sxth	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	b21b      	sxth	r3, r3
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001286:	2b00      	cmp	r3, #0
 8001288:	d102      	bne.n	8001290 <bno055_gyro_x+0x78>
 800128a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800128e:	e001      	b.n	8001294 <bno055_gyro_x+0x7c>
 8001290:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80012a8 <bno055_gyro_x+0x90>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800129e:	2300      	movs	r3, #0
};
 80012a0:	4618      	mov	r0, r3
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	44610000 	.word	0x44610000

080012ac <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b0af      	sub	sp, #188	; 0xbc
 80012b0:	af2a      	add	r7, sp, #168	; 0xa8
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80012b6:	2100      	movs	r1, #0
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f001 f92c 	bl	8002516 <bno055_set_page>
 80012be:	4603      	mov	r3, r0
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <bno055_gyro_y+0x20>
        return err;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	e033      	b.n	8001334 <bno055_gyro_y+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80012cc:	687c      	ldr	r4, [r7, #4]
 80012ce:	2302      	movs	r3, #2
 80012d0:	9329      	str	r3, [sp, #164]	; 0xa4
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	9328      	str	r3, [sp, #160]	; 0xa0
 80012d8:	2316      	movs	r3, #22
 80012da:	9327      	str	r3, [sp, #156]	; 0x9c
 80012dc:	4668      	mov	r0, sp
 80012de:	f104 0310 	add.w	r3, r4, #16
 80012e2:	229c      	movs	r2, #156	; 0x9c
 80012e4:	4619      	mov	r1, r3
 80012e6:	f008 f945 	bl	8009574 <memcpy>
 80012ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012ee:	f001 f8af 	bl	8002450 <bno055_read_regs>
 80012f2:	4603      	mov	r3, r0
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <bno055_gyro_y+0x54>
        return err;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	e019      	b.n	8001334 <bno055_gyro_y+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001300:	7b7b      	ldrb	r3, [r7, #13]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b21a      	sxth	r2, r3
 8001306:	7b3b      	ldrb	r3, [r7, #12]
 8001308:	b21b      	sxth	r3, r3
 800130a:	4313      	orrs	r3, r2
 800130c:	b21b      	sxth	r3, r3
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <bno055_gyro_y+0x78>
 800131e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001322:	e001      	b.n	8001328 <bno055_gyro_y+0x7c>
 8001324:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800133c <bno055_gyro_y+0x90>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001332:	2300      	movs	r3, #0
};
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	bd90      	pop	{r4, r7, pc}
 800133c:	44610000 	.word	0x44610000

08001340 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b0af      	sub	sp, #188	; 0xbc
 8001344:	af2a      	add	r7, sp, #168	; 0xa8
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800134a:	2100      	movs	r1, #0
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f001 f8e2 	bl	8002516 <bno055_set_page>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <bno055_gyro_z+0x20>
        return err;
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	e033      	b.n	80013c8 <bno055_gyro_z+0x88>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001360:	687c      	ldr	r4, [r7, #4]
 8001362:	2302      	movs	r3, #2
 8001364:	9329      	str	r3, [sp, #164]	; 0xa4
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	9328      	str	r3, [sp, #160]	; 0xa0
 800136c:	2318      	movs	r3, #24
 800136e:	9327      	str	r3, [sp, #156]	; 0x9c
 8001370:	4668      	mov	r0, sp
 8001372:	f104 0310 	add.w	r3, r4, #16
 8001376:	229c      	movs	r2, #156	; 0x9c
 8001378:	4619      	mov	r1, r3
 800137a:	f008 f8fb 	bl	8009574 <memcpy>
 800137e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001382:	f001 f865 	bl	8002450 <bno055_read_regs>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <bno055_gyro_z+0x54>
        return err;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	e019      	b.n	80013c8 <bno055_gyro_z+0x88>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001394:	7b7b      	ldrb	r3, [r7, #13]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b21a      	sxth	r2, r3
 800139a:	7b3b      	ldrb	r3, [r7, #12]
 800139c:	b21b      	sxth	r3, r3
 800139e:	4313      	orrs	r3, r2
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d102      	bne.n	80013b8 <bno055_gyro_z+0x78>
 80013b2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80013b6:	e001      	b.n	80013bc <bno055_gyro_z+0x7c>
 80013b8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80013d0 <bno055_gyro_z+0x90>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80013bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80013c6:	2300      	movs	r3, #0
};
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd90      	pop	{r4, r7, pc}
 80013d0:	44610000 	.word	0x44610000

080013d4 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b0b1      	sub	sp, #196	; 0xc4
 80013d8:	af2a      	add	r7, sp, #168	; 0xa8
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80013de:	2100      	movs	r1, #0
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f001 f898 	bl	8002516 <bno055_set_page>
 80013e6:	4603      	mov	r3, r0
 80013e8:	75fb      	strb	r3, [r7, #23]
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <bno055_gyro+0x20>
        return err;
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	e059      	b.n	80014a8 <bno055_gyro+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 80013f4:	687c      	ldr	r4, [r7, #4]
 80013f6:	2306      	movs	r3, #6
 80013f8:	9329      	str	r3, [sp, #164]	; 0xa4
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	9328      	str	r3, [sp, #160]	; 0xa0
 8001400:	2314      	movs	r3, #20
 8001402:	9327      	str	r3, [sp, #156]	; 0x9c
 8001404:	4668      	mov	r0, sp
 8001406:	f104 0310 	add.w	r3, r4, #16
 800140a:	229c      	movs	r2, #156	; 0x9c
 800140c:	4619      	mov	r1, r3
 800140e:	f008 f8b1 	bl	8009574 <memcpy>
 8001412:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001416:	f001 f81b 	bl	8002450 <bno055_read_regs>
 800141a:	4603      	mov	r3, r0
 800141c:	75fb      	strb	r3, [r7, #23]
 800141e:	7dfb      	ldrb	r3, [r7, #23]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <bno055_gyro+0x54>
        return err;
 8001424:	7dfb      	ldrb	r3, [r7, #23]
 8001426:	e03f      	b.n	80014a8 <bno055_gyro+0xd4>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <bno055_gyro+0x62>
 8001430:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001434:	e000      	b.n	8001438 <bno055_gyro+0x64>
 8001436:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <bno055_gyro+0xdc>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001438:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 800143a:	7a7b      	ldrb	r3, [r7, #9]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	b21a      	sxth	r2, r3
 8001440:	7a3b      	ldrb	r3, [r7, #8]
 8001442:	b21b      	sxth	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b21b      	sxth	r3, r3
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001450:	ed97 7a04 	vldr	s14, [r7, #16]
 8001454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 800145e:	7afb      	ldrb	r3, [r7, #11]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	b21a      	sxth	r2, r3
 8001464:	7abb      	ldrb	r3, [r7, #10]
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21b      	sxth	r3, r3
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001474:	ed97 7a04 	vldr	s14, [r7, #16]
 8001478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001482:	7b7b      	ldrb	r3, [r7, #13]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b21a      	sxth	r2, r3
 8001488:	7b3b      	ldrb	r3, [r7, #12]
 800148a:	b21b      	sxth	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b21b      	sxth	r3, r3
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001498:	ed97 7a04 	vldr	s14, [r7, #16]
 800149c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	371c      	adds	r7, #28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd90      	pop	{r4, r7, pc}
 80014b0:	44610000 	.word	0x44610000

080014b4 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b0af      	sub	sp, #188	; 0xbc
 80014b8:	af2a      	add	r7, sp, #168	; 0xa8
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80014be:	2100      	movs	r1, #0
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f001 f828 	bl	8002516 <bno055_set_page>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <bno055_mag_x+0x20>
        return err;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	e02c      	b.n	800152e <bno055_mag_x+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 80014d4:	687c      	ldr	r4, [r7, #4]
 80014d6:	2302      	movs	r3, #2
 80014d8:	9329      	str	r3, [sp, #164]	; 0xa4
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	9328      	str	r3, [sp, #160]	; 0xa0
 80014e0:	230e      	movs	r3, #14
 80014e2:	9327      	str	r3, [sp, #156]	; 0x9c
 80014e4:	4668      	mov	r0, sp
 80014e6:	f104 0310 	add.w	r3, r4, #16
 80014ea:	229c      	movs	r2, #156	; 0x9c
 80014ec:	4619      	mov	r1, r3
 80014ee:	f008 f841 	bl	8009574 <memcpy>
 80014f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014f6:	f000 ffab 	bl	8002450 <bno055_read_regs>
 80014fa:	4603      	mov	r3, r0
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <bno055_mag_x+0x54>
        return err;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	e012      	b.n	800152e <bno055_mag_x+0x7a>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001508:	7b7b      	ldrb	r3, [r7, #13]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	7b3b      	ldrb	r3, [r7, #12]
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b21b      	sxth	r3, r3
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800151e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001522:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}

08001536 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8001536:	b590      	push	{r4, r7, lr}
 8001538:	b0af      	sub	sp, #188	; 0xbc
 800153a:	af2a      	add	r7, sp, #168	; 0xa8
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001540:	2100      	movs	r1, #0
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 ffe7 	bl	8002516 <bno055_set_page>
 8001548:	4603      	mov	r3, r0
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <bno055_mag_y+0x20>
        return err;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	e02c      	b.n	80015b0 <bno055_mag_y+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001556:	687c      	ldr	r4, [r7, #4]
 8001558:	2302      	movs	r3, #2
 800155a:	9329      	str	r3, [sp, #164]	; 0xa4
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	9328      	str	r3, [sp, #160]	; 0xa0
 8001562:	2310      	movs	r3, #16
 8001564:	9327      	str	r3, [sp, #156]	; 0x9c
 8001566:	4668      	mov	r0, sp
 8001568:	f104 0310 	add.w	r3, r4, #16
 800156c:	229c      	movs	r2, #156	; 0x9c
 800156e:	4619      	mov	r1, r3
 8001570:	f008 f800 	bl	8009574 <memcpy>
 8001574:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001578:	f000 ff6a 	bl	8002450 <bno055_read_regs>
 800157c:	4603      	mov	r3, r0
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <bno055_mag_y+0x54>
        return err;
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	e012      	b.n	80015b0 <bno055_mag_y+0x7a>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800158a:	7b7b      	ldrb	r3, [r7, #13]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	b21a      	sxth	r2, r3
 8001590:	7b3b      	ldrb	r3, [r7, #12]
 8001592:	b21b      	sxth	r3, r3
 8001594:	4313      	orrs	r3, r2
 8001596:	b21b      	sxth	r3, r3
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80015a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd90      	pop	{r4, r7, pc}

080015b8 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b0af      	sub	sp, #188	; 0xbc
 80015bc:	af2a      	add	r7, sp, #168	; 0xa8
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80015c2:	2100      	movs	r1, #0
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 ffa6 	bl	8002516 <bno055_set_page>
 80015ca:	4603      	mov	r3, r0
 80015cc:	73fb      	strb	r3, [r7, #15]
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <bno055_mag_z+0x20>
        return err;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	e02c      	b.n	8001632 <bno055_mag_z+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80015d8:	687c      	ldr	r4, [r7, #4]
 80015da:	2302      	movs	r3, #2
 80015dc:	9329      	str	r3, [sp, #164]	; 0xa4
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	9328      	str	r3, [sp, #160]	; 0xa0
 80015e4:	2312      	movs	r3, #18
 80015e6:	9327      	str	r3, [sp, #156]	; 0x9c
 80015e8:	4668      	mov	r0, sp
 80015ea:	f104 0310 	add.w	r3, r4, #16
 80015ee:	229c      	movs	r2, #156	; 0x9c
 80015f0:	4619      	mov	r1, r3
 80015f2:	f007 ffbf 	bl	8009574 <memcpy>
 80015f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015fa:	f000 ff29 	bl	8002450 <bno055_read_regs>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <bno055_mag_z+0x54>
        return err;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	e012      	b.n	8001632 <bno055_mag_z+0x7a>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800160c:	7b7b      	ldrb	r3, [r7, #13]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	b21a      	sxth	r2, r3
 8001612:	7b3b      	ldrb	r3, [r7, #12]
 8001614:	b21b      	sxth	r3, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	b21b      	sxth	r3, r3
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001622:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001626:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bd90      	pop	{r4, r7, pc}

0800163a <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 800163a:	b590      	push	{r4, r7, lr}
 800163c:	b0af      	sub	sp, #188	; 0xbc
 800163e:	af2a      	add	r7, sp, #168	; 0xa8
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001644:	2100      	movs	r1, #0
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 ff65 	bl	8002516 <bno055_set_page>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <bno055_mag+0x20>
        return err;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	e050      	b.n	80016fc <bno055_mag+0xc2>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 800165a:	687c      	ldr	r4, [r7, #4]
 800165c:	2306      	movs	r3, #6
 800165e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	9328      	str	r3, [sp, #160]	; 0xa0
 8001666:	230e      	movs	r3, #14
 8001668:	9327      	str	r3, [sp, #156]	; 0x9c
 800166a:	4668      	mov	r0, sp
 800166c:	f104 0310 	add.w	r3, r4, #16
 8001670:	229c      	movs	r2, #156	; 0x9c
 8001672:	4619      	mov	r1, r3
 8001674:	f007 ff7e 	bl	8009574 <memcpy>
 8001678:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800167c:	f000 fee8 	bl	8002450 <bno055_read_regs>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <bno055_mag+0x54>
        return err;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	e036      	b.n	80016fc <bno055_mag+0xc2>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800168e:	7a7b      	ldrb	r3, [r7, #9]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	7a3b      	ldrb	r3, [r7, #8]
 8001696:	b21b      	sxth	r3, r3
 8001698:	4313      	orrs	r3, r2
 800169a:	b21b      	sxth	r3, r3
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80016a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 80016b2:	7afb      	ldrb	r3, [r7, #11]
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	7abb      	ldrb	r3, [r7, #10]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b21b      	sxth	r3, r3
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80016cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 80016d6:	7b7b      	ldrb	r3, [r7, #13]
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	b21a      	sxth	r2, r3
 80016dc:	7b3b      	ldrb	r3, [r7, #12]
 80016de:	b21b      	sxth	r3, r3
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	ee07 3a90 	vmov	s15, r3
 80016e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ec:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80016f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80016fa:	2300      	movs	r3, #0
};
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}

08001704 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b0b1      	sub	sp, #196	; 0xc4
 8001708:	af2a      	add	r7, sp, #168	; 0xa8
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800170e:	2100      	movs	r1, #0
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 ff00 	bl	8002516 <bno055_set_page>
 8001716:	4603      	mov	r3, r0
 8001718:	75fb      	strb	r3, [r7, #23]
 800171a:	7dfb      	ldrb	r3, [r7, #23]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <bno055_gravity_x+0x20>
        return err;
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	e035      	b.n	8001790 <bno055_gravity_x+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001724:	687c      	ldr	r4, [r7, #4]
 8001726:	2302      	movs	r3, #2
 8001728:	9329      	str	r3, [sp, #164]	; 0xa4
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	9328      	str	r3, [sp, #160]	; 0xa0
 8001730:	232e      	movs	r3, #46	; 0x2e
 8001732:	9327      	str	r3, [sp, #156]	; 0x9c
 8001734:	4668      	mov	r0, sp
 8001736:	f104 0310 	add.w	r3, r4, #16
 800173a:	229c      	movs	r2, #156	; 0x9c
 800173c:	4619      	mov	r1, r3
 800173e:	f007 ff19 	bl	8009574 <memcpy>
 8001742:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001746:	f000 fe83 	bl	8002450 <bno055_read_regs>
 800174a:	4603      	mov	r3, r0
 800174c:	75fb      	strb	r3, [r7, #23]
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <bno055_gravity_x+0x54>
        return err;
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	e01b      	b.n	8001790 <bno055_gravity_x+0x8c>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <bno055_gravity_x+0x60>
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <bno055_gravity_x+0x94>)
 8001762:	e001      	b.n	8001768 <bno055_gravity_x+0x64>
 8001764:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001768:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 800176a:	7b7b      	ldrb	r3, [r7, #13]
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	b21a      	sxth	r2, r3
 8001770:	7b3b      	ldrb	r3, [r7, #12]
 8001772:	b21b      	sxth	r3, r3
 8001774:	4313      	orrs	r3, r2
 8001776:	b21b      	sxth	r3, r3
 8001778:	ee07 3a90 	vmov	s15, r3
 800177c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001780:	ed97 7a04 	vldr	s14, [r7, #16]
 8001784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	371c      	adds	r7, #28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd90      	pop	{r4, r7, pc}
 8001798:	42c80000 	.word	0x42c80000

0800179c <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b0b1      	sub	sp, #196	; 0xc4
 80017a0:	af2a      	add	r7, sp, #168	; 0xa8
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80017a6:	2100      	movs	r1, #0
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 feb4 	bl	8002516 <bno055_set_page>
 80017ae:	4603      	mov	r3, r0
 80017b0:	75fb      	strb	r3, [r7, #23]
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <bno055_gravity_y+0x20>
        return err;
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
 80017ba:	e035      	b.n	8001828 <bno055_gravity_y+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80017bc:	687c      	ldr	r4, [r7, #4]
 80017be:	2302      	movs	r3, #2
 80017c0:	9329      	str	r3, [sp, #164]	; 0xa4
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	9328      	str	r3, [sp, #160]	; 0xa0
 80017c8:	2330      	movs	r3, #48	; 0x30
 80017ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80017cc:	4668      	mov	r0, sp
 80017ce:	f104 0310 	add.w	r3, r4, #16
 80017d2:	229c      	movs	r2, #156	; 0x9c
 80017d4:	4619      	mov	r1, r3
 80017d6:	f007 fecd 	bl	8009574 <memcpy>
 80017da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017de:	f000 fe37 	bl	8002450 <bno055_read_regs>
 80017e2:	4603      	mov	r3, r0
 80017e4:	75fb      	strb	r3, [r7, #23]
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <bno055_gravity_y+0x54>
        return err;
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	e01b      	b.n	8001828 <bno055_gravity_y+0x8c>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <bno055_gravity_y+0x60>
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <bno055_gravity_y+0x94>)
 80017fa:	e001      	b.n	8001800 <bno055_gravity_y+0x64>
 80017fc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001800:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001802:	7b7b      	ldrb	r3, [r7, #13]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b21a      	sxth	r2, r3
 8001808:	7b3b      	ldrb	r3, [r7, #12]
 800180a:	b21b      	sxth	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b21b      	sxth	r3, r3
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001818:	ed97 7a04 	vldr	s14, [r7, #16]
 800181c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	371c      	adds	r7, #28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd90      	pop	{r4, r7, pc}
 8001830:	42c80000 	.word	0x42c80000

08001834 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b0b1      	sub	sp, #196	; 0xc4
 8001838:	af2a      	add	r7, sp, #168	; 0xa8
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800183e:	2100      	movs	r1, #0
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 fe68 	bl	8002516 <bno055_set_page>
 8001846:	4603      	mov	r3, r0
 8001848:	75fb      	strb	r3, [r7, #23]
 800184a:	7dfb      	ldrb	r3, [r7, #23]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <bno055_gravity_z+0x20>
        return err;
 8001850:	7dfb      	ldrb	r3, [r7, #23]
 8001852:	e035      	b.n	80018c0 <bno055_gravity_z+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001854:	687c      	ldr	r4, [r7, #4]
 8001856:	2302      	movs	r3, #2
 8001858:	9329      	str	r3, [sp, #164]	; 0xa4
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	9328      	str	r3, [sp, #160]	; 0xa0
 8001860:	2332      	movs	r3, #50	; 0x32
 8001862:	9327      	str	r3, [sp, #156]	; 0x9c
 8001864:	4668      	mov	r0, sp
 8001866:	f104 0310 	add.w	r3, r4, #16
 800186a:	229c      	movs	r2, #156	; 0x9c
 800186c:	4619      	mov	r1, r3
 800186e:	f007 fe81 	bl	8009574 <memcpy>
 8001872:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001876:	f000 fdeb 	bl	8002450 <bno055_read_regs>
 800187a:	4603      	mov	r3, r0
 800187c:	75fb      	strb	r3, [r7, #23]
 800187e:	7dfb      	ldrb	r3, [r7, #23]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <bno055_gravity_z+0x54>
        return err;
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	e01b      	b.n	80018c0 <bno055_gravity_z+0x8c>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <bno055_gravity_z+0x60>
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <bno055_gravity_z+0x94>)
 8001892:	e001      	b.n	8001898 <bno055_gravity_z+0x64>
 8001894:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001898:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 800189a:	7b7b      	ldrb	r3, [r7, #13]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b21a      	sxth	r2, r3
 80018a0:	7b3b      	ldrb	r3, [r7, #12]
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	4313      	orrs	r3, r2
 80018a6:	b21b      	sxth	r3, r3
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80018b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd90      	pop	{r4, r7, pc}
 80018c8:	42c80000 	.word	0x42c80000

080018cc <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b0b1      	sub	sp, #196	; 0xc4
 80018d0:	af2a      	add	r7, sp, #168	; 0xa8
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80018d6:	2100      	movs	r1, #0
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 fe1c 	bl	8002516 <bno055_set_page>
 80018de:	4603      	mov	r3, r0
 80018e0:	75fb      	strb	r3, [r7, #23]
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <bno055_gravity+0x20>
        return err;
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	e059      	b.n	80019a0 <bno055_gravity+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 80018ec:	687c      	ldr	r4, [r7, #4]
 80018ee:	2306      	movs	r3, #6
 80018f0:	9329      	str	r3, [sp, #164]	; 0xa4
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	9328      	str	r3, [sp, #160]	; 0xa0
 80018f8:	232e      	movs	r3, #46	; 0x2e
 80018fa:	9327      	str	r3, [sp, #156]	; 0x9c
 80018fc:	4668      	mov	r0, sp
 80018fe:	f104 0310 	add.w	r3, r4, #16
 8001902:	229c      	movs	r2, #156	; 0x9c
 8001904:	4619      	mov	r1, r3
 8001906:	f007 fe35 	bl	8009574 <memcpy>
 800190a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800190e:	f000 fd9f 	bl	8002450 <bno055_read_regs>
 8001912:	4603      	mov	r3, r0
 8001914:	75fb      	strb	r3, [r7, #23]
 8001916:	7dfb      	ldrb	r3, [r7, #23]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <bno055_gravity+0x54>
        return err;
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	e03f      	b.n	80019a0 <bno055_gravity+0xd4>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <bno055_gravity+0x60>
 8001928:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <bno055_gravity+0xdc>)
 800192a:	e001      	b.n	8001930 <bno055_gravity+0x64>
 800192c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001930:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001932:	7a7b      	ldrb	r3, [r7, #9]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	b21a      	sxth	r2, r3
 8001938:	7a3b      	ldrb	r3, [r7, #8]
 800193a:	b21b      	sxth	r3, r3
 800193c:	4313      	orrs	r3, r2
 800193e:	b21b      	sxth	r3, r3
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001948:	ed97 7a04 	vldr	s14, [r7, #16]
 800194c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001956:	7afb      	ldrb	r3, [r7, #11]
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	b21a      	sxth	r2, r3
 800195c:	7abb      	ldrb	r3, [r7, #10]
 800195e:	b21b      	sxth	r3, r3
 8001960:	4313      	orrs	r3, r2
 8001962:	b21b      	sxth	r3, r3
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800196c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 800197a:	7b7b      	ldrb	r3, [r7, #13]
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	b21a      	sxth	r2, r3
 8001980:	7b3b      	ldrb	r3, [r7, #12]
 8001982:	b21b      	sxth	r3, r3
 8001984:	4313      	orrs	r3, r2
 8001986:	b21b      	sxth	r3, r3
 8001988:	ee07 3a90 	vmov	s15, r3
 800198c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001990:	ed97 7a04 	vldr	s14, [r7, #16]
 8001994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd90      	pop	{r4, r7, pc}
 80019a8:	42c80000 	.word	0x42c80000

080019ac <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b0b1      	sub	sp, #196	; 0xc4
 80019b0:	af2a      	add	r7, sp, #168	; 0xa8
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80019b6:	2100      	movs	r1, #0
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 fdac 	bl	8002516 <bno055_set_page>
 80019be:	4603      	mov	r3, r0
 80019c0:	75fb      	strb	r3, [r7, #23]
 80019c2:	7dfb      	ldrb	r3, [r7, #23]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <bno055_euler_yaw+0x20>
        return err;
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	e035      	b.n	8001a38 <bno055_euler_yaw+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 80019cc:	687c      	ldr	r4, [r7, #4]
 80019ce:	2302      	movs	r3, #2
 80019d0:	9329      	str	r3, [sp, #164]	; 0xa4
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	9328      	str	r3, [sp, #160]	; 0xa0
 80019d8:	231a      	movs	r3, #26
 80019da:	9327      	str	r3, [sp, #156]	; 0x9c
 80019dc:	4668      	mov	r0, sp
 80019de:	f104 0310 	add.w	r3, r4, #16
 80019e2:	229c      	movs	r2, #156	; 0x9c
 80019e4:	4619      	mov	r1, r3
 80019e6:	f007 fdc5 	bl	8009574 <memcpy>
 80019ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019ee:	f000 fd2f 	bl	8002450 <bno055_read_regs>
 80019f2:	4603      	mov	r3, r0
 80019f4:	75fb      	strb	r3, [r7, #23]
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <bno055_euler_yaw+0x54>
        BNO_OK) {
        return err;
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	e01b      	b.n	8001a38 <bno055_euler_yaw+0x8c>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <bno055_euler_yaw+0x62>
 8001a08:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001a0c:	e000      	b.n	8001a10 <bno055_euler_yaw+0x64>
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <bno055_euler_yaw+0x94>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001a10:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001a12:	7b7b      	ldrb	r3, [r7, #13]
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	b21a      	sxth	r2, r3
 8001a18:	7b3b      	ldrb	r3, [r7, #12]
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a28:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd90      	pop	{r4, r7, pc}
 8001a40:	44610000 	.word	0x44610000

08001a44 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b0b1      	sub	sp, #196	; 0xc4
 8001a48:	af2a      	add	r7, sp, #168	; 0xa8
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001a4e:	2100      	movs	r1, #0
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 fd60 	bl	8002516 <bno055_set_page>
 8001a56:	4603      	mov	r3, r0
 8001a58:	75fb      	strb	r3, [r7, #23]
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <bno055_euler_roll+0x20>
        return err;
 8001a60:	7dfb      	ldrb	r3, [r7, #23]
 8001a62:	e035      	b.n	8001ad0 <bno055_euler_roll+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001a64:	687c      	ldr	r4, [r7, #4]
 8001a66:	2302      	movs	r3, #2
 8001a68:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a70:	231c      	movs	r3, #28
 8001a72:	9327      	str	r3, [sp, #156]	; 0x9c
 8001a74:	4668      	mov	r0, sp
 8001a76:	f104 0310 	add.w	r3, r4, #16
 8001a7a:	229c      	movs	r2, #156	; 0x9c
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f007 fd79 	bl	8009574 <memcpy>
 8001a82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a86:	f000 fce3 	bl	8002450 <bno055_read_regs>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	75fb      	strb	r3, [r7, #23]
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <bno055_euler_roll+0x54>
        return err;
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
 8001a96:	e01b      	b.n	8001ad0 <bno055_euler_roll+0x8c>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <bno055_euler_roll+0x62>
 8001aa0:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001aa4:	e000      	b.n	8001aa8 <bno055_euler_roll+0x64>
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <bno055_euler_roll+0x94>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001aa8:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001aaa:	7b7b      	ldrb	r3, [r7, #13]
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	b21a      	sxth	r2, r3
 8001ab0:	7b3b      	ldrb	r3, [r7, #12]
 8001ab2:	b21b      	sxth	r3, r3
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	ee07 3a90 	vmov	s15, r3
 8001abc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ac0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd90      	pop	{r4, r7, pc}
 8001ad8:	44610000 	.word	0x44610000

08001adc <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001adc:	b590      	push	{r4, r7, lr}
 8001ade:	b0b1      	sub	sp, #196	; 0xc4
 8001ae0:	af2a      	add	r7, sp, #168	; 0xa8
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fd14 	bl	8002516 <bno055_set_page>
 8001aee:	4603      	mov	r3, r0
 8001af0:	75fb      	strb	r3, [r7, #23]
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <bno055_euler_pitch+0x20>
        return err;
 8001af8:	7dfb      	ldrb	r3, [r7, #23]
 8001afa:	e035      	b.n	8001b68 <bno055_euler_pitch+0x8c>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8001afc:	687c      	ldr	r4, [r7, #4]
 8001afe:	2302      	movs	r3, #2
 8001b00:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b08:	231e      	movs	r3, #30
 8001b0a:	9327      	str	r3, [sp, #156]	; 0x9c
 8001b0c:	4668      	mov	r0, sp
 8001b0e:	f104 0310 	add.w	r3, r4, #16
 8001b12:	229c      	movs	r2, #156	; 0x9c
 8001b14:	4619      	mov	r1, r3
 8001b16:	f007 fd2d 	bl	8009574 <memcpy>
 8001b1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b1e:	f000 fc97 	bl	8002450 <bno055_read_regs>
 8001b22:	4603      	mov	r3, r0
 8001b24:	75fb      	strb	r3, [r7, #23]
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <bno055_euler_pitch+0x54>
        return err;
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	e01b      	b.n	8001b68 <bno055_euler_pitch+0x8c>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <bno055_euler_pitch+0x62>
 8001b38:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001b3c:	e000      	b.n	8001b40 <bno055_euler_pitch+0x64>
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <bno055_euler_pitch+0x94>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001b40:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001b42:	7b7b      	ldrb	r3, [r7, #13]
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	b21a      	sxth	r2, r3
 8001b48:	7b3b      	ldrb	r3, [r7, #12]
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	ee07 3a90 	vmov	s15, r3
 8001b54:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b58:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	371c      	adds	r7, #28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd90      	pop	{r4, r7, pc}
 8001b70:	44610000 	.word	0x44610000

08001b74 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b0b1      	sub	sp, #196	; 0xc4
 8001b78:	af2a      	add	r7, sp, #168	; 0xa8
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001b7e:	2100      	movs	r1, #0
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 fcc8 	bl	8002516 <bno055_set_page>
 8001b86:	4603      	mov	r3, r0
 8001b88:	75fb      	strb	r3, [r7, #23]
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <bno055_euler+0x20>
        return err;
 8001b90:	7dfb      	ldrb	r3, [r7, #23]
 8001b92:	e059      	b.n	8001c48 <bno055_euler+0xd4>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8001b94:	687c      	ldr	r4, [r7, #4]
 8001b96:	2306      	movs	r3, #6
 8001b98:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b9a:	f107 0308 	add.w	r3, r7, #8
 8001b9e:	9328      	str	r3, [sp, #160]	; 0xa0
 8001ba0:	231a      	movs	r3, #26
 8001ba2:	9327      	str	r3, [sp, #156]	; 0x9c
 8001ba4:	4668      	mov	r0, sp
 8001ba6:	f104 0310 	add.w	r3, r4, #16
 8001baa:	229c      	movs	r2, #156	; 0x9c
 8001bac:	4619      	mov	r1, r3
 8001bae:	f007 fce1 	bl	8009574 <memcpy>
 8001bb2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bb6:	f000 fc4b 	bl	8002450 <bno055_read_regs>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	75fb      	strb	r3, [r7, #23]
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <bno055_euler+0x54>
        BNO_OK) {
        return err;
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	e03f      	b.n	8001c48 <bno055_euler+0xd4>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <bno055_euler+0x62>
 8001bd0:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001bd4:	e000      	b.n	8001bd8 <bno055_euler+0x64>
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <bno055_euler+0xdc>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001bd8:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8001bda:	7a7b      	ldrb	r3, [r7, #9]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	7a3b      	ldrb	r3, [r7, #8]
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	4313      	orrs	r3, r2
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bf0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001bfe:	7afb      	ldrb	r3, [r7, #11]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	7abb      	ldrb	r3, [r7, #10]
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	ee07 3a90 	vmov	s15, r3
 8001c10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c14:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8001c22:	7b7b      	ldrb	r3, [r7, #13]
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	b21a      	sxth	r2, r3
 8001c28:	7b3b      	ldrb	r3, [r7, #12]
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c38:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd90      	pop	{r4, r7, pc}
 8001c50:	44610000 	.word	0x44610000

08001c54 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b0af      	sub	sp, #188	; 0xbc
 8001c58:	af2a      	add	r7, sp, #168	; 0xa8
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001c5e:	2100      	movs	r1, #0
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 fc58 	bl	8002516 <bno055_set_page>
 8001c66:	4603      	mov	r3, r0
 8001c68:	73fb      	strb	r3, [r7, #15]
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <bno055_quaternion_w+0x20>
        return err;
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	e02c      	b.n	8001cce <bno055_quaternion_w+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8001c74:	687c      	ldr	r4, [r7, #4]
 8001c76:	2302      	movs	r3, #2
 8001c78:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c7a:	f107 030c 	add.w	r3, r7, #12
 8001c7e:	9328      	str	r3, [sp, #160]	; 0xa0
 8001c80:	2320      	movs	r3, #32
 8001c82:	9327      	str	r3, [sp, #156]	; 0x9c
 8001c84:	4668      	mov	r0, sp
 8001c86:	f104 0310 	add.w	r3, r4, #16
 8001c8a:	229c      	movs	r2, #156	; 0x9c
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f007 fc71 	bl	8009574 <memcpy>
 8001c92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c96:	f000 fbdb 	bl	8002450 <bno055_read_regs>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <bno055_quaternion_w+0x54>
        return err;
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	e012      	b.n	8001cce <bno055_quaternion_w+0x7a>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001ca8:	7b7b      	ldrb	r3, [r7, #13]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	b21a      	sxth	r2, r3
 8001cae:	7b3b      	ldrb	r3, [r7, #12]
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	ee07 3a90 	vmov	s15, r3
 8001cba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cbe:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001cd8 <bno055_quaternion_w+0x84>
 8001cc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd90      	pop	{r4, r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	46800000 	.word	0x46800000

08001cdc <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b0af      	sub	sp, #188	; 0xbc
 8001ce0:	af2a      	add	r7, sp, #168	; 0xa8
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fc14 	bl	8002516 <bno055_set_page>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	73fb      	strb	r3, [r7, #15]
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <bno055_quaternion_x+0x20>
        return err;
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	e02c      	b.n	8001d56 <bno055_quaternion_x+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001cfc:	687c      	ldr	r4, [r7, #4]
 8001cfe:	2302      	movs	r3, #2
 8001d00:	9329      	str	r3, [sp, #164]	; 0xa4
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	9328      	str	r3, [sp, #160]	; 0xa0
 8001d08:	2322      	movs	r3, #34	; 0x22
 8001d0a:	9327      	str	r3, [sp, #156]	; 0x9c
 8001d0c:	4668      	mov	r0, sp
 8001d0e:	f104 0310 	add.w	r3, r4, #16
 8001d12:	229c      	movs	r2, #156	; 0x9c
 8001d14:	4619      	mov	r1, r3
 8001d16:	f007 fc2d 	bl	8009574 <memcpy>
 8001d1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d1e:	f000 fb97 	bl	8002450 <bno055_read_regs>
 8001d22:	4603      	mov	r3, r0
 8001d24:	73fb      	strb	r3, [r7, #15]
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <bno055_quaternion_x+0x54>
        return err;
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	e012      	b.n	8001d56 <bno055_quaternion_x+0x7a>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001d30:	7b7b      	ldrb	r3, [r7, #13]
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	b21a      	sxth	r2, r3
 8001d36:	7b3b      	ldrb	r3, [r7, #12]
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d46:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001d60 <bno055_quaternion_x+0x84>
 8001d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd90      	pop	{r4, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	46800000 	.word	0x46800000

08001d64 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b0af      	sub	sp, #188	; 0xbc
 8001d68:	af2a      	add	r7, sp, #168	; 0xa8
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001d6e:	2100      	movs	r1, #0
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 fbd0 	bl	8002516 <bno055_set_page>
 8001d76:	4603      	mov	r3, r0
 8001d78:	73fb      	strb	r3, [r7, #15]
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <bno055_quaternion_y+0x20>
        return err;
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	e02c      	b.n	8001dde <bno055_quaternion_y+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001d84:	687c      	ldr	r4, [r7, #4]
 8001d86:	2302      	movs	r3, #2
 8001d88:	9329      	str	r3, [sp, #164]	; 0xa4
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	9328      	str	r3, [sp, #160]	; 0xa0
 8001d90:	2324      	movs	r3, #36	; 0x24
 8001d92:	9327      	str	r3, [sp, #156]	; 0x9c
 8001d94:	4668      	mov	r0, sp
 8001d96:	f104 0310 	add.w	r3, r4, #16
 8001d9a:	229c      	movs	r2, #156	; 0x9c
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f007 fbe9 	bl	8009574 <memcpy>
 8001da2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001da6:	f000 fb53 	bl	8002450 <bno055_read_regs>
 8001daa:	4603      	mov	r3, r0
 8001dac:	73fb      	strb	r3, [r7, #15]
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <bno055_quaternion_y+0x54>
        return err;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	e012      	b.n	8001dde <bno055_quaternion_y+0x7a>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001db8:	7b7b      	ldrb	r3, [r7, #13]
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	b21a      	sxth	r2, r3
 8001dbe:	7b3b      	ldrb	r3, [r7, #12]
 8001dc0:	b21b      	sxth	r3, r3
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dce:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001de8 <bno055_quaternion_y+0x84>
 8001dd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd90      	pop	{r4, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	46800000 	.word	0x46800000

08001dec <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b0af      	sub	sp, #188	; 0xbc
 8001df0:	af2a      	add	r7, sp, #168	; 0xa8
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001df6:	2100      	movs	r1, #0
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fb8c 	bl	8002516 <bno055_set_page>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	73fb      	strb	r3, [r7, #15]
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <bno055_quaternion_z+0x20>
        return err;
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	e02c      	b.n	8001e66 <bno055_quaternion_z+0x7a>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001e0c:	687c      	ldr	r4, [r7, #4]
 8001e0e:	2302      	movs	r3, #2
 8001e10:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e18:	2326      	movs	r3, #38	; 0x26
 8001e1a:	9327      	str	r3, [sp, #156]	; 0x9c
 8001e1c:	4668      	mov	r0, sp
 8001e1e:	f104 0310 	add.w	r3, r4, #16
 8001e22:	229c      	movs	r2, #156	; 0x9c
 8001e24:	4619      	mov	r1, r3
 8001e26:	f007 fba5 	bl	8009574 <memcpy>
 8001e2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e2e:	f000 fb0f 	bl	8002450 <bno055_read_regs>
 8001e32:	4603      	mov	r3, r0
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <bno055_quaternion_z+0x54>
        return err;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	e012      	b.n	8001e66 <bno055_quaternion_z+0x7a>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001e40:	7b7b      	ldrb	r3, [r7, #13]
 8001e42:	021b      	lsls	r3, r3, #8
 8001e44:	b21a      	sxth	r2, r3
 8001e46:	7b3b      	ldrb	r3, [r7, #12]
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e56:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001e70 <bno055_quaternion_z+0x84>
 8001e5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd90      	pop	{r4, r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	46800000 	.word	0x46800000

08001e74 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b0b1      	sub	sp, #196	; 0xc4
 8001e78:	af2a      	add	r7, sp, #168	; 0xa8
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001e7e:	2100      	movs	r1, #0
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fb48 	bl	8002516 <bno055_set_page>
 8001e86:	4603      	mov	r3, r0
 8001e88:	75fb      	strb	r3, [r7, #23]
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <bno055_quaternion+0x20>
        return err;
 8001e90:	7dfb      	ldrb	r3, [r7, #23]
 8001e92:	e062      	b.n	8001f5a <bno055_quaternion+0xe6>
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 8001e94:	687c      	ldr	r4, [r7, #4]
 8001e96:	2308      	movs	r3, #8
 8001e98:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e9a:	f107 030c 	add.w	r3, r7, #12
 8001e9e:	9328      	str	r3, [sp, #160]	; 0xa0
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	9327      	str	r3, [sp, #156]	; 0x9c
 8001ea4:	4668      	mov	r0, sp
 8001ea6:	f104 0310 	add.w	r3, r4, #16
 8001eaa:	229c      	movs	r2, #156	; 0x9c
 8001eac:	4619      	mov	r1, r3
 8001eae:	f007 fb61 	bl	8009574 <memcpy>
 8001eb2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001eb6:	f000 facb 	bl	8002450 <bno055_read_regs>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	75fb      	strb	r3, [r7, #23]
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <bno055_quaternion+0x54>
        return err;
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	e048      	b.n	8001f5a <bno055_quaternion+0xe6>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001ec8:	7b7b      	ldrb	r3, [r7, #13]
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	b21a      	sxth	r2, r3
 8001ece:	7b3b      	ldrb	r3, [r7, #12]
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ede:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001f64 <bno055_quaternion+0xf0>
 8001ee2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	b21a      	sxth	r2, r3
 8001ef2:	7bbb      	ldrb	r3, [r7, #14]
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f02:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001f64 <bno055_quaternion+0xf0>
 8001f06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 8001f10:	7c7b      	ldrb	r3, [r7, #17]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	b21a      	sxth	r2, r3
 8001f16:	7c3b      	ldrb	r3, [r7, #16]
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f26:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001f64 <bno055_quaternion+0xf0>
 8001f2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 8001f34:	7cfb      	ldrb	r3, [r7, #19]
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	b21a      	sxth	r2, r3
 8001f3a:	7cbb      	ldrb	r3, [r7, #18]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f4a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001f64 <bno055_quaternion+0xf0>
 8001f4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	371c      	adds	r7, #28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd90      	pop	{r4, r7, pc}
 8001f62:	bf00      	nop
 8001f64:	46800000 	.word	0x46800000

08001f68 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b0af      	sub	sp, #188	; 0xbc
 8001f6c:	af2a      	add	r7, sp, #168	; 0xa8
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	4608      	mov	r0, r1
 8001f72:	4611      	mov	r1, r2
 8001f74:	461a      	mov	r2, r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	70fb      	strb	r3, [r7, #3]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	70bb      	strb	r3, [r7, #2]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8001f82:	2101      	movs	r1, #1
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 fac6 	bl	8002516 <bno055_set_page>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <bno055_acc_conf+0x30>
        return err;
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	e04b      	b.n	8002030 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8001f98:	2100      	movs	r1, #0
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f91b 	bl	80021d6 <bno055_set_opmode>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <bno055_acc_conf+0x46>
        return err;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	e040      	b.n	8002030 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8001fae:	200c      	movs	r0, #12
 8001fb0:	f001 f9c4 	bl	800333c <HAL_Delay>
    u8 config = range | bandwidth | mode;
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	78bb      	ldrb	r3, [r7, #2]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	787b      	ldrb	r3, [r7, #1]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 8001fc4:	687c      	ldr	r4, [r7, #4]
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	9329      	str	r3, [sp, #164]	; 0xa4
 8001fca:	f107 030e 	add.w	r3, r7, #14
 8001fce:	9328      	str	r3, [sp, #160]	; 0xa0
 8001fd0:	2308      	movs	r3, #8
 8001fd2:	9327      	str	r3, [sp, #156]	; 0x9c
 8001fd4:	4668      	mov	r0, sp
 8001fd6:	f104 0310 	add.w	r3, r4, #16
 8001fda:	229c      	movs	r2, #156	; 0x9c
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f007 fac9 	bl	8009574 <memcpy>
 8001fe2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fe6:	f000 fa69 	bl	80024bc <bno055_write_regs>
 8001fea:	4603      	mov	r3, r0
 8001fec:	73fb      	strb	r3, [r7, #15]
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <bno055_acc_conf+0x90>
        return err;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	e01b      	b.n	8002030 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	791b      	ldrb	r3, [r3, #4]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f8e9 	bl	80021d6 <bno055_set_opmode>
 8002004:	4603      	mov	r3, r0
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <bno055_acc_conf+0xaa>
        return err;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	e00e      	b.n	8002030 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002012:	2018      	movs	r0, #24
 8002014:	f001 f992 	bl	800333c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002018:	2100      	movs	r1, #0
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fa7b 	bl	8002516 <bno055_set_page>
 8002020:	4603      	mov	r3, r0
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <bno055_acc_conf+0xc6>
        return err;
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	e000      	b.n	8002030 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	bd90      	pop	{r4, r7, pc}

08002038 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b0af      	sub	sp, #188	; 0xbc
 800203c:	af2a      	add	r7, sp, #168	; 0xa8
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	4608      	mov	r0, r1
 8002042:	4611      	mov	r1, r2
 8002044:	461a      	mov	r2, r3
 8002046:	4603      	mov	r3, r0
 8002048:	70fb      	strb	r3, [r7, #3]
 800204a:	460b      	mov	r3, r1
 800204c:	70bb      	strb	r3, [r7, #2]
 800204e:	4613      	mov	r3, r2
 8002050:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002052:	2101      	movs	r1, #1
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 fa5e 	bl	8002516 <bno055_set_page>
 800205a:	4603      	mov	r3, r0
 800205c:	73fb      	strb	r3, [r7, #15]
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <bno055_gyr_conf+0x30>
        return err;
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	e04a      	b.n	80020fe <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002068:	2100      	movs	r1, #0
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f8b3 	bl	80021d6 <bno055_set_opmode>
 8002070:	4603      	mov	r3, r0
 8002072:	73fb      	strb	r3, [r7, #15]
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <bno055_gyr_conf+0x46>
        return err;
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	e03f      	b.n	80020fe <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800207e:	200c      	movs	r0, #12
 8002080:	f001 f95c 	bl	800333c <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 8002084:	78fa      	ldrb	r2, [r7, #3]
 8002086:	78bb      	ldrb	r3, [r7, #2]
 8002088:	4313      	orrs	r3, r2
 800208a:	b2db      	uxtb	r3, r3
 800208c:	733b      	strb	r3, [r7, #12]
 800208e:	787b      	ldrb	r3, [r7, #1]
 8002090:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 8002092:	687c      	ldr	r4, [r7, #4]
 8002094:	2302      	movs	r3, #2
 8002096:	9329      	str	r3, [sp, #164]	; 0xa4
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	9328      	str	r3, [sp, #160]	; 0xa0
 800209e:	230a      	movs	r3, #10
 80020a0:	9327      	str	r3, [sp, #156]	; 0x9c
 80020a2:	4668      	mov	r0, sp
 80020a4:	f104 0310 	add.w	r3, r4, #16
 80020a8:	229c      	movs	r2, #156	; 0x9c
 80020aa:	4619      	mov	r1, r3
 80020ac:	f007 fa62 	bl	8009574 <memcpy>
 80020b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020b4:	f000 fa02 	bl	80024bc <bno055_write_regs>
 80020b8:	4603      	mov	r3, r0
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	e01b      	b.n	80020fe <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	791b      	ldrb	r3, [r3, #4]
 80020ca:	4619      	mov	r1, r3
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f882 	bl	80021d6 <bno055_set_opmode>
 80020d2:	4603      	mov	r3, r0
 80020d4:	73fb      	strb	r3, [r7, #15]
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <bno055_gyr_conf+0xa8>
        return err;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	e00e      	b.n	80020fe <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80020e0:	2018      	movs	r0, #24
 80020e2:	f001 f92b 	bl	800333c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80020e6:	2100      	movs	r1, #0
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fa14 	bl	8002516 <bno055_set_page>
 80020ee:	4603      	mov	r3, r0
 80020f0:	73fb      	strb	r3, [r7, #15]
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <bno055_gyr_conf+0xc4>
        return err;
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	e000      	b.n	80020fe <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bd90      	pop	{r4, r7, pc}

08002106 <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 8002106:	b590      	push	{r4, r7, lr}
 8002108:	b0af      	sub	sp, #188	; 0xbc
 800210a:	af2a      	add	r7, sp, #168	; 0xa8
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	4608      	mov	r0, r1
 8002110:	4611      	mov	r1, r2
 8002112:	461a      	mov	r2, r3
 8002114:	4603      	mov	r3, r0
 8002116:	70fb      	strb	r3, [r7, #3]
 8002118:	460b      	mov	r3, r1
 800211a:	70bb      	strb	r3, [r7, #2]
 800211c:	4613      	mov	r3, r2
 800211e:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002120:	2101      	movs	r1, #1
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f9f7 	bl	8002516 <bno055_set_page>
 8002128:	4603      	mov	r3, r0
 800212a:	73fb      	strb	r3, [r7, #15]
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <bno055_mag_conf+0x30>
        return err;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	e04b      	b.n	80021ce <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002136:	2100      	movs	r1, #0
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f84c 	bl	80021d6 <bno055_set_opmode>
 800213e:	4603      	mov	r3, r0
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <bno055_mag_conf+0x46>
        return err;
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	e040      	b.n	80021ce <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800214c:	200c      	movs	r0, #12
 800214e:	f001 f8f5 	bl	800333c <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 8002152:	78fa      	ldrb	r2, [r7, #3]
 8002154:	78bb      	ldrb	r3, [r7, #2]
 8002156:	4313      	orrs	r3, r2
 8002158:	b2da      	uxtb	r2, r3
 800215a:	787b      	ldrb	r3, [r7, #1]
 800215c:	4313      	orrs	r3, r2
 800215e:	b2db      	uxtb	r3, r3
 8002160:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 8002162:	687c      	ldr	r4, [r7, #4]
 8002164:	2301      	movs	r3, #1
 8002166:	9329      	str	r3, [sp, #164]	; 0xa4
 8002168:	f107 030e 	add.w	r3, r7, #14
 800216c:	9328      	str	r3, [sp, #160]	; 0xa0
 800216e:	2309      	movs	r3, #9
 8002170:	9327      	str	r3, [sp, #156]	; 0x9c
 8002172:	4668      	mov	r0, sp
 8002174:	f104 0310 	add.w	r3, r4, #16
 8002178:	229c      	movs	r2, #156	; 0x9c
 800217a:	4619      	mov	r1, r3
 800217c:	f007 f9fa 	bl	8009574 <memcpy>
 8002180:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002184:	f000 f99a 	bl	80024bc <bno055_write_regs>
 8002188:	4603      	mov	r3, r0
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <bno055_mag_conf+0x90>
        return err;
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	e01b      	b.n	80021ce <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	791b      	ldrb	r3, [r3, #4]
 800219a:	4619      	mov	r1, r3
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f81a 	bl	80021d6 <bno055_set_opmode>
 80021a2:	4603      	mov	r3, r0
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <bno055_mag_conf+0xaa>
        return err;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	e00e      	b.n	80021ce <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80021b0:	2018      	movs	r0, #24
 80021b2:	f001 f8c3 	bl	800333c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80021b6:	2100      	movs	r1, #0
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f9ac 	bl	8002516 <bno055_set_page>
 80021be:	4603      	mov	r3, r0
 80021c0:	73fb      	strb	r3, [r7, #15]
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <bno055_mag_conf+0xc6>
        return err;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	e000      	b.n	80021ce <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd90      	pop	{r4, r7, pc}

080021d6 <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 80021d6:	b590      	push	{r4, r7, lr}
 80021d8:	b0af      	sub	sp, #188	; 0xbc
 80021da:	af2a      	add	r7, sp, #168	; 0xa8
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	460b      	mov	r3, r1
 80021e0:	70fb      	strb	r3, [r7, #3]
    error_bno err;
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80021e2:	2100      	movs	r1, #0
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f996 	bl	8002516 <bno055_set_page>
 80021ea:	4603      	mov	r3, r0
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <bno055_set_opmode+0x22>
        return err;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	e01c      	b.n	8002232 <bno055_set_opmode+0x5c>
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 80021f8:	687c      	ldr	r4, [r7, #4]
 80021fa:	2301      	movs	r3, #1
 80021fc:	9329      	str	r3, [sp, #164]	; 0xa4
 80021fe:	1cfb      	adds	r3, r7, #3
 8002200:	9328      	str	r3, [sp, #160]	; 0xa0
 8002202:	233d      	movs	r3, #61	; 0x3d
 8002204:	9327      	str	r3, [sp, #156]	; 0x9c
 8002206:	4668      	mov	r0, sp
 8002208:	f104 0310 	add.w	r3, r4, #16
 800220c:	229c      	movs	r2, #156	; 0x9c
 800220e:	4619      	mov	r1, r3
 8002210:	f007 f9b0 	bl	8009574 <memcpy>
 8002214:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002218:	f000 f950 	bl	80024bc <bno055_write_regs>
 800221c:	4603      	mov	r3, r0
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <bno055_set_opmode+0x54>
        BNO_OK) {
        return err;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	e003      	b.n	8002232 <bno055_set_opmode+0x5c>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800222a:	2018      	movs	r0, #24
 800222c:	f001 f886 	bl	800333c <HAL_Delay>
    return BNO_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	bd90      	pop	{r4, r7, pc}

0800223a <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 800223a:	b590      	push	{r4, r7, lr}
 800223c:	b0af      	sub	sp, #188	; 0xbc
 800223e:	af2a      	add	r7, sp, #168	; 0xa8
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	4608      	mov	r0, r1
 8002244:	4611      	mov	r1, r2
 8002246:	461a      	mov	r2, r3
 8002248:	4603      	mov	r3, r0
 800224a:	70fb      	strb	r3, [r7, #3]
 800224c:	460b      	mov	r3, r1
 800224e:	70bb      	strb	r3, [r7, #2]
 8002250:	4613      	mov	r3, r2
 8002252:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002254:	2100      	movs	r1, #0
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ffbd 	bl	80021d6 <bno055_set_opmode>
 800225c:	4603      	mov	r3, r0
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <bno055_set_unit+0x30>
        return err;
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	e04b      	b.n	8002302 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800226a:	2100      	movs	r1, #0
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f952 	bl	8002516 <bno055_set_page>
 8002272:	4603      	mov	r3, r0
 8002274:	73fb      	strb	r3, [r7, #15]
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <bno055_set_unit+0x46>
        return err;
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	e040      	b.n	8002302 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	78bb      	ldrb	r3, [r7, #2]
 8002284:	4313      	orrs	r3, r2
 8002286:	b2da      	uxtb	r2, r3
 8002288:	787b      	ldrb	r3, [r7, #1]
 800228a:	4313      	orrs	r3, r2
 800228c:	b2da      	uxtb	r2, r3
 800228e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002292:	4313      	orrs	r3, r2
 8002294:	b2db      	uxtb	r3, r3
 8002296:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 8002298:	687c      	ldr	r4, [r7, #4]
 800229a:	2301      	movs	r3, #1
 800229c:	9329      	str	r3, [sp, #164]	; 0xa4
 800229e:	f107 030e 	add.w	r3, r7, #14
 80022a2:	9328      	str	r3, [sp, #160]	; 0xa0
 80022a4:	233b      	movs	r3, #59	; 0x3b
 80022a6:	9327      	str	r3, [sp, #156]	; 0x9c
 80022a8:	4668      	mov	r0, sp
 80022aa:	f104 0310 	add.w	r3, r4, #16
 80022ae:	229c      	movs	r2, #156	; 0x9c
 80022b0:	4619      	mov	r1, r3
 80022b2:	f007 f95f 	bl	8009574 <memcpy>
 80022b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022ba:	f000 f8ff 	bl	80024bc <bno055_write_regs>
 80022be:	4603      	mov	r3, r0
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <bno055_set_unit+0x92>
        return err;
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	e01a      	b.n	8002302 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	78ba      	ldrb	r2, [r7, #2]
 80022d0:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	787a      	ldrb	r2, [r7, #1]
 80022d6:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f897 2020 	ldrb.w	r2, [r7, #32]
 80022de:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	78fa      	ldrb	r2, [r7, #3]
 80022e4:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	791b      	ldrb	r3, [r3, #4]
 80022ea:	4619      	mov	r1, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff72 	bl	80021d6 <bno055_set_opmode>
 80022f2:	4603      	mov	r3, r0
 80022f4:	73fb      	strb	r3, [r7, #15]
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <bno055_set_unit+0xc6>
        return err;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	e000      	b.n	8002302 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	bd90      	pop	{r4, r7, pc}

0800230a <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 800230a:	b590      	push	{r4, r7, lr}
 800230c:	b0af      	sub	sp, #188	; 0xbc
 800230e:	af2a      	add	r7, sp, #168	; 0xa8
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 800231c:	2304      	movs	r3, #4
 800231e:	e04d      	b.n	80023bc <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8002320:	2100      	movs	r1, #0
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ff57 	bl	80021d6 <bno055_set_opmode>
 8002328:	4603      	mov	r3, r0
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <bno055_set_pwr_mode+0x2c>
        return err;
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	e042      	b.n	80023bc <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002336:	2100      	movs	r1, #0
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f8ec 	bl	8002516 <bno055_set_page>
 800233e:	4603      	mov	r3, r0
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <bno055_set_pwr_mode+0x42>
        return err;
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	e037      	b.n	80023bc <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 800234c:	687c      	ldr	r4, [r7, #4]
 800234e:	2301      	movs	r3, #1
 8002350:	9329      	str	r3, [sp, #164]	; 0xa4
 8002352:	1cfb      	adds	r3, r7, #3
 8002354:	9328      	str	r3, [sp, #160]	; 0xa0
 8002356:	233e      	movs	r3, #62	; 0x3e
 8002358:	9327      	str	r3, [sp, #156]	; 0x9c
 800235a:	4668      	mov	r0, sp
 800235c:	f104 0310 	add.w	r3, r4, #16
 8002360:	229c      	movs	r2, #156	; 0x9c
 8002362:	4619      	mov	r1, r3
 8002364:	f007 f906 	bl	8009574 <memcpy>
 8002368:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800236c:	f000 f8a6 	bl	80024bc <bno055_write_regs>
 8002370:	4603      	mov	r3, r0
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	e01e      	b.n	80023bc <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002384:	2100      	movs	r1, #0
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f8c5 	bl	8002516 <bno055_set_page>
 800238c:	4603      	mov	r3, r0
 800238e:	73fb      	strb	r3, [r7, #15]
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <bno055_set_pwr_mode+0x90>
        return err;
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	e010      	b.n	80023bc <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	791b      	ldrb	r3, [r3, #4]
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff18 	bl	80021d6 <bno055_set_opmode>
 80023a6:	4603      	mov	r3, r0
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <bno055_set_pwr_mode+0xaa>
        return err;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	e003      	b.n	80023bc <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 80023b4:	2002      	movs	r0, #2
 80023b6:	f000 ffc1 	bl	800333c <HAL_Delay>
    return BNO_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd90      	pop	{r4, r7, pc}

080023c4 <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b0af      	sub	sp, #188	; 0xbc
 80023c8:	af2a      	add	r7, sp, #168	; 0xa8
 80023ca:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 80023cc:	2320      	movs	r3, #32
 80023ce:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80023d0:	687c      	ldr	r4, [r7, #4]
 80023d2:	2301      	movs	r3, #1
 80023d4:	9329      	str	r3, [sp, #164]	; 0xa4
 80023d6:	f107 030f 	add.w	r3, r7, #15
 80023da:	9328      	str	r3, [sp, #160]	; 0xa0
 80023dc:	233f      	movs	r3, #63	; 0x3f
 80023de:	9327      	str	r3, [sp, #156]	; 0x9c
 80023e0:	4668      	mov	r0, sp
 80023e2:	f104 0310 	add.w	r3, r4, #16
 80023e6:	229c      	movs	r2, #156	; 0x9c
 80023e8:	4619      	mov	r1, r3
 80023ea:	f007 f8c3 	bl	8009574 <memcpy>
 80023ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023f2:	f000 f863 	bl	80024bc <bno055_write_regs>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <bno055_reset+0x3e>
    }
    return BNO_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bd90      	pop	{r4, r7, pc}

0800240a <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 800240a:	b590      	push	{r4, r7, lr}
 800240c:	b0af      	sub	sp, #188	; 0xbc
 800240e:	af2a      	add	r7, sp, #168	; 0xa8
 8002410:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8002416:	687c      	ldr	r4, [r7, #4]
 8002418:	2301      	movs	r3, #1
 800241a:	9329      	str	r3, [sp, #164]	; 0xa4
 800241c:	f107 030f 	add.w	r3, r7, #15
 8002420:	9328      	str	r3, [sp, #160]	; 0xa0
 8002422:	233f      	movs	r3, #63	; 0x3f
 8002424:	9327      	str	r3, [sp, #156]	; 0x9c
 8002426:	4668      	mov	r0, sp
 8002428:	f104 0310 	add.w	r3, r4, #16
 800242c:	229c      	movs	r2, #156	; 0x9c
 800242e:	4619      	mov	r1, r3
 8002430:	f007 f8a0 	bl	8009574 <memcpy>
 8002434:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002438:	f000 f840 	bl	80024bc <bno055_write_regs>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <bno055_on+0x3e>
    }
    return BNO_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	bd90      	pop	{r4, r7, pc}

08002450 <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 8002450:	b084      	sub	sp, #16
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af02      	add	r7, sp, #8
 8002458:	f107 0c10 	add.w	ip, r7, #16
 800245c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 8002460:	6938      	ldr	r0, [r7, #16]
 8002462:	7dbb      	ldrb	r3, [r7, #22]
 8002464:	b299      	uxth	r1, r3
 8002466:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800246a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2301      	movs	r3, #1
 8002472:	f003 fd4d 	bl	8005f10 <HAL_I2C_Master_Transmit>
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8002480:	2301      	movs	r3, #1
 8002482:	e014      	b.n	80024ae <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 8002484:	6938      	ldr	r0, [r7, #16]
 8002486:	7dbb      	ldrb	r3, [r7, #22]
 8002488:	b299      	uxth	r1, r3
 800248a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800248e:	b29b      	uxth	r3, r3
 8002490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002494:	9200      	str	r2, [sp, #0]
 8002496:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800249a:	f003 fe2d 	bl	80060f8 <HAL_I2C_Master_Receive>
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024b8:	b004      	add	sp, #16
 80024ba:	4770      	bx	lr

080024bc <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 80024bc:	b084      	sub	sp, #16
 80024be:	b5b0      	push	{r4, r5, r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af04      	add	r7, sp, #16
 80024c4:	f107 0418 	add.w	r4, r7, #24
 80024c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 80024cc:	69b8      	ldr	r0, [r7, #24]
 80024ce:	7fbb      	ldrb	r3, [r7, #30]
 80024d0:	b299      	uxth	r1, r3
 80024d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024dc:	b29c      	uxth	r4, r3
 80024de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80024e8:	9502      	str	r5, [sp, #8]
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	4623      	mov	r3, r4
 80024f4:	f003 fef6 	bl	80062e4 <HAL_I2C_Mem_Write>
 80024f8:	4603      	mov	r3, r0
 80024fa:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <bno055_write_regs+0x4a>
        return BNO_ERR_I2C;
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <bno055_write_regs+0x4c>
    }
    return BNO_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002512:	b004      	add	sp, #16
 8002514:	4770      	bx	lr

08002516 <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 8002516:	b590      	push	{r4, r7, lr}
 8002518:	b0af      	sub	sp, #188	; 0xbc
 800251a:	af2a      	add	r7, sp, #168	; 0xa8
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	7b5a      	ldrb	r2, [r3, #13]
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <bno055_set_page+0x1a>
        return BNO_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	e024      	b.n	800257a <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d901      	bls.n	800253a <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 8002536:	2302      	movs	r3, #2
 8002538:	e01f      	b.n	800257a <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 800253a:	687c      	ldr	r4, [r7, #4]
 800253c:	2301      	movs	r3, #1
 800253e:	9329      	str	r3, [sp, #164]	; 0xa4
 8002540:	1cfb      	adds	r3, r7, #3
 8002542:	9328      	str	r3, [sp, #160]	; 0xa0
 8002544:	2307      	movs	r3, #7
 8002546:	9327      	str	r3, [sp, #156]	; 0x9c
 8002548:	4668      	mov	r0, sp
 800254a:	f104 0310 	add.w	r3, r4, #16
 800254e:	229c      	movs	r2, #156	; 0x9c
 8002550:	4619      	mov	r1, r3
 8002552:	f007 f80f 	bl	8009574 <memcpy>
 8002556:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800255a:	f7ff ffaf 	bl	80024bc <bno055_write_regs>
 800255e:	4603      	mov	r3, r0
 8002560:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <bno055_set_page+0x56>
        return err;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	e006      	b.n	800257a <bno055_set_page+0x64>
    }
    imu->_page = page;
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 8002572:	2002      	movs	r0, #2
 8002574:	f000 fee2 	bl	800333c <HAL_Delay>
    return BNO_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bd90      	pop	{r4, r7, pc}

08002582 <comm_controller_init>:
#include "commcontroller.h"
#include <string.h>



void comm_controller_init(FDCAN_HandleTypeDef* fdcan, CommController *comm){
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]

	comm->fdcan = *fdcan;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	3350      	adds	r3, #80	; 0x50
 8002592:	4611      	mov	r1, r2
 8002594:	2264      	movs	r2, #100	; 0x64
 8002596:	4618      	mov	r0, r3
 8002598:	f006 ffec 	bl	8009574 <memcpy>
	comm->device_id = DEVICE_ID;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2220      	movs	r2, #32
 80025a0:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	comm->send_message = false;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
	comm->received_message = false;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2200      	movs	r2, #0
 80025ae:	705a      	strb	r2, [r3, #1]

	comm->TxHeader.Identifier = comm->device_id;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 80025b6:	461a      	mov	r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	605a      	str	r2, [r3, #4]
	comm->TxHeader.IdType=FDCAN_STANDARD_ID;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
	comm->TxHeader.TxFrameType=FDCAN_DATA_FRAME;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2200      	movs	r2, #0
 80025c6:	60da      	str	r2, [r3, #12]
	comm->TxHeader.DataLength=FDCAN_DLC_BYTES_64;  //8 uint32_t values = 32 bytes
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80025ce:	611a      	str	r2, [r3, #16]
	comm->TxHeader.ErrorStateIndicator=FDCAN_ESI_ACTIVE;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	2200      	movs	r2, #0
 80025d4:	615a      	str	r2, [r3, #20]
	comm->TxHeader.BitRateSwitch=FDCAN_BRS_OFF;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
	comm->TxHeader.FDFormat=FDCAN_FD_CAN;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025e2:	61da      	str	r2, [r3, #28]
	comm->TxHeader.TxEventFifoControl=FDCAN_NO_TX_EVENTS;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2200      	movs	r2, #0
 80025e8:	621a      	str	r2, [r3, #32]
	comm->TxHeader.MessageMarker=0;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2200      	movs	r2, #0
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24

	memset(comm->RxData , 0 , RX_BUFFER_SIZE);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	33b4      	adds	r3, #180	; 0xb4
 80025f4:	2240      	movs	r2, #64	; 0x40
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f006 ff77 	bl	80094ec <memset>

	HAL_FDCAN_Start(&comm->fdcan);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	3350      	adds	r3, #80	; 0x50
 8002602:	4618      	mov	r0, r3
 8002604:	f002 fda4 	bl	8005150 <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&comm->fdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	3350      	adds	r3, #80	; 0x50
 800260c:	2200      	movs	r2, #0
 800260e:	2101      	movs	r1, #1
 8002610:	4618      	mov	r0, r3
 8002612:	f002 fee3 	bl	80053dc <HAL_FDCAN_ActivateNotification>

}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <send_message>:


void send_message(CommController *comm , uint8_t *payload) {
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
	if(HAL_FDCAN_AddMessageToTxFifoQ(&comm->fdcan, &comm->TxHeader, payload) != HAL_OK)//
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3304      	adds	r3, #4
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	4619      	mov	r1, r3
 8002636:	f002 fdb3 	bl	80051a0 <HAL_FDCAN_AddMessageToTxFifoQ>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <send_message+0x26>
		{
		  Error_Handler();
 8002640:	f000 fb6c 	bl	8002d1c <Error_Handler>
		}
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <process_received_message>:

int process_received_message(CommController *comm) {
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

	int flag = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
	if (comm->RxHeader.Identifier == DEVICE_ID) {  //simple logic for now, its a flag to send a message back from the device
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	2b20      	cmp	r3, #32
 800265e:	d101      	bne.n	8002664 <process_received_message+0x18>
		flag = 1;
 8002660:	2301      	movs	r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
	}
	return flag;
 8002664:	68fb      	ldr	r3, [r7, #12]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <ADC_init>:
#include "contact_sensors.h"
#include "configuration.h"
#include "adc.h"
#include "dma.h"

void ADC_init(ADC_HandleTypeDef *adc, ContactSensors *sensors){
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
	sensors->adc = adc;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	621a      	str	r2, [r3, #32]
	memset(sensors->adcValues , 0 , sizeof(sensors->adcValues));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2220      	movs	r2, #32
 8002686:	2100      	movs	r1, #0
 8002688:	4618      	mov	r0, r3
 800268a:	f006 ff2f 	bl	80094ec <memset>
	HAL_ADC_Start_DMA(sensors->adc, sensors->adcValues, NUMBER_OF_SENSORS);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	6839      	ldr	r1, [r7, #0]
 8002694:	2208      	movs	r2, #8
 8002696:	4618      	mov	r0, r3
 8002698:	f001 fa56 	bl	8003b48 <HAL_ADC_Start_DMA>
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <ADC_update_payload>:


void ADC_update_payload(ContactSensors *sensors) {
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
    // Pointer to the current position in the payload
    uint8_t *payloadPtr = sensors->payload;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3324      	adds	r3, #36	; 0x24
 80026b0:	60fb      	str	r3, [r7, #12]

    // Iterate through each ADC value
    for (int i = 0; i < NUMBER_OF_SENSORS; i++) {
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	e02d      	b.n	8002714 <ADC_update_payload+0x70>
        // Extract each byte from the 32-bit ADC value and flip the MSB for the most significant byte
        *payloadPtr++ = ((sensors->adcValues[i] >> 24) & 0xFF) ^ 0x80;  // MSB with flipped bit
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c0:	0e1b      	lsrs	r3, r3, #24
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	1c51      	adds	r1, r2, #1
 80026c8:	60f9      	str	r1, [r7, #12]
 80026ca:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80026ce:	43db      	mvns	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	7013      	strb	r3, [r2, #0]
        *payloadPtr++ = (sensors->adcValues[i] >> 16) & 0xFF;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026dc:	0c19      	lsrs	r1, r3, #16
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	60fa      	str	r2, [r7, #12]
 80026e4:	b2ca      	uxtb	r2, r1
 80026e6:	701a      	strb	r2, [r3, #0]
        *payloadPtr++ = (sensors->adcValues[i] >> 8) & 0xFF;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f0:	0a19      	lsrs	r1, r3, #8
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	60fa      	str	r2, [r7, #12]
 80026f8:	b2ca      	uxtb	r2, r1
 80026fa:	701a      	strb	r2, [r3, #0]
        *payloadPtr++ = sensors->adcValues[i] & 0xFF;                    // LSB
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	60fa      	str	r2, [r7, #12]
 800270a:	b2ca      	uxtb	r2, r1
 800270c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUMBER_OF_SENSORS; i++) {
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3301      	adds	r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b07      	cmp	r3, #7
 8002718:	ddce      	ble.n	80026b8 <ADC_update_payload+0x14>
    }
}
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <MX_DMA_Init+0x50>)
 8002730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002732:	4a11      	ldr	r2, [pc, #68]	; (8002778 <MX_DMA_Init+0x50>)
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	6493      	str	r3, [r2, #72]	; 0x48
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <MX_DMA_Init+0x50>)
 800273c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <MX_DMA_Init+0x50>)
 8002748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274a:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <MX_DMA_Init+0x50>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6493      	str	r3, [r2, #72]	; 0x48
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <MX_DMA_Init+0x50>)
 8002754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	200b      	movs	r0, #11
 8002764:	f002 f8f3 	bl	800494e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002768:	200b      	movs	r0, #11
 800276a:	f002 f90a 	bl	8004982 <HAL_NVIC_EnableIRQ>

}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000

0800277c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002780:	4b20      	ldr	r3, [pc, #128]	; (8002804 <MX_FDCAN1_Init+0x88>)
 8002782:	4a21      	ldr	r2, [pc, #132]	; (8002808 <MX_FDCAN1_Init+0x8c>)
 8002784:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002786:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <MX_FDCAN1_Init+0x88>)
 8002788:	2200      	movs	r2, #0
 800278a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <MX_FDCAN1_Init+0x88>)
 800278e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002792:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <MX_FDCAN1_Init+0x88>)
 8002796:	2200      	movs	r2, #0
 8002798:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800279a:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <MX_FDCAN1_Init+0x88>)
 800279c:	2200      	movs	r2, #0
 800279e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80027a0:	4b18      	ldr	r3, [pc, #96]	; (8002804 <MX_FDCAN1_Init+0x88>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80027a6:	4b17      	ldr	r3, [pc, #92]	; (8002804 <MX_FDCAN1_Init+0x88>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80027ac:	4b15      	ldr	r3, [pc, #84]	; (8002804 <MX_FDCAN1_Init+0x88>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80027b2:	4b14      	ldr	r3, [pc, #80]	; (8002804 <MX_FDCAN1_Init+0x88>)
 80027b4:	2202      	movs	r2, #2
 80027b6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 107;
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <MX_FDCAN1_Init+0x88>)
 80027ba:	226b      	movs	r2, #107	; 0x6b
 80027bc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 36;
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <MX_FDCAN1_Init+0x88>)
 80027c0:	2224      	movs	r2, #36	; 0x24
 80027c2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 6;
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <MX_FDCAN1_Init+0x88>)
 80027c6:	2206      	movs	r2, #6
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <MX_FDCAN1_Init+0x88>)
 80027cc:	2209      	movs	r2, #9
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <MX_FDCAN1_Init+0x88>)
 80027d2:	220f      	movs	r2, #15
 80027d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <MX_FDCAN1_Init+0x88>)
 80027d8:	2209      	movs	r2, #9
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <MX_FDCAN1_Init+0x88>)
 80027de:	2201      	movs	r2, #1
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <MX_FDCAN1_Init+0x88>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <MX_FDCAN1_Init+0x88>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80027ee:	4805      	ldr	r0, [pc, #20]	; (8002804 <MX_FDCAN1_Init+0x88>)
 80027f0:	f002 fb54 	bl	8004e9c <HAL_FDCAN_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80027fa:	f000 fa8f 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000144 	.word	0x20000144
 8002808:	40006400 	.word	0x40006400

0800280c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b09e      	sub	sp, #120	; 0x78
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002814:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002824:	f107 0310 	add.w	r3, r7, #16
 8002828:	2254      	movs	r2, #84	; 0x54
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f006 fe5d 	bl	80094ec <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a24      	ldr	r2, [pc, #144]	; (80028c8 <HAL_FDCAN_MspInit+0xbc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d141      	bne.n	80028c0 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800283c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002840:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002846:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002848:	f107 0310 	add.w	r3, r7, #16
 800284c:	4618      	mov	r0, r3
 800284e:	f004 ff99 	bl	8007784 <HAL_RCCEx_PeriphCLKConfig>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002858:	f000 fa60 	bl	8002d1c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_FDCAN_MspInit+0xc0>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <HAL_FDCAN_MspInit+0xc0>)
 8002862:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002866:	6593      	str	r3, [r2, #88]	; 0x58
 8002868:	4b18      	ldr	r3, [pc, #96]	; (80028cc <HAL_FDCAN_MspInit+0xc0>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002874:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_FDCAN_MspInit+0xc0>)
 8002876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002878:	4a14      	ldr	r2, [pc, #80]	; (80028cc <HAL_FDCAN_MspInit+0xc0>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002880:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_FDCAN_MspInit+0xc0>)
 8002882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800288c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002890:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	2300      	movs	r3, #0
 800289c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800289e:	2309      	movs	r3, #9
 80028a0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028a6:	4619      	mov	r1, r3
 80028a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ac:	f003 f906 	bl	8005abc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2100      	movs	r1, #0
 80028b4:	2015      	movs	r0, #21
 80028b6:	f002 f84a 	bl	800494e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80028ba:	2015      	movs	r0, #21
 80028bc:	f002 f861 	bl	8004982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80028c0:	bf00      	nop
 80028c2:	3778      	adds	r7, #120	; 0x78
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40006400 	.word	0x40006400
 80028cc:	40021000 	.word	0x40021000

080028d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d6:	f107 030c 	add.w	r3, r7, #12
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	609a      	str	r2, [r3, #8]
 80028e2:	60da      	str	r2, [r3, #12]
 80028e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e6:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <MX_GPIO_Init+0x90>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	4a1d      	ldr	r2, [pc, #116]	; (8002960 <MX_GPIO_Init+0x90>)
 80028ec:	f043 0304 	orr.w	r3, r3, #4
 80028f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028f2:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <MX_GPIO_Init+0x90>)
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	4b18      	ldr	r3, [pc, #96]	; (8002960 <MX_GPIO_Init+0x90>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	4a17      	ldr	r2, [pc, #92]	; (8002960 <MX_GPIO_Init+0x90>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <MX_GPIO_Init+0x90>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <MX_GPIO_Init+0x90>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	4a11      	ldr	r2, [pc, #68]	; (8002960 <MX_GPIO_Init+0x90>)
 800291c:	f043 0302 	orr.w	r3, r3, #2
 8002920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <MX_GPIO_Init+0x90>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 800292e:	2200      	movs	r2, #0
 8002930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002934:	480b      	ldr	r0, [pc, #44]	; (8002964 <MX_GPIO_Init+0x94>)
 8002936:	f003 fa43 	bl	8005dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 800293a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800293e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002940:	2301      	movs	r3, #1
 8002942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 800294c:	f107 030c 	add.w	r3, r7, #12
 8002950:	4619      	mov	r1, r3
 8002952:	4804      	ldr	r0, [pc, #16]	; (8002964 <MX_GPIO_Init+0x94>)
 8002954:	f003 f8b2 	bl	8005abc <HAL_GPIO_Init>

}
 8002958:	bf00      	nop
 800295a:	3720      	adds	r7, #32
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000
 8002964:	48000800 	.word	0x48000800

08002968 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800296c:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <MX_I2C1_Init+0x80>)
 800296e:	4a1f      	ldr	r2, [pc, #124]	; (80029ec <MX_I2C1_Init+0x84>)
 8002970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0070215B;
 8002972:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <MX_I2C1_Init+0x80>)
 8002974:	4a1e      	ldr	r2, [pc, #120]	; (80029f0 <MX_I2C1_Init+0x88>)
 8002976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <MX_I2C1_Init+0x80>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <MX_I2C1_Init+0x80>)
 8002980:	2201      	movs	r2, #1
 8002982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002984:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <MX_I2C1_Init+0x80>)
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800298a:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <MX_I2C1_Init+0x80>)
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002990:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <MX_I2C1_Init+0x80>)
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <MX_I2C1_Init+0x80>)
 8002998:	2200      	movs	r2, #0
 800299a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <MX_I2C1_Init+0x80>)
 800299e:	2200      	movs	r2, #0
 80029a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029a2:	4811      	ldr	r0, [pc, #68]	; (80029e8 <MX_I2C1_Init+0x80>)
 80029a4:	f003 fa24 	bl	8005df0 <HAL_I2C_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029ae:	f000 f9b5 	bl	8002d1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029b2:	2100      	movs	r1, #0
 80029b4:	480c      	ldr	r0, [pc, #48]	; (80029e8 <MX_I2C1_Init+0x80>)
 80029b6:	f004 f875 	bl	8006aa4 <HAL_I2CEx_ConfigAnalogFilter>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029c0:	f000 f9ac 	bl	8002d1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029c4:	2100      	movs	r1, #0
 80029c6:	4808      	ldr	r0, [pc, #32]	; (80029e8 <MX_I2C1_Init+0x80>)
 80029c8:	f004 f8b7 	bl	8006b3a <HAL_I2CEx_ConfigDigitalFilter>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029d2:	f000 f9a3 	bl	8002d1c <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <MX_I2C1_Init+0x8c>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4a06      	ldr	r2, [pc, #24]	; (80029f4 <MX_I2C1_Init+0x8c>)
 80029dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029e0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	200001a8 	.word	0x200001a8
 80029ec:	40005400 	.word	0x40005400
 80029f0:	0070215b 	.word	0x0070215b
 80029f4:	40010000 	.word	0x40010000

080029f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b0a0      	sub	sp, #128	; 0x80
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a10:	f107 0318 	add.w	r3, r7, #24
 8002a14:	2254      	movs	r2, #84	; 0x54
 8002a16:	2100      	movs	r1, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f006 fd67 	bl	80094ec <memset>
  if(i2cHandle->Instance==I2C1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a2d      	ldr	r2, [pc, #180]	; (8002ad8 <HAL_I2C_MspInit+0xe0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d153      	bne.n	8002ad0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a28:	2340      	movs	r3, #64	; 0x40
 8002a2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a30:	f107 0318 	add.w	r3, r7, #24
 8002a34:	4618      	mov	r0, r3
 8002a36:	f004 fea5 	bl	8007784 <HAL_RCCEx_PeriphCLKConfig>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002a40:	f000 f96c 	bl	8002d1c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a44:	4b25      	ldr	r3, [pc, #148]	; (8002adc <HAL_I2C_MspInit+0xe4>)
 8002a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a48:	4a24      	ldr	r2, [pc, #144]	; (8002adc <HAL_I2C_MspInit+0xe4>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a50:	4b22      	ldr	r3, [pc, #136]	; (8002adc <HAL_I2C_MspInit+0xe4>)
 8002a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5c:	4b1f      	ldr	r3, [pc, #124]	; (8002adc <HAL_I2C_MspInit+0xe4>)
 8002a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a60:	4a1e      	ldr	r2, [pc, #120]	; (8002adc <HAL_I2C_MspInit+0xe4>)
 8002a62:	f043 0302 	orr.w	r3, r3, #2
 8002a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a68:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <HAL_I2C_MspInit+0xe4>)
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a78:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a7a:	2312      	movs	r3, #18
 8002a7c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	2300      	movs	r3, #0
 8002a84:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a86:	2304      	movs	r3, #4
 8002a88:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a94:	f003 f812 	bl	8005abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a9c:	2312      	movs	r3, #18
 8002a9e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aa8:	2304      	movs	r3, #4
 8002aaa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	480b      	ldr	r0, [pc, #44]	; (8002ae0 <HAL_I2C_MspInit+0xe8>)
 8002ab4:	f003 f802 	bl	8005abc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ab8:	4b08      	ldr	r3, [pc, #32]	; (8002adc <HAL_I2C_MspInit+0xe4>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	4a07      	ldr	r2, [pc, #28]	; (8002adc <HAL_I2C_MspInit+0xe4>)
 8002abe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_I2C_MspInit+0xe4>)
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	3780      	adds	r7, #128	; 0x80
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40005400 	.word	0x40005400
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	48000400 	.word	0x48000400

08002ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ae8:	f000 fbb7 	bl	800325a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aec:	f000 f886 	bl	8002bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002af0:	f7ff feee 	bl	80028d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002af4:	f7ff fe18 	bl	8002728 <MX_DMA_Init>
  MX_ADC2_Init();
 8002af8:	f7fd fdf0 	bl	80006dc <MX_ADC2_Init>
  MX_I2C1_Init();
 8002afc:	f7ff ff34 	bl	8002968 <MX_I2C1_Init>
  MX_UART4_Init();
 8002b00:	f000 fa3c 	bl	8002f7c <MX_UART4_Init>
  MX_USART3_UART_Init();
 8002b04:	f000 fa86 	bl	8003014 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002b08:	f000 f9c2 	bl	8002e90 <MX_TIM3_Init>
  MX_FDCAN1_Init();
 8002b0c:	f7ff fe36 	bl	800277c <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8002b10:	482f      	ldr	r0, [pc, #188]	; (8002bd0 <main+0xec>)
 8002b12:	f005 f8dd 	bl	8007cd0 <HAL_TIM_Base_Start_IT>
  comm_controller_init(&hfdcan1 , &comm_controller);
 8002b16:	492f      	ldr	r1, [pc, #188]	; (8002bd4 <main+0xf0>)
 8002b18:	482f      	ldr	r0, [pc, #188]	; (8002bd8 <main+0xf4>)
 8002b1a:	f7ff fd32 	bl	8002582 <comm_controller_init>
  ADC_init(&hadc2,&sensors);
 8002b1e:	492f      	ldr	r1, [pc, #188]	; (8002bdc <main+0xf8>)
 8002b20:	482f      	ldr	r0, [pc, #188]	; (8002be0 <main+0xfc>)
 8002b22:	f7ff fda6 	bl	8002672 <ADC_init>
  imu_init(&hi2c1 , &imu);
 8002b26:	492f      	ldr	r1, [pc, #188]	; (8002be4 <main+0x100>)
 8002b28:	482f      	ldr	r0, [pc, #188]	; (8002be8 <main+0x104>)
 8002b2a:	f7fd fcf3 	bl	8000514 <imu_init>
  version_init(&version);
 8002b2e:	482f      	ldr	r0, [pc, #188]	; (8002bec <main+0x108>)
 8002b30:	f000 fb56 	bl	80031e0 <version_init>
  soul_init(&soul_sense);
 8002b34:	482e      	ldr	r0, [pc, #184]	; (8002bf0 <main+0x10c>)
 8002b36:	f7fd fd71 	bl	800061c <soul_init>
  currentState = IDLE;
 8002b3a:	4b2e      	ldr	r3, [pc, #184]	; (8002bf4 <main+0x110>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
  {
//	  if (HAL_GetTick()%20 == 0) {
//		  imu_read_data(&imu); //TODO Oori to implement
//	  }

	  switch(currentState) {
 8002b40:	4b2c      	ldr	r3, [pc, #176]	; (8002bf4 <main+0x110>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d83d      	bhi.n	8002bc4 <main+0xe0>
 8002b48:	a201      	add	r2, pc, #4	; (adr r2, 8002b50 <main+0x6c>)
 8002b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4e:	bf00      	nop
 8002b50:	08002bcd 	.word	0x08002bcd
 8002b54:	08002b65 	.word	0x08002b65
 8002b58:	08002bc5 	.word	0x08002bc5
 8002b5c:	08002b6d 	.word	0x08002b6d
 8002b60:	08002b93 	.word	0x08002b93
	  	  case IDLE:
		  	  break;

	      case READ_IMU:
//	    	  imu_read_data(&imu); //TODO Oori to implement
	    	  currentState = IDLE;
 8002b64:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <main+0x110>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
	          break;
 8002b6a:	e030      	b.n	8002bce <main+0xea>


	      case RECEIVE_MESSAGE:
	    	  if(process_received_message(&comm_controller)){
 8002b6c:	4819      	ldr	r0, [pc, #100]	; (8002bd4 <main+0xf0>)
 8002b6e:	f7ff fd6d 	bl	800264c <process_received_message>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <main+0x9c>
	    		  currentState =  TRANSMIT_MESSAGE;
 8002b78:	4b1e      	ldr	r3, [pc, #120]	; (8002bf4 <main+0x110>)
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	701a      	strb	r2, [r3, #0]
	    	  else {
	    		  currentState = IDLE;
	    		  memset(comm_controller.RxData, 0 , RX_BUFFER_SIZE);
	    	  }

	          break;
 8002b7e:	e026      	b.n	8002bce <main+0xea>
	    		  currentState = IDLE;
 8002b80:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <main+0x110>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]
	    		  memset(comm_controller.RxData, 0 , RX_BUFFER_SIZE);
 8002b86:	2240      	movs	r2, #64	; 0x40
 8002b88:	2100      	movs	r1, #0
 8002b8a:	481b      	ldr	r0, [pc, #108]	; (8002bf8 <main+0x114>)
 8002b8c:	f006 fcae 	bl	80094ec <memset>
	          break;
 8002b90:	e01d      	b.n	8002bce <main+0xea>

	      case TRANSMIT_MESSAGE:
	      {
			  imu_update_payload(&imu);
 8002b92:	4814      	ldr	r0, [pc, #80]	; (8002be4 <main+0x100>)
 8002b94:	f7fd fcf2 	bl	800057c <imu_update_payload>
			  ADC_update_payload(&sensors);
 8002b98:	4810      	ldr	r0, [pc, #64]	; (8002bdc <main+0xf8>)
 8002b9a:	f7ff fd83 	bl	80026a4 <ADC_update_payload>
			  soul_update_payload(&soul_sense , &sensors , &imu , &version);
 8002b9e:	4b13      	ldr	r3, [pc, #76]	; (8002bec <main+0x108>)
 8002ba0:	4a10      	ldr	r2, [pc, #64]	; (8002be4 <main+0x100>)
 8002ba2:	490e      	ldr	r1, [pc, #56]	; (8002bdc <main+0xf8>)
 8002ba4:	4812      	ldr	r0, [pc, #72]	; (8002bf0 <main+0x10c>)
 8002ba6:	f7fd fd47 	bl	8000638 <soul_update_payload>
	          send_message(&comm_controller, soul_sense.payload);
 8002baa:	4911      	ldr	r1, [pc, #68]	; (8002bf0 <main+0x10c>)
 8002bac:	4809      	ldr	r0, [pc, #36]	; (8002bd4 <main+0xf0>)
 8002bae:	f7ff fd36 	bl	800261e <send_message>
	          memset(comm_controller.RxData, 0 , RX_BUFFER_SIZE);  //deleting used content from RxData buffer
 8002bb2:	2240      	movs	r2, #64	; 0x40
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4810      	ldr	r0, [pc, #64]	; (8002bf8 <main+0x114>)
 8002bb8:	f006 fc98 	bl	80094ec <memset>
	          currentState = IDLE;
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <main+0x110>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
	          break;
 8002bc2:	e004      	b.n	8002bce <main+0xea>
	      }


	      default:
	          // Handle any unexpected state
	    	  currentState = IDLE;
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <main+0x110>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
	          break;
 8002bca:	e000      	b.n	8002bce <main+0xea>
		  	  break;
 8002bcc:	bf00      	nop
	  switch(currentState) {
 8002bce:	e7b7      	b.n	8002b40 <main+0x5c>
 8002bd0:	200003c4 	.word	0x200003c4
 8002bd4:	200001f4 	.word	0x200001f4
 8002bd8:	20000144 	.word	0x20000144
 8002bdc:	200002ec 	.word	0x200002ec
 8002be0:	20000078 	.word	0x20000078
 8002be4:	20000330 	.word	0x20000330
 8002be8:	200001a8 	.word	0x200001a8
 8002bec:	2000037c 	.word	0x2000037c
 8002bf0:	20000380 	.word	0x20000380
 8002bf4:	2000037f 	.word	0x2000037f
 8002bf8:	200002a8 	.word	0x200002a8

08002bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b094      	sub	sp, #80	; 0x50
 8002c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c02:	f107 0318 	add.w	r3, r7, #24
 8002c06:	2238      	movs	r2, #56	; 0x38
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f006 fc6e 	bl	80094ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	605a      	str	r2, [r3, #4]
 8002c18:	609a      	str	r2, [r3, #8]
 8002c1a:	60da      	str	r2, [r3, #12]
 8002c1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c22:	f003 ffd7 	bl	8006bd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c26:	2302      	movs	r3, #2
 8002c28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c30:	2340      	movs	r3, #64	; 0x40
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c34:	2302      	movs	r3, #2
 8002c36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 18;
 8002c40:	2312      	movs	r3, #18
 8002c42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c44:	2302      	movs	r3, #2
 8002c46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c50:	f107 0318 	add.w	r3, r7, #24
 8002c54:	4618      	mov	r0, r3
 8002c56:	f004 f861 	bl	8006d1c <HAL_RCC_OscConfig>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8002c60:	f000 f85c 	bl	8002d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c64:	230f      	movs	r3, #15
 8002c66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	2104      	movs	r1, #4
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f004 fb65 	bl	800734c <HAL_RCC_ClockConfig>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002c88:	f000 f848 	bl	8002d1c <Error_Handler>
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	3750      	adds	r7, #80	; 0x50
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <HAL_FDCAN_RxFifo0Callback+0x2a>
	{
		if (HAL_FDCAN_GetRxMessage(&comm_controller.fdcan, FDCAN_RX_FIFO0, &comm_controller.RxHeader, comm_controller.RxData) != HAL_OK)
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002caa:	4a0e      	ldr	r2, [pc, #56]	; (8002ce4 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8002cac:	2140      	movs	r1, #64	; 0x40
 8002cae:	480e      	ldr	r0, [pc, #56]	; (8002ce8 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8002cb0:	f002 faba 	bl	8005228 <HAL_FDCAN_GetRxMessage>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_FDCAN_RxFifo0Callback+0x2a>
		{
			Error_Handler();
 8002cba:	f000 f82f 	bl	8002d1c <Error_Handler>
		}
	}
	currentState = RECEIVE_MESSAGE;
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_FDCAN_RxFifo0Callback+0x58>)
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	701a      	strb	r2, [r3, #0]
	if (HAL_FDCAN_ActivateNotification(&comm_controller.fdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	4807      	ldr	r0, [pc, #28]	; (8002ce8 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8002cca:	f002 fb87 	bl	80053dc <HAL_FDCAN_ActivateNotification>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_FDCAN_RxFifo0Callback+0x44>
	{
		Error_Handler();
 8002cd4:	f000 f822 	bl	8002d1c <Error_Handler>
	}
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	200002a8 	.word	0x200002a8
 8002ce4:	2000021c 	.word	0x2000021c
 8002ce8:	20000244 	.word	0x20000244
 8002cec:	2000037f 	.word	0x2000037f

08002cf0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a05      	ldr	r2, [pc, #20]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d102      	bne.n	8002d08 <HAL_TIM_PeriodElapsedCallback+0x18>
		currentState = READ_IMU;
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]

	}
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	40000400 	.word	0x40000400
 8002d18:	2000037f 	.word	0x2000037f

08002d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d20:	b672      	cpsid	i
}
 8002d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d24:	e7fe      	b.n	8002d24 <Error_Handler+0x8>
	...

08002d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2e:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <HAL_MspInit+0x44>)
 8002d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d32:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <HAL_MspInit+0x44>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6613      	str	r3, [r2, #96]	; 0x60
 8002d3a:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <HAL_MspInit+0x44>)
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	607b      	str	r3, [r7, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_MspInit+0x44>)
 8002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4a:	4a08      	ldr	r2, [pc, #32]	; (8002d6c <HAL_MspInit+0x44>)
 8002d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d50:	6593      	str	r3, [r2, #88]	; 0x58
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_MspInit+0x44>)
 8002d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000

08002d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d74:	e7fe      	b.n	8002d74 <NMI_Handler+0x4>

08002d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d7a:	e7fe      	b.n	8002d7a <HardFault_Handler+0x4>

08002d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d80:	e7fe      	b.n	8002d80 <MemManage_Handler+0x4>

08002d82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d86:	e7fe      	b.n	8002d86 <BusFault_Handler+0x4>

08002d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d8c:	e7fe      	b.n	8002d8c <UsageFault_Handler+0x4>

08002d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dbc:	f000 faa0 	bl	8003300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <DMA1_Channel1_IRQHandler+0x10>)
 8002dca:	f001 ff18 	bl	8004bfe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200000e4 	.word	0x200000e4

08002dd8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002ddc:	4802      	ldr	r0, [pc, #8]	; (8002de8 <FDCAN1_IT0_IRQHandler+0x10>)
 8002dde:	f002 fbe3 	bl	80055a8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000144 	.word	0x20000144

08002dec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002df0:	4802      	ldr	r0, [pc, #8]	; (8002dfc <TIM3_IRQHandler+0x10>)
 8002df2:	f004 ffe5 	bl	8007dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200003c4 	.word	0x200003c4

08002e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e08:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <_sbrk+0x5c>)
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <_sbrk+0x60>)
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e14:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <_sbrk+0x64>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <_sbrk+0x64>)
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <_sbrk+0x68>)
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <_sbrk+0x64>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d207      	bcs.n	8002e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e30:	f006 fb74 	bl	800951c <__errno>
 8002e34:	4603      	mov	r3, r0
 8002e36:	220c      	movs	r2, #12
 8002e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e3e:	e009      	b.n	8002e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <_sbrk+0x64>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <_sbrk+0x64>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	4a05      	ldr	r2, [pc, #20]	; (8002e64 <_sbrk+0x64>)
 8002e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e52:	68fb      	ldr	r3, [r7, #12]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20020000 	.word	0x20020000
 8002e60:	00000400 	.word	0x00000400
 8002e64:	200003c0 	.word	0x200003c0
 8002e68:	20000680 	.word	0x20000680

08002e6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <SystemInit+0x20>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	4a05      	ldr	r2, [pc, #20]	; (8002e8c <SystemInit+0x20>)
 8002e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e96:	f107 0310 	add.w	r3, r7, #16
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002eae:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <MX_TIM3_Init+0x98>)
 8002eb0:	4a1e      	ldr	r2, [pc, #120]	; (8002f2c <MX_TIM3_Init+0x9c>)
 8002eb2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8002eb4:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <MX_TIM3_Init+0x98>)
 8002eb6:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8002eba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ebc:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <MX_TIM3_Init+0x98>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8002ec2:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <MX_TIM3_Init+0x98>)
 8002ec4:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002ec8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eca:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <MX_TIM3_Init+0x98>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ed0:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <MX_TIM3_Init+0x98>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ed6:	4814      	ldr	r0, [pc, #80]	; (8002f28 <MX_TIM3_Init+0x98>)
 8002ed8:	f004 fea2 	bl	8007c20 <HAL_TIM_Base_Init>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002ee2:	f7ff ff1b 	bl	8002d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002eec:	f107 0310 	add.w	r3, r7, #16
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	480d      	ldr	r0, [pc, #52]	; (8002f28 <MX_TIM3_Init+0x98>)
 8002ef4:	f005 f8e4 	bl	80080c0 <HAL_TIM_ConfigClockSource>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002efe:	f7ff ff0d 	bl	8002d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4806      	ldr	r0, [pc, #24]	; (8002f28 <MX_TIM3_Init+0x98>)
 8002f10:	f005 fb58 	bl	80085c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002f1a:	f7ff feff 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	3720      	adds	r7, #32
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	200003c4 	.word	0x200003c4
 8002f2c:	40000400 	.word	0x40000400

08002f30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a0d      	ldr	r2, [pc, #52]	; (8002f74 <HAL_TIM_Base_MspInit+0x44>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d113      	bne.n	8002f6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f42:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <HAL_TIM_Base_MspInit+0x48>)
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f46:	4a0c      	ldr	r2, [pc, #48]	; (8002f78 <HAL_TIM_Base_MspInit+0x48>)
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_TIM_Base_MspInit+0x48>)
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	201d      	movs	r0, #29
 8002f60:	f001 fcf5 	bl	800494e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f64:	201d      	movs	r0, #29
 8002f66:	f001 fd0c 	bl	8004982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40021000 	.word	0x40021000

08002f7c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002f80:	4b22      	ldr	r3, [pc, #136]	; (800300c <MX_UART4_Init+0x90>)
 8002f82:	4a23      	ldr	r2, [pc, #140]	; (8003010 <MX_UART4_Init+0x94>)
 8002f84:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002f86:	4b21      	ldr	r3, [pc, #132]	; (800300c <MX_UART4_Init+0x90>)
 8002f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f8c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f8e:	4b1f      	ldr	r3, [pc, #124]	; (800300c <MX_UART4_Init+0x90>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f94:	4b1d      	ldr	r3, [pc, #116]	; (800300c <MX_UART4_Init+0x90>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f9a:	4b1c      	ldr	r3, [pc, #112]	; (800300c <MX_UART4_Init+0x90>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002fa0:	4b1a      	ldr	r3, [pc, #104]	; (800300c <MX_UART4_Init+0x90>)
 8002fa2:	220c      	movs	r2, #12
 8002fa4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fa6:	4b19      	ldr	r3, [pc, #100]	; (800300c <MX_UART4_Init+0x90>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fac:	4b17      	ldr	r3, [pc, #92]	; (800300c <MX_UART4_Init+0x90>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <MX_UART4_Init+0x90>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fb8:	4b14      	ldr	r3, [pc, #80]	; (800300c <MX_UART4_Init+0x90>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fbe:	4b13      	ldr	r3, [pc, #76]	; (800300c <MX_UART4_Init+0x90>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002fc4:	4811      	ldr	r0, [pc, #68]	; (800300c <MX_UART4_Init+0x90>)
 8002fc6:	f005 fbd9 	bl	800877c <HAL_UART_Init>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002fd0:	f7ff fea4 	bl	8002d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	480d      	ldr	r0, [pc, #52]	; (800300c <MX_UART4_Init+0x90>)
 8002fd8:	f006 f90a 	bl	80091f0 <HAL_UARTEx_SetTxFifoThreshold>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002fe2:	f7ff fe9b 	bl	8002d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4808      	ldr	r0, [pc, #32]	; (800300c <MX_UART4_Init+0x90>)
 8002fea:	f006 f93f 	bl	800926c <HAL_UARTEx_SetRxFifoThreshold>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002ff4:	f7ff fe92 	bl	8002d1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002ff8:	4804      	ldr	r0, [pc, #16]	; (800300c <MX_UART4_Init+0x90>)
 8002ffa:	f006 f8c0 	bl	800917e <HAL_UARTEx_DisableFifoMode>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003004:	f7ff fe8a 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003008:	bf00      	nop
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000410 	.word	0x20000410
 8003010:	40004c00 	.word	0x40004c00

08003014 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003018:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <MX_USART3_UART_Init+0x90>)
 800301a:	4a23      	ldr	r2, [pc, #140]	; (80030a8 <MX_USART3_UART_Init+0x94>)
 800301c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800301e:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <MX_USART3_UART_Init+0x90>)
 8003020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003024:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003026:	4b1f      	ldr	r3, [pc, #124]	; (80030a4 <MX_USART3_UART_Init+0x90>)
 8003028:	2200      	movs	r2, #0
 800302a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800302c:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <MX_USART3_UART_Init+0x90>)
 800302e:	2200      	movs	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003032:	4b1c      	ldr	r3, [pc, #112]	; (80030a4 <MX_USART3_UART_Init+0x90>)
 8003034:	2200      	movs	r2, #0
 8003036:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003038:	4b1a      	ldr	r3, [pc, #104]	; (80030a4 <MX_USART3_UART_Init+0x90>)
 800303a:	220c      	movs	r2, #12
 800303c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800303e:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <MX_USART3_UART_Init+0x90>)
 8003040:	2200      	movs	r2, #0
 8003042:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003044:	4b17      	ldr	r3, [pc, #92]	; (80030a4 <MX_USART3_UART_Init+0x90>)
 8003046:	2200      	movs	r2, #0
 8003048:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800304a:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <MX_USART3_UART_Init+0x90>)
 800304c:	2200      	movs	r2, #0
 800304e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003050:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <MX_USART3_UART_Init+0x90>)
 8003052:	2200      	movs	r2, #0
 8003054:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003056:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <MX_USART3_UART_Init+0x90>)
 8003058:	2200      	movs	r2, #0
 800305a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800305c:	4811      	ldr	r0, [pc, #68]	; (80030a4 <MX_USART3_UART_Init+0x90>)
 800305e:	f005 fb8d 	bl	800877c <HAL_UART_Init>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003068:	f7ff fe58 	bl	8002d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800306c:	2100      	movs	r1, #0
 800306e:	480d      	ldr	r0, [pc, #52]	; (80030a4 <MX_USART3_UART_Init+0x90>)
 8003070:	f006 f8be 	bl	80091f0 <HAL_UARTEx_SetTxFifoThreshold>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800307a:	f7ff fe4f 	bl	8002d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800307e:	2100      	movs	r1, #0
 8003080:	4808      	ldr	r0, [pc, #32]	; (80030a4 <MX_USART3_UART_Init+0x90>)
 8003082:	f006 f8f3 	bl	800926c <HAL_UARTEx_SetRxFifoThreshold>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800308c:	f7ff fe46 	bl	8002d1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003090:	4804      	ldr	r0, [pc, #16]	; (80030a4 <MX_USART3_UART_Init+0x90>)
 8003092:	f006 f874 	bl	800917e <HAL_UARTEx_DisableFifoMode>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800309c:	f7ff fe3e 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	200004a0 	.word	0x200004a0
 80030a8:	40004800 	.word	0x40004800

080030ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b0a0      	sub	sp, #128	; 0x80
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030c4:	f107 0318 	add.w	r3, r7, #24
 80030c8:	2254      	movs	r2, #84	; 0x54
 80030ca:	2100      	movs	r1, #0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f006 fa0d 	bl	80094ec <memset>
  if(uartHandle->Instance==UART4)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a3d      	ldr	r2, [pc, #244]	; (80031cc <HAL_UART_MspInit+0x120>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d137      	bne.n	800314c <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80030dc:	2308      	movs	r3, #8
 80030de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80030e0:	2300      	movs	r3, #0
 80030e2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030e4:	f107 0318 	add.w	r3, r7, #24
 80030e8:	4618      	mov	r0, r3
 80030ea:	f004 fb4b 	bl	8007784 <HAL_RCCEx_PeriphCLKConfig>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80030f4:	f7ff fe12 	bl	8002d1c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80030f8:	4b35      	ldr	r3, [pc, #212]	; (80031d0 <HAL_UART_MspInit+0x124>)
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fc:	4a34      	ldr	r2, [pc, #208]	; (80031d0 <HAL_UART_MspInit+0x124>)
 80030fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003102:	6593      	str	r3, [r2, #88]	; 0x58
 8003104:	4b32      	ldr	r3, [pc, #200]	; (80031d0 <HAL_UART_MspInit+0x124>)
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003110:	4b2f      	ldr	r3, [pc, #188]	; (80031d0 <HAL_UART_MspInit+0x124>)
 8003112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003114:	4a2e      	ldr	r2, [pc, #184]	; (80031d0 <HAL_UART_MspInit+0x124>)
 8003116:	f043 0304 	orr.w	r3, r3, #4
 800311a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800311c:	4b2c      	ldr	r3, [pc, #176]	; (80031d0 <HAL_UART_MspInit+0x124>)
 800311e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003128:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800312c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312e:	2302      	movs	r3, #2
 8003130:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003136:	2300      	movs	r3, #0
 8003138:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800313a:	2305      	movs	r3, #5
 800313c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800313e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003142:	4619      	mov	r1, r3
 8003144:	4823      	ldr	r0, [pc, #140]	; (80031d4 <HAL_UART_MspInit+0x128>)
 8003146:	f002 fcb9 	bl	8005abc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800314a:	e03b      	b.n	80031c4 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a21      	ldr	r2, [pc, #132]	; (80031d8 <HAL_UART_MspInit+0x12c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d136      	bne.n	80031c4 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003156:	2304      	movs	r3, #4
 8003158:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800315a:	2300      	movs	r3, #0
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800315e:	f107 0318 	add.w	r3, r7, #24
 8003162:	4618      	mov	r0, r3
 8003164:	f004 fb0e 	bl	8007784 <HAL_RCCEx_PeriphCLKConfig>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800316e:	f7ff fdd5 	bl	8002d1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <HAL_UART_MspInit+0x124>)
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <HAL_UART_MspInit+0x124>)
 8003178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800317c:	6593      	str	r3, [r2, #88]	; 0x58
 800317e:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <HAL_UART_MspInit+0x124>)
 8003180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318a:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <HAL_UART_MspInit+0x124>)
 800318c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318e:	4a10      	ldr	r2, [pc, #64]	; (80031d0 <HAL_UART_MspInit+0x124>)
 8003190:	f043 0302 	orr.w	r3, r3, #2
 8003194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003196:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <HAL_UART_MspInit+0x124>)
 8003198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b0:	2300      	movs	r3, #0
 80031b2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031b4:	2307      	movs	r3, #7
 80031b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031bc:	4619      	mov	r1, r3
 80031be:	4807      	ldr	r0, [pc, #28]	; (80031dc <HAL_UART_MspInit+0x130>)
 80031c0:	f002 fc7c 	bl	8005abc <HAL_GPIO_Init>
}
 80031c4:	bf00      	nop
 80031c6:	3780      	adds	r7, #128	; 0x80
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40004c00 	.word	0x40004c00
 80031d0:	40021000 	.word	0x40021000
 80031d4:	48000800 	.word	0x48000800
 80031d8:	40004800 	.word	0x40004800
 80031dc:	48000400 	.word	0x48000400

080031e0 <version_init>:
 */


#include "version.h"

void version_init(FwVersion* version){
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
	version->version[0] = HW_VERSION;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	701a      	strb	r2, [r3, #0]
	version->version[1] = SW_MAJOR_VERSION;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	705a      	strb	r2, [r3, #1]
	version->version[2] = SW_MINOR_VERSION;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	709a      	strb	r2, [r3, #2]
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003208:	480d      	ldr	r0, [pc, #52]	; (8003240 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800320a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800320c:	480d      	ldr	r0, [pc, #52]	; (8003244 <LoopForever+0x6>)
  ldr r1, =_edata
 800320e:	490e      	ldr	r1, [pc, #56]	; (8003248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003210:	4a0e      	ldr	r2, [pc, #56]	; (800324c <LoopForever+0xe>)
  movs r3, #0
 8003212:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003214:	e002      	b.n	800321c <LoopCopyDataInit>

08003216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800321a:	3304      	adds	r3, #4

0800321c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800321c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800321e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003220:	d3f9      	bcc.n	8003216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003222:	4a0b      	ldr	r2, [pc, #44]	; (8003250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003224:	4c0b      	ldr	r4, [pc, #44]	; (8003254 <LoopForever+0x16>)
  movs r3, #0
 8003226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003228:	e001      	b.n	800322e <LoopFillZerobss>

0800322a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800322a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800322c:	3204      	adds	r2, #4

0800322e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800322e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003230:	d3fb      	bcc.n	800322a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003232:	f7ff fe1b 	bl	8002e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003236:	f006 f977 	bl	8009528 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800323a:	f7ff fc53 	bl	8002ae4 <main>

0800323e <LoopForever>:

LoopForever:
    b LoopForever
 800323e:	e7fe      	b.n	800323e <LoopForever>
  ldr   r0, =_estack
 8003240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003248:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800324c:	08009608 	.word	0x08009608
  ldr r2, =_sbss
 8003250:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8003254:	2000067c 	.word	0x2000067c

08003258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003258:	e7fe      	b.n	8003258 <ADC1_2_IRQHandler>

0800325a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003264:	2003      	movs	r0, #3
 8003266:	f001 fb67 	bl	8004938 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800326a:	200f      	movs	r0, #15
 800326c:	f000 f80e 	bl	800328c <HAL_InitTick>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	71fb      	strb	r3, [r7, #7]
 800327a:	e001      	b.n	8003280 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800327c:	f7ff fd54 	bl	8002d28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003280:	79fb      	ldrb	r3, [r7, #7]

}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003298:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <HAL_InitTick+0x68>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d022      	beq.n	80032e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80032a0:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <HAL_InitTick+0x6c>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <HAL_InitTick+0x68>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80032ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b4:	4618      	mov	r0, r3
 80032b6:	f001 fb72 	bl	800499e <HAL_SYSTICK_Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10f      	bne.n	80032e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b0f      	cmp	r3, #15
 80032c4:	d809      	bhi.n	80032da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c6:	2200      	movs	r2, #0
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032ce:	f001 fb3e 	bl	800494e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032d2:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <HAL_InitTick+0x70>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	e007      	b.n	80032ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	73fb      	strb	r3, [r7, #15]
 80032de:	e004      	b.n	80032ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	e001      	b.n	80032ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000008 	.word	0x20000008
 80032f8:	20000000 	.word	0x20000000
 80032fc:	20000004 	.word	0x20000004

08003300 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_IncTick+0x1c>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_IncTick+0x20>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4413      	add	r3, r2
 800330e:	4a03      	ldr	r2, [pc, #12]	; (800331c <HAL_IncTick+0x1c>)
 8003310:	6013      	str	r3, [r2, #0]
}
 8003312:	bf00      	nop
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	20000530 	.word	0x20000530
 8003320:	20000008 	.word	0x20000008

08003324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return uwTick;
 8003328:	4b03      	ldr	r3, [pc, #12]	; (8003338 <HAL_GetTick+0x14>)
 800332a:	681b      	ldr	r3, [r3, #0]
}
 800332c:	4618      	mov	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000530 	.word	0x20000530

0800333c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003344:	f7ff ffee 	bl	8003324 <HAL_GetTick>
 8003348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003354:	d004      	beq.n	8003360 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_Delay+0x40>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4413      	add	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003360:	bf00      	nop
 8003362:	f7ff ffdf 	bl	8003324 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	429a      	cmp	r2, r3
 8003370:	d8f7      	bhi.n	8003362 <HAL_Delay+0x26>
  {
  }
}
 8003372:	bf00      	nop
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000008 	.word	0x20000008

08003380 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	609a      	str	r2, [r3, #8]
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	609a      	str	r2, [r3, #8]
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3360      	adds	r3, #96	; 0x60
 80033fa:	461a      	mov	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b08      	ldr	r3, [pc, #32]	; (800342c <LL_ADC_SetOffset+0x44>)
 800340a:	4013      	ands	r3, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	4313      	orrs	r3, r2
 8003418:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003420:	bf00      	nop
 8003422:	371c      	adds	r7, #28
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	03fff000 	.word	0x03fff000

08003430 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3360      	adds	r3, #96	; 0x60
 800343e:	461a      	mov	r2, r3
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3360      	adds	r3, #96	; 0x60
 800346c:	461a      	mov	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	431a      	orrs	r2, r3
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003492:	b480      	push	{r7}
 8003494:	b087      	sub	sp, #28
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3360      	adds	r3, #96	; 0x60
 80034a2:	461a      	mov	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80034bc:	bf00      	nop
 80034be:	371c      	adds	r7, #28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3360      	adds	r3, #96	; 0x60
 80034d8:	461a      	mov	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	615a      	str	r2, [r3, #20]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800354a:	b480      	push	{r7}
 800354c:	b087      	sub	sp, #28
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3330      	adds	r3, #48	; 0x30
 800355a:	461a      	mov	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	0a1b      	lsrs	r3, r3, #8
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	4413      	add	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	211f      	movs	r1, #31
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	401a      	ands	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	0e9b      	lsrs	r3, r3, #26
 8003582:	f003 011f 	and.w	r1, r3, #31
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	fa01 f303 	lsl.w	r3, r1, r3
 8003590:	431a      	orrs	r2, r3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b087      	sub	sp, #28
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	3314      	adds	r3, #20
 80035b2:	461a      	mov	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	0e5b      	lsrs	r3, r3, #25
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	4413      	add	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	0d1b      	lsrs	r3, r3, #20
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	2107      	movs	r1, #7
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	401a      	ands	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	0d1b      	lsrs	r3, r3, #20
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	fa01 f303 	lsl.w	r3, r1, r3
 80035e6:	431a      	orrs	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80035ec:	bf00      	nop
 80035ee:	371c      	adds	r7, #28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a0f      	ldr	r2, [pc, #60]	; (8003644 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d10a      	bne.n	8003622 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003618:	431a      	orrs	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003620:	e00a      	b.n	8003638 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362e:	43db      	mvns	r3, r3
 8003630:	401a      	ands	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	407f0000 	.word	0x407f0000

08003648 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 031f 	and.w	r3, r3, #31
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003674:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6093      	str	r3, [r2, #8]
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800369c:	d101      	bne.n	80036a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80036c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036ec:	d101      	bne.n	80036f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003710:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003714:	f043 0201 	orr.w	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <LL_ADC_IsEnabled+0x18>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <LL_ADC_IsEnabled+0x1a>
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800375e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003762:	f043 0204 	orr.w	r2, r3, #4
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b04      	cmp	r3, #4
 8003788:	d101      	bne.n	800378e <LL_ADC_REG_IsConversionOngoing+0x18>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d101      	bne.n	80037b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b089      	sub	sp, #36	; 0x24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e1af      	b.n	8003b3e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d109      	bne.n	8003800 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7fd f84f 	bl	8000890 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff ff3f 	bl	8003688 <LL_ADC_IsDeepPowerDownEnabled>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d004      	beq.n	800381a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff ff25 	bl	8003664 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff ff5a 	bl	80036d8 <LL_ADC_IsInternalRegulatorEnabled>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d115      	bne.n	8003856 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff ff3e 	bl	80036b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003834:	4b9f      	ldr	r3, [pc, #636]	; (8003ab4 <HAL_ADC_Init+0x2f0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	099b      	lsrs	r3, r3, #6
 800383a:	4a9f      	ldr	r2, [pc, #636]	; (8003ab8 <HAL_ADC_Init+0x2f4>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	099b      	lsrs	r3, r3, #6
 8003842:	3301      	adds	r3, #1
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003848:	e002      	b.n	8003850 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	3b01      	subs	r3, #1
 800384e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f9      	bne.n	800384a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff ff3c 	bl	80036d8 <LL_ADC_IsInternalRegulatorEnabled>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10d      	bne.n	8003882 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386a:	f043 0210 	orr.w	r2, r3, #16
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003876:	f043 0201 	orr.w	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff ff75 	bl	8003776 <LL_ADC_REG_IsConversionOngoing>
 800388c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	2b00      	cmp	r3, #0
 8003898:	f040 8148 	bne.w	8003b2c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f040 8144 	bne.w	8003b2c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80038ac:	f043 0202 	orr.w	r2, r3, #2
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff ff35 	bl	8003728 <LL_ADC_IsEnabled>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d141      	bne.n	8003948 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038cc:	d004      	beq.n	80038d8 <HAL_ADC_Init+0x114>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a7a      	ldr	r2, [pc, #488]	; (8003abc <HAL_ADC_Init+0x2f8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d10f      	bne.n	80038f8 <HAL_ADC_Init+0x134>
 80038d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80038dc:	f7ff ff24 	bl	8003728 <LL_ADC_IsEnabled>
 80038e0:	4604      	mov	r4, r0
 80038e2:	4876      	ldr	r0, [pc, #472]	; (8003abc <HAL_ADC_Init+0x2f8>)
 80038e4:	f7ff ff20 	bl	8003728 <LL_ADC_IsEnabled>
 80038e8:	4603      	mov	r3, r0
 80038ea:	4323      	orrs	r3, r4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	e012      	b.n	800391e <HAL_ADC_Init+0x15a>
 80038f8:	4871      	ldr	r0, [pc, #452]	; (8003ac0 <HAL_ADC_Init+0x2fc>)
 80038fa:	f7ff ff15 	bl	8003728 <LL_ADC_IsEnabled>
 80038fe:	4604      	mov	r4, r0
 8003900:	4870      	ldr	r0, [pc, #448]	; (8003ac4 <HAL_ADC_Init+0x300>)
 8003902:	f7ff ff11 	bl	8003728 <LL_ADC_IsEnabled>
 8003906:	4603      	mov	r3, r0
 8003908:	431c      	orrs	r4, r3
 800390a:	486f      	ldr	r0, [pc, #444]	; (8003ac8 <HAL_ADC_Init+0x304>)
 800390c:	f7ff ff0c 	bl	8003728 <LL_ADC_IsEnabled>
 8003910:	4603      	mov	r3, r0
 8003912:	4323      	orrs	r3, r4
 8003914:	2b00      	cmp	r3, #0
 8003916:	bf0c      	ite	eq
 8003918:	2301      	moveq	r3, #1
 800391a:	2300      	movne	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d012      	beq.n	8003948 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800392a:	d004      	beq.n	8003936 <HAL_ADC_Init+0x172>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a62      	ldr	r2, [pc, #392]	; (8003abc <HAL_ADC_Init+0x2f8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d101      	bne.n	800393a <HAL_ADC_Init+0x176>
 8003936:	4a65      	ldr	r2, [pc, #404]	; (8003acc <HAL_ADC_Init+0x308>)
 8003938:	e000      	b.n	800393c <HAL_ADC_Init+0x178>
 800393a:	4a65      	ldr	r2, [pc, #404]	; (8003ad0 <HAL_ADC_Init+0x30c>)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4619      	mov	r1, r3
 8003942:	4610      	mov	r0, r2
 8003944:	f7ff fd1c 	bl	8003380 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	7f5b      	ldrb	r3, [r3, #29]
 800394c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003952:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003958:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800395e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003966:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003972:	2b01      	cmp	r3, #1
 8003974:	d106      	bne.n	8003984 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397a:	3b01      	subs	r3, #1
 800397c:	045b      	lsls	r3, r3, #17
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d009      	beq.n	80039a0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4313      	orrs	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	4b4b      	ldr	r3, [pc, #300]	; (8003ad4 <HAL_ADC_Init+0x310>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	69b9      	ldr	r1, [r7, #24]
 80039b0:	430b      	orrs	r3, r1
 80039b2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff fed1 	bl	8003776 <LL_ADC_REG_IsConversionOngoing>
 80039d4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fede 	bl	800379c <LL_ADC_INJ_IsConversionOngoing>
 80039e0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d17f      	bne.n	8003ae8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d17c      	bne.n	8003ae8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80039f2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039fa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a0a:	f023 0302 	bic.w	r3, r3, #2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	69b9      	ldr	r1, [r7, #24]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d017      	beq.n	8003a50 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a2e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003a38:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6911      	ldr	r1, [r2, #16]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003a4e:	e013      	b.n	8003a78 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a74:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d12a      	bne.n	8003ad8 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003a8c:	f023 0304 	bic.w	r3, r3, #4
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a98:	4311      	orrs	r1, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a9e:	4311      	orrs	r1, r2
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0201 	orr.w	r2, r2, #1
 8003ab0:	611a      	str	r2, [r3, #16]
 8003ab2:	e019      	b.n	8003ae8 <HAL_ADC_Init+0x324>
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	053e2d63 	.word	0x053e2d63
 8003abc:	50000100 	.word	0x50000100
 8003ac0:	50000400 	.word	0x50000400
 8003ac4:	50000500 	.word	0x50000500
 8003ac8:	50000600 	.word	0x50000600
 8003acc:	50000300 	.word	0x50000300
 8003ad0:	50000700 	.word	0x50000700
 8003ad4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d10c      	bne.n	8003b0a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	f023 010f 	bic.w	r1, r3, #15
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	1e5a      	subs	r2, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
 8003b08:	e007      	b.n	8003b1a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 020f 	bic.w	r2, r2, #15
 8003b18:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	f023 0303 	bic.w	r3, r3, #3
 8003b22:	f043 0201 	orr.w	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b2a:	e007      	b.n	8003b3c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b30:	f043 0210 	orr.w	r2, r3, #16
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3724      	adds	r7, #36	; 0x24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd90      	pop	{r4, r7, pc}
 8003b46:	bf00      	nop

08003b48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b5c:	d004      	beq.n	8003b68 <HAL_ADC_Start_DMA+0x20>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a5a      	ldr	r2, [pc, #360]	; (8003ccc <HAL_ADC_Start_DMA+0x184>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d101      	bne.n	8003b6c <HAL_ADC_Start_DMA+0x24>
 8003b68:	4b59      	ldr	r3, [pc, #356]	; (8003cd0 <HAL_ADC_Start_DMA+0x188>)
 8003b6a:	e000      	b.n	8003b6e <HAL_ADC_Start_DMA+0x26>
 8003b6c:	4b59      	ldr	r3, [pc, #356]	; (8003cd4 <HAL_ADC_Start_DMA+0x18c>)
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fd6a 	bl	8003648 <LL_ADC_GetMultimode>
 8003b74:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fdfb 	bl	8003776 <LL_ADC_REG_IsConversionOngoing>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f040 809b 	bne.w	8003cbe <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_ADC_Start_DMA+0x4e>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e096      	b.n	8003cc4 <HAL_ADC_Start_DMA+0x17c>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a4d      	ldr	r2, [pc, #308]	; (8003cd8 <HAL_ADC_Start_DMA+0x190>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d008      	beq.n	8003bba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b05      	cmp	r3, #5
 8003bb2:	d002      	beq.n	8003bba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b09      	cmp	r3, #9
 8003bb8:	d17a      	bne.n	8003cb0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fcf6 	bl	80045ac <ADC_Enable>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d16d      	bne.n	8003ca6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a3a      	ldr	r2, [pc, #232]	; (8003ccc <HAL_ADC_Start_DMA+0x184>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d009      	beq.n	8003bfc <HAL_ADC_Start_DMA+0xb4>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a3b      	ldr	r2, [pc, #236]	; (8003cdc <HAL_ADC_Start_DMA+0x194>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d002      	beq.n	8003bf8 <HAL_ADC_Start_DMA+0xb0>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	e003      	b.n	8003c00 <HAL_ADC_Start_DMA+0xb8>
 8003bf8:	4b39      	ldr	r3, [pc, #228]	; (8003ce0 <HAL_ADC_Start_DMA+0x198>)
 8003bfa:	e001      	b.n	8003c00 <HAL_ADC_Start_DMA+0xb8>
 8003bfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d002      	beq.n	8003c0e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d105      	bne.n	8003c1a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d006      	beq.n	8003c34 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2a:	f023 0206 	bic.w	r2, r3, #6
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	661a      	str	r2, [r3, #96]	; 0x60
 8003c32:	e002      	b.n	8003c3a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	4a29      	ldr	r2, [pc, #164]	; (8003ce4 <HAL_ADC_Start_DMA+0x19c>)
 8003c40:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c46:	4a28      	ldr	r2, [pc, #160]	; (8003ce8 <HAL_ADC_Start_DMA+0x1a0>)
 8003c48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4e:	4a27      	ldr	r2, [pc, #156]	; (8003cec <HAL_ADC_Start_DMA+0x1a4>)
 8003c50:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	221c      	movs	r2, #28
 8003c58:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0210 	orr.w	r2, r2, #16
 8003c70:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f042 0201 	orr.w	r2, r2, #1
 8003c80:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3340      	adds	r3, #64	; 0x40
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f000 ff39 	bl	8004b08 <HAL_DMA_Start_IT>
 8003c96:	4603      	mov	r3, r0
 8003c98:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff fd55 	bl	800374e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003ca4:	e00d      	b.n	8003cc2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003cae:	e008      	b.n	8003cc2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003cbc:	e001      	b.n	8003cc2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	50000100 	.word	0x50000100
 8003cd0:	50000300 	.word	0x50000300
 8003cd4:	50000700 	.word	0x50000700
 8003cd8:	50000600 	.word	0x50000600
 8003cdc:	50000500 	.word	0x50000500
 8003ce0:	50000400 	.word	0x50000400
 8003ce4:	08004671 	.word	0x08004671
 8003ce8:	08004749 	.word	0x08004749
 8003cec:	08004765 	.word	0x08004765

08003cf0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b0b6      	sub	sp, #216	; 0xd8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d102      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x24>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	f000 bc13 	b.w	8004576 <HAL_ADC_ConfigChannel+0x84a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fd0a 	bl	8003776 <LL_ADC_REG_IsConversionOngoing>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f040 83f3 	bne.w	8004550 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6859      	ldr	r1, [r3, #4]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	f7ff fbe7 	bl	800354a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fcf8 	bl	8003776 <LL_ADC_REG_IsConversionOngoing>
 8003d86:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fd04 	bl	800379c <LL_ADC_INJ_IsConversionOngoing>
 8003d94:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f040 81d9 	bne.w	8004154 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003da2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f040 81d4 	bne.w	8004154 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003db4:	d10f      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	f7ff fbee 	bl	80035a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fb95 	bl	80034fe <LL_ADC_SetSamplingTimeCommonConfig>
 8003dd4:	e00e      	b.n	8003df4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	6819      	ldr	r1, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	461a      	mov	r2, r3
 8003de4:	f7ff fbdd 	bl	80035a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2100      	movs	r1, #0
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fb85 	bl	80034fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	08db      	lsrs	r3, r3, #3
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d022      	beq.n	8003e5c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6919      	ldr	r1, [r3, #16]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e26:	f7ff fadf 	bl	80033e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6919      	ldr	r1, [r3, #16]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	461a      	mov	r2, r3
 8003e38:	f7ff fb2b 	bl	8003492 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6919      	ldr	r1, [r3, #16]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	7f1b      	ldrb	r3, [r3, #28]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d102      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x126>
 8003e4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e50:	e000      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x128>
 8003e52:	2300      	movs	r3, #0
 8003e54:	461a      	mov	r2, r3
 8003e56:	f7ff fb37 	bl	80034c8 <LL_ADC_SetOffsetSaturation>
 8003e5a:	e17b      	b.n	8004154 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2100      	movs	r1, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff fae4 	bl	8003430 <LL_ADC_GetOffsetChannel>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x15c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff fad9 	bl	8003430 <LL_ADC_GetOffsetChannel>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	0e9b      	lsrs	r3, r3, #26
 8003e82:	f003 021f 	and.w	r2, r3, #31
 8003e86:	e01e      	b.n	8003ec6 <HAL_ADC_ConfigChannel+0x19a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff face 	bl	8003430 <LL_ADC_GetOffsetChannel>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e9e:	fa93 f3a3 	rbit	r3, r3
 8003ea2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ea6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003eaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003eae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003eb6:	2320      	movs	r3, #32
 8003eb8:	e004      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003eba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d105      	bne.n	8003ede <HAL_ADC_ConfigChannel+0x1b2>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	0e9b      	lsrs	r3, r3, #26
 8003ed8:	f003 031f 	and.w	r3, r3, #31
 8003edc:	e018      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x1e4>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003eea:	fa93 f3a3 	rbit	r3, r3
 8003eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ef6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003efa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003f02:	2320      	movs	r3, #32
 8003f04:	e004      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003f06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d106      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff fa9d 	bl	800345c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2101      	movs	r1, #1
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fa81 	bl	8003430 <LL_ADC_GetOffsetChannel>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x222>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fa76 	bl	8003430 <LL_ADC_GetOffsetChannel>
 8003f44:	4603      	mov	r3, r0
 8003f46:	0e9b      	lsrs	r3, r3, #26
 8003f48:	f003 021f 	and.w	r2, r3, #31
 8003f4c:	e01e      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x260>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2101      	movs	r1, #1
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff fa6b 	bl	8003430 <LL_ADC_GetOffsetChannel>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f64:	fa93 f3a3 	rbit	r3, r3
 8003f68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003f6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003f74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003f7c:	2320      	movs	r3, #32
 8003f7e:	e004      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003f80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f84:	fab3 f383 	clz	r3, r3
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d105      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x278>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	0e9b      	lsrs	r3, r3, #26
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	e018      	b.n	8003fd6 <HAL_ADC_ConfigChannel+0x2aa>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fb0:	fa93 f3a3 	rbit	r3, r3
 8003fb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003fb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003fbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003fc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003fc8:	2320      	movs	r3, #32
 8003fca:	e004      	b.n	8003fd6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fd0:	fab3 f383 	clz	r3, r3
 8003fd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d106      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fa3a 	bl	800345c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2102      	movs	r1, #2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff fa1e 	bl	8003430 <LL_ADC_GetOffsetChannel>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x2e8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2102      	movs	r1, #2
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fa13 	bl	8003430 <LL_ADC_GetOffsetChannel>
 800400a:	4603      	mov	r3, r0
 800400c:	0e9b      	lsrs	r3, r3, #26
 800400e:	f003 021f 	and.w	r2, r3, #31
 8004012:	e01e      	b.n	8004052 <HAL_ADC_ConfigChannel+0x326>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2102      	movs	r1, #2
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff fa08 	bl	8003430 <LL_ADC_GetOffsetChannel>
 8004020:	4603      	mov	r3, r0
 8004022:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800402a:	fa93 f3a3 	rbit	r3, r3
 800402e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004032:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800403a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004042:	2320      	movs	r3, #32
 8004044:	e004      	b.n	8004050 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004046:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800404a:	fab3 f383 	clz	r3, r3
 800404e:	b2db      	uxtb	r3, r3
 8004050:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405a:	2b00      	cmp	r3, #0
 800405c:	d105      	bne.n	800406a <HAL_ADC_ConfigChannel+0x33e>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	0e9b      	lsrs	r3, r3, #26
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	e016      	b.n	8004098 <HAL_ADC_ConfigChannel+0x36c>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004072:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004076:	fa93 f3a3 	rbit	r3, r3
 800407a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800407c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800407e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004082:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800408a:	2320      	movs	r3, #32
 800408c:	e004      	b.n	8004098 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800408e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004092:	fab3 f383 	clz	r3, r3
 8004096:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004098:	429a      	cmp	r2, r3
 800409a:	d106      	bne.n	80040aa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2200      	movs	r2, #0
 80040a2:	2102      	movs	r1, #2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff f9d9 	bl	800345c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2103      	movs	r1, #3
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff f9bd 	bl	8003430 <LL_ADC_GetOffsetChannel>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <HAL_ADC_ConfigChannel+0x3aa>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2103      	movs	r1, #3
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff f9b2 	bl	8003430 <LL_ADC_GetOffsetChannel>
 80040cc:	4603      	mov	r3, r0
 80040ce:	0e9b      	lsrs	r3, r3, #26
 80040d0:	f003 021f 	and.w	r2, r3, #31
 80040d4:	e017      	b.n	8004106 <HAL_ADC_ConfigChannel+0x3da>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2103      	movs	r1, #3
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff f9a7 	bl	8003430 <LL_ADC_GetOffsetChannel>
 80040e2:	4603      	mov	r3, r0
 80040e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e8:	fa93 f3a3 	rbit	r3, r3
 80040ec:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80040ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040f0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80040f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80040f8:	2320      	movs	r3, #32
 80040fa:	e003      	b.n	8004104 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80040fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040fe:	fab3 f383 	clz	r3, r3
 8004102:	b2db      	uxtb	r3, r3
 8004104:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410e:	2b00      	cmp	r3, #0
 8004110:	d105      	bne.n	800411e <HAL_ADC_ConfigChannel+0x3f2>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	0e9b      	lsrs	r3, r3, #26
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	e011      	b.n	8004142 <HAL_ADC_ConfigChannel+0x416>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004126:	fa93 f3a3 	rbit	r3, r3
 800412a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800412c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800412e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004136:	2320      	movs	r3, #32
 8004138:	e003      	b.n	8004142 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800413a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800413c:	fab3 f383 	clz	r3, r3
 8004140:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004142:	429a      	cmp	r2, r3
 8004144:	d106      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2200      	movs	r2, #0
 800414c:	2103      	movs	r1, #3
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff f984 	bl	800345c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fae5 	bl	8003728 <LL_ADC_IsEnabled>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	f040 813d 	bne.w	80043e0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6819      	ldr	r1, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	461a      	mov	r2, r3
 8004174:	f7ff fa40 	bl	80035f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4aa2      	ldr	r2, [pc, #648]	; (8004408 <HAL_ADC_ConfigChannel+0x6dc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	f040 812e 	bne.w	80043e0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10b      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x480>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	0e9b      	lsrs	r3, r3, #26
 800419a:	3301      	adds	r3, #1
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	2b09      	cmp	r3, #9
 80041a2:	bf94      	ite	ls
 80041a4:	2301      	movls	r3, #1
 80041a6:	2300      	movhi	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	e019      	b.n	80041e0 <HAL_ADC_ConfigChannel+0x4b4>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80041ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80041be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80041c4:	2320      	movs	r3, #32
 80041c6:	e003      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80041c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	3301      	adds	r3, #1
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2b09      	cmp	r3, #9
 80041d8:	bf94      	ite	ls
 80041da:	2301      	movls	r3, #1
 80041dc:	2300      	movhi	r3, #0
 80041de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d079      	beq.n	80042d8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d107      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x4d4>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	0e9b      	lsrs	r3, r3, #26
 80041f6:	3301      	adds	r3, #1
 80041f8:	069b      	lsls	r3, r3, #26
 80041fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041fe:	e015      	b.n	800422c <HAL_ADC_ConfigChannel+0x500>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004208:	fa93 f3a3 	rbit	r3, r3
 800420c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800420e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004210:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004218:	2320      	movs	r3, #32
 800421a:	e003      	b.n	8004224 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800421c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800421e:	fab3 f383 	clz	r3, r3
 8004222:	b2db      	uxtb	r3, r3
 8004224:	3301      	adds	r3, #1
 8004226:	069b      	lsls	r3, r3, #26
 8004228:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004234:	2b00      	cmp	r3, #0
 8004236:	d109      	bne.n	800424c <HAL_ADC_ConfigChannel+0x520>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0e9b      	lsrs	r3, r3, #26
 800423e:	3301      	adds	r3, #1
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2101      	movs	r1, #1
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	e017      	b.n	800427c <HAL_ADC_ConfigChannel+0x550>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004254:	fa93 f3a3 	rbit	r3, r3
 8004258:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800425a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800425c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800425e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004264:	2320      	movs	r3, #32
 8004266:	e003      	b.n	8004270 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800426a:	fab3 f383 	clz	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	3301      	adds	r3, #1
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	2101      	movs	r1, #1
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	ea42 0103 	orr.w	r1, r2, r3
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10a      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x576>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	0e9b      	lsrs	r3, r3, #26
 8004292:	3301      	adds	r3, #1
 8004294:	f003 021f 	and.w	r2, r3, #31
 8004298:	4613      	mov	r3, r2
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	4413      	add	r3, r2
 800429e:	051b      	lsls	r3, r3, #20
 80042a0:	e018      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x5a8>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042aa:	fa93 f3a3 	rbit	r3, r3
 80042ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80042b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80042b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80042ba:	2320      	movs	r3, #32
 80042bc:	e003      	b.n	80042c6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80042be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c0:	fab3 f383 	clz	r3, r3
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	3301      	adds	r3, #1
 80042c8:	f003 021f 	and.w	r2, r3, #31
 80042cc:	4613      	mov	r3, r2
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	4413      	add	r3, r2
 80042d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042d4:	430b      	orrs	r3, r1
 80042d6:	e07e      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d107      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x5c8>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	0e9b      	lsrs	r3, r3, #26
 80042ea:	3301      	adds	r3, #1
 80042ec:	069b      	lsls	r3, r3, #26
 80042ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042f2:	e015      	b.n	8004320 <HAL_ADC_ConfigChannel+0x5f4>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800430c:	2320      	movs	r3, #32
 800430e:	e003      	b.n	8004318 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	3301      	adds	r3, #1
 800431a:	069b      	lsls	r3, r3, #26
 800431c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004328:	2b00      	cmp	r3, #0
 800432a:	d109      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x614>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	0e9b      	lsrs	r3, r3, #26
 8004332:	3301      	adds	r3, #1
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	2101      	movs	r1, #1
 800433a:	fa01 f303 	lsl.w	r3, r1, r3
 800433e:	e017      	b.n	8004370 <HAL_ADC_ConfigChannel+0x644>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	fa93 f3a3 	rbit	r3, r3
 800434c:	61fb      	str	r3, [r7, #28]
  return result;
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004358:	2320      	movs	r3, #32
 800435a:	e003      	b.n	8004364 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	fab3 f383 	clz	r3, r3
 8004362:	b2db      	uxtb	r3, r3
 8004364:	3301      	adds	r3, #1
 8004366:	f003 031f 	and.w	r3, r3, #31
 800436a:	2101      	movs	r1, #1
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	ea42 0103 	orr.w	r1, r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10d      	bne.n	800439c <HAL_ADC_ConfigChannel+0x670>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	0e9b      	lsrs	r3, r3, #26
 8004386:	3301      	adds	r3, #1
 8004388:	f003 021f 	and.w	r2, r3, #31
 800438c:	4613      	mov	r3, r2
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4413      	add	r3, r2
 8004392:	3b1e      	subs	r3, #30
 8004394:	051b      	lsls	r3, r3, #20
 8004396:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800439a:	e01b      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x6a8>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	613b      	str	r3, [r7, #16]
  return result;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80043b4:	2320      	movs	r3, #32
 80043b6:	e003      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	fab3 f383 	clz	r3, r3
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	3301      	adds	r3, #1
 80043c2:	f003 021f 	and.w	r2, r3, #31
 80043c6:	4613      	mov	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4413      	add	r3, r2
 80043cc:	3b1e      	subs	r3, #30
 80043ce:	051b      	lsls	r3, r3, #20
 80043d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043d4:	430b      	orrs	r3, r1
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	6892      	ldr	r2, [r2, #8]
 80043da:	4619      	mov	r1, r3
 80043dc:	f7ff f8e1 	bl	80035a2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4b09      	ldr	r3, [pc, #36]	; (800440c <HAL_ADC_ConfigChannel+0x6e0>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80be 	beq.w	800456a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043f6:	d004      	beq.n	8004402 <HAL_ADC_ConfigChannel+0x6d6>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a04      	ldr	r2, [pc, #16]	; (8004410 <HAL_ADC_ConfigChannel+0x6e4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d10a      	bne.n	8004418 <HAL_ADC_ConfigChannel+0x6ec>
 8004402:	4b04      	ldr	r3, [pc, #16]	; (8004414 <HAL_ADC_ConfigChannel+0x6e8>)
 8004404:	e009      	b.n	800441a <HAL_ADC_ConfigChannel+0x6ee>
 8004406:	bf00      	nop
 8004408:	407f0000 	.word	0x407f0000
 800440c:	80080000 	.word	0x80080000
 8004410:	50000100 	.word	0x50000100
 8004414:	50000300 	.word	0x50000300
 8004418:	4b59      	ldr	r3, [pc, #356]	; (8004580 <HAL_ADC_ConfigChannel+0x854>)
 800441a:	4618      	mov	r0, r3
 800441c:	f7fe ffd6 	bl	80033cc <LL_ADC_GetCommonPathInternalCh>
 8004420:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a56      	ldr	r2, [pc, #344]	; (8004584 <HAL_ADC_ConfigChannel+0x858>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d004      	beq.n	8004438 <HAL_ADC_ConfigChannel+0x70c>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a55      	ldr	r2, [pc, #340]	; (8004588 <HAL_ADC_ConfigChannel+0x85c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d13a      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004438:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800443c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d134      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800444c:	d005      	beq.n	800445a <HAL_ADC_ConfigChannel+0x72e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a4e      	ldr	r2, [pc, #312]	; (800458c <HAL_ADC_ConfigChannel+0x860>)
 8004454:	4293      	cmp	r3, r2
 8004456:	f040 8085 	bne.w	8004564 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004462:	d004      	beq.n	800446e <HAL_ADC_ConfigChannel+0x742>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a49      	ldr	r2, [pc, #292]	; (8004590 <HAL_ADC_ConfigChannel+0x864>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d101      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x746>
 800446e:	4a49      	ldr	r2, [pc, #292]	; (8004594 <HAL_ADC_ConfigChannel+0x868>)
 8004470:	e000      	b.n	8004474 <HAL_ADC_ConfigChannel+0x748>
 8004472:	4a43      	ldr	r2, [pc, #268]	; (8004580 <HAL_ADC_ConfigChannel+0x854>)
 8004474:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004478:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800447c:	4619      	mov	r1, r3
 800447e:	4610      	mov	r0, r2
 8004480:	f7fe ff91 	bl	80033a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004484:	4b44      	ldr	r3, [pc, #272]	; (8004598 <HAL_ADC_ConfigChannel+0x86c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	099b      	lsrs	r3, r3, #6
 800448a:	4a44      	ldr	r2, [pc, #272]	; (800459c <HAL_ADC_ConfigChannel+0x870>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	099b      	lsrs	r3, r3, #6
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	4613      	mov	r3, r2
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800449e:	e002      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f9      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044ac:	e05a      	b.n	8004564 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a3b      	ldr	r2, [pc, #236]	; (80045a0 <HAL_ADC_ConfigChannel+0x874>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d125      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x7d8>
 80044b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d11f      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a31      	ldr	r2, [pc, #196]	; (8004590 <HAL_ADC_ConfigChannel+0x864>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d104      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x7ac>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a34      	ldr	r2, [pc, #208]	; (80045a4 <HAL_ADC_ConfigChannel+0x878>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d047      	beq.n	8004568 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044e0:	d004      	beq.n	80044ec <HAL_ADC_ConfigChannel+0x7c0>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a2a      	ldr	r2, [pc, #168]	; (8004590 <HAL_ADC_ConfigChannel+0x864>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x7c4>
 80044ec:	4a29      	ldr	r2, [pc, #164]	; (8004594 <HAL_ADC_ConfigChannel+0x868>)
 80044ee:	e000      	b.n	80044f2 <HAL_ADC_ConfigChannel+0x7c6>
 80044f0:	4a23      	ldr	r2, [pc, #140]	; (8004580 <HAL_ADC_ConfigChannel+0x854>)
 80044f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044fa:	4619      	mov	r1, r3
 80044fc:	4610      	mov	r0, r2
 80044fe:	f7fe ff52 	bl	80033a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004502:	e031      	b.n	8004568 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a27      	ldr	r2, [pc, #156]	; (80045a8 <HAL_ADC_ConfigChannel+0x87c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d12d      	bne.n	800456a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800450e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d127      	bne.n	800456a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1c      	ldr	r2, [pc, #112]	; (8004590 <HAL_ADC_ConfigChannel+0x864>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d022      	beq.n	800456a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800452c:	d004      	beq.n	8004538 <HAL_ADC_ConfigChannel+0x80c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a17      	ldr	r2, [pc, #92]	; (8004590 <HAL_ADC_ConfigChannel+0x864>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d101      	bne.n	800453c <HAL_ADC_ConfigChannel+0x810>
 8004538:	4a16      	ldr	r2, [pc, #88]	; (8004594 <HAL_ADC_ConfigChannel+0x868>)
 800453a:	e000      	b.n	800453e <HAL_ADC_ConfigChannel+0x812>
 800453c:	4a10      	ldr	r2, [pc, #64]	; (8004580 <HAL_ADC_ConfigChannel+0x854>)
 800453e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004542:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004546:	4619      	mov	r1, r3
 8004548:	4610      	mov	r0, r2
 800454a:	f7fe ff2c 	bl	80033a6 <LL_ADC_SetCommonPathInternalCh>
 800454e:	e00c      	b.n	800456a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004554:	f043 0220 	orr.w	r2, r3, #32
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004562:	e002      	b.n	800456a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004564:	bf00      	nop
 8004566:	e000      	b.n	800456a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004568:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004572:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004576:	4618      	mov	r0, r3
 8004578:	37d8      	adds	r7, #216	; 0xd8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	50000700 	.word	0x50000700
 8004584:	c3210000 	.word	0xc3210000
 8004588:	90c00010 	.word	0x90c00010
 800458c:	50000600 	.word	0x50000600
 8004590:	50000100 	.word	0x50000100
 8004594:	50000300 	.word	0x50000300
 8004598:	20000000 	.word	0x20000000
 800459c:	053e2d63 	.word	0x053e2d63
 80045a0:	c7520000 	.word	0xc7520000
 80045a4:	50000500 	.word	0x50000500
 80045a8:	cb840000 	.word	0xcb840000

080045ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff f8b5 	bl	8003728 <LL_ADC_IsEnabled>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d14d      	bne.n	8004660 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	4b28      	ldr	r3, [pc, #160]	; (800466c <ADC_Enable+0xc0>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00d      	beq.n	80045ee <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d6:	f043 0210 	orr.w	r2, r3, #16
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e2:	f043 0201 	orr.w	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e039      	b.n	8004662 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff f884 	bl	8003700 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80045f8:	f7fe fe94 	bl	8003324 <HAL_GetTick>
 80045fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045fe:	e028      	b.n	8004652 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff f88f 	bl	8003728 <LL_ADC_IsEnabled>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d104      	bne.n	800461a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff f873 	bl	8003700 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800461a:	f7fe fe83 	bl	8003324 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d914      	bls.n	8004652 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b01      	cmp	r3, #1
 8004634:	d00d      	beq.n	8004652 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463a:	f043 0210 	orr.w	r2, r3, #16
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004646:	f043 0201 	orr.w	r2, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e007      	b.n	8004662 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b01      	cmp	r3, #1
 800465e:	d1cf      	bne.n	8004600 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	8000003f 	.word	0x8000003f

08004670 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004682:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004686:	2b00      	cmp	r3, #0
 8004688:	d14b      	bne.n	8004722 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d021      	beq.n	80046e8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fe ff3b 	bl	8003524 <LL_ADC_REG_IsTriggerSourceSWStart>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d032      	beq.n	800471a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d12b      	bne.n	800471a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d11f      	bne.n	800471a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046de:	f043 0201 	orr.w	r2, r3, #1
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80046e6:	e018      	b.n	800471a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d111      	bne.n	800471a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d105      	bne.n	800471a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004712:	f043 0201 	orr.w	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f7ff fae8 	bl	8003cf0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004720:	e00e      	b.n	8004740 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004726:	f003 0310 	and.w	r3, r3, #16
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f7ff faf2 	bl	8003d18 <HAL_ADC_ErrorCallback>
}
 8004734:	e004      	b.n	8004740 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	4798      	blx	r3
}
 8004740:	bf00      	nop
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f7ff fad4 	bl	8003d04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800475c:	bf00      	nop
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004776:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004782:	f043 0204 	orr.w	r2, r3, #4
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f7ff fac4 	bl	8003d18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004790:	bf00      	nop
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047a8:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <__NVIC_SetPriorityGrouping+0x44>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047b4:	4013      	ands	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047ca:	4a04      	ldr	r2, [pc, #16]	; (80047dc <__NVIC_SetPriorityGrouping+0x44>)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	60d3      	str	r3, [r2, #12]
}
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	e000ed00 	.word	0xe000ed00

080047e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047e4:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <__NVIC_GetPriorityGrouping+0x18>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	0a1b      	lsrs	r3, r3, #8
 80047ea:	f003 0307 	and.w	r3, r3, #7
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	e000ed00 	.word	0xe000ed00

080047fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480a:	2b00      	cmp	r3, #0
 800480c:	db0b      	blt.n	8004826 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800480e:	79fb      	ldrb	r3, [r7, #7]
 8004810:	f003 021f 	and.w	r2, r3, #31
 8004814:	4907      	ldr	r1, [pc, #28]	; (8004834 <__NVIC_EnableIRQ+0x38>)
 8004816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	2001      	movs	r0, #1
 800481e:	fa00 f202 	lsl.w	r2, r0, r2
 8004822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	e000e100 	.word	0xe000e100

08004838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	4603      	mov	r3, r0
 8004840:	6039      	str	r1, [r7, #0]
 8004842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004848:	2b00      	cmp	r3, #0
 800484a:	db0a      	blt.n	8004862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	b2da      	uxtb	r2, r3
 8004850:	490c      	ldr	r1, [pc, #48]	; (8004884 <__NVIC_SetPriority+0x4c>)
 8004852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004856:	0112      	lsls	r2, r2, #4
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	440b      	add	r3, r1
 800485c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004860:	e00a      	b.n	8004878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	b2da      	uxtb	r2, r3
 8004866:	4908      	ldr	r1, [pc, #32]	; (8004888 <__NVIC_SetPriority+0x50>)
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	3b04      	subs	r3, #4
 8004870:	0112      	lsls	r2, r2, #4
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	440b      	add	r3, r1
 8004876:	761a      	strb	r2, [r3, #24]
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	e000e100 	.word	0xe000e100
 8004888:	e000ed00 	.word	0xe000ed00

0800488c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800488c:	b480      	push	{r7}
 800488e:	b089      	sub	sp, #36	; 0x24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f1c3 0307 	rsb	r3, r3, #7
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	bf28      	it	cs
 80048aa:	2304      	movcs	r3, #4
 80048ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	3304      	adds	r3, #4
 80048b2:	2b06      	cmp	r3, #6
 80048b4:	d902      	bls.n	80048bc <NVIC_EncodePriority+0x30>
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	3b03      	subs	r3, #3
 80048ba:	e000      	b.n	80048be <NVIC_EncodePriority+0x32>
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	43da      	mvns	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	401a      	ands	r2, r3
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	fa01 f303 	lsl.w	r3, r1, r3
 80048de:	43d9      	mvns	r1, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048e4:	4313      	orrs	r3, r2
         );
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3724      	adds	r7, #36	; 0x24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3b01      	subs	r3, #1
 8004900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004904:	d301      	bcc.n	800490a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004906:	2301      	movs	r3, #1
 8004908:	e00f      	b.n	800492a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800490a:	4a0a      	ldr	r2, [pc, #40]	; (8004934 <SysTick_Config+0x40>)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3b01      	subs	r3, #1
 8004910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004912:	210f      	movs	r1, #15
 8004914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004918:	f7ff ff8e 	bl	8004838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800491c:	4b05      	ldr	r3, [pc, #20]	; (8004934 <SysTick_Config+0x40>)
 800491e:	2200      	movs	r2, #0
 8004920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004922:	4b04      	ldr	r3, [pc, #16]	; (8004934 <SysTick_Config+0x40>)
 8004924:	2207      	movs	r2, #7
 8004926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	e000e010 	.word	0xe000e010

08004938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7ff ff29 	bl	8004798 <__NVIC_SetPriorityGrouping>
}
 8004946:	bf00      	nop
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b086      	sub	sp, #24
 8004952:	af00      	add	r7, sp, #0
 8004954:	4603      	mov	r3, r0
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	607a      	str	r2, [r7, #4]
 800495a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800495c:	f7ff ff40 	bl	80047e0 <__NVIC_GetPriorityGrouping>
 8004960:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	6978      	ldr	r0, [r7, #20]
 8004968:	f7ff ff90 	bl	800488c <NVIC_EncodePriority>
 800496c:	4602      	mov	r2, r0
 800496e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004972:	4611      	mov	r1, r2
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff ff5f 	bl	8004838 <__NVIC_SetPriority>
}
 800497a:	bf00      	nop
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	4603      	mov	r3, r0
 800498a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800498c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff ff33 	bl	80047fc <__NVIC_EnableIRQ>
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b082      	sub	sp, #8
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff ffa4 	bl	80048f4 <SysTick_Config>
 80049ac:	4603      	mov	r3, r0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e08d      	b.n	8004ae6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	4b47      	ldr	r3, [pc, #284]	; (8004af0 <HAL_DMA_Init+0x138>)
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d80f      	bhi.n	80049f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	4b45      	ldr	r3, [pc, #276]	; (8004af4 <HAL_DMA_Init+0x13c>)
 80049de:	4413      	add	r3, r2
 80049e0:	4a45      	ldr	r2, [pc, #276]	; (8004af8 <HAL_DMA_Init+0x140>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	091b      	lsrs	r3, r3, #4
 80049e8:	009a      	lsls	r2, r3, #2
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a42      	ldr	r2, [pc, #264]	; (8004afc <HAL_DMA_Init+0x144>)
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40
 80049f4:	e00e      	b.n	8004a14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	4b40      	ldr	r3, [pc, #256]	; (8004b00 <HAL_DMA_Init+0x148>)
 80049fe:	4413      	add	r3, r2
 8004a00:	4a3d      	ldr	r2, [pc, #244]	; (8004af8 <HAL_DMA_Init+0x140>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	091b      	lsrs	r3, r3, #4
 8004a08:	009a      	lsls	r2, r3, #2
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a3c      	ldr	r2, [pc, #240]	; (8004b04 <HAL_DMA_Init+0x14c>)
 8004a12:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f9b6 	bl	8004dd8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a74:	d102      	bne.n	8004a7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a90:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d010      	beq.n	8004abc <HAL_DMA_Init+0x104>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d80c      	bhi.n	8004abc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f9d6 	bl	8004e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	e008      	b.n	8004ace <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40020407 	.word	0x40020407
 8004af4:	bffdfff8 	.word	0xbffdfff8
 8004af8:	cccccccd 	.word	0xcccccccd
 8004afc:	40020000 	.word	0x40020000
 8004b00:	bffdfbf8 	.word	0xbffdfbf8
 8004b04:	40020400 	.word	0x40020400

08004b08 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_DMA_Start_IT+0x20>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e066      	b.n	8004bf6 <HAL_DMA_Start_IT+0xee>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d155      	bne.n	8004be8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0201 	bic.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 f8fb 	bl	8004d5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d008      	beq.n	8004b80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 020e 	orr.w	r2, r2, #14
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	e00f      	b.n	8004ba0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0204 	bic.w	r2, r2, #4
 8004b8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 020a 	orr.w	r2, r2, #10
 8004b9e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bbc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d007      	beq.n	8004bd6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0201 	orr.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	e005      	b.n	8004bf4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b084      	sub	sp, #16
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1a:	f003 031f 	and.w	r3, r3, #31
 8004c1e:	2204      	movs	r2, #4
 8004c20:	409a      	lsls	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d026      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x7a>
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d021      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d107      	bne.n	8004c52 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0204 	bic.w	r2, r2, #4
 8004c50:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	f003 021f 	and.w	r2, r3, #31
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	2104      	movs	r1, #4
 8004c60:	fa01 f202 	lsl.w	r2, r1, r2
 8004c64:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d071      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004c76:	e06c      	b.n	8004d52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7c:	f003 031f 	and.w	r3, r3, #31
 8004c80:	2202      	movs	r2, #2
 8004c82:	409a      	lsls	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4013      	ands	r3, r2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d02e      	beq.n	8004cea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d029      	beq.n	8004cea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0320 	and.w	r3, r3, #32
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10b      	bne.n	8004cbc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 020a 	bic.w	r2, r2, #10
 8004cb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc0:	f003 021f 	and.w	r2, r3, #31
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	2102      	movs	r1, #2
 8004cca:	fa01 f202 	lsl.w	r2, r1, r2
 8004cce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d038      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004ce8:	e033      	b.n	8004d52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	2208      	movs	r2, #8
 8004cf4:	409a      	lsls	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d02a      	beq.n	8004d54 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d025      	beq.n	8004d54 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 020e 	bic.w	r2, r2, #14
 8004d16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1c:	f003 021f 	and.w	r2, r3, #31
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	2101      	movs	r1, #1
 8004d26:	fa01 f202 	lsl.w	r2, r1, r2
 8004d2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d004      	beq.n	8004d54 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d52:	bf00      	nop
 8004d54:	bf00      	nop
}
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d72:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d004      	beq.n	8004d86 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d84:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8a:	f003 021f 	and.w	r2, r3, #31
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	2101      	movs	r1, #1
 8004d94:	fa01 f202 	lsl.w	r2, r1, r2
 8004d98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b10      	cmp	r3, #16
 8004da8:	d108      	bne.n	8004dbc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004dba:	e007      	b.n	8004dcc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	60da      	str	r2, [r3, #12]
}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	4b16      	ldr	r3, [pc, #88]	; (8004e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d802      	bhi.n	8004df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004dec:	4b15      	ldr	r3, [pc, #84]	; (8004e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	e001      	b.n	8004df6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004df2:	4b15      	ldr	r3, [pc, #84]	; (8004e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004df4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	3b08      	subs	r3, #8
 8004e02:	4a12      	ldr	r2, [pc, #72]	; (8004e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	091b      	lsrs	r3, r3, #4
 8004e0a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e10:	089b      	lsrs	r3, r3, #2
 8004e12:	009a      	lsls	r2, r3, #2
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	4413      	add	r3, r2
 8004e18:	461a      	mov	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a0b      	ldr	r2, [pc, #44]	; (8004e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004e22:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 031f 	and.w	r3, r3, #31
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	409a      	lsls	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40020407 	.word	0x40020407
 8004e44:	40020800 	.word	0x40020800
 8004e48:	40020820 	.word	0x40020820
 8004e4c:	cccccccd 	.word	0xcccccccd
 8004e50:	40020880 	.word	0x40020880

08004e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a08      	ldr	r2, [pc, #32]	; (8004e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004e76:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	f003 031f 	and.w	r3, r3, #31
 8004e80:	2201      	movs	r2, #1
 8004e82:	409a      	lsls	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004e88:	bf00      	nop
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	1000823f 	.word	0x1000823f
 8004e98:	40020940 	.word	0x40020940

08004e9c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e147      	b.n	800513e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fd fca2 	bl	800280c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0210 	bic.w	r2, r2, #16
 8004ed6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ed8:	f7fe fa24 	bl	8003324 <HAL_GetTick>
 8004edc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004ede:	e012      	b.n	8004f06 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004ee0:	f7fe fa20 	bl	8003324 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b0a      	cmp	r3, #10
 8004eec:	d90b      	bls.n	8004f06 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef2:	f043 0201 	orr.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2203      	movs	r2, #3
 8004efe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e11b      	b.n	800513e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d0e5      	beq.n	8004ee0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f24:	f7fe f9fe 	bl	8003324 <HAL_GetTick>
 8004f28:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004f2a:	e012      	b.n	8004f52 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004f2c:	f7fe f9fa 	bl	8003324 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b0a      	cmp	r3, #10
 8004f38:	d90b      	bls.n	8004f52 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f3e:	f043 0201 	orr.w	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2203      	movs	r2, #3
 8004f4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e0f5      	b.n	800513e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0e5      	beq.n	8004f2c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0202 	orr.w	r2, r2, #2
 8004f6e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a74      	ldr	r2, [pc, #464]	; (8005148 <HAL_FDCAN_Init+0x2ac>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d103      	bne.n	8004f82 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004f7a:	4a74      	ldr	r2, [pc, #464]	; (800514c <HAL_FDCAN_Init+0x2b0>)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	7c1b      	ldrb	r3, [r3, #16]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d108      	bne.n	8004f9c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699a      	ldr	r2, [r3, #24]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f98:	619a      	str	r2, [r3, #24]
 8004f9a:	e007      	b.n	8004fac <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004faa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	7c5b      	ldrb	r3, [r3, #17]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d108      	bne.n	8004fc6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fc2:	619a      	str	r2, [r3, #24]
 8004fc4:	e007      	b.n	8004fd6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	699a      	ldr	r2, [r3, #24]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fd4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	7c9b      	ldrb	r3, [r3, #18]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d108      	bne.n	8004ff0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	699a      	ldr	r2, [r3, #24]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fec:	619a      	str	r2, [r3, #24]
 8004fee:	e007      	b.n	8005000 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699a      	ldr	r2, [r3, #24]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ffe:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	699a      	ldr	r2, [r3, #24]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005024:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0210 	bic.w	r2, r2, #16
 8005034:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d108      	bne.n	8005050 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699a      	ldr	r2, [r3, #24]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0204 	orr.w	r2, r2, #4
 800504c:	619a      	str	r2, [r3, #24]
 800504e:	e02c      	b.n	80050aa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d028      	beq.n	80050aa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	2b02      	cmp	r3, #2
 800505e:	d01c      	beq.n	800509a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800506e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0210 	orr.w	r2, r2, #16
 800507e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b03      	cmp	r3, #3
 8005086:	d110      	bne.n	80050aa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0220 	orr.w	r2, r2, #32
 8005096:	619a      	str	r2, [r3, #24]
 8005098:	e007      	b.n	80050aa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699a      	ldr	r2, [r3, #24]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0220 	orr.w	r2, r2, #32
 80050a8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050ba:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80050c2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80050d2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050d4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050de:	d115      	bne.n	800510c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	3b01      	subs	r3, #1
 80050ec:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80050ee:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f4:	3b01      	subs	r3, #1
 80050f6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80050f8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	3b01      	subs	r3, #1
 8005102:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005108:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800510a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fbe2 	bl	80058ec <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40006400 	.word	0x40006400
 800514c:	40006500 	.word	0x40006500

08005150 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	d110      	bne.n	8005186 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0201 	bic.w	r2, r2, #1
 800517a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	e006      	b.n	8005194 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800518a:	f043 0204 	orr.w	r2, r3, #4
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
  }
}
 8005194:	4618      	mov	r0, r3
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d12c      	bne.n	8005212 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80051c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d007      	beq.n	80051d8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e023      	b.n	8005220 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fbe8 	bl	80059c4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2101      	movs	r1, #1
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005200:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005204:	2201      	movs	r2, #1
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	409a      	lsls	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	e006      	b.n	8005220 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005216:	f043 0208 	orr.w	r2, r3, #8
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
  }
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005228:	b480      	push	{r7}
 800522a:	b08b      	sub	sp, #44	; 0x2c
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800523c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800523e:	7efb      	ldrb	r3, [r7, #27]
 8005240:	2b02      	cmp	r3, #2
 8005242:	f040 80bc 	bne.w	80053be <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b40      	cmp	r3, #64	; 0x40
 800524a:	d121      	bne.n	8005290 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005254:	f003 030f 	and.w	r3, r3, #15
 8005258:	2b00      	cmp	r3, #0
 800525a:	d107      	bne.n	800526c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005260:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0af      	b.n	80053cc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005274:	0a1b      	lsrs	r3, r3, #8
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	4613      	mov	r3, r2
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	4413      	add	r3, r2
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	440b      	add	r3, r1
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
 800528e:	e020      	b.n	80052d2 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	2b00      	cmp	r3, #0
 800529e:	d107      	bne.n	80052b0 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e08d      	b.n	80053cc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052b8:	0a1b      	lsrs	r3, r3, #8
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80052c4:	69fa      	ldr	r2, [r7, #28]
 80052c6:	4613      	mov	r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	4413      	add	r3, r2
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	440b      	add	r3, r1
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d107      	bne.n	80052f6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	0c9b      	lsrs	r3, r3, #18
 80052ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	e005      	b.n	8005302 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	3304      	adds	r3, #4
 800531e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	b29a      	uxth	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	0e1b      	lsrs	r3, r3, #24
 8005354:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	0fda      	lsrs	r2, r3, #31
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	3304      	adds	r3, #4
 800536a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005370:	2300      	movs	r3, #0
 8005372:	623b      	str	r3, [r7, #32]
 8005374:	e00a      	b.n	800538c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	441a      	add	r2, r3
 800537c:	6839      	ldr	r1, [r7, #0]
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	440b      	add	r3, r1
 8005382:	7812      	ldrb	r2, [r2, #0]
 8005384:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	3301      	adds	r3, #1
 800538a:	623b      	str	r3, [r7, #32]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	0c1b      	lsrs	r3, r3, #16
 8005392:	4a11      	ldr	r2, [pc, #68]	; (80053d8 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8005394:	5cd3      	ldrb	r3, [r2, r3]
 8005396:	461a      	mov	r2, r3
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	4293      	cmp	r3, r2
 800539c:	d3eb      	bcc.n	8005376 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b40      	cmp	r3, #64	; 0x40
 80053a2:	d105      	bne.n	80053b0 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80053ae:	e004      	b.n	80053ba <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	e006      	b.n	80053cc <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c2:	f043 0208 	orr.w	r2, r3, #8
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
  }
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	372c      	adds	r7, #44	; 0x2c
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	080095c0 	.word	0x080095c0

080053dc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80053ee:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80053f0:	7dfb      	ldrb	r3, [r7, #23]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d003      	beq.n	80053fe <HAL_FDCAN_ActivateNotification+0x22>
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	f040 80c8 	bne.w	800558e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005404:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	2b00      	cmp	r3, #0
 800540e:	d004      	beq.n	800541a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d03b      	beq.n	8005492 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d031      	beq.n	8005492 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005434:	2b00      	cmp	r3, #0
 8005436:	d004      	beq.n	8005442 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d027      	beq.n	8005492 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005448:	2b00      	cmp	r3, #0
 800544a:	d004      	beq.n	8005456 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d01d      	beq.n	8005492 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800545c:	2b00      	cmp	r3, #0
 800545e:	d004      	beq.n	800546a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f003 0310 	and.w	r3, r3, #16
 8005466:	2b00      	cmp	r3, #0
 8005468:	d013      	beq.n	8005492 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005470:	2b00      	cmp	r3, #0
 8005472:	d004      	beq.n	800547e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00c      	beq.n	80054a2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d107      	bne.n	80054a2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0201 	orr.w	r2, r2, #1
 80054a0:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d004      	beq.n	80054b6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d13b      	bne.n	800552e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d131      	bne.n	800552e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d004      	beq.n	80054de <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f003 0304 	and.w	r3, r3, #4
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d127      	bne.n	800552e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d004      	beq.n	80054f2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d11d      	bne.n	800552e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d004      	beq.n	8005506 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b00      	cmp	r3, #0
 8005504:	d113      	bne.n	800552e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800550c:	2b00      	cmp	r3, #0
 800550e:	d004      	beq.n	800551a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b00      	cmp	r3, #0
 8005518:	d109      	bne.n	800552e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00c      	beq.n	800553e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0202 	orr.w	r2, r2, #2
 800553c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005544:	2b00      	cmp	r3, #0
 8005546:	d009      	beq.n	800555c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	430a      	orrs	r2, r1
 8005558:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005562:	2b00      	cmp	r3, #0
 8005564:	d009      	beq.n	800557a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	430a      	orrs	r2, r1
 8005576:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	430a      	orrs	r2, r1
 8005588:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	e006      	b.n	800559c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005592:	f043 0202 	orr.w	r2, r3, #2
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
  }
}
 800559c:	4618      	mov	r0, r3
 800559e:	371c      	adds	r7, #28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08a      	sub	sp, #40	; 0x28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c4:	4013      	ands	r3, r2
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055da:	6a3a      	ldr	r2, [r7, #32]
 80055dc:	4013      	ands	r3, r2
 80055de:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055ea:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f2:	69fa      	ldr	r2, [r7, #28]
 80055f4:	4013      	ands	r3, r2
 80055f6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fe:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8005602:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4013      	ands	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005616:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800561a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4013      	ands	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800562e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00d      	beq.n	8005652 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005640:	2b00      	cmp	r3, #0
 8005642:	d006      	beq.n	8005652 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2240      	movs	r2, #64	; 0x40
 800564a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f92e 	bl	80058ae <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01b      	beq.n	8005698 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566a:	2b00      	cmp	r3, #0
 800566c:	d014      	beq.n	8005698 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005676:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4013      	ands	r3, r2
 8005684:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800568e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005690:	6939      	ldr	r1, [r7, #16]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f8ec 	bl	8005870 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80056a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f8b6 	bl	800581a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6a3a      	ldr	r2, [r7, #32]
 80056ba:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80056bc:	6a39      	ldr	r1, [r7, #32]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fd fae8 	bl	8002c94 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80056d2:	69f9      	ldr	r1, [r7, #28]
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f8ab 	bl	8005830 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00e      	beq.n	8005706 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d007      	beq.n	8005706 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056fe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f8a0 	bl	8005846 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01a      	beq.n	800574a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571e:	2b00      	cmp	r3, #0
 8005720:	d013      	beq.n	800574a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800572a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4013      	ands	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2280      	movs	r2, #128	; 0x80
 8005740:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005742:	68f9      	ldr	r1, [r7, #12]
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f888 	bl	800585a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00e      	beq.n	8005776 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d007      	beq.n	8005776 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800576e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f888 	bl	8005886 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00e      	beq.n	80057a2 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d007      	beq.n	80057a2 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800579a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f87c 	bl	800589a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d011      	beq.n	80057d4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80057c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d007      	beq.n	80057ea <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80057e2:	6979      	ldr	r1, [r7, #20]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f876 	bl	80058d6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d009      	beq.n	8005804 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f858 	bl	80058c2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005812:	bf00      	nop
 8005814:	3728      	adds	r7, #40	; 0x28
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80058f4:	4b30      	ldr	r3, [pc, #192]	; (80059b8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80058f6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a2f      	ldr	r2, [pc, #188]	; (80059bc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d103      	bne.n	800590a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005908:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a2c      	ldr	r2, [pc, #176]	; (80059c0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d103      	bne.n	800591c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800591a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800592a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005932:	041a      	lsls	r2, r3, #16
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005950:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	061a      	lsls	r2, r3, #24
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e005      	b.n	800599e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3304      	adds	r3, #4
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d3f3      	bcc.n	8005992 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80059aa:	bf00      	nop
 80059ac:	bf00      	nop
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	4000a400 	.word	0x4000a400
 80059bc:	40006800 	.word	0x40006800
 80059c0:	40006c00 	.word	0x40006c00

080059c4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b089      	sub	sp, #36	; 0x24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10a      	bne.n	80059f0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80059e2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80059ea:	4313      	orrs	r3, r2
 80059ec:	61fb      	str	r3, [r7, #28]
 80059ee:	e00a      	b.n	8005a06 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80059f8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80059fe:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005a00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a04:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005a10:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005a16:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005a1c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005a22:	4313      	orrs	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	4413      	add	r3, r2
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	440b      	add	r3, r1
 8005a36:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	3304      	adds	r3, #4
 8005a42:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005a50:	2300      	movs	r3, #0
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	e020      	b.n	8005a98 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	3303      	adds	r3, #3
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	3302      	adds	r3, #2
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	440b      	add	r3, r1
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005a6e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	3301      	adds	r3, #1
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	440b      	add	r3, r1
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005a7c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	440a      	add	r2, r1
 8005a84:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005a86:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	3304      	adds	r3, #4
 8005a90:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	3304      	adds	r3, #4
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	0c1b      	lsrs	r3, r3, #16
 8005a9e:	4a06      	ldr	r2, [pc, #24]	; (8005ab8 <FDCAN_CopyMessageToRAM+0xf4>)
 8005aa0:	5cd3      	ldrb	r3, [r2, r3]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d3d5      	bcc.n	8005a56 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8005aaa:	bf00      	nop
 8005aac:	bf00      	nop
 8005aae:	3724      	adds	r7, #36	; 0x24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	080095c0 	.word	0x080095c0

08005abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005aca:	e15a      	b.n	8005d82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 814c 	beq.w	8005d7c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f003 0303 	and.w	r3, r3, #3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d005      	beq.n	8005afc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d130      	bne.n	8005b5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	2203      	movs	r2, #3
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	4013      	ands	r3, r2
 8005b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b32:	2201      	movs	r2, #1
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	43db      	mvns	r3, r3
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	091b      	lsrs	r3, r3, #4
 8005b48:	f003 0201 	and.w	r2, r3, #1
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d017      	beq.n	8005b9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	2203      	movs	r2, #3
 8005b76:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7a:	43db      	mvns	r3, r3
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d123      	bne.n	8005bee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	08da      	lsrs	r2, r3, #3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3208      	adds	r2, #8
 8005bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	220f      	movs	r2, #15
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	691a      	ldr	r2, [r3, #16]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	08da      	lsrs	r2, r3, #3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3208      	adds	r2, #8
 8005be8:	6939      	ldr	r1, [r7, #16]
 8005bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	2203      	movs	r2, #3
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4013      	ands	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f003 0203 	and.w	r2, r3, #3
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 80a6 	beq.w	8005d7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c30:	4b5b      	ldr	r3, [pc, #364]	; (8005da0 <HAL_GPIO_Init+0x2e4>)
 8005c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c34:	4a5a      	ldr	r2, [pc, #360]	; (8005da0 <HAL_GPIO_Init+0x2e4>)
 8005c36:	f043 0301 	orr.w	r3, r3, #1
 8005c3a:	6613      	str	r3, [r2, #96]	; 0x60
 8005c3c:	4b58      	ldr	r3, [pc, #352]	; (8005da0 <HAL_GPIO_Init+0x2e4>)
 8005c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	60bb      	str	r3, [r7, #8]
 8005c46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c48:	4a56      	ldr	r2, [pc, #344]	; (8005da4 <HAL_GPIO_Init+0x2e8>)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	089b      	lsrs	r3, r3, #2
 8005c4e:	3302      	adds	r3, #2
 8005c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f003 0303 	and.w	r3, r3, #3
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	220f      	movs	r2, #15
 8005c60:	fa02 f303 	lsl.w	r3, r2, r3
 8005c64:	43db      	mvns	r3, r3
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005c72:	d01f      	beq.n	8005cb4 <HAL_GPIO_Init+0x1f8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a4c      	ldr	r2, [pc, #304]	; (8005da8 <HAL_GPIO_Init+0x2ec>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d019      	beq.n	8005cb0 <HAL_GPIO_Init+0x1f4>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a4b      	ldr	r2, [pc, #300]	; (8005dac <HAL_GPIO_Init+0x2f0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d013      	beq.n	8005cac <HAL_GPIO_Init+0x1f0>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a4a      	ldr	r2, [pc, #296]	; (8005db0 <HAL_GPIO_Init+0x2f4>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d00d      	beq.n	8005ca8 <HAL_GPIO_Init+0x1ec>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a49      	ldr	r2, [pc, #292]	; (8005db4 <HAL_GPIO_Init+0x2f8>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d007      	beq.n	8005ca4 <HAL_GPIO_Init+0x1e8>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a48      	ldr	r2, [pc, #288]	; (8005db8 <HAL_GPIO_Init+0x2fc>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d101      	bne.n	8005ca0 <HAL_GPIO_Init+0x1e4>
 8005c9c:	2305      	movs	r3, #5
 8005c9e:	e00a      	b.n	8005cb6 <HAL_GPIO_Init+0x1fa>
 8005ca0:	2306      	movs	r3, #6
 8005ca2:	e008      	b.n	8005cb6 <HAL_GPIO_Init+0x1fa>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	e006      	b.n	8005cb6 <HAL_GPIO_Init+0x1fa>
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e004      	b.n	8005cb6 <HAL_GPIO_Init+0x1fa>
 8005cac:	2302      	movs	r3, #2
 8005cae:	e002      	b.n	8005cb6 <HAL_GPIO_Init+0x1fa>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e000      	b.n	8005cb6 <HAL_GPIO_Init+0x1fa>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	f002 0203 	and.w	r2, r2, #3
 8005cbc:	0092      	lsls	r2, r2, #2
 8005cbe:	4093      	lsls	r3, r2
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cc6:	4937      	ldr	r1, [pc, #220]	; (8005da4 <HAL_GPIO_Init+0x2e8>)
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	089b      	lsrs	r3, r3, #2
 8005ccc:	3302      	adds	r3, #2
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cd4:	4b39      	ldr	r3, [pc, #228]	; (8005dbc <HAL_GPIO_Init+0x300>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	43db      	mvns	r3, r3
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005cf8:	4a30      	ldr	r2, [pc, #192]	; (8005dbc <HAL_GPIO_Init+0x300>)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005cfe:	4b2f      	ldr	r3, [pc, #188]	; (8005dbc <HAL_GPIO_Init+0x300>)
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	43db      	mvns	r3, r3
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d22:	4a26      	ldr	r2, [pc, #152]	; (8005dbc <HAL_GPIO_Init+0x300>)
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005d28:	4b24      	ldr	r3, [pc, #144]	; (8005dbc <HAL_GPIO_Init+0x300>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	43db      	mvns	r3, r3
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	4013      	ands	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d4c:	4a1b      	ldr	r2, [pc, #108]	; (8005dbc <HAL_GPIO_Init+0x300>)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005d52:	4b1a      	ldr	r3, [pc, #104]	; (8005dbc <HAL_GPIO_Init+0x300>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d76:	4a11      	ldr	r2, [pc, #68]	; (8005dbc <HAL_GPIO_Init+0x300>)
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f47f ae9d 	bne.w	8005acc <HAL_GPIO_Init+0x10>
  }
}
 8005d92:	bf00      	nop
 8005d94:	bf00      	nop
 8005d96:	371c      	adds	r7, #28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	40021000 	.word	0x40021000
 8005da4:	40010000 	.word	0x40010000
 8005da8:	48000400 	.word	0x48000400
 8005dac:	48000800 	.word	0x48000800
 8005db0:	48000c00 	.word	0x48000c00
 8005db4:	48001000 	.word	0x48001000
 8005db8:	48001400 	.word	0x48001400
 8005dbc:	40010400 	.word	0x40010400

08005dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	807b      	strh	r3, [r7, #2]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005dd0:	787b      	ldrb	r3, [r7, #1]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005dd6:	887a      	ldrh	r2, [r7, #2]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ddc:	e002      	b.n	8005de4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005dde:	887a      	ldrh	r2, [r7, #2]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e081      	b.n	8005f06 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d106      	bne.n	8005e1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fc fdee 	bl	80029f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2224      	movs	r2, #36	; 0x24
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0201 	bic.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d107      	bne.n	8005e6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689a      	ldr	r2, [r3, #8]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e66:	609a      	str	r2, [r3, #8]
 8005e68:	e006      	b.n	8005e78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689a      	ldr	r2, [r3, #8]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005e76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d104      	bne.n	8005e8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6812      	ldr	r2, [r2, #0]
 8005e94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005eac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	69d9      	ldr	r1, [r3, #28]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1a      	ldr	r2, [r3, #32]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0201 	orr.w	r2, r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	607a      	str	r2, [r7, #4]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	817b      	strh	r3, [r7, #10]
 8005f20:	4613      	mov	r3, r2
 8005f22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b20      	cmp	r3, #32
 8005f2e:	f040 80da 	bne.w	80060e6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_I2C_Master_Transmit+0x30>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e0d3      	b.n	80060e8 <HAL_I2C_Master_Transmit+0x1d8>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f48:	f7fd f9ec 	bl	8003324 <HAL_GetTick>
 8005f4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	2319      	movs	r3, #25
 8005f54:	2201      	movs	r2, #1
 8005f56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 fb4e 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e0be      	b.n	80060e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2221      	movs	r2, #33	; 0x21
 8005f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2210      	movs	r2, #16
 8005f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	893a      	ldrh	r2, [r7, #8]
 8005f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	2bff      	cmp	r3, #255	; 0xff
 8005f9a:	d90e      	bls.n	8005fba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	22ff      	movs	r2, #255	; 0xff
 8005fa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	8979      	ldrh	r1, [r7, #10]
 8005faa:	4b51      	ldr	r3, [pc, #324]	; (80060f0 <HAL_I2C_Master_Transmit+0x1e0>)
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 fd44 	bl	8006a40 <I2C_TransferConfig>
 8005fb8:	e06c      	b.n	8006094 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	8979      	ldrh	r1, [r7, #10]
 8005fcc:	4b48      	ldr	r3, [pc, #288]	; (80060f0 <HAL_I2C_Master_Transmit+0x1e0>)
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 fd33 	bl	8006a40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005fda:	e05b      	b.n	8006094 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	6a39      	ldr	r1, [r7, #32]
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 fb4b 	bl	800667c <I2C_WaitOnTXISFlagUntilTimeout>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e07b      	b.n	80060e8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	781a      	ldrb	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600a:	b29b      	uxth	r3, r3
 800600c:	3b01      	subs	r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006018:	3b01      	subs	r3, #1
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006024:	b29b      	uxth	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d034      	beq.n	8006094 <HAL_I2C_Master_Transmit+0x184>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602e:	2b00      	cmp	r3, #0
 8006030:	d130      	bne.n	8006094 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	2200      	movs	r2, #0
 800603a:	2180      	movs	r1, #128	; 0x80
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fadd 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e04d      	b.n	80060e8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006050:	b29b      	uxth	r3, r3
 8006052:	2bff      	cmp	r3, #255	; 0xff
 8006054:	d90e      	bls.n	8006074 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	22ff      	movs	r2, #255	; 0xff
 800605a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006060:	b2da      	uxtb	r2, r3
 8006062:	8979      	ldrh	r1, [r7, #10]
 8006064:	2300      	movs	r3, #0
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 fce7 	bl	8006a40 <I2C_TransferConfig>
 8006072:	e00f      	b.n	8006094 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006082:	b2da      	uxtb	r2, r3
 8006084:	8979      	ldrh	r1, [r7, #10]
 8006086:	2300      	movs	r3, #0
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 fcd6 	bl	8006a40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d19e      	bne.n	8005fdc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	6a39      	ldr	r1, [r7, #32]
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 fb2a 	bl	80066fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e01a      	b.n	80060e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2220      	movs	r2, #32
 80060b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6859      	ldr	r1, [r3, #4]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <HAL_I2C_Master_Transmit+0x1e4>)
 80060c6:	400b      	ands	r3, r1
 80060c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	e000      	b.n	80060e8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80060e6:	2302      	movs	r3, #2
  }
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	80002000 	.word	0x80002000
 80060f4:	fe00e800 	.word	0xfe00e800

080060f8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af02      	add	r7, sp, #8
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	607a      	str	r2, [r7, #4]
 8006102:	461a      	mov	r2, r3
 8006104:	460b      	mov	r3, r1
 8006106:	817b      	strh	r3, [r7, #10]
 8006108:	4613      	mov	r3, r2
 800610a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b20      	cmp	r3, #32
 8006116:	f040 80db 	bne.w	80062d0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_I2C_Master_Receive+0x30>
 8006124:	2302      	movs	r3, #2
 8006126:	e0d4      	b.n	80062d2 <HAL_I2C_Master_Receive+0x1da>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006130:	f7fd f8f8 	bl	8003324 <HAL_GetTick>
 8006134:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	2319      	movs	r3, #25
 800613c:	2201      	movs	r2, #1
 800613e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 fa5a 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e0bf      	b.n	80062d2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2222      	movs	r2, #34	; 0x22
 8006156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2210      	movs	r2, #16
 800615e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	893a      	ldrh	r2, [r7, #8]
 8006172:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617e:	b29b      	uxth	r3, r3
 8006180:	2bff      	cmp	r3, #255	; 0xff
 8006182:	d90e      	bls.n	80061a2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	22ff      	movs	r2, #255	; 0xff
 8006188:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618e:	b2da      	uxtb	r2, r3
 8006190:	8979      	ldrh	r1, [r7, #10]
 8006192:	4b52      	ldr	r3, [pc, #328]	; (80062dc <HAL_I2C_Master_Receive+0x1e4>)
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 fc50 	bl	8006a40 <I2C_TransferConfig>
 80061a0:	e06d      	b.n	800627e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	8979      	ldrh	r1, [r7, #10]
 80061b4:	4b49      	ldr	r3, [pc, #292]	; (80062dc <HAL_I2C_Master_Receive+0x1e4>)
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fc3f 	bl	8006a40 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80061c2:	e05c      	b.n	800627e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	6a39      	ldr	r1, [r7, #32]
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 fad3 	bl	8006774 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e07c      	b.n	80062d2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006200:	b29b      	uxth	r3, r3
 8006202:	3b01      	subs	r3, #1
 8006204:	b29a      	uxth	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620e:	b29b      	uxth	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d034      	beq.n	800627e <HAL_I2C_Master_Receive+0x186>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006218:	2b00      	cmp	r3, #0
 800621a:	d130      	bne.n	800627e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	2200      	movs	r2, #0
 8006224:	2180      	movs	r1, #128	; 0x80
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f9e8 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e04d      	b.n	80062d2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623a:	b29b      	uxth	r3, r3
 800623c:	2bff      	cmp	r3, #255	; 0xff
 800623e:	d90e      	bls.n	800625e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	22ff      	movs	r2, #255	; 0xff
 8006244:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800624a:	b2da      	uxtb	r2, r3
 800624c:	8979      	ldrh	r1, [r7, #10]
 800624e:	2300      	movs	r3, #0
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 fbf2 	bl	8006a40 <I2C_TransferConfig>
 800625c:	e00f      	b.n	800627e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800626c:	b2da      	uxtb	r2, r3
 800626e:	8979      	ldrh	r1, [r7, #10]
 8006270:	2300      	movs	r3, #0
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 fbe1 	bl	8006a40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d19d      	bne.n	80061c4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	6a39      	ldr	r1, [r7, #32]
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 fa35 	bl	80066fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e01a      	b.n	80062d2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2220      	movs	r2, #32
 80062a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6859      	ldr	r1, [r3, #4]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	4b0c      	ldr	r3, [pc, #48]	; (80062e0 <HAL_I2C_Master_Receive+0x1e8>)
 80062b0:	400b      	ands	r3, r1
 80062b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062cc:	2300      	movs	r3, #0
 80062ce:	e000      	b.n	80062d2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80062d0:	2302      	movs	r3, #2
  }
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	80002400 	.word	0x80002400
 80062e0:	fe00e800 	.word	0xfe00e800

080062e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b088      	sub	sp, #32
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	4608      	mov	r0, r1
 80062ee:	4611      	mov	r1, r2
 80062f0:	461a      	mov	r2, r3
 80062f2:	4603      	mov	r3, r0
 80062f4:	817b      	strh	r3, [r7, #10]
 80062f6:	460b      	mov	r3, r1
 80062f8:	813b      	strh	r3, [r7, #8]
 80062fa:	4613      	mov	r3, r2
 80062fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b20      	cmp	r3, #32
 8006308:	f040 80f9 	bne.w	80064fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <HAL_I2C_Mem_Write+0x34>
 8006312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006314:	2b00      	cmp	r3, #0
 8006316:	d105      	bne.n	8006324 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800631e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e0ed      	b.n	8006500 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800632a:	2b01      	cmp	r3, #1
 800632c:	d101      	bne.n	8006332 <HAL_I2C_Mem_Write+0x4e>
 800632e:	2302      	movs	r3, #2
 8006330:	e0e6      	b.n	8006500 <HAL_I2C_Mem_Write+0x21c>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800633a:	f7fc fff3 	bl	8003324 <HAL_GetTick>
 800633e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	2319      	movs	r3, #25
 8006346:	2201      	movs	r2, #1
 8006348:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 f955 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e0d1      	b.n	8006500 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2221      	movs	r2, #33	; 0x21
 8006360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2240      	movs	r2, #64	; 0x40
 8006368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a3a      	ldr	r2, [r7, #32]
 8006376:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800637c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006384:	88f8      	ldrh	r0, [r7, #6]
 8006386:	893a      	ldrh	r2, [r7, #8]
 8006388:	8979      	ldrh	r1, [r7, #10]
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	4603      	mov	r3, r0
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 f8b9 	bl	800650c <I2C_RequestMemoryWrite>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d005      	beq.n	80063ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e0a9      	b.n	8006500 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2bff      	cmp	r3, #255	; 0xff
 80063b4:	d90e      	bls.n	80063d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	22ff      	movs	r2, #255	; 0xff
 80063ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	8979      	ldrh	r1, [r7, #10]
 80063c4:	2300      	movs	r3, #0
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 fb37 	bl	8006a40 <I2C_TransferConfig>
 80063d2:	e00f      	b.n	80063f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	8979      	ldrh	r1, [r7, #10]
 80063e6:	2300      	movs	r3, #0
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 fb26 	bl	8006a40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 f93f 	bl	800667c <I2C_WaitOnTXISFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e07b      	b.n	8006500 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	781a      	ldrb	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006422:	b29b      	uxth	r3, r3
 8006424:	3b01      	subs	r3, #1
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d034      	beq.n	80064ac <HAL_I2C_Mem_Write+0x1c8>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006446:	2b00      	cmp	r3, #0
 8006448:	d130      	bne.n	80064ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	2200      	movs	r2, #0
 8006452:	2180      	movs	r1, #128	; 0x80
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 f8d1 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e04d      	b.n	8006500 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006468:	b29b      	uxth	r3, r3
 800646a:	2bff      	cmp	r3, #255	; 0xff
 800646c:	d90e      	bls.n	800648c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	22ff      	movs	r2, #255	; 0xff
 8006472:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006478:	b2da      	uxtb	r2, r3
 800647a:	8979      	ldrh	r1, [r7, #10]
 800647c:	2300      	movs	r3, #0
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fadb 	bl	8006a40 <I2C_TransferConfig>
 800648a:	e00f      	b.n	80064ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649a:	b2da      	uxtb	r2, r3
 800649c:	8979      	ldrh	r1, [r7, #10]
 800649e:	2300      	movs	r3, #0
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 faca 	bl	8006a40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d19e      	bne.n	80063f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 f91e 	bl	80066fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e01a      	b.n	8006500 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2220      	movs	r2, #32
 80064d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6859      	ldr	r1, [r3, #4]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <HAL_I2C_Mem_Write+0x224>)
 80064de:	400b      	ands	r3, r1
 80064e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	e000      	b.n	8006500 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80064fe:	2302      	movs	r3, #2
  }
}
 8006500:	4618      	mov	r0, r3
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	fe00e800 	.word	0xfe00e800

0800650c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af02      	add	r7, sp, #8
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	4608      	mov	r0, r1
 8006516:	4611      	mov	r1, r2
 8006518:	461a      	mov	r2, r3
 800651a:	4603      	mov	r3, r0
 800651c:	817b      	strh	r3, [r7, #10]
 800651e:	460b      	mov	r3, r1
 8006520:	813b      	strh	r3, [r7, #8]
 8006522:	4613      	mov	r3, r2
 8006524:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006526:	88fb      	ldrh	r3, [r7, #6]
 8006528:	b2da      	uxtb	r2, r3
 800652a:	8979      	ldrh	r1, [r7, #10]
 800652c:	4b20      	ldr	r3, [pc, #128]	; (80065b0 <I2C_RequestMemoryWrite+0xa4>)
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 fa83 	bl	8006a40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	69b9      	ldr	r1, [r7, #24]
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 f89c 	bl	800667c <I2C_WaitOnTXISFlagUntilTimeout>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e02c      	b.n	80065a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800654e:	88fb      	ldrh	r3, [r7, #6]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d105      	bne.n	8006560 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006554:	893b      	ldrh	r3, [r7, #8]
 8006556:	b2da      	uxtb	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	629a      	str	r2, [r3, #40]	; 0x28
 800655e:	e015      	b.n	800658c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006560:	893b      	ldrh	r3, [r7, #8]
 8006562:	0a1b      	lsrs	r3, r3, #8
 8006564:	b29b      	uxth	r3, r3
 8006566:	b2da      	uxtb	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	69b9      	ldr	r1, [r7, #24]
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 f882 	bl	800667c <I2C_WaitOnTXISFlagUntilTimeout>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e012      	b.n	80065a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006582:	893b      	ldrh	r3, [r7, #8]
 8006584:	b2da      	uxtb	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2200      	movs	r2, #0
 8006594:	2180      	movs	r1, #128	; 0x80
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 f830 	bl	80065fc <I2C_WaitOnFlagUntilTimeout>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	80002000 	.word	0x80002000

080065b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d103      	bne.n	80065d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2200      	movs	r2, #0
 80065d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d007      	beq.n	80065f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699a      	ldr	r2, [r3, #24]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0201 	orr.w	r2, r2, #1
 80065ee:	619a      	str	r2, [r3, #24]
  }
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	4613      	mov	r3, r2
 800660a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800660c:	e022      	b.n	8006654 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006614:	d01e      	beq.n	8006654 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006616:	f7fc fe85 	bl	8003324 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d302      	bcc.n	800662c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d113      	bne.n	8006654 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006630:	f043 0220 	orr.w	r2, r3, #32
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2220      	movs	r2, #32
 800663c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e00f      	b.n	8006674 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	4013      	ands	r3, r2
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	429a      	cmp	r2, r3
 8006662:	bf0c      	ite	eq
 8006664:	2301      	moveq	r3, #1
 8006666:	2300      	movne	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	79fb      	ldrb	r3, [r7, #7]
 800666e:	429a      	cmp	r2, r3
 8006670:	d0cd      	beq.n	800660e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006688:	e02c      	b.n	80066e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 f8ea 	bl	8006868 <I2C_IsErrorOccurred>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e02a      	b.n	80066f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066a4:	d01e      	beq.n	80066e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a6:	f7fc fe3d 	bl	8003324 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d302      	bcc.n	80066bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d113      	bne.n	80066e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c0:	f043 0220 	orr.w	r2, r3, #32
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e007      	b.n	80066f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d1cb      	bne.n	800668a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006708:	e028      	b.n	800675c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 f8aa 	bl	8006868 <I2C_IsErrorOccurred>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e026      	b.n	800676c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800671e:	f7fc fe01 	bl	8003324 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	429a      	cmp	r2, r3
 800672c:	d302      	bcc.n	8006734 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d113      	bne.n	800675c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006738:	f043 0220 	orr.w	r2, r3, #32
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e007      	b.n	800676c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b20      	cmp	r3, #32
 8006768:	d1cf      	bne.n	800670a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006780:	e064      	b.n	800684c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 f86e 	bl	8006868 <I2C_IsErrorOccurred>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e062      	b.n	800685c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	f003 0320 	and.w	r3, r3, #32
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	d138      	bne.n	8006816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	f003 0304 	and.w	r3, r3, #4
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d105      	bne.n	80067be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	e04e      	b.n	800685c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	f003 0310 	and.w	r3, r3, #16
 80067c8:	2b10      	cmp	r3, #16
 80067ca:	d107      	bne.n	80067dc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2210      	movs	r2, #16
 80067d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2204      	movs	r2, #4
 80067d8:	645a      	str	r2, [r3, #68]	; 0x44
 80067da:	e002      	b.n	80067e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2220      	movs	r2, #32
 80067e8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6859      	ldr	r1, [r3, #4]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	4b1b      	ldr	r3, [pc, #108]	; (8006864 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80067f6:	400b      	ands	r3, r1
 80067f8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e022      	b.n	800685c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006816:	f7fc fd85 	bl	8003324 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	429a      	cmp	r2, r3
 8006824:	d302      	bcc.n	800682c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10f      	bne.n	800684c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006830:	f043 0220 	orr.w	r2, r3, #32
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e007      	b.n	800685c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	f003 0304 	and.w	r3, r3, #4
 8006856:	2b04      	cmp	r3, #4
 8006858:	d193      	bne.n	8006782 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	fe00e800 	.word	0xfe00e800

08006868 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	; 0x28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	2b00      	cmp	r3, #0
 8006892:	d075      	beq.n	8006980 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2210      	movs	r2, #16
 800689a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800689c:	e056      	b.n	800694c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068a4:	d052      	beq.n	800694c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80068a6:	f7fc fd3d 	bl	8003324 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d302      	bcc.n	80068bc <I2C_IsErrorOccurred+0x54>
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d147      	bne.n	800694c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068de:	d12e      	bne.n	800693e <I2C_IsErrorOccurred+0xd6>
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068e6:	d02a      	beq.n	800693e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80068e8:	7cfb      	ldrb	r3, [r7, #19]
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	d027      	beq.n	800693e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068fc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80068fe:	f7fc fd11 	bl	8003324 <HAL_GetTick>
 8006902:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006904:	e01b      	b.n	800693e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006906:	f7fc fd0d 	bl	8003324 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b19      	cmp	r3, #25
 8006912:	d914      	bls.n	800693e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006918:	f043 0220 	orr.w	r2, r3, #32
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2220      	movs	r2, #32
 8006924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	f003 0320 	and.w	r3, r3, #32
 8006948:	2b20      	cmp	r3, #32
 800694a:	d1dc      	bne.n	8006906 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b20      	cmp	r3, #32
 8006958:	d003      	beq.n	8006962 <I2C_IsErrorOccurred+0xfa>
 800695a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800695e:	2b00      	cmp	r3, #0
 8006960:	d09d      	beq.n	800689e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006966:	2b00      	cmp	r3, #0
 8006968:	d103      	bne.n	8006972 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2220      	movs	r2, #32
 8006970:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	f043 0304 	orr.w	r3, r3, #4
 8006978:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00b      	beq.n	80069aa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	f043 0301 	orr.w	r3, r3, #1
 8006998:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00b      	beq.n	80069cc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	f043 0308 	orr.w	r3, r3, #8
 80069ba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00b      	beq.n	80069ee <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	f043 0302 	orr.w	r3, r3, #2
 80069dc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80069ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d01c      	beq.n	8006a30 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f7ff fddc 	bl	80065b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6859      	ldr	r1, [r3, #4]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <I2C_IsErrorOccurred+0x1d4>)
 8006a08:	400b      	ands	r3, r1
 8006a0a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	431a      	orrs	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3728      	adds	r7, #40	; 0x28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	fe00e800 	.word	0xfe00e800

08006a40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	607b      	str	r3, [r7, #4]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	817b      	strh	r3, [r7, #10]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a52:	897b      	ldrh	r3, [r7, #10]
 8006a54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a58:	7a7b      	ldrb	r3, [r7, #9]
 8006a5a:	041b      	lsls	r3, r3, #16
 8006a5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a60:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a6e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	0d5b      	lsrs	r3, r3, #21
 8006a7a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006a7e:	4b08      	ldr	r3, [pc, #32]	; (8006aa0 <I2C_TransferConfig+0x60>)
 8006a80:	430b      	orrs	r3, r1
 8006a82:	43db      	mvns	r3, r3
 8006a84:	ea02 0103 	and.w	r1, r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a92:	bf00      	nop
 8006a94:	371c      	adds	r7, #28
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	03ff63ff 	.word	0x03ff63ff

08006aa4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b20      	cmp	r3, #32
 8006ab8:	d138      	bne.n	8006b2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d101      	bne.n	8006ac8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	e032      	b.n	8006b2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2224      	movs	r2, #36	; 0x24
 8006ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0201 	bic.w	r2, r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006af6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6819      	ldr	r1, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0201 	orr.w	r2, r2, #1
 8006b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	e000      	b.n	8006b2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b2c:	2302      	movs	r3, #2
  }
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b20      	cmp	r3, #32
 8006b4e:	d139      	bne.n	8006bc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d101      	bne.n	8006b5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	e033      	b.n	8006bc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2224      	movs	r2, #36	; 0x24
 8006b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0201 	bic.w	r2, r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f042 0201 	orr.w	r2, r2, #1
 8006bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e000      	b.n	8006bc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006bc4:	2302      	movs	r3, #2
  }
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
	...

08006bd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d141      	bne.n	8006c66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006be2:	4b4b      	ldr	r3, [pc, #300]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bee:	d131      	bne.n	8006c54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bf0:	4b47      	ldr	r3, [pc, #284]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bf6:	4a46      	ldr	r2, [pc, #280]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c00:	4b43      	ldr	r3, [pc, #268]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c08:	4a41      	ldr	r2, [pc, #260]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c10:	4b40      	ldr	r3, [pc, #256]	; (8006d14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2232      	movs	r2, #50	; 0x32
 8006c16:	fb02 f303 	mul.w	r3, r2, r3
 8006c1a:	4a3f      	ldr	r2, [pc, #252]	; (8006d18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c20:	0c9b      	lsrs	r3, r3, #18
 8006c22:	3301      	adds	r3, #1
 8006c24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c26:	e002      	b.n	8006c2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c2e:	4b38      	ldr	r3, [pc, #224]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c3a:	d102      	bne.n	8006c42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1f2      	bne.n	8006c28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c42:	4b33      	ldr	r3, [pc, #204]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c4e:	d158      	bne.n	8006d02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e057      	b.n	8006d04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c54:	4b2e      	ldr	r3, [pc, #184]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c5a:	4a2d      	ldr	r2, [pc, #180]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006c64:	e04d      	b.n	8006d02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6c:	d141      	bne.n	8006cf2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c6e:	4b28      	ldr	r3, [pc, #160]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c7a:	d131      	bne.n	8006ce0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c7c:	4b24      	ldr	r3, [pc, #144]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c82:	4a23      	ldr	r2, [pc, #140]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c8c:	4b20      	ldr	r3, [pc, #128]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c94:	4a1e      	ldr	r2, [pc, #120]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c9c:	4b1d      	ldr	r3, [pc, #116]	; (8006d14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2232      	movs	r2, #50	; 0x32
 8006ca2:	fb02 f303 	mul.w	r3, r2, r3
 8006ca6:	4a1c      	ldr	r2, [pc, #112]	; (8006d18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cac:	0c9b      	lsrs	r3, r3, #18
 8006cae:	3301      	adds	r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cb2:	e002      	b.n	8006cba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cba:	4b15      	ldr	r3, [pc, #84]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cc6:	d102      	bne.n	8006cce <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1f2      	bne.n	8006cb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006cce:	4b10      	ldr	r3, [pc, #64]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cda:	d112      	bne.n	8006d02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e011      	b.n	8006d04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ce6:	4a0a      	ldr	r2, [pc, #40]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006cf0:	e007      	b.n	8006d02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006cf2:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006cfa:	4a05      	ldr	r2, [pc, #20]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d00:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	40007000 	.word	0x40007000
 8006d14:	20000000 	.word	0x20000000
 8006d18:	431bde83 	.word	0x431bde83

08006d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e306      	b.n	800733c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d075      	beq.n	8006e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d3a:	4b97      	ldr	r3, [pc, #604]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f003 030c 	and.w	r3, r3, #12
 8006d42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d44:	4b94      	ldr	r3, [pc, #592]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	2b0c      	cmp	r3, #12
 8006d52:	d102      	bne.n	8006d5a <HAL_RCC_OscConfig+0x3e>
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d002      	beq.n	8006d60 <HAL_RCC_OscConfig+0x44>
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d10b      	bne.n	8006d78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d60:	4b8d      	ldr	r3, [pc, #564]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d05b      	beq.n	8006e24 <HAL_RCC_OscConfig+0x108>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d157      	bne.n	8006e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e2e1      	b.n	800733c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d80:	d106      	bne.n	8006d90 <HAL_RCC_OscConfig+0x74>
 8006d82:	4b85      	ldr	r3, [pc, #532]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a84      	ldr	r2, [pc, #528]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	e01d      	b.n	8006dcc <HAL_RCC_OscConfig+0xb0>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d98:	d10c      	bne.n	8006db4 <HAL_RCC_OscConfig+0x98>
 8006d9a:	4b7f      	ldr	r3, [pc, #508]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a7e      	ldr	r2, [pc, #504]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	4b7c      	ldr	r3, [pc, #496]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a7b      	ldr	r2, [pc, #492]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	e00b      	b.n	8006dcc <HAL_RCC_OscConfig+0xb0>
 8006db4:	4b78      	ldr	r3, [pc, #480]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a77      	ldr	r2, [pc, #476]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dbe:	6013      	str	r3, [r2, #0]
 8006dc0:	4b75      	ldr	r3, [pc, #468]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a74      	ldr	r2, [pc, #464]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d013      	beq.n	8006dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd4:	f7fc faa6 	bl	8003324 <HAL_GetTick>
 8006dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dda:	e008      	b.n	8006dee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ddc:	f7fc faa2 	bl	8003324 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b64      	cmp	r3, #100	; 0x64
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e2a6      	b.n	800733c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dee:	4b6a      	ldr	r3, [pc, #424]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d0f0      	beq.n	8006ddc <HAL_RCC_OscConfig+0xc0>
 8006dfa:	e014      	b.n	8006e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dfc:	f7fc fa92 	bl	8003324 <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e04:	f7fc fa8e 	bl	8003324 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b64      	cmp	r3, #100	; 0x64
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e292      	b.n	800733c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e16:	4b60      	ldr	r3, [pc, #384]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f0      	bne.n	8006e04 <HAL_RCC_OscConfig+0xe8>
 8006e22:	e000      	b.n	8006e26 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d075      	beq.n	8006f1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e32:	4b59      	ldr	r3, [pc, #356]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f003 030c 	and.w	r3, r3, #12
 8006e3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e3c:	4b56      	ldr	r3, [pc, #344]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f003 0303 	and.w	r3, r3, #3
 8006e44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b0c      	cmp	r3, #12
 8006e4a:	d102      	bne.n	8006e52 <HAL_RCC_OscConfig+0x136>
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d002      	beq.n	8006e58 <HAL_RCC_OscConfig+0x13c>
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d11f      	bne.n	8006e98 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e58:	4b4f      	ldr	r3, [pc, #316]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d005      	beq.n	8006e70 <HAL_RCC_OscConfig+0x154>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e265      	b.n	800733c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e70:	4b49      	ldr	r3, [pc, #292]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	061b      	lsls	r3, r3, #24
 8006e7e:	4946      	ldr	r1, [pc, #280]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006e84:	4b45      	ldr	r3, [pc, #276]	; (8006f9c <HAL_RCC_OscConfig+0x280>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fc f9ff 	bl	800328c <HAL_InitTick>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d043      	beq.n	8006f1c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e251      	b.n	800733c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d023      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ea0:	4b3d      	ldr	r3, [pc, #244]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a3c      	ldr	r2, [pc, #240]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eac:	f7fc fa3a 	bl	8003324 <HAL_GetTick>
 8006eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006eb2:	e008      	b.n	8006ec6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eb4:	f7fc fa36 	bl	8003324 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e23a      	b.n	800733c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ec6:	4b34      	ldr	r3, [pc, #208]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0f0      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ed2:	4b31      	ldr	r3, [pc, #196]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	061b      	lsls	r3, r3, #24
 8006ee0:	492d      	ldr	r1, [pc, #180]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	604b      	str	r3, [r1, #4]
 8006ee6:	e01a      	b.n	8006f1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ee8:	4b2b      	ldr	r3, [pc, #172]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a2a      	ldr	r2, [pc, #168]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006eee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef4:	f7fc fa16 	bl	8003324 <HAL_GetTick>
 8006ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006efa:	e008      	b.n	8006f0e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006efc:	f7fc fa12 	bl	8003324 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d901      	bls.n	8006f0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e216      	b.n	800733c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f0e:	4b22      	ldr	r3, [pc, #136]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1f0      	bne.n	8006efc <HAL_RCC_OscConfig+0x1e0>
 8006f1a:	e000      	b.n	8006f1e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d041      	beq.n	8006fae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01c      	beq.n	8006f6c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f32:	4b19      	ldr	r3, [pc, #100]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f38:	4a17      	ldr	r2, [pc, #92]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006f3a:	f043 0301 	orr.w	r3, r3, #1
 8006f3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f42:	f7fc f9ef 	bl	8003324 <HAL_GetTick>
 8006f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f48:	e008      	b.n	8006f5c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f4a:	f7fc f9eb 	bl	8003324 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e1ef      	b.n	800733c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f5c:	4b0e      	ldr	r3, [pc, #56]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0ef      	beq.n	8006f4a <HAL_RCC_OscConfig+0x22e>
 8006f6a:	e020      	b.n	8006fae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f72:	4a09      	ldr	r2, [pc, #36]	; (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006f74:	f023 0301 	bic.w	r3, r3, #1
 8006f78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f7c:	f7fc f9d2 	bl	8003324 <HAL_GetTick>
 8006f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f82:	e00d      	b.n	8006fa0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f84:	f7fc f9ce 	bl	8003324 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d906      	bls.n	8006fa0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e1d2      	b.n	800733c <HAL_RCC_OscConfig+0x620>
 8006f96:	bf00      	nop
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006fa0:	4b8c      	ldr	r3, [pc, #560]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8006fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1ea      	bne.n	8006f84 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0304 	and.w	r3, r3, #4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 80a6 	beq.w	8007108 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006fc0:	4b84      	ldr	r3, [pc, #528]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8006fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x2b4>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e000      	b.n	8006fd2 <HAL_RCC_OscConfig+0x2b6>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00d      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fd6:	4b7f      	ldr	r3, [pc, #508]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8006fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fda:	4a7e      	ldr	r2, [pc, #504]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8006fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8006fe2:	4b7c      	ldr	r3, [pc, #496]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8006fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ff2:	4b79      	ldr	r3, [pc, #484]	; (80071d8 <HAL_RCC_OscConfig+0x4bc>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d118      	bne.n	8007030 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ffe:	4b76      	ldr	r3, [pc, #472]	; (80071d8 <HAL_RCC_OscConfig+0x4bc>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a75      	ldr	r2, [pc, #468]	; (80071d8 <HAL_RCC_OscConfig+0x4bc>)
 8007004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800700a:	f7fc f98b 	bl	8003324 <HAL_GetTick>
 800700e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007010:	e008      	b.n	8007024 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007012:	f7fc f987 	bl	8003324 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d901      	bls.n	8007024 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e18b      	b.n	800733c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007024:	4b6c      	ldr	r3, [pc, #432]	; (80071d8 <HAL_RCC_OscConfig+0x4bc>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0f0      	beq.n	8007012 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d108      	bne.n	800704a <HAL_RCC_OscConfig+0x32e>
 8007038:	4b66      	ldr	r3, [pc, #408]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 800703a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703e:	4a65      	ldr	r2, [pc, #404]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007040:	f043 0301 	orr.w	r3, r3, #1
 8007044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007048:	e024      	b.n	8007094 <HAL_RCC_OscConfig+0x378>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	2b05      	cmp	r3, #5
 8007050:	d110      	bne.n	8007074 <HAL_RCC_OscConfig+0x358>
 8007052:	4b60      	ldr	r3, [pc, #384]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007058:	4a5e      	ldr	r2, [pc, #376]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 800705a:	f043 0304 	orr.w	r3, r3, #4
 800705e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007062:	4b5c      	ldr	r3, [pc, #368]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007068:	4a5a      	ldr	r2, [pc, #360]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 800706a:	f043 0301 	orr.w	r3, r3, #1
 800706e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007072:	e00f      	b.n	8007094 <HAL_RCC_OscConfig+0x378>
 8007074:	4b57      	ldr	r3, [pc, #348]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800707a:	4a56      	ldr	r2, [pc, #344]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 800707c:	f023 0301 	bic.w	r3, r3, #1
 8007080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007084:	4b53      	ldr	r3, [pc, #332]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800708a:	4a52      	ldr	r2, [pc, #328]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 800708c:	f023 0304 	bic.w	r3, r3, #4
 8007090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d016      	beq.n	80070ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800709c:	f7fc f942 	bl	8003324 <HAL_GetTick>
 80070a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070a2:	e00a      	b.n	80070ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070a4:	f7fc f93e 	bl	8003324 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e140      	b.n	800733c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070ba:	4b46      	ldr	r3, [pc, #280]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 80070bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d0ed      	beq.n	80070a4 <HAL_RCC_OscConfig+0x388>
 80070c8:	e015      	b.n	80070f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ca:	f7fc f92b 	bl	8003324 <HAL_GetTick>
 80070ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070d0:	e00a      	b.n	80070e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070d2:	f7fc f927 	bl	8003324 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d901      	bls.n	80070e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e129      	b.n	800733c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070e8:	4b3a      	ldr	r3, [pc, #232]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 80070ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1ed      	bne.n	80070d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070f6:	7ffb      	ldrb	r3, [r7, #31]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d105      	bne.n	8007108 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070fc:	4b35      	ldr	r3, [pc, #212]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 80070fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007100:	4a34      	ldr	r2, [pc, #208]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007106:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d03c      	beq.n	800718e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d01c      	beq.n	8007156 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800711c:	4b2d      	ldr	r3, [pc, #180]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 800711e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007122:	4a2c      	ldr	r2, [pc, #176]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007124:	f043 0301 	orr.w	r3, r3, #1
 8007128:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800712c:	f7fc f8fa 	bl	8003324 <HAL_GetTick>
 8007130:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007132:	e008      	b.n	8007146 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007134:	f7fc f8f6 	bl	8003324 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	2b02      	cmp	r3, #2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e0fa      	b.n	800733c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007146:	4b23      	ldr	r3, [pc, #140]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0ef      	beq.n	8007134 <HAL_RCC_OscConfig+0x418>
 8007154:	e01b      	b.n	800718e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007156:	4b1f      	ldr	r3, [pc, #124]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007158:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800715c:	4a1d      	ldr	r2, [pc, #116]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 800715e:	f023 0301 	bic.w	r3, r3, #1
 8007162:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007166:	f7fc f8dd 	bl	8003324 <HAL_GetTick>
 800716a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800716c:	e008      	b.n	8007180 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800716e:	f7fc f8d9 	bl	8003324 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b02      	cmp	r3, #2
 800717a:	d901      	bls.n	8007180 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e0dd      	b.n	800733c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007180:	4b14      	ldr	r3, [pc, #80]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007182:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1ef      	bne.n	800716e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 80d1 	beq.w	800733a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007198:	4b0e      	ldr	r3, [pc, #56]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 030c 	and.w	r3, r3, #12
 80071a0:	2b0c      	cmp	r3, #12
 80071a2:	f000 808b 	beq.w	80072bc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d15e      	bne.n	800726c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ae:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a08      	ldr	r2, [pc, #32]	; (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 80071b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ba:	f7fc f8b3 	bl	8003324 <HAL_GetTick>
 80071be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071c0:	e00c      	b.n	80071dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071c2:	f7fc f8af 	bl	8003324 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d905      	bls.n	80071dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e0b3      	b.n	800733c <HAL_RCC_OscConfig+0x620>
 80071d4:	40021000 	.word	0x40021000
 80071d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071dc:	4b59      	ldr	r3, [pc, #356]	; (8007344 <HAL_RCC_OscConfig+0x628>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1ec      	bne.n	80071c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071e8:	4b56      	ldr	r3, [pc, #344]	; (8007344 <HAL_RCC_OscConfig+0x628>)
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	4b56      	ldr	r3, [pc, #344]	; (8007348 <HAL_RCC_OscConfig+0x62c>)
 80071ee:	4013      	ands	r3, r2
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	6a11      	ldr	r1, [r2, #32]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071f8:	3a01      	subs	r2, #1
 80071fa:	0112      	lsls	r2, r2, #4
 80071fc:	4311      	orrs	r1, r2
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007202:	0212      	lsls	r2, r2, #8
 8007204:	4311      	orrs	r1, r2
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800720a:	0852      	lsrs	r2, r2, #1
 800720c:	3a01      	subs	r2, #1
 800720e:	0552      	lsls	r2, r2, #21
 8007210:	4311      	orrs	r1, r2
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007216:	0852      	lsrs	r2, r2, #1
 8007218:	3a01      	subs	r2, #1
 800721a:	0652      	lsls	r2, r2, #25
 800721c:	4311      	orrs	r1, r2
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007222:	06d2      	lsls	r2, r2, #27
 8007224:	430a      	orrs	r2, r1
 8007226:	4947      	ldr	r1, [pc, #284]	; (8007344 <HAL_RCC_OscConfig+0x628>)
 8007228:	4313      	orrs	r3, r2
 800722a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800722c:	4b45      	ldr	r3, [pc, #276]	; (8007344 <HAL_RCC_OscConfig+0x628>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a44      	ldr	r2, [pc, #272]	; (8007344 <HAL_RCC_OscConfig+0x628>)
 8007232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007236:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007238:	4b42      	ldr	r3, [pc, #264]	; (8007344 <HAL_RCC_OscConfig+0x628>)
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	4a41      	ldr	r2, [pc, #260]	; (8007344 <HAL_RCC_OscConfig+0x628>)
 800723e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007242:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007244:	f7fc f86e 	bl	8003324 <HAL_GetTick>
 8007248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800724a:	e008      	b.n	800725e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800724c:	f7fc f86a 	bl	8003324 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	2b02      	cmp	r3, #2
 8007258:	d901      	bls.n	800725e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e06e      	b.n	800733c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800725e:	4b39      	ldr	r3, [pc, #228]	; (8007344 <HAL_RCC_OscConfig+0x628>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0f0      	beq.n	800724c <HAL_RCC_OscConfig+0x530>
 800726a:	e066      	b.n	800733a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800726c:	4b35      	ldr	r3, [pc, #212]	; (8007344 <HAL_RCC_OscConfig+0x628>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a34      	ldr	r2, [pc, #208]	; (8007344 <HAL_RCC_OscConfig+0x628>)
 8007272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007276:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007278:	4b32      	ldr	r3, [pc, #200]	; (8007344 <HAL_RCC_OscConfig+0x628>)
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	4a31      	ldr	r2, [pc, #196]	; (8007344 <HAL_RCC_OscConfig+0x628>)
 800727e:	f023 0303 	bic.w	r3, r3, #3
 8007282:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007284:	4b2f      	ldr	r3, [pc, #188]	; (8007344 <HAL_RCC_OscConfig+0x628>)
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	4a2e      	ldr	r2, [pc, #184]	; (8007344 <HAL_RCC_OscConfig+0x628>)
 800728a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800728e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007292:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007294:	f7fc f846 	bl	8003324 <HAL_GetTick>
 8007298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800729a:	e008      	b.n	80072ae <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800729c:	f7fc f842 	bl	8003324 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d901      	bls.n	80072ae <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e046      	b.n	800733c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072ae:	4b25      	ldr	r3, [pc, #148]	; (8007344 <HAL_RCC_OscConfig+0x628>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1f0      	bne.n	800729c <HAL_RCC_OscConfig+0x580>
 80072ba:	e03e      	b.n	800733a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	69db      	ldr	r3, [r3, #28]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d101      	bne.n	80072c8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e039      	b.n	800733c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80072c8:	4b1e      	ldr	r3, [pc, #120]	; (8007344 <HAL_RCC_OscConfig+0x628>)
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f003 0203 	and.w	r2, r3, #3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d12c      	bne.n	8007336 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e6:	3b01      	subs	r3, #1
 80072e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d123      	bne.n	8007336 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d11b      	bne.n	8007336 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007308:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800730a:	429a      	cmp	r2, r3
 800730c:	d113      	bne.n	8007336 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007318:	085b      	lsrs	r3, r3, #1
 800731a:	3b01      	subs	r3, #1
 800731c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800731e:	429a      	cmp	r2, r3
 8007320:	d109      	bne.n	8007336 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732c:	085b      	lsrs	r3, r3, #1
 800732e:	3b01      	subs	r3, #1
 8007330:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007332:	429a      	cmp	r2, r3
 8007334:	d001      	beq.n	800733a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e000      	b.n	800733c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3720      	adds	r7, #32
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	40021000 	.word	0x40021000
 8007348:	019f800c 	.word	0x019f800c

0800734c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007356:	2300      	movs	r3, #0
 8007358:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e11e      	b.n	80075a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007364:	4b91      	ldr	r3, [pc, #580]	; (80075ac <HAL_RCC_ClockConfig+0x260>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 030f 	and.w	r3, r3, #15
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	429a      	cmp	r2, r3
 8007370:	d910      	bls.n	8007394 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007372:	4b8e      	ldr	r3, [pc, #568]	; (80075ac <HAL_RCC_ClockConfig+0x260>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f023 020f 	bic.w	r2, r3, #15
 800737a:	498c      	ldr	r1, [pc, #560]	; (80075ac <HAL_RCC_ClockConfig+0x260>)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	4313      	orrs	r3, r2
 8007380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007382:	4b8a      	ldr	r3, [pc, #552]	; (80075ac <HAL_RCC_ClockConfig+0x260>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 030f 	and.w	r3, r3, #15
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	429a      	cmp	r2, r3
 800738e:	d001      	beq.n	8007394 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e106      	b.n	80075a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b00      	cmp	r3, #0
 800739e:	d073      	beq.n	8007488 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d129      	bne.n	80073fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073a8:	4b81      	ldr	r3, [pc, #516]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e0f4      	b.n	80075a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80073b8:	f000 f99e 	bl	80076f8 <RCC_GetSysClockFreqFromPLLSource>
 80073bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	4a7c      	ldr	r2, [pc, #496]	; (80075b4 <HAL_RCC_ClockConfig+0x268>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d93f      	bls.n	8007446 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80073c6:	4b7a      	ldr	r3, [pc, #488]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d009      	beq.n	80073e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d033      	beq.n	8007446 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d12f      	bne.n	8007446 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80073e6:	4b72      	ldr	r3, [pc, #456]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073ee:	4a70      	ldr	r2, [pc, #448]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 80073f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80073f6:	2380      	movs	r3, #128	; 0x80
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	e024      	b.n	8007446 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	2b02      	cmp	r3, #2
 8007402:	d107      	bne.n	8007414 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007404:	4b6a      	ldr	r3, [pc, #424]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d109      	bne.n	8007424 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e0c6      	b.n	80075a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007414:	4b66      	ldr	r3, [pc, #408]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e0be      	b.n	80075a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007424:	f000 f8ce 	bl	80075c4 <HAL_RCC_GetSysClockFreq>
 8007428:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	4a61      	ldr	r2, [pc, #388]	; (80075b4 <HAL_RCC_ClockConfig+0x268>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d909      	bls.n	8007446 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007432:	4b5f      	ldr	r3, [pc, #380]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800743a:	4a5d      	ldr	r2, [pc, #372]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 800743c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007440:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007442:	2380      	movs	r3, #128	; 0x80
 8007444:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007446:	4b5a      	ldr	r3, [pc, #360]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f023 0203 	bic.w	r2, r3, #3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	4957      	ldr	r1, [pc, #348]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 8007454:	4313      	orrs	r3, r2
 8007456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007458:	f7fb ff64 	bl	8003324 <HAL_GetTick>
 800745c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800745e:	e00a      	b.n	8007476 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007460:	f7fb ff60 	bl	8003324 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	f241 3288 	movw	r2, #5000	; 0x1388
 800746e:	4293      	cmp	r3, r2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e095      	b.n	80075a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007476:	4b4e      	ldr	r3, [pc, #312]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 020c 	and.w	r2, r3, #12
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	429a      	cmp	r2, r3
 8007486:	d1eb      	bne.n	8007460 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d023      	beq.n	80074dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0304 	and.w	r3, r3, #4
 800749c:	2b00      	cmp	r3, #0
 800749e:	d005      	beq.n	80074ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074a0:	4b43      	ldr	r3, [pc, #268]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	4a42      	ldr	r2, [pc, #264]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 80074a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80074aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0308 	and.w	r3, r3, #8
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d007      	beq.n	80074c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80074b8:	4b3d      	ldr	r3, [pc, #244]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80074c0:	4a3b      	ldr	r2, [pc, #236]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 80074c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80074c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074c8:	4b39      	ldr	r3, [pc, #228]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	4936      	ldr	r1, [pc, #216]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	608b      	str	r3, [r1, #8]
 80074da:	e008      	b.n	80074ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2b80      	cmp	r3, #128	; 0x80
 80074e0:	d105      	bne.n	80074ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80074e2:	4b33      	ldr	r3, [pc, #204]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	4a32      	ldr	r2, [pc, #200]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 80074e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074ee:	4b2f      	ldr	r3, [pc, #188]	; (80075ac <HAL_RCC_ClockConfig+0x260>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 030f 	and.w	r3, r3, #15
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d21d      	bcs.n	8007538 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074fc:	4b2b      	ldr	r3, [pc, #172]	; (80075ac <HAL_RCC_ClockConfig+0x260>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f023 020f 	bic.w	r2, r3, #15
 8007504:	4929      	ldr	r1, [pc, #164]	; (80075ac <HAL_RCC_ClockConfig+0x260>)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	4313      	orrs	r3, r2
 800750a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800750c:	f7fb ff0a 	bl	8003324 <HAL_GetTick>
 8007510:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007512:	e00a      	b.n	800752a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007514:	f7fb ff06 	bl	8003324 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007522:	4293      	cmp	r3, r2
 8007524:	d901      	bls.n	800752a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e03b      	b.n	80075a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800752a:	4b20      	ldr	r3, [pc, #128]	; (80075ac <HAL_RCC_ClockConfig+0x260>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 030f 	and.w	r3, r3, #15
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d1ed      	bne.n	8007514 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d008      	beq.n	8007556 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007544:	4b1a      	ldr	r3, [pc, #104]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	4917      	ldr	r1, [pc, #92]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 8007552:	4313      	orrs	r3, r2
 8007554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0308 	and.w	r3, r3, #8
 800755e:	2b00      	cmp	r3, #0
 8007560:	d009      	beq.n	8007576 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007562:	4b13      	ldr	r3, [pc, #76]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	490f      	ldr	r1, [pc, #60]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 8007572:	4313      	orrs	r3, r2
 8007574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007576:	f000 f825 	bl	80075c4 <HAL_RCC_GetSysClockFreq>
 800757a:	4602      	mov	r2, r0
 800757c:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <HAL_RCC_ClockConfig+0x264>)
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	091b      	lsrs	r3, r3, #4
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	490c      	ldr	r1, [pc, #48]	; (80075b8 <HAL_RCC_ClockConfig+0x26c>)
 8007588:	5ccb      	ldrb	r3, [r1, r3]
 800758a:	f003 031f 	and.w	r3, r3, #31
 800758e:	fa22 f303 	lsr.w	r3, r2, r3
 8007592:	4a0a      	ldr	r2, [pc, #40]	; (80075bc <HAL_RCC_ClockConfig+0x270>)
 8007594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007596:	4b0a      	ldr	r3, [pc, #40]	; (80075c0 <HAL_RCC_ClockConfig+0x274>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4618      	mov	r0, r3
 800759c:	f7fb fe76 	bl	800328c <HAL_InitTick>
 80075a0:	4603      	mov	r3, r0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3718      	adds	r7, #24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	40022000 	.word	0x40022000
 80075b0:	40021000 	.word	0x40021000
 80075b4:	04c4b400 	.word	0x04c4b400
 80075b8:	080095a8 	.word	0x080095a8
 80075bc:	20000000 	.word	0x20000000
 80075c0:	20000004 	.word	0x20000004

080075c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80075ca:	4b2c      	ldr	r3, [pc, #176]	; (800767c <HAL_RCC_GetSysClockFreq+0xb8>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f003 030c 	and.w	r3, r3, #12
 80075d2:	2b04      	cmp	r3, #4
 80075d4:	d102      	bne.n	80075dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80075d6:	4b2a      	ldr	r3, [pc, #168]	; (8007680 <HAL_RCC_GetSysClockFreq+0xbc>)
 80075d8:	613b      	str	r3, [r7, #16]
 80075da:	e047      	b.n	800766c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80075dc:	4b27      	ldr	r3, [pc, #156]	; (800767c <HAL_RCC_GetSysClockFreq+0xb8>)
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f003 030c 	and.w	r3, r3, #12
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d102      	bne.n	80075ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80075e8:	4b26      	ldr	r3, [pc, #152]	; (8007684 <HAL_RCC_GetSysClockFreq+0xc0>)
 80075ea:	613b      	str	r3, [r7, #16]
 80075ec:	e03e      	b.n	800766c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80075ee:	4b23      	ldr	r3, [pc, #140]	; (800767c <HAL_RCC_GetSysClockFreq+0xb8>)
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f003 030c 	and.w	r3, r3, #12
 80075f6:	2b0c      	cmp	r3, #12
 80075f8:	d136      	bne.n	8007668 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80075fa:	4b20      	ldr	r3, [pc, #128]	; (800767c <HAL_RCC_GetSysClockFreq+0xb8>)
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f003 0303 	and.w	r3, r3, #3
 8007602:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007604:	4b1d      	ldr	r3, [pc, #116]	; (800767c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	091b      	lsrs	r3, r3, #4
 800760a:	f003 030f 	and.w	r3, r3, #15
 800760e:	3301      	adds	r3, #1
 8007610:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b03      	cmp	r3, #3
 8007616:	d10c      	bne.n	8007632 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007618:	4a1a      	ldr	r2, [pc, #104]	; (8007684 <HAL_RCC_GetSysClockFreq+0xc0>)
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007620:	4a16      	ldr	r2, [pc, #88]	; (800767c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007622:	68d2      	ldr	r2, [r2, #12]
 8007624:	0a12      	lsrs	r2, r2, #8
 8007626:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800762a:	fb02 f303 	mul.w	r3, r2, r3
 800762e:	617b      	str	r3, [r7, #20]
      break;
 8007630:	e00c      	b.n	800764c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007632:	4a13      	ldr	r2, [pc, #76]	; (8007680 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	fbb2 f3f3 	udiv	r3, r2, r3
 800763a:	4a10      	ldr	r2, [pc, #64]	; (800767c <HAL_RCC_GetSysClockFreq+0xb8>)
 800763c:	68d2      	ldr	r2, [r2, #12]
 800763e:	0a12      	lsrs	r2, r2, #8
 8007640:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007644:	fb02 f303 	mul.w	r3, r2, r3
 8007648:	617b      	str	r3, [r7, #20]
      break;
 800764a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800764c:	4b0b      	ldr	r3, [pc, #44]	; (800767c <HAL_RCC_GetSysClockFreq+0xb8>)
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	0e5b      	lsrs	r3, r3, #25
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	3301      	adds	r3, #1
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	fbb2 f3f3 	udiv	r3, r2, r3
 8007664:	613b      	str	r3, [r7, #16]
 8007666:	e001      	b.n	800766c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800766c:	693b      	ldr	r3, [r7, #16]
}
 800766e:	4618      	mov	r0, r3
 8007670:	371c      	adds	r7, #28
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	40021000 	.word	0x40021000
 8007680:	00f42400 	.word	0x00f42400
 8007684:	007a1200 	.word	0x007a1200

08007688 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800768c:	4b03      	ldr	r3, [pc, #12]	; (800769c <HAL_RCC_GetHCLKFreq+0x14>)
 800768e:	681b      	ldr	r3, [r3, #0]
}
 8007690:	4618      	mov	r0, r3
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	20000000 	.word	0x20000000

080076a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80076a4:	f7ff fff0 	bl	8007688 <HAL_RCC_GetHCLKFreq>
 80076a8:	4602      	mov	r2, r0
 80076aa:	4b06      	ldr	r3, [pc, #24]	; (80076c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	0a1b      	lsrs	r3, r3, #8
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	4904      	ldr	r1, [pc, #16]	; (80076c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80076b6:	5ccb      	ldrb	r3, [r1, r3]
 80076b8:	f003 031f 	and.w	r3, r3, #31
 80076bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	40021000 	.word	0x40021000
 80076c8:	080095b8 	.word	0x080095b8

080076cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80076d0:	f7ff ffda 	bl	8007688 <HAL_RCC_GetHCLKFreq>
 80076d4:	4602      	mov	r2, r0
 80076d6:	4b06      	ldr	r3, [pc, #24]	; (80076f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	0adb      	lsrs	r3, r3, #11
 80076dc:	f003 0307 	and.w	r3, r3, #7
 80076e0:	4904      	ldr	r1, [pc, #16]	; (80076f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80076e2:	5ccb      	ldrb	r3, [r1, r3]
 80076e4:	f003 031f 	and.w	r3, r3, #31
 80076e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	40021000 	.word	0x40021000
 80076f4:	080095b8 	.word	0x080095b8

080076f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b087      	sub	sp, #28
 80076fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076fe:	4b1e      	ldr	r3, [pc, #120]	; (8007778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f003 0303 	and.w	r3, r3, #3
 8007706:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007708:	4b1b      	ldr	r3, [pc, #108]	; (8007778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	091b      	lsrs	r3, r3, #4
 800770e:	f003 030f 	and.w	r3, r3, #15
 8007712:	3301      	adds	r3, #1
 8007714:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	2b03      	cmp	r3, #3
 800771a:	d10c      	bne.n	8007736 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800771c:	4a17      	ldr	r2, [pc, #92]	; (800777c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	fbb2 f3f3 	udiv	r3, r2, r3
 8007724:	4a14      	ldr	r2, [pc, #80]	; (8007778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007726:	68d2      	ldr	r2, [r2, #12]
 8007728:	0a12      	lsrs	r2, r2, #8
 800772a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800772e:	fb02 f303 	mul.w	r3, r2, r3
 8007732:	617b      	str	r3, [r7, #20]
    break;
 8007734:	e00c      	b.n	8007750 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007736:	4a12      	ldr	r2, [pc, #72]	; (8007780 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	fbb2 f3f3 	udiv	r3, r2, r3
 800773e:	4a0e      	ldr	r2, [pc, #56]	; (8007778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007740:	68d2      	ldr	r2, [r2, #12]
 8007742:	0a12      	lsrs	r2, r2, #8
 8007744:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007748:	fb02 f303 	mul.w	r3, r2, r3
 800774c:	617b      	str	r3, [r7, #20]
    break;
 800774e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007750:	4b09      	ldr	r3, [pc, #36]	; (8007778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	0e5b      	lsrs	r3, r3, #25
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	3301      	adds	r3, #1
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	fbb2 f3f3 	udiv	r3, r2, r3
 8007768:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800776a:	687b      	ldr	r3, [r7, #4]
}
 800776c:	4618      	mov	r0, r3
 800776e:	371c      	adds	r7, #28
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	40021000 	.word	0x40021000
 800777c:	007a1200 	.word	0x007a1200
 8007780:	00f42400 	.word	0x00f42400

08007784 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800778c:	2300      	movs	r3, #0
 800778e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007790:	2300      	movs	r3, #0
 8007792:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 8098 	beq.w	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077a2:	2300      	movs	r3, #0
 80077a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077a6:	4b43      	ldr	r3, [pc, #268]	; (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10d      	bne.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077b2:	4b40      	ldr	r3, [pc, #256]	; (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b6:	4a3f      	ldr	r2, [pc, #252]	; (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077bc:	6593      	str	r3, [r2, #88]	; 0x58
 80077be:	4b3d      	ldr	r3, [pc, #244]	; (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077c6:	60bb      	str	r3, [r7, #8]
 80077c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077ca:	2301      	movs	r3, #1
 80077cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077ce:	4b3a      	ldr	r3, [pc, #232]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a39      	ldr	r2, [pc, #228]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077da:	f7fb fda3 	bl	8003324 <HAL_GetTick>
 80077de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077e0:	e009      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077e2:	f7fb fd9f 	bl	8003324 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d902      	bls.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	74fb      	strb	r3, [r7, #19]
        break;
 80077f4:	e005      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077f6:	4b30      	ldr	r3, [pc, #192]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0ef      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007802:	7cfb      	ldrb	r3, [r7, #19]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d159      	bne.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007808:	4b2a      	ldr	r3, [pc, #168]	; (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800780a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800780e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007812:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d01e      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	429a      	cmp	r2, r3
 8007822:	d019      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007824:	4b23      	ldr	r3, [pc, #140]	; (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800782a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800782e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007830:	4b20      	ldr	r3, [pc, #128]	; (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007836:	4a1f      	ldr	r2, [pc, #124]	; (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800783c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007840:	4b1c      	ldr	r3, [pc, #112]	; (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007846:	4a1b      	ldr	r2, [pc, #108]	; (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800784c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007850:	4a18      	ldr	r2, [pc, #96]	; (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d016      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007862:	f7fb fd5f 	bl	8003324 <HAL_GetTick>
 8007866:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007868:	e00b      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800786a:	f7fb fd5b 	bl	8003324 <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	f241 3288 	movw	r2, #5000	; 0x1388
 8007878:	4293      	cmp	r3, r2
 800787a:	d902      	bls.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	74fb      	strb	r3, [r7, #19]
            break;
 8007880:	e006      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007882:	4b0c      	ldr	r3, [pc, #48]	; (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d0ec      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007890:	7cfb      	ldrb	r3, [r7, #19]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10b      	bne.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007896:	4b07      	ldr	r3, [pc, #28]	; (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800789c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a4:	4903      	ldr	r1, [pc, #12]	; (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80078ac:	e008      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80078ae:	7cfb      	ldrb	r3, [r7, #19]
 80078b0:	74bb      	strb	r3, [r7, #18]
 80078b2:	e005      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80078b4:	40021000 	.word	0x40021000
 80078b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078bc:	7cfb      	ldrb	r3, [r7, #19]
 80078be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078c0:	7c7b      	ldrb	r3, [r7, #17]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d105      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078c6:	4ba7      	ldr	r3, [pc, #668]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ca:	4aa6      	ldr	r2, [pc, #664]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078de:	4ba1      	ldr	r3, [pc, #644]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e4:	f023 0203 	bic.w	r2, r3, #3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	499d      	ldr	r1, [pc, #628]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00a      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007900:	4b98      	ldr	r3, [pc, #608]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007906:	f023 020c 	bic.w	r2, r3, #12
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	4995      	ldr	r1, [pc, #596]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007910:	4313      	orrs	r3, r2
 8007912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0304 	and.w	r3, r3, #4
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007922:	4b90      	ldr	r3, [pc, #576]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007928:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	498c      	ldr	r1, [pc, #560]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007932:	4313      	orrs	r3, r2
 8007934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0308 	and.w	r3, r3, #8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00a      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007944:	4b87      	ldr	r3, [pc, #540]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800794a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	4984      	ldr	r1, [pc, #528]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007954:	4313      	orrs	r3, r2
 8007956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0310 	and.w	r3, r3, #16
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007966:	4b7f      	ldr	r3, [pc, #508]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800796c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	497b      	ldr	r1, [pc, #492]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007976:	4313      	orrs	r3, r2
 8007978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0320 	and.w	r3, r3, #32
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00a      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007988:	4b76      	ldr	r3, [pc, #472]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800798a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800798e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	4973      	ldr	r1, [pc, #460]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007998:	4313      	orrs	r3, r2
 800799a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80079aa:	4b6e      	ldr	r3, [pc, #440]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	69db      	ldr	r3, [r3, #28]
 80079b8:	496a      	ldr	r1, [pc, #424]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00a      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80079cc:	4b65      	ldr	r3, [pc, #404]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	4962      	ldr	r1, [pc, #392]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80079ee:	4b5d      	ldr	r3, [pc, #372]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fc:	4959      	ldr	r1, [pc, #356]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00a      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a10:	4b54      	ldr	r3, [pc, #336]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a16:	f023 0203 	bic.w	r2, r3, #3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1e:	4951      	ldr	r1, [pc, #324]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a32:	4b4c      	ldr	r3, [pc, #304]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a40:	4948      	ldr	r1, [pc, #288]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d015      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a54:	4b43      	ldr	r3, [pc, #268]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a62:	4940      	ldr	r1, [pc, #256]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a64:	4313      	orrs	r3, r2
 8007a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a72:	d105      	bne.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a74:	4b3b      	ldr	r3, [pc, #236]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	4a3a      	ldr	r2, [pc, #232]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d015      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a8c:	4b35      	ldr	r3, [pc, #212]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a9a:	4932      	ldr	r1, [pc, #200]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aaa:	d105      	bne.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007aac:	4b2d      	ldr	r3, [pc, #180]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	4a2c      	ldr	r2, [pc, #176]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ab6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d015      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ac4:	4b27      	ldr	r3, [pc, #156]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	4924      	ldr	r1, [pc, #144]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ade:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ae2:	d105      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ae4:	4b1f      	ldr	r3, [pc, #124]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	4a1e      	ldr	r2, [pc, #120]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007aee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d015      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007afc:	4b19      	ldr	r3, [pc, #100]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0a:	4916      	ldr	r1, [pc, #88]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b1a:	d105      	bne.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b1c:	4b11      	ldr	r3, [pc, #68]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	4a10      	ldr	r2, [pc, #64]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b26:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d019      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b34:	4b0b      	ldr	r3, [pc, #44]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b42:	4908      	ldr	r1, [pc, #32]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b52:	d109      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b54:	4b03      	ldr	r3, [pc, #12]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	4a02      	ldr	r2, [pc, #8]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b5e:	60d3      	str	r3, [r2, #12]
 8007b60:	e002      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007b62:	bf00      	nop
 8007b64:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d015      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007b74:	4b29      	ldr	r3, [pc, #164]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b82:	4926      	ldr	r1, [pc, #152]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b92:	d105      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007b94:	4b21      	ldr	r3, [pc, #132]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	4a20      	ldr	r2, [pc, #128]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b9e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d015      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007bac:	4b1b      	ldr	r3, [pc, #108]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bb2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bba:	4918      	ldr	r1, [pc, #96]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bca:	d105      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007bcc:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	4a12      	ldr	r2, [pc, #72]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bd6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d015      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007be4:	4b0d      	ldr	r3, [pc, #52]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bf2:	490a      	ldr	r1, [pc, #40]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c02:	d105      	bne.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c04:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	4a04      	ldr	r2, [pc, #16]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007c10:	7cbb      	ldrb	r3, [r7, #18]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	40021000 	.word	0x40021000

08007c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e049      	b.n	8007cc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d106      	bne.n	8007c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fb f972 	bl	8002f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f000 fb6c 	bl	800833c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d001      	beq.n	8007ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e054      	b.n	8007d92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f042 0201 	orr.w	r2, r2, #1
 8007cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a26      	ldr	r2, [pc, #152]	; (8007da0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d022      	beq.n	8007d50 <HAL_TIM_Base_Start_IT+0x80>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d12:	d01d      	beq.n	8007d50 <HAL_TIM_Base_Start_IT+0x80>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a22      	ldr	r2, [pc, #136]	; (8007da4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d018      	beq.n	8007d50 <HAL_TIM_Base_Start_IT+0x80>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a21      	ldr	r2, [pc, #132]	; (8007da8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d013      	beq.n	8007d50 <HAL_TIM_Base_Start_IT+0x80>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a1f      	ldr	r2, [pc, #124]	; (8007dac <HAL_TIM_Base_Start_IT+0xdc>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d00e      	beq.n	8007d50 <HAL_TIM_Base_Start_IT+0x80>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a1e      	ldr	r2, [pc, #120]	; (8007db0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d009      	beq.n	8007d50 <HAL_TIM_Base_Start_IT+0x80>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a1c      	ldr	r2, [pc, #112]	; (8007db4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d004      	beq.n	8007d50 <HAL_TIM_Base_Start_IT+0x80>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a1b      	ldr	r2, [pc, #108]	; (8007db8 <HAL_TIM_Base_Start_IT+0xe8>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d115      	bne.n	8007d7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689a      	ldr	r2, [r3, #8]
 8007d56:	4b19      	ldr	r3, [pc, #100]	; (8007dbc <HAL_TIM_Base_Start_IT+0xec>)
 8007d58:	4013      	ands	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b06      	cmp	r3, #6
 8007d60:	d015      	beq.n	8007d8e <HAL_TIM_Base_Start_IT+0xbe>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d68:	d011      	beq.n	8007d8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f042 0201 	orr.w	r2, r2, #1
 8007d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d7a:	e008      	b.n	8007d8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0201 	orr.w	r2, r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	e000      	b.n	8007d90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	40012c00 	.word	0x40012c00
 8007da4:	40000400 	.word	0x40000400
 8007da8:	40000800 	.word	0x40000800
 8007dac:	40000c00 	.word	0x40000c00
 8007db0:	40013400 	.word	0x40013400
 8007db4:	40014000 	.word	0x40014000
 8007db8:	40015000 	.word	0x40015000
 8007dbc:	00010007 	.word	0x00010007

08007dc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d122      	bne.n	8007e1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	f003 0302 	and.w	r3, r3, #2
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d11b      	bne.n	8007e1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f06f 0202 	mvn.w	r2, #2
 8007dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	f003 0303 	and.w	r3, r3, #3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fa7c 	bl	8008300 <HAL_TIM_IC_CaptureCallback>
 8007e08:	e005      	b.n	8007e16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fa6e 	bl	80082ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fa7f 	bl	8008314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	2b04      	cmp	r3, #4
 8007e28:	d122      	bne.n	8007e70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	f003 0304 	and.w	r3, r3, #4
 8007e34:	2b04      	cmp	r3, #4
 8007e36:	d11b      	bne.n	8007e70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f06f 0204 	mvn.w	r2, #4
 8007e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2202      	movs	r2, #2
 8007e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa52 	bl	8008300 <HAL_TIM_IC_CaptureCallback>
 8007e5c:	e005      	b.n	8007e6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fa44 	bl	80082ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fa55 	bl	8008314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	f003 0308 	and.w	r3, r3, #8
 8007e7a:	2b08      	cmp	r3, #8
 8007e7c:	d122      	bne.n	8007ec4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	f003 0308 	and.w	r3, r3, #8
 8007e88:	2b08      	cmp	r3, #8
 8007e8a:	d11b      	bne.n	8007ec4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f06f 0208 	mvn.w	r2, #8
 8007e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2204      	movs	r2, #4
 8007e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	f003 0303 	and.w	r3, r3, #3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa28 	bl	8008300 <HAL_TIM_IC_CaptureCallback>
 8007eb0:	e005      	b.n	8007ebe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fa1a 	bl	80082ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fa2b 	bl	8008314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	f003 0310 	and.w	r3, r3, #16
 8007ece:	2b10      	cmp	r3, #16
 8007ed0:	d122      	bne.n	8007f18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	f003 0310 	and.w	r3, r3, #16
 8007edc:	2b10      	cmp	r3, #16
 8007ede:	d11b      	bne.n	8007f18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f06f 0210 	mvn.w	r2, #16
 8007ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2208      	movs	r2, #8
 8007eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f9fe 	bl	8008300 <HAL_TIM_IC_CaptureCallback>
 8007f04:	e005      	b.n	8007f12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f9f0 	bl	80082ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fa01 	bl	8008314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d10e      	bne.n	8007f44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d107      	bne.n	8007f44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f06f 0201 	mvn.w	r2, #1
 8007f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7fa fed6 	bl	8002cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f4e:	2b80      	cmp	r3, #128	; 0x80
 8007f50:	d10e      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f5c:	2b80      	cmp	r3, #128	; 0x80
 8007f5e:	d107      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fbca 	bl	8008704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f7e:	d10e      	bne.n	8007f9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f8a:	2b80      	cmp	r3, #128	; 0x80
 8007f8c:	d107      	bne.n	8007f9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fbbd 	bl	8008718 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa8:	2b40      	cmp	r3, #64	; 0x40
 8007faa:	d10e      	bne.n	8007fca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb6:	2b40      	cmp	r3, #64	; 0x40
 8007fb8:	d107      	bne.n	8007fca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f9af 	bl	8008328 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	f003 0320 	and.w	r3, r3, #32
 8007fd4:	2b20      	cmp	r3, #32
 8007fd6:	d10e      	bne.n	8007ff6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	f003 0320 	and.w	r3, r3, #32
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d107      	bne.n	8007ff6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f06f 0220 	mvn.w	r2, #32
 8007fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fb7d 	bl	80086f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008004:	d10f      	bne.n	8008026 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008014:	d107      	bne.n	8008026 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800801e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fb83 	bl	800872c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008030:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008034:	d10f      	bne.n	8008056 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008040:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008044:	d107      	bne.n	8008056 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800804e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fb75 	bl	8008740 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008064:	d10f      	bne.n	8008086 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008074:	d107      	bne.n	8008086 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800807e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fb67 	bl	8008754 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008090:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008094:	d10f      	bne.n	80080b6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080a4:	d107      	bne.n	80080b6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80080ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fb59 	bl	8008768 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d101      	bne.n	80080dc <HAL_TIM_ConfigClockSource+0x1c>
 80080d8:	2302      	movs	r3, #2
 80080da:	e0f6      	b.n	80082ca <HAL_TIM_ConfigClockSource+0x20a>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80080fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008106:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a6f      	ldr	r2, [pc, #444]	; (80082d4 <HAL_TIM_ConfigClockSource+0x214>)
 8008116:	4293      	cmp	r3, r2
 8008118:	f000 80c1 	beq.w	800829e <HAL_TIM_ConfigClockSource+0x1de>
 800811c:	4a6d      	ldr	r2, [pc, #436]	; (80082d4 <HAL_TIM_ConfigClockSource+0x214>)
 800811e:	4293      	cmp	r3, r2
 8008120:	f200 80c6 	bhi.w	80082b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008124:	4a6c      	ldr	r2, [pc, #432]	; (80082d8 <HAL_TIM_ConfigClockSource+0x218>)
 8008126:	4293      	cmp	r3, r2
 8008128:	f000 80b9 	beq.w	800829e <HAL_TIM_ConfigClockSource+0x1de>
 800812c:	4a6a      	ldr	r2, [pc, #424]	; (80082d8 <HAL_TIM_ConfigClockSource+0x218>)
 800812e:	4293      	cmp	r3, r2
 8008130:	f200 80be 	bhi.w	80082b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008134:	4a69      	ldr	r2, [pc, #420]	; (80082dc <HAL_TIM_ConfigClockSource+0x21c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	f000 80b1 	beq.w	800829e <HAL_TIM_ConfigClockSource+0x1de>
 800813c:	4a67      	ldr	r2, [pc, #412]	; (80082dc <HAL_TIM_ConfigClockSource+0x21c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	f200 80b6 	bhi.w	80082b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008144:	4a66      	ldr	r2, [pc, #408]	; (80082e0 <HAL_TIM_ConfigClockSource+0x220>)
 8008146:	4293      	cmp	r3, r2
 8008148:	f000 80a9 	beq.w	800829e <HAL_TIM_ConfigClockSource+0x1de>
 800814c:	4a64      	ldr	r2, [pc, #400]	; (80082e0 <HAL_TIM_ConfigClockSource+0x220>)
 800814e:	4293      	cmp	r3, r2
 8008150:	f200 80ae 	bhi.w	80082b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008154:	4a63      	ldr	r2, [pc, #396]	; (80082e4 <HAL_TIM_ConfigClockSource+0x224>)
 8008156:	4293      	cmp	r3, r2
 8008158:	f000 80a1 	beq.w	800829e <HAL_TIM_ConfigClockSource+0x1de>
 800815c:	4a61      	ldr	r2, [pc, #388]	; (80082e4 <HAL_TIM_ConfigClockSource+0x224>)
 800815e:	4293      	cmp	r3, r2
 8008160:	f200 80a6 	bhi.w	80082b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008164:	4a60      	ldr	r2, [pc, #384]	; (80082e8 <HAL_TIM_ConfigClockSource+0x228>)
 8008166:	4293      	cmp	r3, r2
 8008168:	f000 8099 	beq.w	800829e <HAL_TIM_ConfigClockSource+0x1de>
 800816c:	4a5e      	ldr	r2, [pc, #376]	; (80082e8 <HAL_TIM_ConfigClockSource+0x228>)
 800816e:	4293      	cmp	r3, r2
 8008170:	f200 809e 	bhi.w	80082b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008174:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008178:	f000 8091 	beq.w	800829e <HAL_TIM_ConfigClockSource+0x1de>
 800817c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008180:	f200 8096 	bhi.w	80082b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008188:	f000 8089 	beq.w	800829e <HAL_TIM_ConfigClockSource+0x1de>
 800818c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008190:	f200 808e 	bhi.w	80082b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008198:	d03e      	beq.n	8008218 <HAL_TIM_ConfigClockSource+0x158>
 800819a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800819e:	f200 8087 	bhi.w	80082b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80081a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081a6:	f000 8086 	beq.w	80082b6 <HAL_TIM_ConfigClockSource+0x1f6>
 80081aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ae:	d87f      	bhi.n	80082b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80081b0:	2b70      	cmp	r3, #112	; 0x70
 80081b2:	d01a      	beq.n	80081ea <HAL_TIM_ConfigClockSource+0x12a>
 80081b4:	2b70      	cmp	r3, #112	; 0x70
 80081b6:	d87b      	bhi.n	80082b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80081b8:	2b60      	cmp	r3, #96	; 0x60
 80081ba:	d050      	beq.n	800825e <HAL_TIM_ConfigClockSource+0x19e>
 80081bc:	2b60      	cmp	r3, #96	; 0x60
 80081be:	d877      	bhi.n	80082b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80081c0:	2b50      	cmp	r3, #80	; 0x50
 80081c2:	d03c      	beq.n	800823e <HAL_TIM_ConfigClockSource+0x17e>
 80081c4:	2b50      	cmp	r3, #80	; 0x50
 80081c6:	d873      	bhi.n	80082b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80081c8:	2b40      	cmp	r3, #64	; 0x40
 80081ca:	d058      	beq.n	800827e <HAL_TIM_ConfigClockSource+0x1be>
 80081cc:	2b40      	cmp	r3, #64	; 0x40
 80081ce:	d86f      	bhi.n	80082b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80081d0:	2b30      	cmp	r3, #48	; 0x30
 80081d2:	d064      	beq.n	800829e <HAL_TIM_ConfigClockSource+0x1de>
 80081d4:	2b30      	cmp	r3, #48	; 0x30
 80081d6:	d86b      	bhi.n	80082b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80081d8:	2b20      	cmp	r3, #32
 80081da:	d060      	beq.n	800829e <HAL_TIM_ConfigClockSource+0x1de>
 80081dc:	2b20      	cmp	r3, #32
 80081de:	d867      	bhi.n	80082b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d05c      	beq.n	800829e <HAL_TIM_ConfigClockSource+0x1de>
 80081e4:	2b10      	cmp	r3, #16
 80081e6:	d05a      	beq.n	800829e <HAL_TIM_ConfigClockSource+0x1de>
 80081e8:	e062      	b.n	80082b0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6818      	ldr	r0, [r3, #0]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	6899      	ldr	r1, [r3, #8]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	f000 f9c3 	bl	8008584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800820c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	609a      	str	r2, [r3, #8]
      break;
 8008216:	e04f      	b.n	80082b8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6818      	ldr	r0, [r3, #0]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	6899      	ldr	r1, [r3, #8]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	f000 f9ac 	bl	8008584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689a      	ldr	r2, [r3, #8]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800823a:	609a      	str	r2, [r3, #8]
      break;
 800823c:	e03c      	b.n	80082b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6818      	ldr	r0, [r3, #0]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	6859      	ldr	r1, [r3, #4]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	461a      	mov	r2, r3
 800824c:	f000 f91e 	bl	800848c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2150      	movs	r1, #80	; 0x50
 8008256:	4618      	mov	r0, r3
 8008258:	f000 f977 	bl	800854a <TIM_ITRx_SetConfig>
      break;
 800825c:	e02c      	b.n	80082b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6818      	ldr	r0, [r3, #0]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	6859      	ldr	r1, [r3, #4]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	461a      	mov	r2, r3
 800826c:	f000 f93d 	bl	80084ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2160      	movs	r1, #96	; 0x60
 8008276:	4618      	mov	r0, r3
 8008278:	f000 f967 	bl	800854a <TIM_ITRx_SetConfig>
      break;
 800827c:	e01c      	b.n	80082b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6818      	ldr	r0, [r3, #0]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	6859      	ldr	r1, [r3, #4]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	461a      	mov	r2, r3
 800828c:	f000 f8fe 	bl	800848c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2140      	movs	r1, #64	; 0x40
 8008296:	4618      	mov	r0, r3
 8008298:	f000 f957 	bl	800854a <TIM_ITRx_SetConfig>
      break;
 800829c:	e00c      	b.n	80082b8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4619      	mov	r1, r3
 80082a8:	4610      	mov	r0, r2
 80082aa:	f000 f94e 	bl	800854a <TIM_ITRx_SetConfig>
      break;
 80082ae:	e003      	b.n	80082b8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	73fb      	strb	r3, [r7, #15]
      break;
 80082b4:	e000      	b.n	80082b8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80082b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	00100070 	.word	0x00100070
 80082d8:	00100060 	.word	0x00100060
 80082dc:	00100050 	.word	0x00100050
 80082e0:	00100040 	.word	0x00100040
 80082e4:	00100030 	.word	0x00100030
 80082e8:	00100020 	.word	0x00100020

080082ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a46      	ldr	r2, [pc, #280]	; (8008468 <TIM_Base_SetConfig+0x12c>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d017      	beq.n	8008384 <TIM_Base_SetConfig+0x48>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800835a:	d013      	beq.n	8008384 <TIM_Base_SetConfig+0x48>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a43      	ldr	r2, [pc, #268]	; (800846c <TIM_Base_SetConfig+0x130>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00f      	beq.n	8008384 <TIM_Base_SetConfig+0x48>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a42      	ldr	r2, [pc, #264]	; (8008470 <TIM_Base_SetConfig+0x134>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d00b      	beq.n	8008384 <TIM_Base_SetConfig+0x48>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a41      	ldr	r2, [pc, #260]	; (8008474 <TIM_Base_SetConfig+0x138>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d007      	beq.n	8008384 <TIM_Base_SetConfig+0x48>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a40      	ldr	r2, [pc, #256]	; (8008478 <TIM_Base_SetConfig+0x13c>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d003      	beq.n	8008384 <TIM_Base_SetConfig+0x48>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a3f      	ldr	r2, [pc, #252]	; (800847c <TIM_Base_SetConfig+0x140>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d108      	bne.n	8008396 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800838a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a33      	ldr	r2, [pc, #204]	; (8008468 <TIM_Base_SetConfig+0x12c>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d023      	beq.n	80083e6 <TIM_Base_SetConfig+0xaa>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a4:	d01f      	beq.n	80083e6 <TIM_Base_SetConfig+0xaa>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a30      	ldr	r2, [pc, #192]	; (800846c <TIM_Base_SetConfig+0x130>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d01b      	beq.n	80083e6 <TIM_Base_SetConfig+0xaa>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a2f      	ldr	r2, [pc, #188]	; (8008470 <TIM_Base_SetConfig+0x134>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d017      	beq.n	80083e6 <TIM_Base_SetConfig+0xaa>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a2e      	ldr	r2, [pc, #184]	; (8008474 <TIM_Base_SetConfig+0x138>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d013      	beq.n	80083e6 <TIM_Base_SetConfig+0xaa>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a2d      	ldr	r2, [pc, #180]	; (8008478 <TIM_Base_SetConfig+0x13c>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d00f      	beq.n	80083e6 <TIM_Base_SetConfig+0xaa>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a2d      	ldr	r2, [pc, #180]	; (8008480 <TIM_Base_SetConfig+0x144>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d00b      	beq.n	80083e6 <TIM_Base_SetConfig+0xaa>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a2c      	ldr	r2, [pc, #176]	; (8008484 <TIM_Base_SetConfig+0x148>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d007      	beq.n	80083e6 <TIM_Base_SetConfig+0xaa>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a2b      	ldr	r2, [pc, #172]	; (8008488 <TIM_Base_SetConfig+0x14c>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d003      	beq.n	80083e6 <TIM_Base_SetConfig+0xaa>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a26      	ldr	r2, [pc, #152]	; (800847c <TIM_Base_SetConfig+0x140>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d108      	bne.n	80083f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	4313      	orrs	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a12      	ldr	r2, [pc, #72]	; (8008468 <TIM_Base_SetConfig+0x12c>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d013      	beq.n	800844c <TIM_Base_SetConfig+0x110>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a14      	ldr	r2, [pc, #80]	; (8008478 <TIM_Base_SetConfig+0x13c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d00f      	beq.n	800844c <TIM_Base_SetConfig+0x110>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a14      	ldr	r2, [pc, #80]	; (8008480 <TIM_Base_SetConfig+0x144>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d00b      	beq.n	800844c <TIM_Base_SetConfig+0x110>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a13      	ldr	r2, [pc, #76]	; (8008484 <TIM_Base_SetConfig+0x148>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d007      	beq.n	800844c <TIM_Base_SetConfig+0x110>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a12      	ldr	r2, [pc, #72]	; (8008488 <TIM_Base_SetConfig+0x14c>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d003      	beq.n	800844c <TIM_Base_SetConfig+0x110>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a0d      	ldr	r2, [pc, #52]	; (800847c <TIM_Base_SetConfig+0x140>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d103      	bne.n	8008454 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	691a      	ldr	r2, [r3, #16]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	615a      	str	r2, [r3, #20]
}
 800845a:	bf00      	nop
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	40012c00 	.word	0x40012c00
 800846c:	40000400 	.word	0x40000400
 8008470:	40000800 	.word	0x40000800
 8008474:	40000c00 	.word	0x40000c00
 8008478:	40013400 	.word	0x40013400
 800847c:	40015000 	.word	0x40015000
 8008480:	40014000 	.word	0x40014000
 8008484:	40014400 	.word	0x40014400
 8008488:	40014800 	.word	0x40014800

0800848c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800848c:	b480      	push	{r7}
 800848e:	b087      	sub	sp, #28
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	f023 0201 	bic.w	r2, r3, #1
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	011b      	lsls	r3, r3, #4
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	4313      	orrs	r3, r2
 80084c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f023 030a 	bic.w	r3, r3, #10
 80084c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	621a      	str	r2, [r3, #32]
}
 80084de:	bf00      	nop
 80084e0:	371c      	adds	r7, #28
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b087      	sub	sp, #28
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	60f8      	str	r0, [r7, #12]
 80084f2:	60b9      	str	r1, [r7, #8]
 80084f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	f023 0210 	bic.w	r2, r3, #16
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008514:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	031b      	lsls	r3, r3, #12
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	4313      	orrs	r3, r2
 800851e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008526:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	011b      	lsls	r3, r3, #4
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	4313      	orrs	r3, r2
 8008530:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	621a      	str	r2, [r3, #32]
}
 800853e:	bf00      	nop
 8008540:	371c      	adds	r7, #28
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800854a:	b480      	push	{r7}
 800854c:	b085      	sub	sp, #20
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4313      	orrs	r3, r2
 800856c:	f043 0307 	orr.w	r3, r3, #7
 8008570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	609a      	str	r2, [r3, #8]
}
 8008578:	bf00      	nop
 800857a:	3714      	adds	r7, #20
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008584:	b480      	push	{r7}
 8008586:	b087      	sub	sp, #28
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
 8008590:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800859e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	021a      	lsls	r2, r3, #8
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	431a      	orrs	r2, r3
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	609a      	str	r2, [r3, #8]
}
 80085b8:	bf00      	nop
 80085ba:	371c      	adds	r7, #28
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d101      	bne.n	80085dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085d8:	2302      	movs	r3, #2
 80085da:	e074      	b.n	80086c6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a34      	ldr	r2, [pc, #208]	; (80086d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d009      	beq.n	800861a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a33      	ldr	r2, [pc, #204]	; (80086d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d004      	beq.n	800861a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a31      	ldr	r2, [pc, #196]	; (80086dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d108      	bne.n	800862c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008620:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	4313      	orrs	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008636:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	4313      	orrs	r3, r2
 8008640:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a21      	ldr	r2, [pc, #132]	; (80086d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d022      	beq.n	800869a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800865c:	d01d      	beq.n	800869a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a1f      	ldr	r2, [pc, #124]	; (80086e0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d018      	beq.n	800869a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a1d      	ldr	r2, [pc, #116]	; (80086e4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d013      	beq.n	800869a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a1c      	ldr	r2, [pc, #112]	; (80086e8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d00e      	beq.n	800869a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a15      	ldr	r2, [pc, #84]	; (80086d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d009      	beq.n	800869a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a18      	ldr	r2, [pc, #96]	; (80086ec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d004      	beq.n	800869a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a11      	ldr	r2, [pc, #68]	; (80086dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d10c      	bne.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3714      	adds	r7, #20
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	40012c00 	.word	0x40012c00
 80086d8:	40013400 	.word	0x40013400
 80086dc:	40015000 	.word	0x40015000
 80086e0:	40000400 	.word	0x40000400
 80086e4:	40000800 	.word	0x40000800
 80086e8:	40000c00 	.word	0x40000c00
 80086ec:	40014000 	.word	0x40014000

080086f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e042      	b.n	8008814 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008794:	2b00      	cmp	r3, #0
 8008796:	d106      	bne.n	80087a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7fa fc83 	bl	80030ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2224      	movs	r2, #36	; 0x24
 80087aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f022 0201 	bic.w	r2, r2, #1
 80087bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f82c 	bl	800881c <UART_SetConfig>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d101      	bne.n	80087ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e022      	b.n	8008814 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fb1c 	bl	8008e14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685a      	ldr	r2, [r3, #4]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689a      	ldr	r2, [r3, #8]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f042 0201 	orr.w	r2, r2, #1
 800880a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fba3 	bl	8008f58 <UART_CheckIdleState>
 8008812:	4603      	mov	r3, r0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800881c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008820:	b08c      	sub	sp, #48	; 0x30
 8008822:	af00      	add	r7, sp, #0
 8008824:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	689a      	ldr	r2, [r3, #8]
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	431a      	orrs	r2, r3
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	431a      	orrs	r2, r3
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	4313      	orrs	r3, r2
 8008842:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	4baa      	ldr	r3, [pc, #680]	; (8008af4 <UART_SetConfig+0x2d8>)
 800884c:	4013      	ands	r3, r2
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	6812      	ldr	r2, [r2, #0]
 8008852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008854:	430b      	orrs	r3, r1
 8008856:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	68da      	ldr	r2, [r3, #12]
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	430a      	orrs	r2, r1
 800886c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a9f      	ldr	r2, [pc, #636]	; (8008af8 <UART_SetConfig+0x2dc>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d004      	beq.n	8008888 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008884:	4313      	orrs	r3, r2
 8008886:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008892:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	6812      	ldr	r2, [r2, #0]
 800889a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800889c:	430b      	orrs	r3, r1
 800889e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a6:	f023 010f 	bic.w	r1, r3, #15
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	430a      	orrs	r2, r1
 80088b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a90      	ldr	r2, [pc, #576]	; (8008afc <UART_SetConfig+0x2e0>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d125      	bne.n	800890c <UART_SetConfig+0xf0>
 80088c0:	4b8f      	ldr	r3, [pc, #572]	; (8008b00 <UART_SetConfig+0x2e4>)
 80088c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088c6:	f003 0303 	and.w	r3, r3, #3
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d81a      	bhi.n	8008904 <UART_SetConfig+0xe8>
 80088ce:	a201      	add	r2, pc, #4	; (adr r2, 80088d4 <UART_SetConfig+0xb8>)
 80088d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d4:	080088e5 	.word	0x080088e5
 80088d8:	080088f5 	.word	0x080088f5
 80088dc:	080088ed 	.word	0x080088ed
 80088e0:	080088fd 	.word	0x080088fd
 80088e4:	2301      	movs	r3, #1
 80088e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ea:	e116      	b.n	8008b1a <UART_SetConfig+0x2fe>
 80088ec:	2302      	movs	r3, #2
 80088ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088f2:	e112      	b.n	8008b1a <UART_SetConfig+0x2fe>
 80088f4:	2304      	movs	r3, #4
 80088f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088fa:	e10e      	b.n	8008b1a <UART_SetConfig+0x2fe>
 80088fc:	2308      	movs	r3, #8
 80088fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008902:	e10a      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008904:	2310      	movs	r3, #16
 8008906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800890a:	e106      	b.n	8008b1a <UART_SetConfig+0x2fe>
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a7c      	ldr	r2, [pc, #496]	; (8008b04 <UART_SetConfig+0x2e8>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d138      	bne.n	8008988 <UART_SetConfig+0x16c>
 8008916:	4b7a      	ldr	r3, [pc, #488]	; (8008b00 <UART_SetConfig+0x2e4>)
 8008918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800891c:	f003 030c 	and.w	r3, r3, #12
 8008920:	2b0c      	cmp	r3, #12
 8008922:	d82d      	bhi.n	8008980 <UART_SetConfig+0x164>
 8008924:	a201      	add	r2, pc, #4	; (adr r2, 800892c <UART_SetConfig+0x110>)
 8008926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892a:	bf00      	nop
 800892c:	08008961 	.word	0x08008961
 8008930:	08008981 	.word	0x08008981
 8008934:	08008981 	.word	0x08008981
 8008938:	08008981 	.word	0x08008981
 800893c:	08008971 	.word	0x08008971
 8008940:	08008981 	.word	0x08008981
 8008944:	08008981 	.word	0x08008981
 8008948:	08008981 	.word	0x08008981
 800894c:	08008969 	.word	0x08008969
 8008950:	08008981 	.word	0x08008981
 8008954:	08008981 	.word	0x08008981
 8008958:	08008981 	.word	0x08008981
 800895c:	08008979 	.word	0x08008979
 8008960:	2300      	movs	r3, #0
 8008962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008966:	e0d8      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008968:	2302      	movs	r3, #2
 800896a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800896e:	e0d4      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008970:	2304      	movs	r3, #4
 8008972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008976:	e0d0      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008978:	2308      	movs	r3, #8
 800897a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800897e:	e0cc      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008980:	2310      	movs	r3, #16
 8008982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008986:	e0c8      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a5e      	ldr	r2, [pc, #376]	; (8008b08 <UART_SetConfig+0x2ec>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d125      	bne.n	80089de <UART_SetConfig+0x1c2>
 8008992:	4b5b      	ldr	r3, [pc, #364]	; (8008b00 <UART_SetConfig+0x2e4>)
 8008994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008998:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800899c:	2b30      	cmp	r3, #48	; 0x30
 800899e:	d016      	beq.n	80089ce <UART_SetConfig+0x1b2>
 80089a0:	2b30      	cmp	r3, #48	; 0x30
 80089a2:	d818      	bhi.n	80089d6 <UART_SetConfig+0x1ba>
 80089a4:	2b20      	cmp	r3, #32
 80089a6:	d00a      	beq.n	80089be <UART_SetConfig+0x1a2>
 80089a8:	2b20      	cmp	r3, #32
 80089aa:	d814      	bhi.n	80089d6 <UART_SetConfig+0x1ba>
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <UART_SetConfig+0x19a>
 80089b0:	2b10      	cmp	r3, #16
 80089b2:	d008      	beq.n	80089c6 <UART_SetConfig+0x1aa>
 80089b4:	e00f      	b.n	80089d6 <UART_SetConfig+0x1ba>
 80089b6:	2300      	movs	r3, #0
 80089b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089bc:	e0ad      	b.n	8008b1a <UART_SetConfig+0x2fe>
 80089be:	2302      	movs	r3, #2
 80089c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089c4:	e0a9      	b.n	8008b1a <UART_SetConfig+0x2fe>
 80089c6:	2304      	movs	r3, #4
 80089c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089cc:	e0a5      	b.n	8008b1a <UART_SetConfig+0x2fe>
 80089ce:	2308      	movs	r3, #8
 80089d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089d4:	e0a1      	b.n	8008b1a <UART_SetConfig+0x2fe>
 80089d6:	2310      	movs	r3, #16
 80089d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089dc:	e09d      	b.n	8008b1a <UART_SetConfig+0x2fe>
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a4a      	ldr	r2, [pc, #296]	; (8008b0c <UART_SetConfig+0x2f0>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d125      	bne.n	8008a34 <UART_SetConfig+0x218>
 80089e8:	4b45      	ldr	r3, [pc, #276]	; (8008b00 <UART_SetConfig+0x2e4>)
 80089ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80089f2:	2bc0      	cmp	r3, #192	; 0xc0
 80089f4:	d016      	beq.n	8008a24 <UART_SetConfig+0x208>
 80089f6:	2bc0      	cmp	r3, #192	; 0xc0
 80089f8:	d818      	bhi.n	8008a2c <UART_SetConfig+0x210>
 80089fa:	2b80      	cmp	r3, #128	; 0x80
 80089fc:	d00a      	beq.n	8008a14 <UART_SetConfig+0x1f8>
 80089fe:	2b80      	cmp	r3, #128	; 0x80
 8008a00:	d814      	bhi.n	8008a2c <UART_SetConfig+0x210>
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d002      	beq.n	8008a0c <UART_SetConfig+0x1f0>
 8008a06:	2b40      	cmp	r3, #64	; 0x40
 8008a08:	d008      	beq.n	8008a1c <UART_SetConfig+0x200>
 8008a0a:	e00f      	b.n	8008a2c <UART_SetConfig+0x210>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a12:	e082      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008a14:	2302      	movs	r3, #2
 8008a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a1a:	e07e      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008a1c:	2304      	movs	r3, #4
 8008a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a22:	e07a      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008a24:	2308      	movs	r3, #8
 8008a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a2a:	e076      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008a2c:	2310      	movs	r3, #16
 8008a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a32:	e072      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a35      	ldr	r2, [pc, #212]	; (8008b10 <UART_SetConfig+0x2f4>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d12a      	bne.n	8008a94 <UART_SetConfig+0x278>
 8008a3e:	4b30      	ldr	r3, [pc, #192]	; (8008b00 <UART_SetConfig+0x2e4>)
 8008a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a4c:	d01a      	beq.n	8008a84 <UART_SetConfig+0x268>
 8008a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a52:	d81b      	bhi.n	8008a8c <UART_SetConfig+0x270>
 8008a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a58:	d00c      	beq.n	8008a74 <UART_SetConfig+0x258>
 8008a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a5e:	d815      	bhi.n	8008a8c <UART_SetConfig+0x270>
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d003      	beq.n	8008a6c <UART_SetConfig+0x250>
 8008a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a68:	d008      	beq.n	8008a7c <UART_SetConfig+0x260>
 8008a6a:	e00f      	b.n	8008a8c <UART_SetConfig+0x270>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a72:	e052      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008a74:	2302      	movs	r3, #2
 8008a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a7a:	e04e      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008a7c:	2304      	movs	r3, #4
 8008a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a82:	e04a      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008a84:	2308      	movs	r3, #8
 8008a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a8a:	e046      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008a8c:	2310      	movs	r3, #16
 8008a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a92:	e042      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a17      	ldr	r2, [pc, #92]	; (8008af8 <UART_SetConfig+0x2dc>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d13a      	bne.n	8008b14 <UART_SetConfig+0x2f8>
 8008a9e:	4b18      	ldr	r3, [pc, #96]	; (8008b00 <UART_SetConfig+0x2e4>)
 8008aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008aa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008aac:	d01a      	beq.n	8008ae4 <UART_SetConfig+0x2c8>
 8008aae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ab2:	d81b      	bhi.n	8008aec <UART_SetConfig+0x2d0>
 8008ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ab8:	d00c      	beq.n	8008ad4 <UART_SetConfig+0x2b8>
 8008aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008abe:	d815      	bhi.n	8008aec <UART_SetConfig+0x2d0>
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d003      	beq.n	8008acc <UART_SetConfig+0x2b0>
 8008ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ac8:	d008      	beq.n	8008adc <UART_SetConfig+0x2c0>
 8008aca:	e00f      	b.n	8008aec <UART_SetConfig+0x2d0>
 8008acc:	2300      	movs	r3, #0
 8008ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ad2:	e022      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ada:	e01e      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008adc:	2304      	movs	r3, #4
 8008ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ae2:	e01a      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008ae4:	2308      	movs	r3, #8
 8008ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aea:	e016      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008aec:	2310      	movs	r3, #16
 8008aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008af2:	e012      	b.n	8008b1a <UART_SetConfig+0x2fe>
 8008af4:	cfff69f3 	.word	0xcfff69f3
 8008af8:	40008000 	.word	0x40008000
 8008afc:	40013800 	.word	0x40013800
 8008b00:	40021000 	.word	0x40021000
 8008b04:	40004400 	.word	0x40004400
 8008b08:	40004800 	.word	0x40004800
 8008b0c:	40004c00 	.word	0x40004c00
 8008b10:	40005000 	.word	0x40005000
 8008b14:	2310      	movs	r3, #16
 8008b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4aae      	ldr	r2, [pc, #696]	; (8008dd8 <UART_SetConfig+0x5bc>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	f040 8097 	bne.w	8008c54 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b2a:	2b08      	cmp	r3, #8
 8008b2c:	d823      	bhi.n	8008b76 <UART_SetConfig+0x35a>
 8008b2e:	a201      	add	r2, pc, #4	; (adr r2, 8008b34 <UART_SetConfig+0x318>)
 8008b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b34:	08008b59 	.word	0x08008b59
 8008b38:	08008b77 	.word	0x08008b77
 8008b3c:	08008b61 	.word	0x08008b61
 8008b40:	08008b77 	.word	0x08008b77
 8008b44:	08008b67 	.word	0x08008b67
 8008b48:	08008b77 	.word	0x08008b77
 8008b4c:	08008b77 	.word	0x08008b77
 8008b50:	08008b77 	.word	0x08008b77
 8008b54:	08008b6f 	.word	0x08008b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b58:	f7fe fda2 	bl	80076a0 <HAL_RCC_GetPCLK1Freq>
 8008b5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b5e:	e010      	b.n	8008b82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b60:	4b9e      	ldr	r3, [pc, #632]	; (8008ddc <UART_SetConfig+0x5c0>)
 8008b62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b64:	e00d      	b.n	8008b82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b66:	f7fe fd2d 	bl	80075c4 <HAL_RCC_GetSysClockFreq>
 8008b6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b6c:	e009      	b.n	8008b82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b74:	e005      	b.n	8008b82 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 8130 	beq.w	8008dea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	4a94      	ldr	r2, [pc, #592]	; (8008de0 <UART_SetConfig+0x5c4>)
 8008b90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b94:	461a      	mov	r2, r3
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b9c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	685a      	ldr	r2, [r3, #4]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	005b      	lsls	r3, r3, #1
 8008ba6:	4413      	add	r3, r2
 8008ba8:	69ba      	ldr	r2, [r7, #24]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d305      	bcc.n	8008bba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d903      	bls.n	8008bc2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008bc0:	e113      	b.n	8008dea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	60bb      	str	r3, [r7, #8]
 8008bc8:	60fa      	str	r2, [r7, #12]
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bce:	4a84      	ldr	r2, [pc, #528]	; (8008de0 <UART_SetConfig+0x5c4>)
 8008bd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	603b      	str	r3, [r7, #0]
 8008bda:	607a      	str	r2, [r7, #4]
 8008bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008be0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008be4:	f7f7 fb18 	bl	8000218 <__aeabi_uldivmod>
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	4610      	mov	r0, r2
 8008bee:	4619      	mov	r1, r3
 8008bf0:	f04f 0200 	mov.w	r2, #0
 8008bf4:	f04f 0300 	mov.w	r3, #0
 8008bf8:	020b      	lsls	r3, r1, #8
 8008bfa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008bfe:	0202      	lsls	r2, r0, #8
 8008c00:	6979      	ldr	r1, [r7, #20]
 8008c02:	6849      	ldr	r1, [r1, #4]
 8008c04:	0849      	lsrs	r1, r1, #1
 8008c06:	2000      	movs	r0, #0
 8008c08:	460c      	mov	r4, r1
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	eb12 0804 	adds.w	r8, r2, r4
 8008c10:	eb43 0905 	adc.w	r9, r3, r5
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	469a      	mov	sl, r3
 8008c1c:	4693      	mov	fp, r2
 8008c1e:	4652      	mov	r2, sl
 8008c20:	465b      	mov	r3, fp
 8008c22:	4640      	mov	r0, r8
 8008c24:	4649      	mov	r1, r9
 8008c26:	f7f7 faf7 	bl	8000218 <__aeabi_uldivmod>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4613      	mov	r3, r2
 8008c30:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c32:	6a3b      	ldr	r3, [r7, #32]
 8008c34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c38:	d308      	bcc.n	8008c4c <UART_SetConfig+0x430>
 8008c3a:	6a3b      	ldr	r3, [r7, #32]
 8008c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c40:	d204      	bcs.n	8008c4c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	6a3a      	ldr	r2, [r7, #32]
 8008c48:	60da      	str	r2, [r3, #12]
 8008c4a:	e0ce      	b.n	8008dea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c52:	e0ca      	b.n	8008dea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	69db      	ldr	r3, [r3, #28]
 8008c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c5c:	d166      	bne.n	8008d2c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008c5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c62:	2b08      	cmp	r3, #8
 8008c64:	d827      	bhi.n	8008cb6 <UART_SetConfig+0x49a>
 8008c66:	a201      	add	r2, pc, #4	; (adr r2, 8008c6c <UART_SetConfig+0x450>)
 8008c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6c:	08008c91 	.word	0x08008c91
 8008c70:	08008c99 	.word	0x08008c99
 8008c74:	08008ca1 	.word	0x08008ca1
 8008c78:	08008cb7 	.word	0x08008cb7
 8008c7c:	08008ca7 	.word	0x08008ca7
 8008c80:	08008cb7 	.word	0x08008cb7
 8008c84:	08008cb7 	.word	0x08008cb7
 8008c88:	08008cb7 	.word	0x08008cb7
 8008c8c:	08008caf 	.word	0x08008caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c90:	f7fe fd06 	bl	80076a0 <HAL_RCC_GetPCLK1Freq>
 8008c94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c96:	e014      	b.n	8008cc2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c98:	f7fe fd18 	bl	80076cc <HAL_RCC_GetPCLK2Freq>
 8008c9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c9e:	e010      	b.n	8008cc2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ca0:	4b4e      	ldr	r3, [pc, #312]	; (8008ddc <UART_SetConfig+0x5c0>)
 8008ca2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ca4:	e00d      	b.n	8008cc2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ca6:	f7fe fc8d 	bl	80075c4 <HAL_RCC_GetSysClockFreq>
 8008caa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008cac:	e009      	b.n	8008cc2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008cb4:	e005      	b.n	8008cc2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008cc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 8090 	beq.w	8008dea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	4a44      	ldr	r2, [pc, #272]	; (8008de0 <UART_SetConfig+0x5c4>)
 8008cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cdc:	005a      	lsls	r2, r3, #1
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	085b      	lsrs	r3, r3, #1
 8008ce4:	441a      	add	r2, r3
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cf0:	6a3b      	ldr	r3, [r7, #32]
 8008cf2:	2b0f      	cmp	r3, #15
 8008cf4:	d916      	bls.n	8008d24 <UART_SetConfig+0x508>
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cfc:	d212      	bcs.n	8008d24 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cfe:	6a3b      	ldr	r3, [r7, #32]
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	f023 030f 	bic.w	r3, r3, #15
 8008d06:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d08:	6a3b      	ldr	r3, [r7, #32]
 8008d0a:	085b      	lsrs	r3, r3, #1
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	f003 0307 	and.w	r3, r3, #7
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	8bfb      	ldrh	r3, [r7, #30]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	8bfa      	ldrh	r2, [r7, #30]
 8008d20:	60da      	str	r2, [r3, #12]
 8008d22:	e062      	b.n	8008dea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008d2a:	e05e      	b.n	8008dea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d30:	2b08      	cmp	r3, #8
 8008d32:	d828      	bhi.n	8008d86 <UART_SetConfig+0x56a>
 8008d34:	a201      	add	r2, pc, #4	; (adr r2, 8008d3c <UART_SetConfig+0x520>)
 8008d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3a:	bf00      	nop
 8008d3c:	08008d61 	.word	0x08008d61
 8008d40:	08008d69 	.word	0x08008d69
 8008d44:	08008d71 	.word	0x08008d71
 8008d48:	08008d87 	.word	0x08008d87
 8008d4c:	08008d77 	.word	0x08008d77
 8008d50:	08008d87 	.word	0x08008d87
 8008d54:	08008d87 	.word	0x08008d87
 8008d58:	08008d87 	.word	0x08008d87
 8008d5c:	08008d7f 	.word	0x08008d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d60:	f7fe fc9e 	bl	80076a0 <HAL_RCC_GetPCLK1Freq>
 8008d64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d66:	e014      	b.n	8008d92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d68:	f7fe fcb0 	bl	80076cc <HAL_RCC_GetPCLK2Freq>
 8008d6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d6e:	e010      	b.n	8008d92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d70:	4b1a      	ldr	r3, [pc, #104]	; (8008ddc <UART_SetConfig+0x5c0>)
 8008d72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d74:	e00d      	b.n	8008d92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d76:	f7fe fc25 	bl	80075c4 <HAL_RCC_GetSysClockFreq>
 8008d7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d7c:	e009      	b.n	8008d92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d84:	e005      	b.n	8008d92 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008d86:	2300      	movs	r3, #0
 8008d88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008d90:	bf00      	nop
    }

    if (pclk != 0U)
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d028      	beq.n	8008dea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	4a10      	ldr	r2, [pc, #64]	; (8008de0 <UART_SetConfig+0x5c4>)
 8008d9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008da2:	461a      	mov	r2, r3
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	085b      	lsrs	r3, r3, #1
 8008db0:	441a      	add	r2, r3
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dbc:	6a3b      	ldr	r3, [r7, #32]
 8008dbe:	2b0f      	cmp	r3, #15
 8008dc0:	d910      	bls.n	8008de4 <UART_SetConfig+0x5c8>
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc8:	d20c      	bcs.n	8008de4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	60da      	str	r2, [r3, #12]
 8008dd4:	e009      	b.n	8008dea <UART_SetConfig+0x5ce>
 8008dd6:	bf00      	nop
 8008dd8:	40008000 	.word	0x40008000
 8008ddc:	00f42400 	.word	0x00f42400
 8008de0:	080095d0 	.word	0x080095d0
      }
      else
      {
        ret = HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	2200      	movs	r2, #0
 8008e04:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008e06:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3730      	adds	r7, #48	; 0x30
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e20:	f003 0301 	and.w	r3, r3, #1
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00a      	beq.n	8008e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e42:	f003 0302 	and.w	r3, r3, #2
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00a      	beq.n	8008e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e64:	f003 0304 	and.w	r3, r3, #4
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00a      	beq.n	8008e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e86:	f003 0308 	and.w	r3, r3, #8
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00a      	beq.n	8008ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	430a      	orrs	r2, r1
 8008ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea8:	f003 0310 	and.w	r3, r3, #16
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00a      	beq.n	8008ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eca:	f003 0320 	and.w	r3, r3, #32
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00a      	beq.n	8008ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	430a      	orrs	r2, r1
 8008ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d01a      	beq.n	8008f2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	430a      	orrs	r2, r1
 8008f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f12:	d10a      	bne.n	8008f2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	430a      	orrs	r2, r1
 8008f28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00a      	beq.n	8008f4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	605a      	str	r2, [r3, #4]
  }
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af02      	add	r7, sp, #8
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f68:	f7fa f9dc 	bl	8003324 <HAL_GetTick>
 8008f6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0308 	and.w	r3, r3, #8
 8008f78:	2b08      	cmp	r3, #8
 8008f7a:	d10e      	bne.n	8008f9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f82f 	bl	8008fee <UART_WaitOnFlagUntilTimeout>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f96:	2303      	movs	r3, #3
 8008f98:	e025      	b.n	8008fe6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	d10e      	bne.n	8008fc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f819 	bl	8008fee <UART_WaitOnFlagUntilTimeout>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d001      	beq.n	8008fc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e00f      	b.n	8008fe6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2220      	movs	r2, #32
 8008fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2220      	movs	r2, #32
 8008fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b09c      	sub	sp, #112	; 0x70
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	603b      	str	r3, [r7, #0]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ffe:	e0a9      	b.n	8009154 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009006:	f000 80a5 	beq.w	8009154 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800900a:	f7fa f98b 	bl	8003324 <HAL_GetTick>
 800900e:	4602      	mov	r2, r0
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009016:	429a      	cmp	r2, r3
 8009018:	d302      	bcc.n	8009020 <UART_WaitOnFlagUntilTimeout+0x32>
 800901a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800901c:	2b00      	cmp	r3, #0
 800901e:	d140      	bne.n	80090a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009028:	e853 3f00 	ldrex	r3, [r3]
 800902c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800902e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009030:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009034:	667b      	str	r3, [r7, #100]	; 0x64
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	461a      	mov	r2, r3
 800903c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800903e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009040:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009042:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009046:	e841 2300 	strex	r3, r2, [r1]
 800904a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800904c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1e6      	bne.n	8009020 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3308      	adds	r3, #8
 8009058:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800905c:	e853 3f00 	ldrex	r3, [r3]
 8009060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009064:	f023 0301 	bic.w	r3, r3, #1
 8009068:	663b      	str	r3, [r7, #96]	; 0x60
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3308      	adds	r3, #8
 8009070:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009072:	64ba      	str	r2, [r7, #72]	; 0x48
 8009074:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1e5      	bne.n	8009052 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2220      	movs	r2, #32
 800908a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2220      	movs	r2, #32
 8009092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	e069      	b.n	8009176 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0304 	and.w	r3, r3, #4
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d051      	beq.n	8009154 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	69db      	ldr	r3, [r3, #28]
 80090b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090be:	d149      	bne.n	8009154 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d2:	e853 3f00 	ldrex	r3, [r3]
 80090d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	461a      	mov	r2, r3
 80090e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090e8:	637b      	str	r3, [r7, #52]	; 0x34
 80090ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090f0:	e841 2300 	strex	r3, r2, [r1]
 80090f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1e6      	bne.n	80090ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3308      	adds	r3, #8
 8009102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	e853 3f00 	ldrex	r3, [r3]
 800910a:	613b      	str	r3, [r7, #16]
   return(result);
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f023 0301 	bic.w	r3, r3, #1
 8009112:	66bb      	str	r3, [r7, #104]	; 0x68
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3308      	adds	r3, #8
 800911a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800911c:	623a      	str	r2, [r7, #32]
 800911e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009120:	69f9      	ldr	r1, [r7, #28]
 8009122:	6a3a      	ldr	r2, [r7, #32]
 8009124:	e841 2300 	strex	r3, r2, [r1]
 8009128:	61bb      	str	r3, [r7, #24]
   return(result);
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e5      	bne.n	80090fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2220      	movs	r2, #32
 8009134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2220      	movs	r2, #32
 800913c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2220      	movs	r2, #32
 8009144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e010      	b.n	8009176 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	69da      	ldr	r2, [r3, #28]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	4013      	ands	r3, r2
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	429a      	cmp	r2, r3
 8009162:	bf0c      	ite	eq
 8009164:	2301      	moveq	r3, #1
 8009166:	2300      	movne	r3, #0
 8009168:	b2db      	uxtb	r3, r3
 800916a:	461a      	mov	r2, r3
 800916c:	79fb      	ldrb	r3, [r7, #7]
 800916e:	429a      	cmp	r2, r3
 8009170:	f43f af46 	beq.w	8009000 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3770      	adds	r7, #112	; 0x70
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800917e:	b480      	push	{r7}
 8009180:	b085      	sub	sp, #20
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800918c:	2b01      	cmp	r3, #1
 800918e:	d101      	bne.n	8009194 <HAL_UARTEx_DisableFifoMode+0x16>
 8009190:	2302      	movs	r3, #2
 8009192:	e027      	b.n	80091e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2224      	movs	r2, #36	; 0x24
 80091a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f022 0201 	bic.w	r2, r2, #1
 80091ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80091c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2220      	movs	r2, #32
 80091d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009200:	2b01      	cmp	r3, #1
 8009202:	d101      	bne.n	8009208 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009204:	2302      	movs	r3, #2
 8009206:	e02d      	b.n	8009264 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2224      	movs	r2, #36	; 0x24
 8009214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f022 0201 	bic.w	r2, r2, #1
 800922e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	430a      	orrs	r2, r1
 8009242:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f84f 	bl	80092e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2220      	movs	r2, #32
 8009256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800927c:	2b01      	cmp	r3, #1
 800927e:	d101      	bne.n	8009284 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009280:	2302      	movs	r3, #2
 8009282:	e02d      	b.n	80092e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2224      	movs	r2, #36	; 0x24
 8009290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f022 0201 	bic.w	r2, r2, #1
 80092aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	430a      	orrs	r2, r1
 80092be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f811 	bl	80092e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2220      	movs	r2, #32
 80092d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d108      	bne.n	800930a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009308:	e031      	b.n	800936e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800930a:	2308      	movs	r3, #8
 800930c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800930e:	2308      	movs	r3, #8
 8009310:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	0e5b      	lsrs	r3, r3, #25
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 0307 	and.w	r3, r3, #7
 8009320:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	0f5b      	lsrs	r3, r3, #29
 800932a:	b2db      	uxtb	r3, r3
 800932c:	f003 0307 	and.w	r3, r3, #7
 8009330:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009332:	7bbb      	ldrb	r3, [r7, #14]
 8009334:	7b3a      	ldrb	r2, [r7, #12]
 8009336:	4911      	ldr	r1, [pc, #68]	; (800937c <UARTEx_SetNbDataToProcess+0x94>)
 8009338:	5c8a      	ldrb	r2, [r1, r2]
 800933a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800933e:	7b3a      	ldrb	r2, [r7, #12]
 8009340:	490f      	ldr	r1, [pc, #60]	; (8009380 <UARTEx_SetNbDataToProcess+0x98>)
 8009342:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009344:	fb93 f3f2 	sdiv	r3, r3, r2
 8009348:	b29a      	uxth	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009350:	7bfb      	ldrb	r3, [r7, #15]
 8009352:	7b7a      	ldrb	r2, [r7, #13]
 8009354:	4909      	ldr	r1, [pc, #36]	; (800937c <UARTEx_SetNbDataToProcess+0x94>)
 8009356:	5c8a      	ldrb	r2, [r1, r2]
 8009358:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800935c:	7b7a      	ldrb	r2, [r7, #13]
 800935e:	4908      	ldr	r1, [pc, #32]	; (8009380 <UARTEx_SetNbDataToProcess+0x98>)
 8009360:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009362:	fb93 f3f2 	sdiv	r3, r3, r2
 8009366:	b29a      	uxth	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800936e:	bf00      	nop
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	080095e8 	.word	0x080095e8
 8009380:	080095f0 	.word	0x080095f0

08009384 <malloc>:
 8009384:	4b02      	ldr	r3, [pc, #8]	; (8009390 <malloc+0xc>)
 8009386:	4601      	mov	r1, r0
 8009388:	6818      	ldr	r0, [r3, #0]
 800938a:	f000 b823 	b.w	80093d4 <_malloc_r>
 800938e:	bf00      	nop
 8009390:	20000058 	.word	0x20000058

08009394 <sbrk_aligned>:
 8009394:	b570      	push	{r4, r5, r6, lr}
 8009396:	4e0e      	ldr	r6, [pc, #56]	; (80093d0 <sbrk_aligned+0x3c>)
 8009398:	460c      	mov	r4, r1
 800939a:	6831      	ldr	r1, [r6, #0]
 800939c:	4605      	mov	r5, r0
 800939e:	b911      	cbnz	r1, 80093a6 <sbrk_aligned+0x12>
 80093a0:	f000 f8ac 	bl	80094fc <_sbrk_r>
 80093a4:	6030      	str	r0, [r6, #0]
 80093a6:	4621      	mov	r1, r4
 80093a8:	4628      	mov	r0, r5
 80093aa:	f000 f8a7 	bl	80094fc <_sbrk_r>
 80093ae:	1c43      	adds	r3, r0, #1
 80093b0:	d00a      	beq.n	80093c8 <sbrk_aligned+0x34>
 80093b2:	1cc4      	adds	r4, r0, #3
 80093b4:	f024 0403 	bic.w	r4, r4, #3
 80093b8:	42a0      	cmp	r0, r4
 80093ba:	d007      	beq.n	80093cc <sbrk_aligned+0x38>
 80093bc:	1a21      	subs	r1, r4, r0
 80093be:	4628      	mov	r0, r5
 80093c0:	f000 f89c 	bl	80094fc <_sbrk_r>
 80093c4:	3001      	adds	r0, #1
 80093c6:	d101      	bne.n	80093cc <sbrk_aligned+0x38>
 80093c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80093cc:	4620      	mov	r0, r4
 80093ce:	bd70      	pop	{r4, r5, r6, pc}
 80093d0:	20000538 	.word	0x20000538

080093d4 <_malloc_r>:
 80093d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093d8:	1ccd      	adds	r5, r1, #3
 80093da:	f025 0503 	bic.w	r5, r5, #3
 80093de:	3508      	adds	r5, #8
 80093e0:	2d0c      	cmp	r5, #12
 80093e2:	bf38      	it	cc
 80093e4:	250c      	movcc	r5, #12
 80093e6:	2d00      	cmp	r5, #0
 80093e8:	4607      	mov	r7, r0
 80093ea:	db01      	blt.n	80093f0 <_malloc_r+0x1c>
 80093ec:	42a9      	cmp	r1, r5
 80093ee:	d905      	bls.n	80093fc <_malloc_r+0x28>
 80093f0:	230c      	movs	r3, #12
 80093f2:	603b      	str	r3, [r7, #0]
 80093f4:	2600      	movs	r6, #0
 80093f6:	4630      	mov	r0, r6
 80093f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80094d0 <_malloc_r+0xfc>
 8009400:	f000 f868 	bl	80094d4 <__malloc_lock>
 8009404:	f8d8 3000 	ldr.w	r3, [r8]
 8009408:	461c      	mov	r4, r3
 800940a:	bb5c      	cbnz	r4, 8009464 <_malloc_r+0x90>
 800940c:	4629      	mov	r1, r5
 800940e:	4638      	mov	r0, r7
 8009410:	f7ff ffc0 	bl	8009394 <sbrk_aligned>
 8009414:	1c43      	adds	r3, r0, #1
 8009416:	4604      	mov	r4, r0
 8009418:	d155      	bne.n	80094c6 <_malloc_r+0xf2>
 800941a:	f8d8 4000 	ldr.w	r4, [r8]
 800941e:	4626      	mov	r6, r4
 8009420:	2e00      	cmp	r6, #0
 8009422:	d145      	bne.n	80094b0 <_malloc_r+0xdc>
 8009424:	2c00      	cmp	r4, #0
 8009426:	d048      	beq.n	80094ba <_malloc_r+0xe6>
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	4631      	mov	r1, r6
 800942c:	4638      	mov	r0, r7
 800942e:	eb04 0903 	add.w	r9, r4, r3
 8009432:	f000 f863 	bl	80094fc <_sbrk_r>
 8009436:	4581      	cmp	r9, r0
 8009438:	d13f      	bne.n	80094ba <_malloc_r+0xe6>
 800943a:	6821      	ldr	r1, [r4, #0]
 800943c:	1a6d      	subs	r5, r5, r1
 800943e:	4629      	mov	r1, r5
 8009440:	4638      	mov	r0, r7
 8009442:	f7ff ffa7 	bl	8009394 <sbrk_aligned>
 8009446:	3001      	adds	r0, #1
 8009448:	d037      	beq.n	80094ba <_malloc_r+0xe6>
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	442b      	add	r3, r5
 800944e:	6023      	str	r3, [r4, #0]
 8009450:	f8d8 3000 	ldr.w	r3, [r8]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d038      	beq.n	80094ca <_malloc_r+0xf6>
 8009458:	685a      	ldr	r2, [r3, #4]
 800945a:	42a2      	cmp	r2, r4
 800945c:	d12b      	bne.n	80094b6 <_malloc_r+0xe2>
 800945e:	2200      	movs	r2, #0
 8009460:	605a      	str	r2, [r3, #4]
 8009462:	e00f      	b.n	8009484 <_malloc_r+0xb0>
 8009464:	6822      	ldr	r2, [r4, #0]
 8009466:	1b52      	subs	r2, r2, r5
 8009468:	d41f      	bmi.n	80094aa <_malloc_r+0xd6>
 800946a:	2a0b      	cmp	r2, #11
 800946c:	d917      	bls.n	800949e <_malloc_r+0xca>
 800946e:	1961      	adds	r1, r4, r5
 8009470:	42a3      	cmp	r3, r4
 8009472:	6025      	str	r5, [r4, #0]
 8009474:	bf18      	it	ne
 8009476:	6059      	strne	r1, [r3, #4]
 8009478:	6863      	ldr	r3, [r4, #4]
 800947a:	bf08      	it	eq
 800947c:	f8c8 1000 	streq.w	r1, [r8]
 8009480:	5162      	str	r2, [r4, r5]
 8009482:	604b      	str	r3, [r1, #4]
 8009484:	4638      	mov	r0, r7
 8009486:	f104 060b 	add.w	r6, r4, #11
 800948a:	f000 f829 	bl	80094e0 <__malloc_unlock>
 800948e:	f026 0607 	bic.w	r6, r6, #7
 8009492:	1d23      	adds	r3, r4, #4
 8009494:	1af2      	subs	r2, r6, r3
 8009496:	d0ae      	beq.n	80093f6 <_malloc_r+0x22>
 8009498:	1b9b      	subs	r3, r3, r6
 800949a:	50a3      	str	r3, [r4, r2]
 800949c:	e7ab      	b.n	80093f6 <_malloc_r+0x22>
 800949e:	42a3      	cmp	r3, r4
 80094a0:	6862      	ldr	r2, [r4, #4]
 80094a2:	d1dd      	bne.n	8009460 <_malloc_r+0x8c>
 80094a4:	f8c8 2000 	str.w	r2, [r8]
 80094a8:	e7ec      	b.n	8009484 <_malloc_r+0xb0>
 80094aa:	4623      	mov	r3, r4
 80094ac:	6864      	ldr	r4, [r4, #4]
 80094ae:	e7ac      	b.n	800940a <_malloc_r+0x36>
 80094b0:	4634      	mov	r4, r6
 80094b2:	6876      	ldr	r6, [r6, #4]
 80094b4:	e7b4      	b.n	8009420 <_malloc_r+0x4c>
 80094b6:	4613      	mov	r3, r2
 80094b8:	e7cc      	b.n	8009454 <_malloc_r+0x80>
 80094ba:	230c      	movs	r3, #12
 80094bc:	603b      	str	r3, [r7, #0]
 80094be:	4638      	mov	r0, r7
 80094c0:	f000 f80e 	bl	80094e0 <__malloc_unlock>
 80094c4:	e797      	b.n	80093f6 <_malloc_r+0x22>
 80094c6:	6025      	str	r5, [r4, #0]
 80094c8:	e7dc      	b.n	8009484 <_malloc_r+0xb0>
 80094ca:	605b      	str	r3, [r3, #4]
 80094cc:	deff      	udf	#255	; 0xff
 80094ce:	bf00      	nop
 80094d0:	20000534 	.word	0x20000534

080094d4 <__malloc_lock>:
 80094d4:	4801      	ldr	r0, [pc, #4]	; (80094dc <__malloc_lock+0x8>)
 80094d6:	f000 b84b 	b.w	8009570 <__retarget_lock_acquire_recursive>
 80094da:	bf00      	nop
 80094dc:	20000678 	.word	0x20000678

080094e0 <__malloc_unlock>:
 80094e0:	4801      	ldr	r0, [pc, #4]	; (80094e8 <__malloc_unlock+0x8>)
 80094e2:	f000 b846 	b.w	8009572 <__retarget_lock_release_recursive>
 80094e6:	bf00      	nop
 80094e8:	20000678 	.word	0x20000678

080094ec <memset>:
 80094ec:	4402      	add	r2, r0
 80094ee:	4603      	mov	r3, r0
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d100      	bne.n	80094f6 <memset+0xa>
 80094f4:	4770      	bx	lr
 80094f6:	f803 1b01 	strb.w	r1, [r3], #1
 80094fa:	e7f9      	b.n	80094f0 <memset+0x4>

080094fc <_sbrk_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4d06      	ldr	r5, [pc, #24]	; (8009518 <_sbrk_r+0x1c>)
 8009500:	2300      	movs	r3, #0
 8009502:	4604      	mov	r4, r0
 8009504:	4608      	mov	r0, r1
 8009506:	602b      	str	r3, [r5, #0]
 8009508:	f7f9 fc7a 	bl	8002e00 <_sbrk>
 800950c:	1c43      	adds	r3, r0, #1
 800950e:	d102      	bne.n	8009516 <_sbrk_r+0x1a>
 8009510:	682b      	ldr	r3, [r5, #0]
 8009512:	b103      	cbz	r3, 8009516 <_sbrk_r+0x1a>
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	bd38      	pop	{r3, r4, r5, pc}
 8009518:	20000674 	.word	0x20000674

0800951c <__errno>:
 800951c:	4b01      	ldr	r3, [pc, #4]	; (8009524 <__errno+0x8>)
 800951e:	6818      	ldr	r0, [r3, #0]
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	20000058 	.word	0x20000058

08009528 <__libc_init_array>:
 8009528:	b570      	push	{r4, r5, r6, lr}
 800952a:	4d0d      	ldr	r5, [pc, #52]	; (8009560 <__libc_init_array+0x38>)
 800952c:	4c0d      	ldr	r4, [pc, #52]	; (8009564 <__libc_init_array+0x3c>)
 800952e:	1b64      	subs	r4, r4, r5
 8009530:	10a4      	asrs	r4, r4, #2
 8009532:	2600      	movs	r6, #0
 8009534:	42a6      	cmp	r6, r4
 8009536:	d109      	bne.n	800954c <__libc_init_array+0x24>
 8009538:	4d0b      	ldr	r5, [pc, #44]	; (8009568 <__libc_init_array+0x40>)
 800953a:	4c0c      	ldr	r4, [pc, #48]	; (800956c <__libc_init_array+0x44>)
 800953c:	f000 f828 	bl	8009590 <_init>
 8009540:	1b64      	subs	r4, r4, r5
 8009542:	10a4      	asrs	r4, r4, #2
 8009544:	2600      	movs	r6, #0
 8009546:	42a6      	cmp	r6, r4
 8009548:	d105      	bne.n	8009556 <__libc_init_array+0x2e>
 800954a:	bd70      	pop	{r4, r5, r6, pc}
 800954c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009550:	4798      	blx	r3
 8009552:	3601      	adds	r6, #1
 8009554:	e7ee      	b.n	8009534 <__libc_init_array+0xc>
 8009556:	f855 3b04 	ldr.w	r3, [r5], #4
 800955a:	4798      	blx	r3
 800955c:	3601      	adds	r6, #1
 800955e:	e7f2      	b.n	8009546 <__libc_init_array+0x1e>
 8009560:	08009600 	.word	0x08009600
 8009564:	08009600 	.word	0x08009600
 8009568:	08009600 	.word	0x08009600
 800956c:	08009604 	.word	0x08009604

08009570 <__retarget_lock_acquire_recursive>:
 8009570:	4770      	bx	lr

08009572 <__retarget_lock_release_recursive>:
 8009572:	4770      	bx	lr

08009574 <memcpy>:
 8009574:	440a      	add	r2, r1
 8009576:	4291      	cmp	r1, r2
 8009578:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800957c:	d100      	bne.n	8009580 <memcpy+0xc>
 800957e:	4770      	bx	lr
 8009580:	b510      	push	{r4, lr}
 8009582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009586:	f803 4f01 	strb.w	r4, [r3, #1]!
 800958a:	4291      	cmp	r1, r2
 800958c:	d1f9      	bne.n	8009582 <memcpy+0xe>
 800958e:	bd10      	pop	{r4, pc}

08009590 <_init>:
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009592:	bf00      	nop
 8009594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009596:	bc08      	pop	{r3}
 8009598:	469e      	mov	lr, r3
 800959a:	4770      	bx	lr

0800959c <_fini>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	bf00      	nop
 80095a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a2:	bc08      	pop	{r3}
 80095a4:	469e      	mov	lr, r3
 80095a6:	4770      	bx	lr
